
STM32H750B-DK_Oximeter_5_Click.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3bc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800d65c  0800d65c  0001d65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d7ac  0800d7ac  0001d7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d7b4  0800d7b4  0001d7b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d7b8  0800d7b8  0001d7b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  0800d7bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000060  0800d81c  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c0  0800d87c  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001124  24000120  0800d8dc  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24001244  0800d8dc  00021244  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002014e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003066f  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004852  00000000  00000000  00050800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002398  00000000  00000000  00055058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001bd1  00000000  00000000  000573f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00041803  00000000  00000000  00058fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ebf1  00000000  00000000  0009a7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019d488  00000000  00000000  000c93b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a2fc  00000000  00000000  00266840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00270b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d644 	.word	0x0800d644

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	0800d644 	.word	0x0800d644

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f002 fc3f 	bl	8002f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f835 	bl	8000704 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800069a:	f000 f8bf 	bl	800081c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f000 fe63 	bl	8001368 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006a2:	f000 f8eb 	bl	800087c <MX_ADC1_Init>
  MX_ADC2_Init();
 80006a6:	f000 f961 	bl	800096c <MX_ADC2_Init>
  MX_ADC3_Init();
 80006aa:	f000 f9c3 	bl	8000a34 <MX_ADC3_Init>
  MX_ETH_Init();
 80006ae:	f000 fa23 	bl	8000af8 <MX_ETH_Init>
  MX_FDCAN1_Init();
 80006b2:	f000 fa6d 	bl	8000b90 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80006b6:	f000 facf 	bl	8000c58 <MX_FDCAN2_Init>
  MX_FMC_Init();
 80006ba:	f000 fe07 	bl	80012cc <MX_FMC_Init>
  MX_LTDC_Init();
 80006be:	f000 fb6f 	bl	8000da0 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80006c2:	f000 fc1f 	bl	8000f04 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80006c6:	f000 fc49 	bl	8000f5c <MX_RTC_Init>
  MX_SAI2_Init();
 80006ca:	f000 fc6f 	bl	8000fac <MX_SAI2_Init>
  MX_SPI2_Init();
 80006ce:	f000 fd2b 	bl	8001128 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80006d2:	f000 fd7d 	bl	80011d0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006d6:	f000 fdc7 	bl	8001268 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C4_Init();
 80006da:	f000 fb21 	bl	8000d20 <MX_I2C4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  oximeter5_init();
 80006de:	f001 f803 	bl	80016e8 <oximeter5_init>
  oximeter5_default_cfg();
 80006e2:	f001 f841 	bl	8001768 <oximeter5_default_cfg>
  //application_init();
  int KeyState = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  oximeter5_read_sensor_data(aun_ir_buffer, aun_red_buffer);
 80006ea:	4904      	ldr	r1, [pc, #16]	; (80006fc <main+0x70>)
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <main+0x74>)
 80006ee:	f001 fa1f 	bl	8001b30 <oximeter5_read_sensor_data>
	/*KeyState = HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_12);   // Read state of PH12

	snprintf(SendBuffer,sizeof(SendBuffer),"Key:%d\n\r",KeyState);
	HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
	*/
	HAL_Delay(1000);
 80006f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f6:	f002 fc9f 	bl	8003038 <HAL_Delay>
	  oximeter5_read_sensor_data(aun_ir_buffer, aun_red_buffer);
 80006fa:	e7f6      	b.n	80006ea <main+0x5e>
 80006fc:	24000f18 	.word	0x24000f18
 8000700:	24000d88 	.word	0x24000d88

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b09c      	sub	sp, #112	; 0x70
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070e:	224c      	movs	r2, #76	; 0x4c
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f00c fb12 	bl	800cd3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2220      	movs	r2, #32
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f00c fb0c 	bl	800cd3c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000724:	2002      	movs	r0, #2
 8000726:	f006 fa41 	bl	8006bac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	4b38      	ldr	r3, [pc, #224]	; (8000810 <SystemClock_Config+0x10c>)
 8000730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000732:	4a37      	ldr	r2, [pc, #220]	; (8000810 <SystemClock_Config+0x10c>)
 8000734:	f023 0301 	bic.w	r3, r3, #1
 8000738:	62d3      	str	r3, [r2, #44]	; 0x2c
 800073a:	4b35      	ldr	r3, [pc, #212]	; (8000810 <SystemClock_Config+0x10c>)
 800073c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	4b33      	ldr	r3, [pc, #204]	; (8000814 <SystemClock_Config+0x110>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800074c:	4a31      	ldr	r2, [pc, #196]	; (8000814 <SystemClock_Config+0x110>)
 800074e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <SystemClock_Config+0x110>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000760:	bf00      	nop
 8000762:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <SystemClock_Config+0x110>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800076a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800076e:	d1f8      	bne.n	8000762 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000770:	4b29      	ldr	r3, [pc, #164]	; (8000818 <SystemClock_Config+0x114>)
 8000772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000774:	f023 0303 	bic.w	r3, r3, #3
 8000778:	4a27      	ldr	r2, [pc, #156]	; (8000818 <SystemClock_Config+0x114>)
 800077a:	f043 0302 	orr.w	r3, r3, #2
 800077e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000780:	230b      	movs	r3, #11
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000784:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800078a:	2301      	movs	r3, #1
 800078c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078e:	2340      	movs	r3, #64	; 0x40
 8000790:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000792:	2301      	movs	r3, #1
 8000794:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079a:	2302      	movs	r3, #2
 800079c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 800079e:	2316      	movs	r3, #22
 80007a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 80007a2:	23a9      	movs	r3, #169	; 0xa9
 80007a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007aa:	2304      	movs	r3, #4
 80007ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c2:	4618      	mov	r0, r3
 80007c4:	f006 faf6 	bl	8006db4 <HAL_RCC_OscConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80007ce:	f000 ff85 	bl	80016dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d2:	233f      	movs	r3, #63	; 0x3f
 80007d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2101      	movs	r1, #1
 80007f6:	4618      	mov	r0, r3
 80007f8:	f006 ff36 	bl	8007668 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0x102>
  {
    Error_Handler();
 8000802:	f000 ff6b 	bl	80016dc <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3770      	adds	r7, #112	; 0x70
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	58000400 	.word	0x58000400
 8000814:	58024800 	.word	0x58024800
 8000818:	58024400 	.word	0x58024400

0800081c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b0b0      	sub	sp, #192	; 0xc0
 8000820:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000822:	463b      	mov	r3, r7
 8000824:	22c0      	movs	r2, #192	; 0xc0
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f00c fa87 	bl	800cd3c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800082e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000832:	f04f 0300 	mov.w	r3, #0
 8000836:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800083a:	2302      	movs	r3, #2
 800083c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800083e:	230c      	movs	r3, #12
 8000840:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000842:	2305      	movs	r3, #5
 8000844:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800084a:	2302      	movs	r3, #2
 800084c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800084e:	23c0      	movs	r3, #192	; 0xc0
 8000850:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000852:	2320      	movs	r3, #32
 8000854:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800085a:	2300      	movs	r3, #0
 800085c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	4618      	mov	r0, r3
 8000864:	f007 fa8c 	bl	8007d80 <HAL_RCCEx_PeriphCLKConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800086e:	f000 ff35 	bl	80016dc <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	37c0      	adds	r7, #192	; 0xc0
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
 800089c:	615a      	str	r2, [r3, #20]
 800089e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008a0:	4b30      	ldr	r3, [pc, #192]	; (8000964 <MX_ADC1_Init+0xe8>)
 80008a2:	4a31      	ldr	r2, [pc, #196]	; (8000968 <MX_ADC1_Init+0xec>)
 80008a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80008a6:	4b2f      	ldr	r3, [pc, #188]	; (8000964 <MX_ADC1_Init+0xe8>)
 80008a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80008ae:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <MX_ADC1_Init+0xe8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008b4:	4b2b      	ldr	r3, [pc, #172]	; (8000964 <MX_ADC1_Init+0xe8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ba:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <MX_ADC1_Init+0xe8>)
 80008bc:	2204      	movs	r2, #4
 80008be:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008c0:	4b28      	ldr	r3, [pc, #160]	; (8000964 <MX_ADC1_Init+0xe8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008c6:	4b27      	ldr	r3, [pc, #156]	; (8000964 <MX_ADC1_Init+0xe8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80008cc:	4b25      	ldr	r3, [pc, #148]	; (8000964 <MX_ADC1_Init+0xe8>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d2:	4b24      	ldr	r3, [pc, #144]	; (8000964 <MX_ADC1_Init+0xe8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008d8:	4b22      	ldr	r3, [pc, #136]	; (8000964 <MX_ADC1_Init+0xe8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008de:	4b21      	ldr	r3, [pc, #132]	; (8000964 <MX_ADC1_Init+0xe8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008e4:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <MX_ADC1_Init+0xe8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ea:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <MX_ADC1_Init+0xe8>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008f0:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <MX_ADC1_Init+0xe8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008f6:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <MX_ADC1_Init+0xe8>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008fe:	4819      	ldr	r0, [pc, #100]	; (8000964 <MX_ADC1_Init+0xe8>)
 8000900:	f002 fd80 	bl	8003404 <HAL_ADC_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800090a:	f000 fee7 	bl	80016dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4812      	ldr	r0, [pc, #72]	; (8000964 <MX_ADC1_Init+0xe8>)
 800091a:	f003 fb97 	bl	800404c <HAL_ADCEx_MultiModeConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000924:	f000 feda 	bl	80016dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000928:	2301      	movs	r3, #1
 800092a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800092c:	2306      	movs	r3, #6
 800092e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000934:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000938:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800093a:	2304      	movs	r3, #4
 800093c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000946:	463b      	mov	r3, r7
 8000948:	4619      	mov	r1, r3
 800094a:	4806      	ldr	r0, [pc, #24]	; (8000964 <MX_ADC1_Init+0xe8>)
 800094c:	f002 fefc 	bl	8003748 <HAL_ADC_ConfigChannel>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000956:	f000 fec1 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	3728      	adds	r7, #40	; 0x28
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	24000174 	.word	0x24000174
 8000968:	40022000 	.word	0x40022000

0800096c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
 8000980:	615a      	str	r2, [r3, #20]
 8000982:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000984:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <MX_ADC2_Init+0xc0>)
 8000986:	4a2a      	ldr	r2, [pc, #168]	; (8000a30 <MX_ADC2_Init+0xc4>)
 8000988:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800098a:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <MX_ADC2_Init+0xc0>)
 800098c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000990:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000992:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <MX_ADC2_Init+0xc0>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000998:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <MX_ADC2_Init+0xc0>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <MX_ADC2_Init+0xc0>)
 80009a0:	2204      	movs	r2, #4
 80009a2:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MX_ADC2_Init+0xc0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <MX_ADC2_Init+0xc0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <MX_ADC2_Init+0xc0>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_ADC2_Init+0xc0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_ADC2_Init+0xc0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_ADC2_Init+0xc0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MX_ADC2_Init+0xc0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <MX_ADC2_Init+0xc0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <MX_ADC2_Init+0xc0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_ADC2_Init+0xc0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009e2:	4812      	ldr	r0, [pc, #72]	; (8000a2c <MX_ADC2_Init+0xc0>)
 80009e4:	f002 fd0e 	bl	8003404 <HAL_ADC_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80009ee:	f000 fe75 	bl	80016dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009f2:	2301      	movs	r3, #1
 80009f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f6:	2306      	movs	r3, #6
 80009f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a02:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a04:	2304      	movs	r3, #4
 8000a06:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_ADC2_Init+0xc0>)
 8000a16:	f002 fe97 	bl	8003748 <HAL_ADC_ConfigChannel>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000a20:	f000 fe5c 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	3720      	adds	r7, #32
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	240001d8 	.word	0x240001d8
 8000a30:	40022100 	.word	0x40022100

08000a34 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
 8000a48:	615a      	str	r2, [r3, #20]
 8000a4a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a4c:	4b27      	ldr	r3, [pc, #156]	; (8000aec <MX_ADC3_Init+0xb8>)
 8000a4e:	4a28      	ldr	r2, [pc, #160]	; (8000af0 <MX_ADC3_Init+0xbc>)
 8000a50:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000a52:	4b26      	ldr	r3, [pc, #152]	; (8000aec <MX_ADC3_Init+0xb8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a58:	4b24      	ldr	r3, [pc, #144]	; (8000aec <MX_ADC3_Init+0xb8>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a5e:	4b23      	ldr	r3, [pc, #140]	; (8000aec <MX_ADC3_Init+0xb8>)
 8000a60:	2204      	movs	r2, #4
 8000a62:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a64:	4b21      	ldr	r3, [pc, #132]	; (8000aec <MX_ADC3_Init+0xb8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a6a:	4b20      	ldr	r3, [pc, #128]	; (8000aec <MX_ADC3_Init+0xb8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <MX_ADC3_Init+0xb8>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a76:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <MX_ADC3_Init+0xb8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <MX_ADC3_Init+0xb8>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a82:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <MX_ADC3_Init+0xb8>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a88:	4b18      	ldr	r3, [pc, #96]	; (8000aec <MX_ADC3_Init+0xb8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a8e:	4b17      	ldr	r3, [pc, #92]	; (8000aec <MX_ADC3_Init+0xb8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <MX_ADC3_Init+0xb8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_ADC3_Init+0xb8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000aa2:	4812      	ldr	r0, [pc, #72]	; (8000aec <MX_ADC3_Init+0xb8>)
 8000aa4:	f002 fcae 	bl	8003404 <HAL_ADC_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000aae:	f000 fe15 	bl	80016dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_ADC3_Init+0xc0>)
 8000ab4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab6:	2306      	movs	r3, #6
 8000ab8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000abe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ac2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_ADC3_Init+0xb8>)
 8000ad6:	f002 fe37 	bl	8003748 <HAL_ADC_ConfigChannel>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000ae0:	f000 fdfc 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	3720      	adds	r7, #32
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	2400023c 	.word	0x2400023c
 8000af0:	58026000 	.word	0x58026000
 8000af4:	1d500080 	.word	0x1d500080

08000af8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <MX_ETH_Init+0x80>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	; (8000b7c <MX_ETH_Init+0x84>)
 8000b00:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b02:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <MX_ETH_Init+0x88>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <MX_ETH_Init+0x88>)
 8000b0a:	2280      	movs	r2, #128	; 0x80
 8000b0c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_ETH_Init+0x88>)
 8000b10:	22e1      	movs	r2, #225	; 0xe1
 8000b12:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_ETH_Init+0x88>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_ETH_Init+0x88>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_ETH_Init+0x88>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_ETH_Init+0x80>)
 8000b28:	4a15      	ldr	r2, [pc, #84]	; (8000b80 <MX_ETH_Init+0x88>)
 8000b2a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <MX_ETH_Init+0x80>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_ETH_Init+0x80>)
 8000b34:	4a13      	ldr	r2, [pc, #76]	; (8000b84 <MX_ETH_Init+0x8c>)
 8000b36:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_ETH_Init+0x80>)
 8000b3a:	4a13      	ldr	r2, [pc, #76]	; (8000b88 <MX_ETH_Init+0x90>)
 8000b3c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_ETH_Init+0x80>)
 8000b40:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b44:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b46:	480c      	ldr	r0, [pc, #48]	; (8000b78 <MX_ETH_Init+0x80>)
 8000b48:	f003 fc42 	bl	80043d0 <HAL_ETH_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b52:	f000 fdc3 	bl	80016dc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b56:	2238      	movs	r2, #56	; 0x38
 8000b58:	2100      	movs	r1, #0
 8000b5a:	480c      	ldr	r0, [pc, #48]	; (8000b8c <MX_ETH_Init+0x94>)
 8000b5c:	f00c f8ee 	bl	800cd3c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <MX_ETH_Init+0x94>)
 8000b62:	2221      	movs	r2, #33	; 0x21
 8000b64:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_ETH_Init+0x94>)
 8000b68:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b6c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b6e:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <MX_ETH_Init+0x94>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	240002a0 	.word	0x240002a0
 8000b7c:	40028000 	.word	0x40028000
 8000b80:	240010a8 	.word	0x240010a8
 8000b84:	240000c0 	.word	0x240000c0
 8000b88:	24000060 	.word	0x24000060
 8000b8c:	2400013c 	.word	0x2400013c

08000b90 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b94:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000b96:	4a2f      	ldr	r2, [pc, #188]	; (8000c54 <MX_FDCAN1_Init+0xc4>)
 8000b98:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b9a:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000ba0:	4b2b      	ldr	r3, [pc, #172]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000ba6:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000bac:	4b28      	ldr	r3, [pc, #160]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000bb2:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000bb8:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000bba:	2210      	movs	r2, #16
 8000bbc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000bbe:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000bcc:	2202      	movs	r2, #2
 8000bce:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000be8:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000bee:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000bf4:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000c02:	2204      	movs	r2, #4
 8000c04:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000c0e:	2204      	movs	r2, #4
 8000c10:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c18:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000c38:	2204      	movs	r2, #4
 8000c3a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <MX_FDCAN1_Init+0xc0>)
 8000c3e:	f003 ffeb 	bl	8004c18 <HAL_FDCAN_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000c48:	f000 fd48 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	24000350 	.word	0x24000350
 8000c54:	4000a000 	.word	0x4000a000

08000c58 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000c5c:	4b2e      	ldr	r3, [pc, #184]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000c5e:	4a2f      	ldr	r2, [pc, #188]	; (8000d1c <MX_FDCAN2_Init+0xc4>)
 8000c60:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c62:	4b2d      	ldr	r3, [pc, #180]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000c68:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000c6e:	4b2a      	ldr	r3, [pc, #168]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000c74:	4b28      	ldr	r3, [pc, #160]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000c7a:	4b27      	ldr	r3, [pc, #156]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000c80:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000c82:	2210      	movs	r2, #16
 8000c84:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000c86:	4b24      	ldr	r3, [pc, #144]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000c8c:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000c8e:	2202      	movs	r2, #2
 8000c90:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000c92:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000c94:	2202      	movs	r2, #2
 8000c96:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000c98:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000ca4:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000caa:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000cb0:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000cbc:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000cca:	2204      	movs	r2, #4
 8000ccc:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000cce:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000cd6:	2204      	movs	r2, #4
 8000cd8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000ce2:	2204      	movs	r2, #4
 8000ce4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000d00:	2204      	movs	r2, #4
 8000d02:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000d04:	4804      	ldr	r0, [pc, #16]	; (8000d18 <MX_FDCAN2_Init+0xc0>)
 8000d06:	f003 ff87 	bl	8004c18 <HAL_FDCAN_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000d10:	f000 fce4 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	240003f0 	.word	0x240003f0
 8000d1c:	4000a400 	.word	0x4000a400

08000d20 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <MX_I2C4_Init+0x74>)
 8000d26:	4a1c      	ldr	r2, [pc, #112]	; (8000d98 <MX_I2C4_Init+0x78>)
 8000d28:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_I2C4_Init+0x74>)
 8000d2c:	4a1b      	ldr	r2, [pc, #108]	; (8000d9c <MX_I2C4_Init+0x7c>)
 8000d2e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <MX_I2C4_Init+0x74>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d36:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <MX_I2C4_Init+0x74>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <MX_I2C4_Init+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d42:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_I2C4_Init+0x74>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <MX_I2C4_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_I2C4_Init+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_I2C4_Init+0x74>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d5a:	480e      	ldr	r0, [pc, #56]	; (8000d94 <MX_I2C4_Init+0x74>)
 8000d5c:	f004 fc8a 	bl	8005674 <HAL_I2C_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000d66:	f000 fcb9 	bl	80016dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4809      	ldr	r0, [pc, #36]	; (8000d94 <MX_I2C4_Init+0x74>)
 8000d6e:	f005 fa95 	bl	800629c <HAL_I2CEx_ConfigAnalogFilter>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000d78:	f000 fcb0 	bl	80016dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_I2C4_Init+0x74>)
 8000d80:	f005 fad7 	bl	8006332 <HAL_I2CEx_ConfigDigitalFilter>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000d8a:	f000 fca7 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	24000490 	.word	0x24000490
 8000d98:	58001c00 	.word	0x58001c00
 8000d9c:	10707dbc 	.word	0x10707dbc

08000da0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b09a      	sub	sp, #104	; 0x68
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000da6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000daa:	2234      	movs	r2, #52	; 0x34
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f00b ffc4 	bl	800cd3c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000db4:	463b      	mov	r3, r7
 8000db6:	2234      	movs	r2, #52	; 0x34
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f00b ffbe 	bl	800cd3c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000dc0:	4b4e      	ldr	r3, [pc, #312]	; (8000efc <MX_LTDC_Init+0x15c>)
 8000dc2:	4a4f      	ldr	r2, [pc, #316]	; (8000f00 <MX_LTDC_Init+0x160>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000dc6:	4b4d      	ldr	r3, [pc, #308]	; (8000efc <MX_LTDC_Init+0x15c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000dcc:	4b4b      	ldr	r3, [pc, #300]	; (8000efc <MX_LTDC_Init+0x15c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000dd2:	4b4a      	ldr	r3, [pc, #296]	; (8000efc <MX_LTDC_Init+0x15c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000dd8:	4b48      	ldr	r3, [pc, #288]	; (8000efc <MX_LTDC_Init+0x15c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000dde:	4b47      	ldr	r3, [pc, #284]	; (8000efc <MX_LTDC_Init+0x15c>)
 8000de0:	2207      	movs	r2, #7
 8000de2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000de4:	4b45      	ldr	r3, [pc, #276]	; (8000efc <MX_LTDC_Init+0x15c>)
 8000de6:	2203      	movs	r2, #3
 8000de8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000dea:	4b44      	ldr	r3, [pc, #272]	; (8000efc <MX_LTDC_Init+0x15c>)
 8000dec:	220e      	movs	r2, #14
 8000dee:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000df0:	4b42      	ldr	r3, [pc, #264]	; (8000efc <MX_LTDC_Init+0x15c>)
 8000df2:	2205      	movs	r2, #5
 8000df4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000df6:	4b41      	ldr	r3, [pc, #260]	; (8000efc <MX_LTDC_Init+0x15c>)
 8000df8:	f240 228e 	movw	r2, #654	; 0x28e
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000dfe:	4b3f      	ldr	r3, [pc, #252]	; (8000efc <MX_LTDC_Init+0x15c>)
 8000e00:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000e04:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000e06:	4b3d      	ldr	r3, [pc, #244]	; (8000efc <MX_LTDC_Init+0x15c>)
 8000e08:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000e0e:	4b3b      	ldr	r3, [pc, #236]	; (8000efc <MX_LTDC_Init+0x15c>)
 8000e10:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000e14:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000e16:	4b39      	ldr	r3, [pc, #228]	; (8000efc <MX_LTDC_Init+0x15c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000e1e:	4b37      	ldr	r3, [pc, #220]	; (8000efc <MX_LTDC_Init+0x15c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000e26:	4b35      	ldr	r3, [pc, #212]	; (8000efc <MX_LTDC_Init+0x15c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e2e:	4833      	ldr	r0, [pc, #204]	; (8000efc <MX_LTDC_Init+0x15c>)
 8000e30:	f005 facc 	bl	80063cc <HAL_LTDC_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000e3a:	f000 fc4f 	bl	80016dc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5e:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000e60:	2305      	movs	r3, #5
 8000e62:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e86:	2200      	movs	r2, #0
 8000e88:	4619      	mov	r1, r3
 8000e8a:	481c      	ldr	r0, [pc, #112]	; (8000efc <MX_LTDC_Init+0x15c>)
 8000e8c:	f005 fb6e 	bl	800656c <HAL_LTDC_ConfigLayer>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000e96:	f000 fc21 	bl	80016dc <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eba:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000ebc:	2305      	movs	r3, #5
 8000ebe:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000ede:	463b      	mov	r3, r7
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_LTDC_Init+0x15c>)
 8000ee6:	f005 fb41 	bl	800656c <HAL_LTDC_ConfigLayer>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000ef0:	f000 fbf4 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	3768      	adds	r7, #104	; 0x68
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	240004e4 	.word	0x240004e4
 8000f00:	50001000 	.word	0x50001000

08000f04 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <MX_QUADSPI_Init+0x50>)
 8000f0a:	4a13      	ldr	r2, [pc, #76]	; (8000f58 <MX_QUADSPI_Init+0x54>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_QUADSPI_Init+0x50>)
 8000f10:	22ff      	movs	r2, #255	; 0xff
 8000f12:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_QUADSPI_Init+0x50>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_QUADSPI_Init+0x50>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_QUADSPI_Init+0x50>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <MX_QUADSPI_Init+0x50>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_QUADSPI_Init+0x50>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <MX_QUADSPI_Init+0x50>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_QUADSPI_Init+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_QUADSPI_Init+0x50>)
 8000f40:	f005 fe7e 	bl	8006c40 <HAL_QSPI_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000f4a:	f000 fbc7 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2400058c 	.word	0x2400058c
 8000f58:	52005000 	.word	0x52005000

08000f5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f60:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <MX_RTC_Init+0x48>)
 8000f62:	4a11      	ldr	r2, [pc, #68]	; (8000fa8 <MX_RTC_Init+0x4c>)
 8000f64:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f66:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_RTC_Init+0x48>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <MX_RTC_Init+0x48>)
 8000f6e:	227f      	movs	r2, #127	; 0x7f
 8000f70:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_RTC_Init+0x48>)
 8000f74:	22ff      	movs	r2, #255	; 0xff
 8000f76:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <MX_RTC_Init+0x48>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_RTC_Init+0x48>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f84:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <MX_RTC_Init+0x48>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_RTC_Init+0x48>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <MX_RTC_Init+0x48>)
 8000f92:	f009 fbf3 	bl	800a77c <HAL_RTC_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000f9c:	f000 fb9e 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	240005d8 	.word	0x240005d8
 8000fa8:	58004000 	.word	0x58004000

08000fac <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000fb0:	4b58      	ldr	r3, [pc, #352]	; (8001114 <MX_SAI2_Init+0x168>)
 8000fb2:	4a59      	ldr	r2, [pc, #356]	; (8001118 <MX_SAI2_Init+0x16c>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000fb6:	4b57      	ldr	r3, [pc, #348]	; (8001114 <MX_SAI2_Init+0x168>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000fbc:	4b55      	ldr	r3, [pc, #340]	; (8001114 <MX_SAI2_Init+0x168>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000fc2:	4b54      	ldr	r3, [pc, #336]	; (8001114 <MX_SAI2_Init+0x168>)
 8000fc4:	2240      	movs	r2, #64	; 0x40
 8000fc6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000fc8:	4b52      	ldr	r3, [pc, #328]	; (8001114 <MX_SAI2_Init+0x168>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000fce:	4b51      	ldr	r3, [pc, #324]	; (8001114 <MX_SAI2_Init+0x168>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000fd4:	4b4f      	ldr	r3, [pc, #316]	; (8001114 <MX_SAI2_Init+0x168>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000fda:	4b4e      	ldr	r3, [pc, #312]	; (8001114 <MX_SAI2_Init+0x168>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000fe0:	4b4c      	ldr	r3, [pc, #304]	; (8001114 <MX_SAI2_Init+0x168>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000fe6:	4b4b      	ldr	r3, [pc, #300]	; (8001114 <MX_SAI2_Init+0x168>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000fec:	4b49      	ldr	r3, [pc, #292]	; (8001114 <MX_SAI2_Init+0x168>)
 8000fee:	4a4b      	ldr	r2, [pc, #300]	; (800111c <MX_SAI2_Init+0x170>)
 8000ff0:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ff2:	4b48      	ldr	r3, [pc, #288]	; (8001114 <MX_SAI2_Init+0x168>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ff8:	4b46      	ldr	r3, [pc, #280]	; (8001114 <MX_SAI2_Init+0x168>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ffe:	4b45      	ldr	r3, [pc, #276]	; (8001114 <MX_SAI2_Init+0x168>)
 8001000:	2200      	movs	r2, #0
 8001002:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001004:	4b43      	ldr	r3, [pc, #268]	; (8001114 <MX_SAI2_Init+0x168>)
 8001006:	2200      	movs	r2, #0
 8001008:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 800100a:	4b42      	ldr	r3, [pc, #264]	; (8001114 <MX_SAI2_Init+0x168>)
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 8001012:	4b40      	ldr	r3, [pc, #256]	; (8001114 <MX_SAI2_Init+0x168>)
 8001014:	2201      	movs	r2, #1
 8001016:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001018:	4b3e      	ldr	r3, [pc, #248]	; (8001114 <MX_SAI2_Init+0x168>)
 800101a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800101e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001020:	4b3c      	ldr	r3, [pc, #240]	; (8001114 <MX_SAI2_Init+0x168>)
 8001022:	2208      	movs	r2, #8
 8001024:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001026:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <MX_SAI2_Init+0x168>)
 8001028:	2201      	movs	r2, #1
 800102a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800102c:	4b39      	ldr	r3, [pc, #228]	; (8001114 <MX_SAI2_Init+0x168>)
 800102e:	2200      	movs	r2, #0
 8001030:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001032:	4b38      	ldr	r3, [pc, #224]	; (8001114 <MX_SAI2_Init+0x168>)
 8001034:	2200      	movs	r2, #0
 8001036:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001038:	4b36      	ldr	r3, [pc, #216]	; (8001114 <MX_SAI2_Init+0x168>)
 800103a:	2200      	movs	r2, #0
 800103c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800103e:	4b35      	ldr	r3, [pc, #212]	; (8001114 <MX_SAI2_Init+0x168>)
 8001040:	2200      	movs	r2, #0
 8001042:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001044:	4b33      	ldr	r3, [pc, #204]	; (8001114 <MX_SAI2_Init+0x168>)
 8001046:	2200      	movs	r2, #0
 8001048:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800104a:	4b32      	ldr	r3, [pc, #200]	; (8001114 <MX_SAI2_Init+0x168>)
 800104c:	2201      	movs	r2, #1
 800104e:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001050:	4b30      	ldr	r3, [pc, #192]	; (8001114 <MX_SAI2_Init+0x168>)
 8001052:	2200      	movs	r2, #0
 8001054:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001056:	482f      	ldr	r0, [pc, #188]	; (8001114 <MX_SAI2_Init+0x168>)
 8001058:	f009 fca8 	bl	800a9ac <HAL_SAI_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 8001062:	f000 fb3b 	bl	80016dc <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001066:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <MX_SAI2_Init+0x174>)
 8001068:	4a2e      	ldr	r2, [pc, #184]	; (8001124 <MX_SAI2_Init+0x178>)
 800106a:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800106c:	4b2c      	ldr	r3, [pc, #176]	; (8001120 <MX_SAI2_Init+0x174>)
 800106e:	2200      	movs	r2, #0
 8001070:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001072:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <MX_SAI2_Init+0x174>)
 8001074:	2203      	movs	r2, #3
 8001076:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001078:	4b29      	ldr	r3, [pc, #164]	; (8001120 <MX_SAI2_Init+0x174>)
 800107a:	2240      	movs	r2, #64	; 0x40
 800107c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800107e:	4b28      	ldr	r3, [pc, #160]	; (8001120 <MX_SAI2_Init+0x174>)
 8001080:	2200      	movs	r2, #0
 8001082:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001084:	4b26      	ldr	r3, [pc, #152]	; (8001120 <MX_SAI2_Init+0x174>)
 8001086:	2200      	movs	r2, #0
 8001088:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800108a:	4b25      	ldr	r3, [pc, #148]	; (8001120 <MX_SAI2_Init+0x174>)
 800108c:	2201      	movs	r2, #1
 800108e:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001090:	4b23      	ldr	r3, [pc, #140]	; (8001120 <MX_SAI2_Init+0x174>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <MX_SAI2_Init+0x174>)
 8001098:	2200      	movs	r2, #0
 800109a:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800109c:	4b20      	ldr	r3, [pc, #128]	; (8001120 <MX_SAI2_Init+0x174>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <MX_SAI2_Init+0x174>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <MX_SAI2_Init+0x174>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <MX_SAI2_Init+0x174>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 80010b4:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_SAI2_Init+0x174>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <MX_SAI2_Init+0x174>)
 80010be:	2201      	movs	r2, #1
 80010c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <MX_SAI2_Init+0x174>)
 80010c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c8:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <MX_SAI2_Init+0x174>)
 80010cc:	2208      	movs	r2, #8
 80010ce:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <MX_SAI2_Init+0x174>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <MX_SAI2_Init+0x174>)
 80010d8:	2200      	movs	r2, #0
 80010da:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80010dc:	4b10      	ldr	r3, [pc, #64]	; (8001120 <MX_SAI2_Init+0x174>)
 80010de:	2200      	movs	r2, #0
 80010e0:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_SAI2_Init+0x174>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80010e8:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <MX_SAI2_Init+0x174>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MX_SAI2_Init+0x174>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <MX_SAI2_Init+0x174>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_SAI2_Init+0x174>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001100:	4807      	ldr	r0, [pc, #28]	; (8001120 <MX_SAI2_Init+0x174>)
 8001102:	f009 fc53 	bl	800a9ac <HAL_SAI_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 800110c:	f000 fae6 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	240005fc 	.word	0x240005fc
 8001118:	40015c04 	.word	0x40015c04
 800111c:	0002ee00 	.word	0x0002ee00
 8001120:	24000694 	.word	0x24000694
 8001124:	40015c24 	.word	0x40015c24

08001128 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800112c:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <MX_SPI2_Init+0xa0>)
 800112e:	4a27      	ldr	r2, [pc, #156]	; (80011cc <MX_SPI2_Init+0xa4>)
 8001130:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001132:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <MX_SPI2_Init+0xa0>)
 8001134:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001138:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800113a:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <MX_SPI2_Init+0xa0>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001140:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <MX_SPI2_Init+0xa0>)
 8001142:	2203      	movs	r2, #3
 8001144:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <MX_SPI2_Init+0xa0>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <MX_SPI2_Init+0xa0>)
 800114e:	2200      	movs	r2, #0
 8001150:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <MX_SPI2_Init+0xa0>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <MX_SPI2_Init+0xa0>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MX_SPI2_Init+0xa0>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_SPI2_Init+0xa0>)
 8001166:	2200      	movs	r2, #0
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <MX_SPI2_Init+0xa0>)
 800116c:	2200      	movs	r2, #0
 800116e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <MX_SPI2_Init+0xa0>)
 8001172:	2200      	movs	r2, #0
 8001174:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <MX_SPI2_Init+0xa0>)
 8001178:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800117c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <MX_SPI2_Init+0xa0>)
 8001180:	2200      	movs	r2, #0
 8001182:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001184:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <MX_SPI2_Init+0xa0>)
 8001186:	2200      	movs	r2, #0
 8001188:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_SPI2_Init+0xa0>)
 800118c:	2200      	movs	r2, #0
 800118e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <MX_SPI2_Init+0xa0>)
 8001192:	2200      	movs	r2, #0
 8001194:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_SPI2_Init+0xa0>)
 8001198:	2200      	movs	r2, #0
 800119a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <MX_SPI2_Init+0xa0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_SPI2_Init+0xa0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <MX_SPI2_Init+0xa0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_SPI2_Init+0xa0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <MX_SPI2_Init+0xa0>)
 80011b6:	f009 ff19 	bl	800afec <HAL_SPI_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 80011c0:	f000 fa8c 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	2400072c 	.word	0x2400072c
 80011cc:	40003800 	.word	0x40003800

080011d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011d4:	4b22      	ldr	r3, [pc, #136]	; (8001260 <MX_USART3_UART_Init+0x90>)
 80011d6:	4a23      	ldr	r2, [pc, #140]	; (8001264 <MX_USART3_UART_Init+0x94>)
 80011d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011da:	4b21      	ldr	r3, [pc, #132]	; (8001260 <MX_USART3_UART_Init+0x90>)
 80011dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011e2:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <MX_USART3_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011e8:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <MX_USART3_UART_Init+0x90>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ee:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <MX_USART3_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <MX_USART3_UART_Init+0x90>)
 80011f6:	220c      	movs	r2, #12
 80011f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <MX_USART3_UART_Init+0x90>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <MX_USART3_UART_Init+0x90>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <MX_USART3_UART_Init+0x90>)
 8001208:	2200      	movs	r2, #0
 800120a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <MX_USART3_UART_Init+0x90>)
 800120e:	2200      	movs	r2, #0
 8001210:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MX_USART3_UART_Init+0x90>)
 8001214:	2200      	movs	r2, #0
 8001216:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001218:	4811      	ldr	r0, [pc, #68]	; (8001260 <MX_USART3_UART_Init+0x90>)
 800121a:	f00a f826 	bl	800b26a <HAL_UART_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001224:	f000 fa5a 	bl	80016dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001228:	2100      	movs	r1, #0
 800122a:	480d      	ldr	r0, [pc, #52]	; (8001260 <MX_USART3_UART_Init+0x90>)
 800122c:	f00b f8b7 	bl	800c39e <HAL_UARTEx_SetTxFifoThreshold>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001236:	f000 fa51 	bl	80016dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800123a:	2100      	movs	r1, #0
 800123c:	4808      	ldr	r0, [pc, #32]	; (8001260 <MX_USART3_UART_Init+0x90>)
 800123e:	f00b f8ec 	bl	800c41a <HAL_UARTEx_SetRxFifoThreshold>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001248:	f000 fa48 	bl	80016dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <MX_USART3_UART_Init+0x90>)
 800124e:	f00b f86d 	bl	800c32c <HAL_UARTEx_DisableFifoMode>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001258:	f000 fa40 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	240007b4 	.word	0x240007b4
 8001264:	40004800 	.word	0x40004800

08001268 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800126c:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800126e:	4a16      	ldr	r2, [pc, #88]	; (80012c8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001270:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001272:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001274:	2209      	movs	r2, #9
 8001276:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800127a:	2202      	movs	r2, #2
 800127c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001280:	2200      	movs	r2, #0
 8001282:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001286:	2202      	movs	r2, #2
 8001288:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800128c:	2200      	movs	r2, #0
 800128e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001292:	2200      	movs	r2, #0
 8001294:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001298:	2200      	movs	r2, #0
 800129a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800129e:	2201      	movs	r2, #1
 80012a0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012b0:	f005 fb34 	bl	800691c <HAL_PCD_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80012ba:	f000 fa0f 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	24000848 	.word	0x24000848
 80012c8:	40080000 	.word	0x40080000

080012cc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
 80012e0:	615a      	str	r2, [r3, #20]
 80012e2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <MX_FMC_Init+0x94>)
 80012e6:	4a1f      	ldr	r2, [pc, #124]	; (8001364 <MX_FMC_Init+0x98>)
 80012e8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MX_FMC_Init+0x94>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <MX_FMC_Init+0x94>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <MX_FMC_Init+0x94>)
 80012f8:	2204      	movs	r2, #4
 80012fa:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <MX_FMC_Init+0x94>)
 80012fe:	2210      	movs	r2, #16
 8001300:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <MX_FMC_Init+0x94>)
 8001304:	2240      	movs	r2, #64	; 0x40
 8001306:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001308:	4b15      	ldr	r3, [pc, #84]	; (8001360 <MX_FMC_Init+0x94>)
 800130a:	2280      	movs	r2, #128	; 0x80
 800130c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_FMC_Init+0x94>)
 8001310:	2200      	movs	r2, #0
 8001312:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_FMC_Init+0x94>)
 8001316:	2200      	movs	r2, #0
 8001318:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_FMC_Init+0x94>)
 800131c:	2200      	movs	r2, #0
 800131e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_FMC_Init+0x94>)
 8001322:	2200      	movs	r2, #0
 8001324:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001326:	2310      	movs	r3, #16
 8001328:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800132a:	2310      	movs	r3, #16
 800132c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800132e:	2310      	movs	r3, #16
 8001330:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001332:	2310      	movs	r3, #16
 8001334:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001336:	2310      	movs	r3, #16
 8001338:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800133a:	2310      	movs	r3, #16
 800133c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800133e:	2310      	movs	r3, #16
 8001340:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	4619      	mov	r1, r3
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <MX_FMC_Init+0x94>)
 8001348:	f009 fe14 	bl	800af74 <HAL_SDRAM_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001352:	f000 f9c3 	bl	80016dc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001356:	bf00      	nop
 8001358:	3720      	adds	r7, #32
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	24000d54 	.word	0x24000d54
 8001364:	52004140 	.word	0x52004140

08001368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b090      	sub	sp, #64	; 0x40
 800136c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800137e:	4bbf      	ldr	r3, [pc, #764]	; (800167c <MX_GPIO_Init+0x314>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001384:	4abd      	ldr	r2, [pc, #756]	; (800167c <MX_GPIO_Init+0x314>)
 8001386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138e:	4bbb      	ldr	r3, [pc, #748]	; (800167c <MX_GPIO_Init+0x314>)
 8001390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
 800139a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139c:	4bb7      	ldr	r3, [pc, #732]	; (800167c <MX_GPIO_Init+0x314>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a2:	4ab6      	ldr	r2, [pc, #728]	; (800167c <MX_GPIO_Init+0x314>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ac:	4bb3      	ldr	r3, [pc, #716]	; (800167c <MX_GPIO_Init+0x314>)
 80013ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80013ba:	4bb0      	ldr	r3, [pc, #704]	; (800167c <MX_GPIO_Init+0x314>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c0:	4aae      	ldr	r2, [pc, #696]	; (800167c <MX_GPIO_Init+0x314>)
 80013c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ca:	4bac      	ldr	r3, [pc, #688]	; (800167c <MX_GPIO_Init+0x314>)
 80013cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d4:	623b      	str	r3, [r7, #32]
 80013d6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013d8:	4ba8      	ldr	r3, [pc, #672]	; (800167c <MX_GPIO_Init+0x314>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013de:	4aa7      	ldr	r2, [pc, #668]	; (800167c <MX_GPIO_Init+0x314>)
 80013e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e8:	4ba4      	ldr	r3, [pc, #656]	; (800167c <MX_GPIO_Init+0x314>)
 80013ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f6:	4ba1      	ldr	r3, [pc, #644]	; (800167c <MX_GPIO_Init+0x314>)
 80013f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fc:	4a9f      	ldr	r2, [pc, #636]	; (800167c <MX_GPIO_Init+0x314>)
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001406:	4b9d      	ldr	r3, [pc, #628]	; (800167c <MX_GPIO_Init+0x314>)
 8001408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	61bb      	str	r3, [r7, #24]
 8001412:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001414:	4b99      	ldr	r3, [pc, #612]	; (800167c <MX_GPIO_Init+0x314>)
 8001416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141a:	4a98      	ldr	r2, [pc, #608]	; (800167c <MX_GPIO_Init+0x314>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001424:	4b95      	ldr	r3, [pc, #596]	; (800167c <MX_GPIO_Init+0x314>)
 8001426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001432:	4b92      	ldr	r3, [pc, #584]	; (800167c <MX_GPIO_Init+0x314>)
 8001434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001438:	4a90      	ldr	r2, [pc, #576]	; (800167c <MX_GPIO_Init+0x314>)
 800143a:	f043 0310 	orr.w	r3, r3, #16
 800143e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001442:	4b8e      	ldr	r3, [pc, #568]	; (800167c <MX_GPIO_Init+0x314>)
 8001444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001450:	4b8a      	ldr	r3, [pc, #552]	; (800167c <MX_GPIO_Init+0x314>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001456:	4a89      	ldr	r2, [pc, #548]	; (800167c <MX_GPIO_Init+0x314>)
 8001458:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800145c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001460:	4b86      	ldr	r3, [pc, #536]	; (800167c <MX_GPIO_Init+0x314>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001466:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800146e:	4b83      	ldr	r3, [pc, #524]	; (800167c <MX_GPIO_Init+0x314>)
 8001470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001474:	4a81      	ldr	r2, [pc, #516]	; (800167c <MX_GPIO_Init+0x314>)
 8001476:	f043 0308 	orr.w	r3, r3, #8
 800147a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800147e:	4b7f      	ldr	r3, [pc, #508]	; (800167c <MX_GPIO_Init+0x314>)
 8001480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148c:	4b7b      	ldr	r3, [pc, #492]	; (800167c <MX_GPIO_Init+0x314>)
 800148e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001492:	4a7a      	ldr	r2, [pc, #488]	; (800167c <MX_GPIO_Init+0x314>)
 8001494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001498:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800149c:	4b77      	ldr	r3, [pc, #476]	; (800167c <MX_GPIO_Init+0x314>)
 800149e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014aa:	4b74      	ldr	r3, [pc, #464]	; (800167c <MX_GPIO_Init+0x314>)
 80014ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b0:	4a72      	ldr	r2, [pc, #456]	; (800167c <MX_GPIO_Init+0x314>)
 80014b2:	f043 0320 	orr.w	r3, r3, #32
 80014b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ba:	4b70      	ldr	r3, [pc, #448]	; (800167c <MX_GPIO_Init+0x314>)
 80014bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c0:	f003 0320 	and.w	r3, r3, #32
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ce:	486c      	ldr	r0, [pc, #432]	; (8001680 <MX_GPIO_Init+0x318>)
 80014d0:	f004 f8b6 	bl	8005640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	f241 0104 	movw	r1, #4100	; 0x1004
 80014da:	486a      	ldr	r0, [pc, #424]	; (8001684 <MX_GPIO_Init+0x31c>)
 80014dc:	f004 f8b0 	bl	8005640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2104      	movs	r1, #4
 80014e4:	4868      	ldr	r0, [pc, #416]	; (8001688 <MX_GPIO_Init+0x320>)
 80014e6:	f004 f8ab 	bl	8005640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80014fc:	2303      	movs	r3, #3
 80014fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001500:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001504:	4619      	mov	r1, r3
 8001506:	4861      	ldr	r0, [pc, #388]	; (800168c <MX_GPIO_Init+0x324>)
 8001508:	f003 feea 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001510:	2300      	movs	r3, #0
 8001512:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800151c:	4619      	mov	r1, r3
 800151e:	485c      	ldr	r0, [pc, #368]	; (8001690 <MX_GPIO_Init+0x328>)
 8001520:	f003 fede 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001524:	2330      	movs	r3, #48	; 0x30
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001534:	230a      	movs	r3, #10
 8001536:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001538:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800153c:	4619      	mov	r1, r3
 800153e:	4855      	ldr	r0, [pc, #340]	; (8001694 <MX_GPIO_Init+0x32c>)
 8001540:	f003 fece 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 8001544:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154a:	2300      	movs	r3, #0
 800154c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001556:	4619      	mov	r1, r3
 8001558:	484f      	ldr	r0, [pc, #316]	; (8001698 <MX_GPIO_Init+0x330>)
 800155a:	f003 fec1 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800155e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001564:	2300      	movs	r3, #0
 8001566:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001570:	4619      	mov	r1, r3
 8001572:	484a      	ldr	r0, [pc, #296]	; (800169c <MX_GPIO_Init+0x334>)
 8001574:	f003 feb4 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800158a:	2301      	movs	r3, #1
 800158c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001592:	4619      	mov	r1, r3
 8001594:	4840      	ldr	r0, [pc, #256]	; (8001698 <MX_GPIO_Init+0x330>)
 8001596:	f003 fea3 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80015aa:	2306      	movs	r3, #6
 80015ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015b2:	4619      	mov	r1, r3
 80015b4:	483a      	ldr	r0, [pc, #232]	; (80016a0 <MX_GPIO_Init+0x338>)
 80015b6:	f003 fe93 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015d0:	4619      	mov	r1, r3
 80015d2:	482b      	ldr	r0, [pc, #172]	; (8001680 <MX_GPIO_Init+0x318>)
 80015d4:	f003 fe84 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80015d8:	2304      	movs	r3, #4
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80015e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ea:	4619      	mov	r1, r3
 80015ec:	482c      	ldr	r0, [pc, #176]	; (80016a0 <MX_GPIO_Init+0x338>)
 80015ee:	f003 fe77 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80015f2:	2301      	movs	r3, #1
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f6:	2300      	movs	r3, #0
 80015f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80015fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001602:	4619      	mov	r1, r3
 8001604:	4827      	ldr	r0, [pc, #156]	; (80016a4 <MX_GPIO_Init+0x33c>)
 8001606:	f003 fe6b 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 800160a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001610:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001614:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800161e:	4619      	mov	r1, r3
 8001620:	481a      	ldr	r0, [pc, #104]	; (800168c <MX_GPIO_Init+0x324>)
 8001622:	f003 fe5d 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001626:	2340      	movs	r3, #64	; 0x40
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001636:	2309      	movs	r3, #9
 8001638:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800163e:	4619      	mov	r1, r3
 8001640:	4815      	ldr	r0, [pc, #84]	; (8001698 <MX_GPIO_Init+0x330>)
 8001642:	f003 fe4d 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 8001646:	f241 0304 	movw	r3, #4100	; 0x1004
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001658:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800165c:	4619      	mov	r1, r3
 800165e:	4809      	ldr	r0, [pc, #36]	; (8001684 <MX_GPIO_Init+0x31c>)
 8001660:	f003 fe3e 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800166a:	2300      	movs	r3, #0
 800166c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001672:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001676:	4619      	mov	r1, r3
 8001678:	e016      	b.n	80016a8 <MX_GPIO_Init+0x340>
 800167a:	bf00      	nop
 800167c:	58024400 	.word	0x58024400
 8001680:	58022000 	.word	0x58022000
 8001684:	58020400 	.word	0x58020400
 8001688:	58022400 	.word	0x58022400
 800168c:	58021c00 	.word	0x58021c00
 8001690:	58020c00 	.word	0x58020c00
 8001694:	58021000 	.word	0x58021000
 8001698:	58020000 	.word	0x58020000
 800169c:	58020800 	.word	0x58020800
 80016a0:	58021800 	.word	0x58021800
 80016a4:	58022800 	.word	0x58022800
 80016a8:	480a      	ldr	r0, [pc, #40]	; (80016d4 <MX_GPIO_Init+0x36c>)
 80016aa:	f003 fe19 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80016ae:	2304      	movs	r3, #4
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b2:	2301      	movs	r3, #1
 80016b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80016be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016c2:	4619      	mov	r1, r3
 80016c4:	4804      	ldr	r0, [pc, #16]	; (80016d8 <MX_GPIO_Init+0x370>)
 80016c6:	f003 fe0b 	bl	80052e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016ca:	bf00      	nop
 80016cc:	3740      	adds	r7, #64	; 0x40
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	58021c00 	.word	0x58021c00
 80016d8:	58022400 	.word	0x58022400

080016dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e0:	b672      	cpsid	i
}
 80016e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <Error_Handler+0x8>
	...

080016e8 <oximeter5_init>:
 */
static void dev_find_peaks ( int32_t *pn_locs, int32_t *n_npks,  int32_t  *pn_x, uint8_t n_size, int32_t n_min_height, int32_t n_min_distance, int32_t n_max_num );


err_t oximeter5_init ( void )
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	retval = HAL_I2C_IsDeviceReady(&hi2c4, (OXIMETER5_SET_DEV_ADDR << 1), 3, 100);
 80016ec:	2364      	movs	r3, #100	; 0x64
 80016ee:	2203      	movs	r2, #3
 80016f0:	21ae      	movs	r1, #174	; 0xae
 80016f2:	4817      	ldr	r0, [pc, #92]	; (8001750 <oximeter5_init+0x68>)
 80016f4:	f004 fa38 	bl	8005b68 <HAL_I2C_IsDeviceReady>
 80016f8:	4603      	mov	r3, r0
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b15      	ldr	r3, [pc, #84]	; (8001754 <oximeter5_init+0x6c>)
 80016fe:	701a      	strb	r2, [r3, #0]
	if (retval != HAL_OK)
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <oximeter5_init+0x6c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d010      	beq.n	800172a <oximeter5_init+0x42>
	{
		snprintf(SendBuffer1, sizeof(SendBuffer1), "Device not ready\n\r");
 8001708:	4a13      	ldr	r2, [pc, #76]	; (8001758 <oximeter5_init+0x70>)
 800170a:	2132      	movs	r1, #50	; 0x32
 800170c:	4813      	ldr	r0, [pc, #76]	; (800175c <oximeter5_init+0x74>)
 800170e:	f00b fae1 	bl	800ccd4 <sniprintf>
		HAL_UART_Transmit(&huart3, SendBuffer1, strlen(SendBuffer1), 100);
 8001712:	4812      	ldr	r0, [pc, #72]	; (800175c <oximeter5_init+0x74>)
 8001714:	f7fe fde4 	bl	80002e0 <strlen>
 8001718:	4603      	mov	r3, r0
 800171a:	b29a      	uxth	r2, r3
 800171c:	2364      	movs	r3, #100	; 0x64
 800171e:	490f      	ldr	r1, [pc, #60]	; (800175c <oximeter5_init+0x74>)
 8001720:	480f      	ldr	r0, [pc, #60]	; (8001760 <oximeter5_init+0x78>)
 8001722:	f009 fdf2 	bl	800b30a <HAL_UART_Transmit>
		return OXIMETER5_ERROR;
 8001726:	23ff      	movs	r3, #255	; 0xff
 8001728:	e00f      	b.n	800174a <oximeter5_init+0x62>
	} else {
		snprintf(SendBuffer1, sizeof(SendBuffer1), "Device ready\n\r");
 800172a:	4a0e      	ldr	r2, [pc, #56]	; (8001764 <oximeter5_init+0x7c>)
 800172c:	2132      	movs	r1, #50	; 0x32
 800172e:	480b      	ldr	r0, [pc, #44]	; (800175c <oximeter5_init+0x74>)
 8001730:	f00b fad0 	bl	800ccd4 <sniprintf>
		HAL_UART_Transmit(&huart3, SendBuffer1, strlen(SendBuffer1), 100);
 8001734:	4809      	ldr	r0, [pc, #36]	; (800175c <oximeter5_init+0x74>)
 8001736:	f7fe fdd3 	bl	80002e0 <strlen>
 800173a:	4603      	mov	r3, r0
 800173c:	b29a      	uxth	r2, r3
 800173e:	2364      	movs	r3, #100	; 0x64
 8001740:	4906      	ldr	r1, [pc, #24]	; (800175c <oximeter5_init+0x74>)
 8001742:	4807      	ldr	r0, [pc, #28]	; (8001760 <oximeter5_init+0x78>)
 8001744:	f009 fde1 	bl	800b30a <HAL_UART_Transmit>
		return OXIMETER5_OK;
 8001748:	2300      	movs	r3, #0
	}
}
 800174a:	4618      	mov	r0, r3
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	24000490 	.word	0x24000490
 8001754:	240010ae 	.word	0x240010ae
 8001758:	0800d65c 	.word	0x0800d65c
 800175c:	240010b0 	.word	0x240010b0
 8001760:	240007b4 	.word	0x240007b4
 8001764:	0800d670 	.word	0x0800d670

08001768 <oximeter5_default_cfg>:

err_t oximeter5_default_cfg ( void )
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
    uint8_t tmp;

    err_t error_flag = oximeter5_sw_reset();
 800176e:	f000 f9cd 	bl	8001b0c <oximeter5_sw_reset>
 8001772:	4603      	mov	r3, r0
 8001774:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1000);
 8001776:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800177a:	f001 fc5d 	bl	8003038 <HAL_Delay>

    error_flag |= oximeter5_generic_read(OXIMETER5_REG_INTR_STATUS_1, &tmp, 1 );
 800177e:	f107 030e 	add.w	r3, r7, #14
 8001782:	2201      	movs	r2, #1
 8001784:	4619      	mov	r1, r3
 8001786:	2000      	movs	r0, #0
 8001788:	f000 f958 	bl	8001a3c <oximeter5_generic_read>
 800178c:	4603      	mov	r3, r0
 800178e:	461a      	mov	r2, r3
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	4313      	orrs	r3, r2
 8001794:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8001796:	200a      	movs	r0, #10
 8001798:	f001 fc4e 	bl	8003038 <HAL_Delay>

    tmp = OXIMETER5_SET_INTR_EN_1_FULL_EN;
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	73bb      	strb	r3, [r7, #14]
    tmp |= OXIMETER5_SET_INTR_EN_1_PPG_RDY_EN;
 80017a0:	7bbb      	ldrb	r3, [r7, #14]
 80017a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_INTR_ENABLE_1, &tmp, 1 );
 80017aa:	f107 030e 	add.w	r3, r7, #14
 80017ae:	2201      	movs	r2, #1
 80017b0:	4619      	mov	r1, r3
 80017b2:	2002      	movs	r0, #2
 80017b4:	f000 f8be 	bl	8001934 <oximeter5_generic_write>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461a      	mov	r2, r3
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	4313      	orrs	r3, r2
 80017c0:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 80017c2:	200a      	movs	r0, #10
 80017c4:	f001 fc38 	bl	8003038 <HAL_Delay>

    tmp = OXIMETER5_SET_INTR_EN_2_TEMP_DIS;
 80017c8:	2300      	movs	r3, #0
 80017ca:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_INTR_ENABLE_2, &tmp, 1 );
 80017cc:	f107 030e 	add.w	r3, r7, #14
 80017d0:	2201      	movs	r2, #1
 80017d2:	4619      	mov	r1, r3
 80017d4:	2003      	movs	r0, #3
 80017d6:	f000 f8ad 	bl	8001934 <oximeter5_generic_write>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 80017e4:	200a      	movs	r0, #10
 80017e6:	f001 fc27 	bl	8003038 <HAL_Delay>

    tmp = OXIMETER5_SET_FIFO_PTR_RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_FIFO_WR_PTR, &tmp, 1 );
 80017ee:	f107 030e 	add.w	r3, r7, #14
 80017f2:	2201      	movs	r2, #1
 80017f4:	4619      	mov	r1, r3
 80017f6:	2004      	movs	r0, #4
 80017f8:	f000 f89c 	bl	8001934 <oximeter5_generic_write>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461a      	mov	r2, r3
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	4313      	orrs	r3, r2
 8001804:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8001806:	200a      	movs	r0, #10
 8001808:	f001 fc16 	bl	8003038 <HAL_Delay>

    tmp = OXIMETER5_SET_FIFO_COUNTER_RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_OVF_COUNTER, &tmp, 1 );
 8001810:	f107 030e 	add.w	r3, r7, #14
 8001814:	2201      	movs	r2, #1
 8001816:	4619      	mov	r1, r3
 8001818:	2005      	movs	r0, #5
 800181a:	f000 f88b 	bl	8001934 <oximeter5_generic_write>
 800181e:	4603      	mov	r3, r0
 8001820:	461a      	mov	r2, r3
 8001822:	7bfb      	ldrb	r3, [r7, #15]
 8001824:	4313      	orrs	r3, r2
 8001826:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8001828:	200a      	movs	r0, #10
 800182a:	f001 fc05 	bl	8003038 <HAL_Delay>

    tmp = OXIMETER5_SET_FIFO_PTR_RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_FIFO_RD_PTR, &tmp, 1 );
 8001832:	f107 030e 	add.w	r3, r7, #14
 8001836:	2201      	movs	r2, #1
 8001838:	4619      	mov	r1, r3
 800183a:	2006      	movs	r0, #6
 800183c:	f000 f87a 	bl	8001934 <oximeter5_generic_write>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	4313      	orrs	r3, r2
 8001848:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 800184a:	200a      	movs	r0, #10
 800184c:	f001 fbf4 	bl	8003038 <HAL_Delay>

    tmp = OXIMETER5_SET_FIFO_CFG_SMP_AVE_3;
 8001850:	2340      	movs	r3, #64	; 0x40
 8001852:	73bb      	strb	r3, [r7, #14]
    tmp |= OXIMETER5_SET_FIFO_CFG_DATA_SAMP_15;
 8001854:	7bbb      	ldrb	r3, [r7, #14]
 8001856:	f043 030f 	orr.w	r3, r3, #15
 800185a:	b2db      	uxtb	r3, r3
 800185c:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_FIFO_CONFIG, &tmp, 1 );
 800185e:	f107 030e 	add.w	r3, r7, #14
 8001862:	2201      	movs	r2, #1
 8001864:	4619      	mov	r1, r3
 8001866:	2008      	movs	r0, #8
 8001868:	f000 f864 	bl	8001934 <oximeter5_generic_write>
 800186c:	4603      	mov	r3, r0
 800186e:	461a      	mov	r2, r3
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	4313      	orrs	r3, r2
 8001874:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8001876:	200a      	movs	r0, #10
 8001878:	f001 fbde 	bl	8003038 <HAL_Delay>

    tmp = OXIMETER5_SET_CFG_MODE_SpO2;
 800187c:	2303      	movs	r3, #3
 800187e:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_MODE_CONFIG, &tmp, 1 );
 8001880:	f107 030e 	add.w	r3, r7, #14
 8001884:	2201      	movs	r2, #1
 8001886:	4619      	mov	r1, r3
 8001888:	2009      	movs	r0, #9
 800188a:	f000 f853 	bl	8001934 <oximeter5_generic_write>
 800188e:	4603      	mov	r3, r0
 8001890:	461a      	mov	r2, r3
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	4313      	orrs	r3, r2
 8001896:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8001898:	200a      	movs	r0, #10
 800189a:	f001 fbcd 	bl	8003038 <HAL_Delay>

    tmp = OXIMETER5_SET_SPO2_CFG_ADC_RGE_4096;
 800189e:	2320      	movs	r3, #32
 80018a0:	73bb      	strb	r3, [r7, #14]
    tmp |= OXIMETER5_SET_SPO2_CFG_SR_SEC_100;
 80018a2:	7bbb      	ldrb	r3, [r7, #14]
 80018a4:	f043 0304 	orr.w	r3, r3, #4
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	73bb      	strb	r3, [r7, #14]
    tmp |= OXIMETER5_SET_SPO2_CFG_LED_PW_18_bit;
 80018ac:	7bbb      	ldrb	r3, [r7, #14]
 80018ae:	f043 0303 	orr.w	r3, r3, #3
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_SPO2_CONFIG, &tmp, 1 );
 80018b6:	f107 030e 	add.w	r3, r7, #14
 80018ba:	2201      	movs	r2, #1
 80018bc:	4619      	mov	r1, r3
 80018be:	200a      	movs	r0, #10
 80018c0:	f000 f838 	bl	8001934 <oximeter5_generic_write>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461a      	mov	r2, r3
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 80018ce:	200a      	movs	r0, #10
 80018d0:	f001 fbb2 	bl	8003038 <HAL_Delay>

    tmp = OXIMETER5_SET_LED_PULSE_AMPL_7_2_mA;
 80018d4:	2324      	movs	r3, #36	; 0x24
 80018d6:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_LED1_PA, &tmp, 1 );
 80018d8:	f107 030e 	add.w	r3, r7, #14
 80018dc:	2201      	movs	r2, #1
 80018de:	4619      	mov	r1, r3
 80018e0:	200c      	movs	r0, #12
 80018e2:	f000 f827 	bl	8001934 <oximeter5_generic_write>
 80018e6:	4603      	mov	r3, r0
 80018e8:	461a      	mov	r2, r3
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 80018f0:	200a      	movs	r0, #10
 80018f2:	f001 fba1 	bl	8003038 <HAL_Delay>

    tmp = OXIMETER5_SET_LED_PULSE_AMPL_7_2_mA;
 80018f6:	2324      	movs	r3, #36	; 0x24
 80018f8:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_LED2_PA, &tmp, 1 );
 80018fa:	f107 030e 	add.w	r3, r7, #14
 80018fe:	2201      	movs	r2, #1
 8001900:	4619      	mov	r1, r3
 8001902:	200d      	movs	r0, #13
 8001904:	f000 f816 	bl	8001934 <oximeter5_generic_write>
 8001908:	4603      	mov	r3, r0
 800190a:	461a      	mov	r2, r3
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	4313      	orrs	r3, r2
 8001910:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8001912:	200a      	movs	r0, #10
 8001914:	f001 fb90 	bl	8003038 <HAL_Delay>

    uint32_t ir, red;
    error_flag = oximeter5_read_sensor_data(&ir, &red );
 8001918:	1d3a      	adds	r2, r7, #4
 800191a:	f107 0308 	add.w	r3, r7, #8
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f905 	bl	8001b30 <oximeter5_read_sensor_data>
 8001926:	4603      	mov	r3, r0
 8001928:	73fb      	strb	r3, [r7, #15]

    return error_flag;
 800192a:	7bfb      	ldrb	r3, [r7, #15]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <oximeter5_generic_write>:

err_t oximeter5_generic_write ( uint8_t reg, uint8_t *tx_buf, uint8_t tx_len )
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0c6      	sub	sp, #280	; 0x118
 8001938:	af02      	add	r7, sp, #8
 800193a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800193e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001942:	6019      	str	r1, [r3, #0]
 8001944:	4611      	mov	r1, r2
 8001946:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800194a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800194e:	4602      	mov	r2, r0
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001956:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800195a:	460a      	mov	r2, r1
 800195c:	701a      	strb	r2, [r3, #0]
    uint8_t data_buf[ 257 ] = { 0 };
 800195e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001962:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	3304      	adds	r3, #4
 800196c:	22fd      	movs	r2, #253	; 0xfd
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f00b f9e3 	bl	800cd3c <memset>

    data_buf[ 0 ] = reg;
 8001976:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800197a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800197e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001982:	f2a2 1209 	subw	r2, r2, #265	; 0x109
 8001986:	7812      	ldrb	r2, [r2, #0]
 8001988:	701a      	strb	r2, [r3, #0]

    for ( uint8_t cnt = 1; cnt <= tx_len; cnt++ )
 800198a:	2301      	movs	r3, #1
 800198c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001990:	e015      	b.n	80019be <oximeter5_generic_write+0x8a>
    {
        data_buf[ cnt ] = tx_buf[ cnt - 1 ];
 8001992:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001996:	3b01      	subs	r3, #1
 8001998:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800199c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	441a      	add	r2, r3
 80019a4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019a8:	7811      	ldrb	r1, [r2, #0]
 80019aa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80019ae:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80019b2:	54d1      	strb	r1, [r2, r3]
    for ( uint8_t cnt = 1; cnt <= tx_len; cnt++ )
 80019b4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019b8:	3301      	adds	r3, #1
 80019ba:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019c2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80019c6:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d9e0      	bls.n	8001992 <oximeter5_generic_write+0x5e>
    }
    retval = HAL_I2C_Master_Transmit(&hi2c4, (OXIMETER5_SET_DEV_ADDR << 1), data_buf, tx_len+1, 1000);
 80019d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019d4:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	3301      	adds	r3, #1
 80019de:	b29b      	uxth	r3, r3
 80019e0:	f107 020c 	add.w	r2, r7, #12
 80019e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019e8:	9100      	str	r1, [sp, #0]
 80019ea:	21ae      	movs	r1, #174	; 0xae
 80019ec:	480e      	ldr	r0, [pc, #56]	; (8001a28 <oximeter5_generic_write+0xf4>)
 80019ee:	f003 fed1 	bl	8005794 <HAL_I2C_Master_Transmit>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <oximeter5_generic_write+0xf8>)
 80019f8:	701a      	strb	r2, [r3, #0]
    if (retval != HAL_OK)
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <oximeter5_generic_write+0xf8>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d006      	beq.n	8001a10 <oximeter5_generic_write+0xdc>
	{
		snprintf(SendBuffer1, sizeof(SendBuffer1), "Transmit failed\n\r");
 8001a02:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <oximeter5_generic_write+0xfc>)
 8001a04:	2132      	movs	r1, #50	; 0x32
 8001a06:	480b      	ldr	r0, [pc, #44]	; (8001a34 <oximeter5_generic_write+0x100>)
 8001a08:	f00b f964 	bl	800ccd4 <sniprintf>
		//HAL_UART_Transmit(&huart3, SendBuffer1, strlen(SendBuffer1), 100);
		return OXIMETER5_ERROR;
 8001a0c:	23ff      	movs	r3, #255	; 0xff
 8001a0e:	e005      	b.n	8001a1c <oximeter5_generic_write+0xe8>
	} else {
		snprintf(SendBuffer1, sizeof(SendBuffer1), "Transmit successful\n\r");
 8001a10:	4a09      	ldr	r2, [pc, #36]	; (8001a38 <oximeter5_generic_write+0x104>)
 8001a12:	2132      	movs	r1, #50	; 0x32
 8001a14:	4807      	ldr	r0, [pc, #28]	; (8001a34 <oximeter5_generic_write+0x100>)
 8001a16:	f00b f95d 	bl	800ccd4 <sniprintf>
		//HAL_UART_Transmit(&huart3, SendBuffer1, strlen(SendBuffer1), 100);
		return OXIMETER5_OK;
 8001a1a:	2300      	movs	r3, #0
	}
    //return i2c_master_write( &ctx->i2c, data_buf, tx_len + 1 );
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	24000490 	.word	0x24000490
 8001a2c:	240010ae 	.word	0x240010ae
 8001a30:	0800d680 	.word	0x0800d680
 8001a34:	240010b0 	.word	0x240010b0
 8001a38:	0800d694 	.word	0x0800d694

08001a3c <oximeter5_generic_read>:

err_t oximeter5_generic_read ( uint8_t reg, uint8_t *rx_buf, uint8_t rx_len )
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	4603      	mov	r3, r0
 8001a44:	6039      	str	r1, [r7, #0]
 8001a46:	71fb      	strb	r3, [r7, #7]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	71bb      	strb	r3, [r7, #6]
	if (oximeter5_generic_write(reg, rx_buf, rx_len) == OXIMETER5_OK) {
 8001a4c:	79ba      	ldrb	r2, [r7, #6]
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	6839      	ldr	r1, [r7, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff6e 	bl	8001934 <oximeter5_generic_write>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d133      	bne.n	8001ac6 <oximeter5_generic_read+0x8a>
		retval = HAL_I2C_Master_Receive(&hi2c4, (OXIMETER5_SET_DEV_ADDR << 1),rx_buf, rx_len, 1000);
 8001a5e:	79bb      	ldrb	r3, [r7, #6]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a66:	9200      	str	r2, [sp, #0]
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	21ae      	movs	r1, #174	; 0xae
 8001a6c:	4820      	ldr	r0, [pc, #128]	; (8001af0 <oximeter5_generic_read+0xb4>)
 8001a6e:	f003 ff85 	bl	800597c <HAL_I2C_Master_Receive>
 8001a72:	4603      	mov	r3, r0
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <oximeter5_generic_read+0xb8>)
 8001a78:	701a      	strb	r2, [r3, #0]
		if (retval != HAL_OK)
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <oximeter5_generic_read+0xb8>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d010      	beq.n	8001aa4 <oximeter5_generic_read+0x68>
		{
			snprintf(SendBuffer1, sizeof(SendBuffer1), "Receive failed\n\r");
 8001a82:	4a1d      	ldr	r2, [pc, #116]	; (8001af8 <oximeter5_generic_read+0xbc>)
 8001a84:	2132      	movs	r1, #50	; 0x32
 8001a86:	481d      	ldr	r0, [pc, #116]	; (8001afc <oximeter5_generic_read+0xc0>)
 8001a88:	f00b f924 	bl	800ccd4 <sniprintf>
			HAL_UART_Transmit(&huart3, SendBuffer1, strlen(SendBuffer1), 100);
 8001a8c:	481b      	ldr	r0, [pc, #108]	; (8001afc <oximeter5_generic_read+0xc0>)
 8001a8e:	f7fe fc27 	bl	80002e0 <strlen>
 8001a92:	4603      	mov	r3, r0
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	2364      	movs	r3, #100	; 0x64
 8001a98:	4918      	ldr	r1, [pc, #96]	; (8001afc <oximeter5_generic_read+0xc0>)
 8001a9a:	4819      	ldr	r0, [pc, #100]	; (8001b00 <oximeter5_generic_read+0xc4>)
 8001a9c:	f009 fc35 	bl	800b30a <HAL_UART_Transmit>
			return OXIMETER5_ERROR;
 8001aa0:	23ff      	movs	r3, #255	; 0xff
 8001aa2:	e020      	b.n	8001ae6 <oximeter5_generic_read+0xaa>
		} else {
			snprintf(SendBuffer1, sizeof(SendBuffer1), "Receive successful\n\r");
 8001aa4:	4a17      	ldr	r2, [pc, #92]	; (8001b04 <oximeter5_generic_read+0xc8>)
 8001aa6:	2132      	movs	r1, #50	; 0x32
 8001aa8:	4814      	ldr	r0, [pc, #80]	; (8001afc <oximeter5_generic_read+0xc0>)
 8001aaa:	f00b f913 	bl	800ccd4 <sniprintf>
			HAL_UART_Transmit(&huart3, SendBuffer1, strlen(SendBuffer1), 100);
 8001aae:	4813      	ldr	r0, [pc, #76]	; (8001afc <oximeter5_generic_read+0xc0>)
 8001ab0:	f7fe fc16 	bl	80002e0 <strlen>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	2364      	movs	r3, #100	; 0x64
 8001aba:	4910      	ldr	r1, [pc, #64]	; (8001afc <oximeter5_generic_read+0xc0>)
 8001abc:	4810      	ldr	r0, [pc, #64]	; (8001b00 <oximeter5_generic_read+0xc4>)
 8001abe:	f009 fc24 	bl	800b30a <HAL_UART_Transmit>
			return OXIMETER5_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e00f      	b.n	8001ae6 <oximeter5_generic_read+0xaa>
		}
	}
	snprintf(SendBuffer1, sizeof(SendBuffer1), "Write before read failed\n\r");
 8001ac6:	4a10      	ldr	r2, [pc, #64]	; (8001b08 <oximeter5_generic_read+0xcc>)
 8001ac8:	2132      	movs	r1, #50	; 0x32
 8001aca:	480c      	ldr	r0, [pc, #48]	; (8001afc <oximeter5_generic_read+0xc0>)
 8001acc:	f00b f902 	bl	800ccd4 <sniprintf>
	HAL_UART_Transmit(&huart3, SendBuffer1, strlen(SendBuffer1), 100);
 8001ad0:	480a      	ldr	r0, [pc, #40]	; (8001afc <oximeter5_generic_read+0xc0>)
 8001ad2:	f7fe fc05 	bl	80002e0 <strlen>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	2364      	movs	r3, #100	; 0x64
 8001adc:	4907      	ldr	r1, [pc, #28]	; (8001afc <oximeter5_generic_read+0xc0>)
 8001ade:	4808      	ldr	r0, [pc, #32]	; (8001b00 <oximeter5_generic_read+0xc4>)
 8001ae0:	f009 fc13 	bl	800b30a <HAL_UART_Transmit>
	return OXIMETER5_ERROR;
 8001ae4:	23ff      	movs	r3, #255	; 0xff
    //return i2c_master_write_then_read( &ctx->i2c, &reg, 1, rx_buf, rx_len );
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	24000490 	.word	0x24000490
 8001af4:	240010ae 	.word	0x240010ae
 8001af8:	0800d6ac 	.word	0x0800d6ac
 8001afc:	240010b0 	.word	0x240010b0
 8001b00:	240007b4 	.word	0x240007b4
 8001b04:	0800d6c0 	.word	0x0800d6c0
 8001b08:	0800d6d8 	.word	0x0800d6d8

08001b0c <oximeter5_sw_reset>:
	return HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_12) == GPIO_PIN_SET ? OXIMETER5_INTERRUPT_ACTIVE : OXIMETER5_INTERRUPT_INACTIVE;
    //return digital_in_read( &ctx->int_pin );
}

err_t oximeter5_sw_reset ( void )
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
    uint8_t tx_data;

    tx_data = OXIMETER5_SW_RESET;
 8001b12:	2340      	movs	r3, #64	; 0x40
 8001b14:	71bb      	strb	r3, [r7, #6]
    err_t error_flag = oximeter5_generic_write((OXIMETER5_REG_MODE_CONFIG << 1), &tx_data, 1 );
 8001b16:	1dbb      	adds	r3, r7, #6
 8001b18:	2201      	movs	r2, #1
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	2012      	movs	r0, #18
 8001b1e:	f7ff ff09 	bl	8001934 <oximeter5_generic_write>
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]

    return error_flag;
 8001b26:	79fb      	ldrb	r3, [r7, #7]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <oximeter5_read_sensor_data>:

    return oximeter5_generic_write(OXIMETER5_REG_MODE_CONFIG, &tx_data, 1 );
}

err_t oximeter5_read_sensor_data ( uint32_t *ir, uint32_t *red )
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
    uint8_t rx_buf[ 6 ];

    err_t error_flag = oximeter5_generic_read(OXIMETER5_REG_FIFO_DATA, rx_buf, 6 );
 8001b3a:	f107 0308 	add.w	r3, r7, #8
 8001b3e:	2206      	movs	r2, #6
 8001b40:	4619      	mov	r1, r3
 8001b42:	2007      	movs	r0, #7
 8001b44:	f7ff ff7a 	bl	8001a3c <oximeter5_generic_read>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	73fb      	strb	r3, [r7, #15]

    *ir = rx_buf[ 0 ];
 8001b4c:	7a3b      	ldrb	r3, [r7, #8]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	601a      	str	r2, [r3, #0]
    *ir <<= 8;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	021a      	lsls	r2, r3, #8
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	601a      	str	r2, [r3, #0]
    *ir |= rx_buf[ 1 ];
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	7a7a      	ldrb	r2, [r7, #9]
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	601a      	str	r2, [r3, #0]
    *ir <<= 8;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	021a      	lsls	r2, r3, #8
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	601a      	str	r2, [r3, #0]
    *ir |= rx_buf[ 2 ];
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	7aba      	ldrb	r2, [r7, #10]
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	601a      	str	r2, [r3, #0]
    *ir &= DATA_18_BIT;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	601a      	str	r2, [r3, #0]

    *red = rx_buf[ 3 ];
 8001b8c:	7afb      	ldrb	r3, [r7, #11]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	601a      	str	r2, [r3, #0]
    *red <<= 8;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	021a      	lsls	r2, r3, #8
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	601a      	str	r2, [r3, #0]
    *red |= rx_buf[ 4 ];
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	7b3a      	ldrb	r2, [r7, #12]
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	601a      	str	r2, [r3, #0]
    *red <<= 8;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	021a      	lsls	r2, r3, #8
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	601a      	str	r2, [r3, #0]
    *red |= rx_buf[ 5 ];
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	7b7a      	ldrb	r2, [r7, #13]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	601a      	str	r2, [r3, #0]
    *red &= DATA_18_BIT;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	601a      	str	r2, [r3, #0]

    return error_flag;
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <HAL_MspInit+0x30>)
 8001be0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001be4:	4a08      	ldr	r2, [pc, #32]	; (8001c08 <HAL_MspInit+0x30>)
 8001be6:	f043 0302 	orr.w	r3, r3, #2
 8001bea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_MspInit+0x30>)
 8001bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	58024400 	.word	0x58024400

08001c0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b090      	sub	sp, #64	; 0x40
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a72      	ldr	r2, [pc, #456]	; (8001df4 <HAL_ADC_MspInit+0x1e8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d14e      	bne.n	8001ccc <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c2e:	4b72      	ldr	r3, [pc, #456]	; (8001df8 <HAL_ADC_MspInit+0x1ec>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	3301      	adds	r3, #1
 8001c34:	4a70      	ldr	r2, [pc, #448]	; (8001df8 <HAL_ADC_MspInit+0x1ec>)
 8001c36:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c38:	4b6f      	ldr	r3, [pc, #444]	; (8001df8 <HAL_ADC_MspInit+0x1ec>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d10e      	bne.n	8001c5e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c40:	4b6e      	ldr	r3, [pc, #440]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001c42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c46:	4a6d      	ldr	r2, [pc, #436]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001c48:	f043 0320 	orr.w	r3, r3, #32
 8001c4c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c50:	4b6a      	ldr	r3, [pc, #424]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001c52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c56:	f003 0320 	and.w	r3, r3, #32
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5e:	4b67      	ldr	r3, [pc, #412]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c64:	4a65      	ldr	r2, [pc, #404]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001c66:	f043 0304 	orr.w	r3, r3, #4
 8001c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c6e:	4b63      	ldr	r3, [pc, #396]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7c:	4b5f      	ldr	r3, [pc, #380]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c82:	4a5e      	ldr	r2, [pc, #376]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c8c:	4b5b      	ldr	r3, [pc, #364]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	623b      	str	r3, [r7, #32]
 8001c98:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001caa:	4619      	mov	r1, r3
 8001cac:	4854      	ldr	r0, [pc, #336]	; (8001e00 <HAL_ADC_MspInit+0x1f4>)
 8001cae:	f003 fb17 	bl	80052e0 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001cb2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001cb6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001cba:	f001 fa01 	bl	80030c0 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001cbe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cc2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001cc6:	f001 f9fb 	bl	80030c0 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001cca:	e08f      	b.n	8001dec <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a4c      	ldr	r2, [pc, #304]	; (8001e04 <HAL_ADC_MspInit+0x1f8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d133      	bne.n	8001d3e <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001cd6:	4b48      	ldr	r3, [pc, #288]	; (8001df8 <HAL_ADC_MspInit+0x1ec>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	4a46      	ldr	r2, [pc, #280]	; (8001df8 <HAL_ADC_MspInit+0x1ec>)
 8001cde:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001ce0:	4b45      	ldr	r3, [pc, #276]	; (8001df8 <HAL_ADC_MspInit+0x1ec>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d10e      	bne.n	8001d06 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ce8:	4b44      	ldr	r3, [pc, #272]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001cea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cee:	4a43      	ldr	r2, [pc, #268]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001cf0:	f043 0320 	orr.w	r3, r3, #32
 8001cf4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001cf8:	4b40      	ldr	r3, [pc, #256]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001cfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cfe:	f003 0320 	and.w	r3, r3, #32
 8001d02:	61fb      	str	r3, [r7, #28]
 8001d04:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	4b3d      	ldr	r3, [pc, #244]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0c:	4a3b      	ldr	r2, [pc, #236]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d16:	4b39      	ldr	r3, [pc, #228]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	61bb      	str	r3, [r7, #24]
 8001d22:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001d24:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001d28:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001d2c:	f001 f9c8 	bl	80030c0 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001d30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d34:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001d38:	f001 f9c2 	bl	80030c0 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001d3c:	e056      	b.n	8001dec <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a31      	ldr	r2, [pc, #196]	; (8001e08 <HAL_ADC_MspInit+0x1fc>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d151      	bne.n	8001dec <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001d48:	4b2c      	ldr	r3, [pc, #176]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4e:	4a2b      	ldr	r2, [pc, #172]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001d50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d58:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d66:	4b25      	ldr	r3, [pc, #148]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6c:	4a23      	ldr	r2, [pc, #140]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001d6e:	f043 0320 	orr.w	r3, r3, #32
 8001d72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d76:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7c:	f003 0320 	and.w	r3, r3, #32
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d84:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8a:	4a1c      	ldr	r2, [pc, #112]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001d8c:	f043 0304 	orr.w	r3, r3, #4
 8001d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d94:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_ADC_MspInit+0x1f0>)
 8001d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001da2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001da8:	2303      	movs	r3, #3
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001db0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db4:	4619      	mov	r1, r3
 8001db6:	4815      	ldr	r0, [pc, #84]	; (8001e0c <HAL_ADC_MspInit+0x200>)
 8001db8:	f003 fa92 	bl	80052e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dcc:	4619      	mov	r1, r3
 8001dce:	480c      	ldr	r0, [pc, #48]	; (8001e00 <HAL_ADC_MspInit+0x1f4>)
 8001dd0:	f003 fa86 	bl	80052e0 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001dd4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001dd8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001ddc:	f001 f970 	bl	80030c0 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001de0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001de4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001de8:	f001 f96a 	bl	80030c0 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001dec:	bf00      	nop
 8001dee:	3740      	adds	r7, #64	; 0x40
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40022000 	.word	0x40022000
 8001df8:	240010e4 	.word	0x240010e4
 8001dfc:	58024400 	.word	0x58024400
 8001e00:	58020800 	.word	0x58020800
 8001e04:	40022100 	.word	0x40022100
 8001e08:	58026000 	.word	0x58026000
 8001e0c:	58021400 	.word	0x58021400

08001e10 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b092      	sub	sp, #72	; 0x48
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a87      	ldr	r2, [pc, #540]	; (800204c <HAL_ETH_MspInit+0x23c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	f040 8108 	bne.w	8002044 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001e34:	4b86      	ldr	r3, [pc, #536]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001e36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e3a:	4a85      	ldr	r2, [pc, #532]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e40:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e44:	4b82      	ldr	r3, [pc, #520]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001e46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e4e:	633b      	str	r3, [r7, #48]	; 0x30
 8001e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001e52:	4b7f      	ldr	r3, [pc, #508]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e58:	4a7d      	ldr	r2, [pc, #500]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e62:	4b7b      	ldr	r3, [pc, #492]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001e64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001e70:	4b77      	ldr	r3, [pc, #476]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001e72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e76:	4a76      	ldr	r2, [pc, #472]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e7c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e80:	4b73      	ldr	r3, [pc, #460]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001e82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e8e:	4b70      	ldr	r3, [pc, #448]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e94:	4a6e      	ldr	r2, [pc, #440]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e9e:	4b6c      	ldr	r3, [pc, #432]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eac:	4b68      	ldr	r3, [pc, #416]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb2:	4a67      	ldr	r2, [pc, #412]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001eb4:	f043 0310 	orr.w	r3, r3, #16
 8001eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ebc:	4b64      	ldr	r3, [pc, #400]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	623b      	str	r3, [r7, #32]
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001eca:	4b61      	ldr	r3, [pc, #388]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed0:	4a5f      	ldr	r2, [pc, #380]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eda:	4b5d      	ldr	r3, [pc, #372]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee8:	4b59      	ldr	r3, [pc, #356]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eee:	4a58      	ldr	r2, [pc, #352]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ef8:	4b55      	ldr	r3, [pc, #340]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	61bb      	str	r3, [r7, #24]
 8001f04:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f06:	4b52      	ldr	r3, [pc, #328]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0c:	4a50      	ldr	r2, [pc, #320]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f16:	4b4e      	ldr	r3, [pc, #312]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f24:	4b4a      	ldr	r3, [pc, #296]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f2a:	4a49      	ldr	r2, [pc, #292]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f34:	4b46      	ldr	r3, [pc, #280]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f42:	4b43      	ldr	r3, [pc, #268]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f48:	4a41      	ldr	r2, [pc, #260]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001f4a:	f043 0302 	orr.w	r3, r3, #2
 8001f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f52:	4b3f      	ldr	r3, [pc, #252]	; (8002050 <HAL_ETH_MspInit+0x240>)
 8001f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8001f60:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f64:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f72:	230b      	movs	r3, #11
 8001f74:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4835      	ldr	r0, [pc, #212]	; (8002054 <HAL_ETH_MspInit+0x244>)
 8001f7e:	f003 f9af 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001f82:	2304      	movs	r3, #4
 8001f84:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f92:	230b      	movs	r3, #11
 8001f94:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001f96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	482e      	ldr	r0, [pc, #184]	; (8002058 <HAL_ETH_MspInit+0x248>)
 8001f9e:	f003 f99f 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8001fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fb4:	230b      	movs	r3, #11
 8001fb6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001fb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4827      	ldr	r0, [pc, #156]	; (800205c <HAL_ETH_MspInit+0x24c>)
 8001fc0:	f003 f98e 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001fc4:	233e      	movs	r3, #62	; 0x3e
 8001fc6:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fd4:	230b      	movs	r3, #11
 8001fd6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4820      	ldr	r0, [pc, #128]	; (8002060 <HAL_ETH_MspInit+0x250>)
 8001fe0:	f003 f97e 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001fe4:	230c      	movs	r3, #12
 8001fe6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ff4:	230b      	movs	r3, #11
 8001ff6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ff8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4819      	ldr	r0, [pc, #100]	; (8002064 <HAL_ETH_MspInit+0x254>)
 8002000:	f003 f96e 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8002004:	2386      	movs	r3, #134	; 0x86
 8002006:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002014:	230b      	movs	r3, #11
 8002016:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002018:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800201c:	4619      	mov	r1, r3
 800201e:	4812      	ldr	r0, [pc, #72]	; (8002068 <HAL_ETH_MspInit+0x258>)
 8002020:	f003 f95e 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8002024:	2303      	movs	r3, #3
 8002026:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002030:	2300      	movs	r3, #0
 8002032:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002034:	230b      	movs	r3, #11
 8002036:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002038:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800203c:	4619      	mov	r1, r3
 800203e:	480b      	ldr	r0, [pc, #44]	; (800206c <HAL_ETH_MspInit+0x25c>)
 8002040:	f003 f94e 	bl	80052e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002044:	bf00      	nop
 8002046:	3748      	adds	r7, #72	; 0x48
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40028000 	.word	0x40028000
 8002050:	58024400 	.word	0x58024400
 8002054:	58021800 	.word	0x58021800
 8002058:	58021000 	.word	0x58021000
 800205c:	58022000 	.word	0x58022000
 8002060:	58020800 	.word	0x58020800
 8002064:	58021c00 	.word	0x58021c00
 8002068:	58020000 	.word	0x58020000
 800206c:	58020400 	.word	0x58020400

08002070 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b0bc      	sub	sp, #240	; 0xf0
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002088:	f107 0318 	add.w	r3, r7, #24
 800208c:	22c0      	movs	r2, #192	; 0xc0
 800208e:	2100      	movs	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f00a fe53 	bl	800cd3c <memset>
  if(hfdcan->Instance==FDCAN1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a57      	ldr	r2, [pc, #348]	; (80021f8 <HAL_FDCAN_MspInit+0x188>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d151      	bne.n	8002144 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80020a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020a4:	f04f 0300 	mov.w	r3, #0
 80020a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80020ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80020b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020b4:	f107 0318 	add.w	r3, r7, #24
 80020b8:	4618      	mov	r0, r3
 80020ba:	f005 fe61 	bl	8007d80 <HAL_RCCEx_PeriphCLKConfig>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80020c4:	f7ff fb0a 	bl	80016dc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80020c8:	4b4c      	ldr	r3, [pc, #304]	; (80021fc <HAL_FDCAN_MspInit+0x18c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	3301      	adds	r3, #1
 80020ce:	4a4b      	ldr	r2, [pc, #300]	; (80021fc <HAL_FDCAN_MspInit+0x18c>)
 80020d0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80020d2:	4b4a      	ldr	r3, [pc, #296]	; (80021fc <HAL_FDCAN_MspInit+0x18c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d10e      	bne.n	80020f8 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80020da:	4b49      	ldr	r3, [pc, #292]	; (8002200 <HAL_FDCAN_MspInit+0x190>)
 80020dc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80020e0:	4a47      	ldr	r2, [pc, #284]	; (8002200 <HAL_FDCAN_MspInit+0x190>)
 80020e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80020ea:	4b45      	ldr	r3, [pc, #276]	; (8002200 <HAL_FDCAN_MspInit+0x190>)
 80020ec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80020f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80020f8:	4b41      	ldr	r3, [pc, #260]	; (8002200 <HAL_FDCAN_MspInit+0x190>)
 80020fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020fe:	4a40      	ldr	r2, [pc, #256]	; (8002200 <HAL_FDCAN_MspInit+0x190>)
 8002100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002104:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002108:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <HAL_FDCAN_MspInit+0x190>)
 800210a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800210e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8002116:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800211a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002130:	2309      	movs	r3, #9
 8002132:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002136:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800213a:	4619      	mov	r1, r3
 800213c:	4831      	ldr	r0, [pc, #196]	; (8002204 <HAL_FDCAN_MspInit+0x194>)
 800213e:	f003 f8cf 	bl	80052e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002142:	e055      	b.n	80021f0 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a2f      	ldr	r2, [pc, #188]	; (8002208 <HAL_FDCAN_MspInit+0x198>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d150      	bne.n	80021f0 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800214e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800215a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800215e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002162:	f107 0318 	add.w	r3, r7, #24
 8002166:	4618      	mov	r0, r3
 8002168:	f005 fe0a 	bl	8007d80 <HAL_RCCEx_PeriphCLKConfig>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8002172:	f7ff fab3 	bl	80016dc <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002176:	4b21      	ldr	r3, [pc, #132]	; (80021fc <HAL_FDCAN_MspInit+0x18c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	4a1f      	ldr	r2, [pc, #124]	; (80021fc <HAL_FDCAN_MspInit+0x18c>)
 800217e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002180:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <HAL_FDCAN_MspInit+0x18c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d10e      	bne.n	80021a6 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002188:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <HAL_FDCAN_MspInit+0x190>)
 800218a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800218e:	4a1c      	ldr	r2, [pc, #112]	; (8002200 <HAL_FDCAN_MspInit+0x190>)
 8002190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002194:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <HAL_FDCAN_MspInit+0x190>)
 800219a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800219e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <HAL_FDCAN_MspInit+0x190>)
 80021a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ac:	4a14      	ldr	r2, [pc, #80]	; (8002200 <HAL_FDCAN_MspInit+0x190>)
 80021ae:	f043 0302 	orr.w	r3, r3, #2
 80021b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021b6:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_FDCAN_MspInit+0x190>)
 80021b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 80021c4:	f242 0320 	movw	r3, #8224	; 0x2020
 80021c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80021de:	2309      	movs	r3, #9
 80021e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021e8:	4619      	mov	r1, r3
 80021ea:	4808      	ldr	r0, [pc, #32]	; (800220c <HAL_FDCAN_MspInit+0x19c>)
 80021ec:	f003 f878 	bl	80052e0 <HAL_GPIO_Init>
}
 80021f0:	bf00      	nop
 80021f2:	37f0      	adds	r7, #240	; 0xf0
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	4000a000 	.word	0x4000a000
 80021fc:	240010e8 	.word	0x240010e8
 8002200:	58024400 	.word	0x58024400
 8002204:	58021c00 	.word	0x58021c00
 8002208:	4000a400 	.word	0x4000a400
 800220c:	58020400 	.word	0x58020400

08002210 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b0ba      	sub	sp, #232	; 0xe8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002228:	f107 0310 	add.w	r3, r7, #16
 800222c:	22c0      	movs	r2, #192	; 0xc0
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f00a fd83 	bl	800cd3c <memset>
  if(hi2c->Instance==I2C4)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a27      	ldr	r2, [pc, #156]	; (80022d8 <HAL_I2C_MspInit+0xc8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d146      	bne.n	80022ce <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002240:	f04f 0210 	mov.w	r2, #16
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800224c:	2300      	movs	r3, #0
 800224e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002252:	f107 0310 	add.w	r3, r7, #16
 8002256:	4618      	mov	r0, r3
 8002258:	f005 fd92 	bl	8007d80 <HAL_RCCEx_PeriphCLKConfig>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002262:	f7ff fa3b 	bl	80016dc <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002266:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <HAL_I2C_MspInit+0xcc>)
 8002268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800226c:	4a1b      	ldr	r2, [pc, #108]	; (80022dc <HAL_I2C_MspInit+0xcc>)
 800226e:	f043 0308 	orr.w	r3, r3, #8
 8002272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002276:	4b19      	ldr	r3, [pc, #100]	; (80022dc <HAL_I2C_MspInit+0xcc>)
 8002278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002284:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002288:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800228c:	2312      	movs	r3, #18
 800228e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800229e:	2304      	movs	r3, #4
 80022a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022a8:	4619      	mov	r1, r3
 80022aa:	480d      	ldr	r0, [pc, #52]	; (80022e0 <HAL_I2C_MspInit+0xd0>)
 80022ac:	f003 f818 	bl	80052e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <HAL_I2C_MspInit+0xcc>)
 80022b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022b6:	4a09      	ldr	r2, [pc, #36]	; (80022dc <HAL_I2C_MspInit+0xcc>)
 80022b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_I2C_MspInit+0xcc>)
 80022c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80022ce:	bf00      	nop
 80022d0:	37e8      	adds	r7, #232	; 0xe8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	58001c00 	.word	0x58001c00
 80022dc:	58024400 	.word	0x58024400
 80022e0:	58020c00 	.word	0x58020c00

080022e4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b0be      	sub	sp, #248	; 0xf8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022fc:	f107 0320 	add.w	r3, r7, #32
 8002300:	22c0      	movs	r2, #192	; 0xc0
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f00a fd19 	bl	800cd3c <memset>
  if(hltdc->Instance==LTDC)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a66      	ldr	r2, [pc, #408]	; (80024a8 <HAL_LTDC_MspInit+0x1c4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	f040 80c4 	bne.w	800249e <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002316:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8002322:	2320      	movs	r3, #32
 8002324:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8002326:	23c0      	movs	r3, #192	; 0xc0
 8002328:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800232a:	2302      	movs	r3, #2
 800232c:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800232e:	2302      	movs	r3, #2
 8002330:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8002332:	2302      	movs	r3, #2
 8002334:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002336:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800233a:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800233c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002340:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002346:	f107 0320 	add.w	r3, r7, #32
 800234a:	4618      	mov	r0, r3
 800234c:	f005 fd18 	bl	8007d80 <HAL_RCCEx_PeriphCLKConfig>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8002356:	f7ff f9c1 	bl	80016dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800235a:	4b54      	ldr	r3, [pc, #336]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 800235c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002360:	4a52      	ldr	r2, [pc, #328]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 8002362:	f043 0308 	orr.w	r3, r3, #8
 8002366:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800236a:	4b50      	ldr	r3, [pc, #320]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 800236c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002378:	4b4c      	ldr	r3, [pc, #304]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 800237a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800237e:	4a4b      	ldr	r2, [pc, #300]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 8002380:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002384:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002388:	4b48      	ldr	r3, [pc, #288]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 800238a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800238e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002392:	61bb      	str	r3, [r7, #24]
 8002394:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002396:	4b45      	ldr	r3, [pc, #276]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 8002398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800239c:	4a43      	ldr	r2, [pc, #268]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 800239e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023a6:	4b41      	ldr	r3, [pc, #260]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 80023a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80023b4:	4b3d      	ldr	r3, [pc, #244]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 80023b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ba:	4a3c      	ldr	r2, [pc, #240]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 80023bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023c4:	4b39      	ldr	r3, [pc, #228]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 80023c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80023d2:	4b36      	ldr	r3, [pc, #216]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 80023d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d8:	4a34      	ldr	r2, [pc, #208]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 80023da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023e2:	4b32      	ldr	r3, [pc, #200]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 80023e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 80023f0:	23fc      	movs	r3, #252	; 0xfc
 80023f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002402:	2300      	movs	r3, #0
 8002404:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002408:	230e      	movs	r3, #14
 800240a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800240e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002412:	4619      	mov	r1, r3
 8002414:	4826      	ldr	r0, [pc, #152]	; (80024b0 <HAL_LTDC_MspInit+0x1cc>)
 8002416:	f002 ff63 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 800241a:	f24d 2303 	movw	r3, #53763	; 0xd203
 800241e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242e:	2300      	movs	r3, #0
 8002430:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002434:	230e      	movs	r3, #14
 8002436:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800243a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800243e:	4619      	mov	r1, r3
 8002440:	481c      	ldr	r0, [pc, #112]	; (80024b4 <HAL_LTDC_MspInit+0x1d0>)
 8002442:	f002 ff4d 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8002446:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800244a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244e:	2302      	movs	r3, #2
 8002450:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245a:	2300      	movs	r3, #0
 800245c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002460:	230e      	movs	r3, #14
 8002462:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002466:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800246a:	4619      	mov	r1, r3
 800246c:	4812      	ldr	r0, [pc, #72]	; (80024b8 <HAL_LTDC_MspInit+0x1d4>)
 800246e:	f002 ff37 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002472:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002476:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247a:	2302      	movs	r3, #2
 800247c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	2300      	movs	r3, #0
 8002488:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800248c:	230e      	movs	r3, #14
 800248e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002492:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002496:	4619      	mov	r1, r3
 8002498:	4808      	ldr	r0, [pc, #32]	; (80024bc <HAL_LTDC_MspInit+0x1d8>)
 800249a:	f002 ff21 	bl	80052e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800249e:	bf00      	nop
 80024a0:	37f8      	adds	r7, #248	; 0xf8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	50001000 	.word	0x50001000
 80024ac:	58024400 	.word	0x58024400
 80024b0:	58022800 	.word	0x58022800
 80024b4:	58022000 	.word	0x58022000
 80024b8:	58022400 	.word	0x58022400
 80024bc:	58021c00 	.word	0x58021c00

080024c0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b0bc      	sub	sp, #240	; 0xf0
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024d8:	f107 0318 	add.w	r3, r7, #24
 80024dc:	22c0      	movs	r2, #192	; 0xc0
 80024de:	2100      	movs	r1, #0
 80024e0:	4618      	mov	r0, r3
 80024e2:	f00a fc2b 	bl	800cd3c <memset>
  if(hqspi->Instance==QUADSPI)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a56      	ldr	r2, [pc, #344]	; (8002644 <HAL_QSPI_MspInit+0x184>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	f040 80a5 	bne.w	800263c <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80024f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80024fe:	2300      	movs	r3, #0
 8002500:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002502:	f107 0318 	add.w	r3, r7, #24
 8002506:	4618      	mov	r0, r3
 8002508:	f005 fc3a 	bl	8007d80 <HAL_RCCEx_PeriphCLKConfig>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8002512:	f7ff f8e3 	bl	80016dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002516:	4b4c      	ldr	r3, [pc, #304]	; (8002648 <HAL_QSPI_MspInit+0x188>)
 8002518:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800251c:	4a4a      	ldr	r2, [pc, #296]	; (8002648 <HAL_QSPI_MspInit+0x188>)
 800251e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002522:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002526:	4b48      	ldr	r3, [pc, #288]	; (8002648 <HAL_QSPI_MspInit+0x188>)
 8002528:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800252c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002534:	4b44      	ldr	r3, [pc, #272]	; (8002648 <HAL_QSPI_MspInit+0x188>)
 8002536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800253a:	4a43      	ldr	r2, [pc, #268]	; (8002648 <HAL_QSPI_MspInit+0x188>)
 800253c:	f043 0302 	orr.w	r3, r3, #2
 8002540:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002544:	4b40      	ldr	r3, [pc, #256]	; (8002648 <HAL_QSPI_MspInit+0x188>)
 8002546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002552:	4b3d      	ldr	r3, [pc, #244]	; (8002648 <HAL_QSPI_MspInit+0x188>)
 8002554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002558:	4a3b      	ldr	r2, [pc, #236]	; (8002648 <HAL_QSPI_MspInit+0x188>)
 800255a:	f043 0320 	orr.w	r3, r3, #32
 800255e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002562:	4b39      	ldr	r3, [pc, #228]	; (8002648 <HAL_QSPI_MspInit+0x188>)
 8002564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002568:	f003 0320 	and.w	r3, r3, #32
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002570:	4b35      	ldr	r3, [pc, #212]	; (8002648 <HAL_QSPI_MspInit+0x188>)
 8002572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002576:	4a34      	ldr	r2, [pc, #208]	; (8002648 <HAL_QSPI_MspInit+0x188>)
 8002578:	f043 0308 	orr.w	r3, r3, #8
 800257c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002580:	4b31      	ldr	r3, [pc, #196]	; (8002648 <HAL_QSPI_MspInit+0x188>)
 8002582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800258e:	2340      	movs	r3, #64	; 0x40
 8002590:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80025a6:	230a      	movs	r3, #10
 80025a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80025b0:	4619      	mov	r1, r3
 80025b2:	4826      	ldr	r0, [pc, #152]	; (800264c <HAL_QSPI_MspInit+0x18c>)
 80025b4:	f002 fe94 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80025b8:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80025bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80025d2:	2309      	movs	r3, #9
 80025d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80025dc:	4619      	mov	r1, r3
 80025de:	481c      	ldr	r0, [pc, #112]	; (8002650 <HAL_QSPI_MspInit+0x190>)
 80025e0:	f002 fe7e 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ec:	2302      	movs	r3, #2
 80025ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80025fe:	230a      	movs	r3, #10
 8002600:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002604:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002608:	4619      	mov	r1, r3
 800260a:	4811      	ldr	r0, [pc, #68]	; (8002650 <HAL_QSPI_MspInit+0x190>)
 800260c:	f002 fe68 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002610:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002614:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002624:	2300      	movs	r3, #0
 8002626:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800262a:	2309      	movs	r3, #9
 800262c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002630:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002634:	4619      	mov	r1, r3
 8002636:	4807      	ldr	r0, [pc, #28]	; (8002654 <HAL_QSPI_MspInit+0x194>)
 8002638:	f002 fe52 	bl	80052e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800263c:	bf00      	nop
 800263e:	37f0      	adds	r7, #240	; 0xf0
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	52005000 	.word	0x52005000
 8002648:	58024400 	.word	0x58024400
 800264c:	58020400 	.word	0x58020400
 8002650:	58021400 	.word	0x58021400
 8002654:	58020c00 	.word	0x58020c00

08002658 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b0b2      	sub	sp, #200	; 0xc8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002660:	f107 0308 	add.w	r3, r7, #8
 8002664:	22c0      	movs	r2, #192	; 0xc0
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f00a fb67 	bl	800cd3c <memset>
  if(hrtc->Instance==RTC)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a10      	ldr	r2, [pc, #64]	; (80026b4 <HAL_RTC_MspInit+0x5c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d119      	bne.n	80026ac <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002678:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002688:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800268c:	f107 0308 	add.w	r3, r7, #8
 8002690:	4618      	mov	r0, r3
 8002692:	f005 fb75 	bl	8007d80 <HAL_RCCEx_PeriphCLKConfig>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800269c:	f7ff f81e 	bl	80016dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_RTC_MspInit+0x60>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a4:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <HAL_RTC_MspInit+0x60>)
 80026a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026aa:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80026ac:	bf00      	nop
 80026ae:	37c8      	adds	r7, #200	; 0xc8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	58004000 	.word	0x58004000
 80026b8:	58024400 	.word	0x58024400

080026bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b0bc      	sub	sp, #240	; 0xf0
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026d4:	f107 0318 	add.w	r3, r7, #24
 80026d8:	22c0      	movs	r2, #192	; 0xc0
 80026da:	2100      	movs	r1, #0
 80026dc:	4618      	mov	r0, r3
 80026de:	f00a fb2d 	bl	800cd3c <memset>
  if(hspi->Instance==SPI2)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a55      	ldr	r2, [pc, #340]	; (800283c <HAL_SPI_MspInit+0x180>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	f040 80a3 	bne.w	8002834 <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80026ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026fe:	f107 0318 	add.w	r3, r7, #24
 8002702:	4618      	mov	r0, r3
 8002704:	f005 fb3c 	bl	8007d80 <HAL_RCCEx_PeriphCLKConfig>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800270e:	f7fe ffe5 	bl	80016dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002712:	4b4b      	ldr	r3, [pc, #300]	; (8002840 <HAL_SPI_MspInit+0x184>)
 8002714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002718:	4a49      	ldr	r2, [pc, #292]	; (8002840 <HAL_SPI_MspInit+0x184>)
 800271a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800271e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002722:	4b47      	ldr	r3, [pc, #284]	; (8002840 <HAL_SPI_MspInit+0x184>)
 8002724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002730:	4b43      	ldr	r3, [pc, #268]	; (8002840 <HAL_SPI_MspInit+0x184>)
 8002732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002736:	4a42      	ldr	r2, [pc, #264]	; (8002840 <HAL_SPI_MspInit+0x184>)
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002740:	4b3f      	ldr	r3, [pc, #252]	; (8002840 <HAL_SPI_MspInit+0x184>)
 8002742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800274e:	4b3c      	ldr	r3, [pc, #240]	; (8002840 <HAL_SPI_MspInit+0x184>)
 8002750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002754:	4a3a      	ldr	r2, [pc, #232]	; (8002840 <HAL_SPI_MspInit+0x184>)
 8002756:	f043 0308 	orr.w	r3, r3, #8
 800275a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800275e:	4b38      	ldr	r3, [pc, #224]	; (8002840 <HAL_SPI_MspInit+0x184>)
 8002760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800276c:	4b34      	ldr	r3, [pc, #208]	; (8002840 <HAL_SPI_MspInit+0x184>)
 800276e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002772:	4a33      	ldr	r2, [pc, #204]	; (8002840 <HAL_SPI_MspInit+0x184>)
 8002774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002778:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800277c:	4b30      	ldr	r3, [pc, #192]	; (8002840 <HAL_SPI_MspInit+0x184>)
 800277e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800278a:	2310      	movs	r3, #16
 800278c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002790:	2302      	movs	r3, #2
 8002792:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	2300      	movs	r3, #0
 8002798:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80027a2:	2307      	movs	r3, #7
 80027a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80027ac:	4619      	mov	r1, r3
 80027ae:	4825      	ldr	r0, [pc, #148]	; (8002844 <HAL_SPI_MspInit+0x188>)
 80027b0:	f002 fd96 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027b4:	2308      	movs	r3, #8
 80027b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027cc:	2305      	movs	r3, #5
 80027ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027d2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80027d6:	4619      	mov	r1, r3
 80027d8:	481b      	ldr	r0, [pc, #108]	; (8002848 <HAL_SPI_MspInit+0x18c>)
 80027da:	f002 fd81 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027de:	2304      	movs	r3, #4
 80027e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e4:	2302      	movs	r3, #2
 80027e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027f6:	2305      	movs	r3, #5
 80027f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80027fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002800:	4619      	mov	r1, r3
 8002802:	4812      	ldr	r0, [pc, #72]	; (800284c <HAL_SPI_MspInit+0x190>)
 8002804:	f002 fd6c 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002808:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800280c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002810:	2302      	movs	r3, #2
 8002812:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281c:	2300      	movs	r3, #0
 800281e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002822:	2305      	movs	r3, #5
 8002824:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002828:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800282c:	4619      	mov	r1, r3
 800282e:	4805      	ldr	r0, [pc, #20]	; (8002844 <HAL_SPI_MspInit+0x188>)
 8002830:	f002 fd56 	bl	80052e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002834:	bf00      	nop
 8002836:	37f0      	adds	r7, #240	; 0xf0
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40003800 	.word	0x40003800
 8002840:	58024400 	.word	0x58024400
 8002844:	58020400 	.word	0x58020400
 8002848:	58020c00 	.word	0x58020c00
 800284c:	58022000 	.word	0x58022000

08002850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b0ba      	sub	sp, #232	; 0xe8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002868:	f107 0310 	add.w	r3, r7, #16
 800286c:	22c0      	movs	r2, #192	; 0xc0
 800286e:	2100      	movs	r1, #0
 8002870:	4618      	mov	r0, r3
 8002872:	f00a fa63 	bl	800cd3c <memset>
  if(huart->Instance==USART3)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a27      	ldr	r2, [pc, #156]	; (8002918 <HAL_UART_MspInit+0xc8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d146      	bne.n	800290e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002880:	f04f 0202 	mov.w	r2, #2
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800288c:	2300      	movs	r3, #0
 800288e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002892:	f107 0310 	add.w	r3, r7, #16
 8002896:	4618      	mov	r0, r3
 8002898:	f005 fa72 	bl	8007d80 <HAL_RCCEx_PeriphCLKConfig>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80028a2:	f7fe ff1b 	bl	80016dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80028a6:	4b1d      	ldr	r3, [pc, #116]	; (800291c <HAL_UART_MspInit+0xcc>)
 80028a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028ac:	4a1b      	ldr	r2, [pc, #108]	; (800291c <HAL_UART_MspInit+0xcc>)
 80028ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028b6:	4b19      	ldr	r3, [pc, #100]	; (800291c <HAL_UART_MspInit+0xcc>)
 80028b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c4:	4b15      	ldr	r3, [pc, #84]	; (800291c <HAL_UART_MspInit+0xcc>)
 80028c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ca:	4a14      	ldr	r2, [pc, #80]	; (800291c <HAL_UART_MspInit+0xcc>)
 80028cc:	f043 0302 	orr.w	r3, r3, #2
 80028d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028d4:	4b11      	ldr	r3, [pc, #68]	; (800291c <HAL_UART_MspInit+0xcc>)
 80028d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80028e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ea:	2302      	movs	r3, #2
 80028ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028fc:	2307      	movs	r3, #7
 80028fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002902:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002906:	4619      	mov	r1, r3
 8002908:	4805      	ldr	r0, [pc, #20]	; (8002920 <HAL_UART_MspInit+0xd0>)
 800290a:	f002 fce9 	bl	80052e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800290e:	bf00      	nop
 8002910:	37e8      	adds	r7, #232	; 0xe8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40004800 	.word	0x40004800
 800291c:	58024400 	.word	0x58024400
 8002920:	58020400 	.word	0x58020400

08002924 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b0ba      	sub	sp, #232	; 0xe8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800293c:	f107 0310 	add.w	r3, r7, #16
 8002940:	22c0      	movs	r2, #192	; 0xc0
 8002942:	2100      	movs	r1, #0
 8002944:	4618      	mov	r0, r3
 8002946:	f00a f9f9 	bl	800cd3c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a30      	ldr	r2, [pc, #192]	; (8002a10 <HAL_PCD_MspInit+0xec>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d159      	bne.n	8002a08 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002954:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002960:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002964:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002968:	f107 0310 	add.w	r3, r7, #16
 800296c:	4618      	mov	r0, r3
 800296e:	f005 fa07 	bl	8007d80 <HAL_RCCEx_PeriphCLKConfig>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8002978:	f7fe feb0 	bl	80016dc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800297c:	f004 f950 	bl	8006c20 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002980:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <HAL_PCD_MspInit+0xf0>)
 8002982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002986:	4a23      	ldr	r2, [pc, #140]	; (8002a14 <HAL_PCD_MspInit+0xf0>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002990:	4b20      	ldr	r3, [pc, #128]	; (8002a14 <HAL_PCD_MspInit+0xf0>)
 8002992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 800299e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 80029b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029b6:	4619      	mov	r1, r3
 80029b8:	4817      	ldr	r0, [pc, #92]	; (8002a18 <HAL_PCD_MspInit+0xf4>)
 80029ba:	f002 fc91 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 80029be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80029c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	2302      	movs	r3, #2
 80029c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80029d8:	230a      	movs	r3, #10
 80029da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029e2:	4619      	mov	r1, r3
 80029e4:	480c      	ldr	r0, [pc, #48]	; (8002a18 <HAL_PCD_MspInit+0xf4>)
 80029e6:	f002 fc7b 	bl	80052e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80029ea:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <HAL_PCD_MspInit+0xf0>)
 80029ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029f0:	4a08      	ldr	r2, [pc, #32]	; (8002a14 <HAL_PCD_MspInit+0xf0>)
 80029f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029f6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80029fa:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_PCD_MspInit+0xf0>)
 80029fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002a08:	bf00      	nop
 8002a0a:	37e8      	adds	r7, #232	; 0xe8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40080000 	.word	0x40080000
 8002a14:	58024400 	.word	0x58024400
 8002a18:	58020000 	.word	0x58020000

08002a1c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b0b8      	sub	sp, #224	; 0xe0
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002a22:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	60da      	str	r2, [r3, #12]
 8002a30:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002a32:	4b51      	ldr	r3, [pc, #324]	; (8002b78 <HAL_FMC_MspInit+0x15c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f040 8099 	bne.w	8002b6e <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8002a3c:	4b4e      	ldr	r3, [pc, #312]	; (8002b78 <HAL_FMC_MspInit+0x15c>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a42:	f107 0308 	add.w	r3, r7, #8
 8002a46:	22c0      	movs	r2, #192	; 0xc0
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f00a f976 	bl	800cd3c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8002a50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a60:	f107 0308 	add.w	r3, r7, #8
 8002a64:	4618      	mov	r0, r3
 8002a66:	f005 f98b 	bl	8007d80 <HAL_RCCEx_PeriphCLKConfig>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8002a70:	f7fe fe34 	bl	80016dc <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002a74:	4b41      	ldr	r3, [pc, #260]	; (8002b7c <HAL_FMC_MspInit+0x160>)
 8002a76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002a7a:	4a40      	ldr	r2, [pc, #256]	; (8002b7c <HAL_FMC_MspInit+0x160>)
 8002a7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a80:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002a84:	4b3d      	ldr	r3, [pc, #244]	; (8002b7c <HAL_FMC_MspInit+0x160>)
 8002a86:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002a8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a8e:	607b      	str	r3, [r7, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8002a92:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002a96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002aac:	230c      	movs	r3, #12
 8002aae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ab2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4831      	ldr	r0, [pc, #196]	; (8002b80 <HAL_FMC_MspInit+0x164>)
 8002aba:	f002 fc11 	bl	80052e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8002abe:	f248 1333 	movw	r3, #33075	; 0x8133
 8002ac2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ad8:	230c      	movs	r3, #12
 8002ada:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ade:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4827      	ldr	r0, [pc, #156]	; (8002b84 <HAL_FMC_MspInit+0x168>)
 8002ae6:	f002 fbfb 	bl	80052e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8002aea:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002aee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af2:	2302      	movs	r3, #2
 8002af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afe:	2303      	movs	r3, #3
 8002b00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b04:	230c      	movs	r3, #12
 8002b06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b0a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b0e:	4619      	mov	r1, r3
 8002b10:	481d      	ldr	r0, [pc, #116]	; (8002b88 <HAL_FMC_MspInit+0x16c>)
 8002b12:	f002 fbe5 	bl	80052e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8002b16:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002b1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b30:	230c      	movs	r3, #12
 8002b32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b36:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4813      	ldr	r0, [pc, #76]	; (8002b8c <HAL_FMC_MspInit+0x170>)
 8002b3e:	f002 fbcf 	bl	80052e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b42:	23e0      	movs	r3, #224	; 0xe0
 8002b44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b54:	2303      	movs	r3, #3
 8002b56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b5a:	230c      	movs	r3, #12
 8002b5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b64:	4619      	mov	r1, r3
 8002b66:	480a      	ldr	r0, [pc, #40]	; (8002b90 <HAL_FMC_MspInit+0x174>)
 8002b68:	f002 fbba 	bl	80052e0 <HAL_GPIO_Init>
 8002b6c:	e000      	b.n	8002b70 <HAL_FMC_MspInit+0x154>
    return;
 8002b6e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002b70:	37e0      	adds	r7, #224	; 0xe0
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	240010ec 	.word	0x240010ec
 8002b7c:	58024400 	.word	0x58024400
 8002b80:	58021000 	.word	0x58021000
 8002b84:	58021800 	.word	0x58021800
 8002b88:	58020c00 	.word	0x58020c00
 8002b8c:	58021400 	.word	0x58021400
 8002b90:	58021c00 	.word	0x58021c00

08002b94 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002b9c:	f7ff ff3e 	bl	8002a1c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002ba0:	bf00      	nop
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b0ba      	sub	sp, #232	; 0xe8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bb0:	f107 0310 	add.w	r3, r7, #16
 8002bb4:	22c0      	movs	r2, #192	; 0xc0
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f00a f8bf 	bl	800cd3c <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a45      	ldr	r2, [pc, #276]	; (8002cd8 <HAL_SAI_MspInit+0x130>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d13e      	bne.n	8002c46 <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bd8:	f107 0310 	add.w	r3, r7, #16
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f005 f8cf 	bl	8007d80 <HAL_RCCEx_PeriphCLKConfig>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8002be8:	f7fe fd78 	bl	80016dc <Error_Handler>
    }

    if (SAI2_client == 0)
 8002bec:	4b3b      	ldr	r3, [pc, #236]	; (8002cdc <HAL_SAI_MspInit+0x134>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10e      	bne.n	8002c12 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002bf4:	4b3a      	ldr	r3, [pc, #232]	; (8002ce0 <HAL_SAI_MspInit+0x138>)
 8002bf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bfa:	4a39      	ldr	r2, [pc, #228]	; (8002ce0 <HAL_SAI_MspInit+0x138>)
 8002bfc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c00:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c04:	4b36      	ldr	r3, [pc, #216]	; (8002ce0 <HAL_SAI_MspInit+0x138>)
 8002c06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8002c12:	4b32      	ldr	r3, [pc, #200]	; (8002cdc <HAL_SAI_MspInit+0x134>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3301      	adds	r3, #1
 8002c18:	4a30      	ldr	r2, [pc, #192]	; (8002cdc <HAL_SAI_MspInit+0x134>)
 8002c1a:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8002c1c:	23f0      	movs	r3, #240	; 0xf0
 8002c1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c22:	2302      	movs	r3, #2
 8002c24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002c34:	230a      	movs	r3, #10
 8002c36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002c3a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4828      	ldr	r0, [pc, #160]	; (8002ce4 <HAL_SAI_MspInit+0x13c>)
 8002c42:	f002 fb4d 	bl	80052e0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a27      	ldr	r2, [pc, #156]	; (8002ce8 <HAL_SAI_MspInit+0x140>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d13f      	bne.n	8002cd0 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c60:	f107 0310 	add.w	r3, r7, #16
 8002c64:	4618      	mov	r0, r3
 8002c66:	f005 f88b 	bl	8007d80 <HAL_RCCEx_PeriphCLKConfig>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 8002c70:	f7fe fd34 	bl	80016dc <Error_Handler>
    }

      if (SAI2_client == 0)
 8002c74:	4b19      	ldr	r3, [pc, #100]	; (8002cdc <HAL_SAI_MspInit+0x134>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10e      	bne.n	8002c9a <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002c7c:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <HAL_SAI_MspInit+0x138>)
 8002c7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c82:	4a17      	ldr	r2, [pc, #92]	; (8002ce0 <HAL_SAI_MspInit+0x138>)
 8002c84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c88:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c8c:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <HAL_SAI_MspInit+0x138>)
 8002c8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002c9a:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <HAL_SAI_MspInit+0x134>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	4a0e      	ldr	r2, [pc, #56]	; (8002cdc <HAL_SAI_MspInit+0x134>)
 8002ca2:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ca8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cac:	2302      	movs	r3, #2
 8002cae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002cbe:	230a      	movs	r3, #10
 8002cc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cc4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4808      	ldr	r0, [pc, #32]	; (8002cec <HAL_SAI_MspInit+0x144>)
 8002ccc:	f002 fb08 	bl	80052e0 <HAL_GPIO_Init>

    }
}
 8002cd0:	bf00      	nop
 8002cd2:	37e8      	adds	r7, #232	; 0xe8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40015c04 	.word	0x40015c04
 8002cdc:	240010f0 	.word	0x240010f0
 8002ce0:	58024400 	.word	0x58024400
 8002ce4:	58022000 	.word	0x58022000
 8002ce8:	40015c24 	.word	0x40015c24
 8002cec:	58021800 	.word	0x58021800

08002cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cf4:	e7fe      	b.n	8002cf4 <NMI_Handler+0x4>

08002cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cfa:	e7fe      	b.n	8002cfa <HardFault_Handler+0x4>

08002cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d00:	e7fe      	b.n	8002d00 <MemManage_Handler+0x4>

08002d02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d06:	e7fe      	b.n	8002d06 <BusFault_Handler+0x4>

08002d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d0c:	e7fe      	b.n	8002d0c <UsageFault_Handler+0x4>

08002d0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d3c:	f000 f95c 	bl	8002ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d4c:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <_sbrk+0x5c>)
 8002d4e:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <_sbrk+0x60>)
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d58:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <_sbrk+0x64>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d102      	bne.n	8002d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d60:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <_sbrk+0x64>)
 8002d62:	4a12      	ldr	r2, [pc, #72]	; (8002dac <_sbrk+0x68>)
 8002d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d66:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <_sbrk+0x64>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d207      	bcs.n	8002d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d74:	f009 ffea 	bl	800cd4c <__errno>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	220c      	movs	r2, #12
 8002d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d82:	e009      	b.n	8002d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <_sbrk+0x64>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d8a:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <_sbrk+0x64>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	4a05      	ldr	r2, [pc, #20]	; (8002da8 <_sbrk+0x64>)
 8002d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d96:	68fb      	ldr	r3, [r7, #12]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	24080000 	.word	0x24080000
 8002da4:	00000400 	.word	0x00000400
 8002da8:	240010f4 	.word	0x240010f4
 8002dac:	24001248 	.word	0x24001248

08002db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002db4:	4b37      	ldr	r3, [pc, #220]	; (8002e94 <SystemInit+0xe4>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dba:	4a36      	ldr	r2, [pc, #216]	; (8002e94 <SystemInit+0xe4>)
 8002dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002dc4:	4b34      	ldr	r3, [pc, #208]	; (8002e98 <SystemInit+0xe8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	2b06      	cmp	r3, #6
 8002dce:	d807      	bhi.n	8002de0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002dd0:	4b31      	ldr	r3, [pc, #196]	; (8002e98 <SystemInit+0xe8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f023 030f 	bic.w	r3, r3, #15
 8002dd8:	4a2f      	ldr	r2, [pc, #188]	; (8002e98 <SystemInit+0xe8>)
 8002dda:	f043 0307 	orr.w	r3, r3, #7
 8002dde:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002de0:	4b2e      	ldr	r3, [pc, #184]	; (8002e9c <SystemInit+0xec>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a2d      	ldr	r2, [pc, #180]	; (8002e9c <SystemInit+0xec>)
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002dec:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <SystemInit+0xec>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002df2:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <SystemInit+0xec>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4929      	ldr	r1, [pc, #164]	; (8002e9c <SystemInit+0xec>)
 8002df8:	4b29      	ldr	r3, [pc, #164]	; (8002ea0 <SystemInit+0xf0>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002dfe:	4b26      	ldr	r3, [pc, #152]	; (8002e98 <SystemInit+0xe8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d007      	beq.n	8002e1a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e0a:	4b23      	ldr	r3, [pc, #140]	; (8002e98 <SystemInit+0xe8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 030f 	bic.w	r3, r3, #15
 8002e12:	4a21      	ldr	r2, [pc, #132]	; (8002e98 <SystemInit+0xe8>)
 8002e14:	f043 0307 	orr.w	r3, r3, #7
 8002e18:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002e1a:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <SystemInit+0xec>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002e20:	4b1e      	ldr	r3, [pc, #120]	; (8002e9c <SystemInit+0xec>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002e26:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <SystemInit+0xec>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002e2c:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <SystemInit+0xec>)
 8002e2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ea4 <SystemInit+0xf4>)
 8002e30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002e32:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <SystemInit+0xec>)
 8002e34:	4a1c      	ldr	r2, [pc, #112]	; (8002ea8 <SystemInit+0xf8>)
 8002e36:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002e38:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <SystemInit+0xec>)
 8002e3a:	4a1c      	ldr	r2, [pc, #112]	; (8002eac <SystemInit+0xfc>)
 8002e3c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002e3e:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <SystemInit+0xec>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002e44:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <SystemInit+0xec>)
 8002e46:	4a19      	ldr	r2, [pc, #100]	; (8002eac <SystemInit+0xfc>)
 8002e48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002e4a:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <SystemInit+0xec>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <SystemInit+0xec>)
 8002e52:	4a16      	ldr	r2, [pc, #88]	; (8002eac <SystemInit+0xfc>)
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002e56:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <SystemInit+0xec>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <SystemInit+0xec>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a0e      	ldr	r2, [pc, #56]	; (8002e9c <SystemInit+0xec>)
 8002e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <SystemInit+0xec>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002e6e:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <SystemInit+0x100>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <SystemInit+0x104>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e7a:	d202      	bcs.n	8002e82 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002e7c:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <SystemInit+0x108>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e82:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <SystemInit+0x10c>)
 8002e84:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002e88:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002e8a:	bf00      	nop
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000ed00 	.word	0xe000ed00
 8002e98:	52002000 	.word	0x52002000
 8002e9c:	58024400 	.word	0x58024400
 8002ea0:	eaf6ed7f 	.word	0xeaf6ed7f
 8002ea4:	02020200 	.word	0x02020200
 8002ea8:	01ff0000 	.word	0x01ff0000
 8002eac:	01010280 	.word	0x01010280
 8002eb0:	5c001000 	.word	0x5c001000
 8002eb4:	ffff0000 	.word	0xffff0000
 8002eb8:	51008108 	.word	0x51008108
 8002ebc:	52004000 	.word	0x52004000

08002ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ef8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ec4:	f7ff ff74 	bl	8002db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ec8:	480c      	ldr	r0, [pc, #48]	; (8002efc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002eca:	490d      	ldr	r1, [pc, #52]	; (8002f00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ecc:	4a0d      	ldr	r2, [pc, #52]	; (8002f04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ed0:	e002      	b.n	8002ed8 <LoopCopyDataInit>

08002ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ed6:	3304      	adds	r3, #4

08002ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002edc:	d3f9      	bcc.n	8002ed2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ede:	4a0a      	ldr	r2, [pc, #40]	; (8002f08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ee0:	4c0a      	ldr	r4, [pc, #40]	; (8002f0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee4:	e001      	b.n	8002eea <LoopFillZerobss>

08002ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ee8:	3204      	adds	r2, #4

08002eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eec:	d3fb      	bcc.n	8002ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eee:	f009 ff33 	bl	800cd58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ef2:	f7fd fbcb 	bl	800068c <main>
  bx  lr
 8002ef6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ef8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002efc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002f00:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8002f04:	0800d7bc 	.word	0x0800d7bc
  ldr r2, =_sbss
 8002f08:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8002f0c:	24001244 	.word	0x24001244

08002f10 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f10:	e7fe      	b.n	8002f10 <ADC3_IRQHandler>
	...

08002f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f1a:	2003      	movs	r0, #3
 8002f1c:	f001 fa26 	bl	800436c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f20:	f004 fd58 	bl	80079d4 <HAL_RCC_GetSysClockFreq>
 8002f24:	4602      	mov	r2, r0
 8002f26:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <HAL_Init+0x68>)
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	0a1b      	lsrs	r3, r3, #8
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	4913      	ldr	r1, [pc, #76]	; (8002f80 <HAL_Init+0x6c>)
 8002f32:	5ccb      	ldrb	r3, [r1, r3]
 8002f34:	f003 031f 	and.w	r3, r3, #31
 8002f38:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f3e:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <HAL_Init+0x68>)
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	4a0e      	ldr	r2, [pc, #56]	; (8002f80 <HAL_Init+0x6c>)
 8002f48:	5cd3      	ldrb	r3, [r2, r3]
 8002f4a:	f003 031f 	and.w	r3, r3, #31
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	fa22 f303 	lsr.w	r3, r2, r3
 8002f54:	4a0b      	ldr	r2, [pc, #44]	; (8002f84 <HAL_Init+0x70>)
 8002f56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f58:	4a0b      	ldr	r2, [pc, #44]	; (8002f88 <HAL_Init+0x74>)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f000 f814 	bl	8002f8c <HAL_InitTick>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e002      	b.n	8002f74 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f6e:	f7fe fe33 	bl	8001bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	58024400 	.word	0x58024400
 8002f80:	0800d740 	.word	0x0800d740
 8002f84:	24000004 	.word	0x24000004
 8002f88:	24000000 	.word	0x24000000

08002f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f94:	4b15      	ldr	r3, [pc, #84]	; (8002fec <HAL_InitTick+0x60>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e021      	b.n	8002fe4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002fa0:	4b13      	ldr	r3, [pc, #76]	; (8002ff0 <HAL_InitTick+0x64>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	4b11      	ldr	r3, [pc, #68]	; (8002fec <HAL_InitTick+0x60>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f001 f9fd 	bl	80043b6 <HAL_SYSTICK_Config>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e00e      	b.n	8002fe4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b0f      	cmp	r3, #15
 8002fca:	d80a      	bhi.n	8002fe2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd4:	f001 f9d5 	bl	8004382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fd8:	4a06      	ldr	r2, [pc, #24]	; (8002ff4 <HAL_InitTick+0x68>)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e000      	b.n	8002fe4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	2400000c 	.word	0x2400000c
 8002ff0:	24000000 	.word	0x24000000
 8002ff4:	24000008 	.word	0x24000008

08002ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_IncTick+0x20>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_IncTick+0x24>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4413      	add	r3, r2
 8003008:	4a04      	ldr	r2, [pc, #16]	; (800301c <HAL_IncTick+0x24>)
 800300a:	6013      	str	r3, [r2, #0]
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	2400000c 	.word	0x2400000c
 800301c:	240010f8 	.word	0x240010f8

08003020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return uwTick;
 8003024:	4b03      	ldr	r3, [pc, #12]	; (8003034 <HAL_GetTick+0x14>)
 8003026:	681b      	ldr	r3, [r3, #0]
}
 8003028:	4618      	mov	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	240010f8 	.word	0x240010f8

08003038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003040:	f7ff ffee 	bl	8003020 <HAL_GetTick>
 8003044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d005      	beq.n	800305e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <HAL_Delay+0x44>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800305e:	bf00      	nop
 8003060:	f7ff ffde 	bl	8003020 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	429a      	cmp	r2, r3
 800306e:	d8f7      	bhi.n	8003060 <HAL_Delay+0x28>
  {
  }
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	2400000c 	.word	0x2400000c

08003080 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003084:	4b03      	ldr	r3, [pc, #12]	; (8003094 <HAL_GetREVID+0x14>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	0c1b      	lsrs	r3, r3, #16
}
 800308a:	4618      	mov	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	5c001000 	.word	0x5c001000

08003098 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80030a0:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80030a8:	4904      	ldr	r1, [pc, #16]	; (80030bc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	604b      	str	r3, [r1, #4]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	58000400 	.word	0x58000400

080030c0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80030ca:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	43db      	mvns	r3, r3
 80030d2:	401a      	ands	r2, r3
 80030d4:	4904      	ldr	r1, [pc, #16]	; (80030e8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	4313      	orrs	r3, r2
 80030da:	604b      	str	r3, [r1, #4]
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	58000400 	.word	0x58000400

080030ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	609a      	str	r2, [r3, #8]
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	609a      	str	r2, [r3, #8]
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003148:	4618      	mov	r0, r3
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	3360      	adds	r3, #96	; 0x60
 8003166:	461a      	mov	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	430b      	orrs	r3, r1
 8003182:	431a      	orrs	r2, r3
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003188:	bf00      	nop
 800318a:	371c      	adds	r7, #28
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f003 031f 	and.w	r3, r3, #31
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	fa01 f303 	lsl.w	r3, r1, r3
 80031b4:	431a      	orrs	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	611a      	str	r2, [r3, #16]
}
 80031ba:	bf00      	nop
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b087      	sub	sp, #28
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3360      	adds	r3, #96	; 0x60
 80031d6:	461a      	mov	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	601a      	str	r2, [r3, #0]
  }
}
 80031f0:	bf00      	nop
 80031f2:	371c      	adds	r7, #28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	3330      	adds	r3, #48	; 0x30
 800320c:	461a      	mov	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	0a1b      	lsrs	r3, r3, #8
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	f003 030c 	and.w	r3, r3, #12
 8003218:	4413      	add	r3, r2
 800321a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	211f      	movs	r1, #31
 8003228:	fa01 f303 	lsl.w	r3, r1, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	401a      	ands	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	0e9b      	lsrs	r3, r3, #26
 8003234:	f003 011f 	and.w	r1, r3, #31
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f003 031f 	and.w	r3, r3, #31
 800323e:	fa01 f303 	lsl.w	r3, r1, r3
 8003242:	431a      	orrs	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003248:	bf00      	nop
 800324a:	371c      	adds	r7, #28
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	3314      	adds	r3, #20
 8003264:	461a      	mov	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	0e5b      	lsrs	r3, r3, #25
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	4413      	add	r3, r2
 8003272:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	0d1b      	lsrs	r3, r3, #20
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	2107      	movs	r1, #7
 8003282:	fa01 f303 	lsl.w	r3, r1, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	401a      	ands	r2, r3
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	0d1b      	lsrs	r3, r3, #20
 800328e:	f003 031f 	and.w	r3, r3, #31
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	fa01 f303 	lsl.w	r3, r1, r3
 8003298:	431a      	orrs	r2, r3
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800329e:	bf00      	nop
 80032a0:	371c      	adds	r7, #28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032c4:	43db      	mvns	r3, r3
 80032c6:	401a      	ands	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f003 0318 	and.w	r3, r3, #24
 80032ce:	4908      	ldr	r1, [pc, #32]	; (80032f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80032d0:	40d9      	lsrs	r1, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	400b      	ands	r3, r1
 80032d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032da:	431a      	orrs	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80032e2:	bf00      	nop
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	000fffff 	.word	0x000fffff

080032f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	4b04      	ldr	r3, [pc, #16]	; (8003314 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003302:	4013      	ands	r3, r2
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6093      	str	r3, [r2, #8]
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	5fffffc0 	.word	0x5fffffc0

08003318 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800332c:	d101      	bne.n	8003332 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	4b05      	ldr	r3, [pc, #20]	; (8003364 <LL_ADC_EnableInternalRegulator+0x24>)
 800334e:	4013      	ands	r3, r2
 8003350:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	6fffffc0 	.word	0x6fffffc0

08003368 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003378:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800337c:	d101      	bne.n	8003382 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <LL_ADC_IsEnabled+0x18>
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <LL_ADC_IsEnabled+0x1a>
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d101      	bne.n	80033ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d101      	bne.n	80033f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b089      	sub	sp, #36	; 0x24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800340c:	2300      	movs	r3, #0
 800340e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003410:	2300      	movs	r3, #0
 8003412:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e18f      	b.n	800373e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003428:	2b00      	cmp	r3, #0
 800342a:	d109      	bne.n	8003440 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7fe fbed 	bl	8001c0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff ff67 	bl	8003318 <LL_ADC_IsDeepPowerDownEnabled>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d004      	beq.n	800345a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff ff4d 	bl	80032f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff ff82 	bl	8003368 <LL_ADC_IsInternalRegulatorEnabled>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d114      	bne.n	8003494 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff ff66 	bl	8003340 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003474:	4b87      	ldr	r3, [pc, #540]	; (8003694 <HAL_ADC_Init+0x290>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	099b      	lsrs	r3, r3, #6
 800347a:	4a87      	ldr	r2, [pc, #540]	; (8003698 <HAL_ADC_Init+0x294>)
 800347c:	fba2 2303 	umull	r2, r3, r2, r3
 8003480:	099b      	lsrs	r3, r3, #6
 8003482:	3301      	adds	r3, #1
 8003484:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003486:	e002      	b.n	800348e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	3b01      	subs	r3, #1
 800348c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1f9      	bne.n	8003488 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff ff65 	bl	8003368 <LL_ADC_IsInternalRegulatorEnabled>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10d      	bne.n	80034c0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a8:	f043 0210 	orr.w	r2, r3, #16
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b4:	f043 0201 	orr.w	r2, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff ff76 	bl	80033b6 <LL_ADC_REG_IsConversionOngoing>
 80034ca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d0:	f003 0310 	and.w	r3, r3, #16
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f040 8129 	bne.w	800372c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f040 8125 	bne.w	800372c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80034ea:	f043 0202 	orr.w	r2, r3, #2
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff ff4a 	bl	8003390 <LL_ADC_IsEnabled>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d136      	bne.n	8003570 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a65      	ldr	r2, [pc, #404]	; (800369c <HAL_ADC_Init+0x298>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d004      	beq.n	8003516 <HAL_ADC_Init+0x112>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a63      	ldr	r2, [pc, #396]	; (80036a0 <HAL_ADC_Init+0x29c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d10e      	bne.n	8003534 <HAL_ADC_Init+0x130>
 8003516:	4861      	ldr	r0, [pc, #388]	; (800369c <HAL_ADC_Init+0x298>)
 8003518:	f7ff ff3a 	bl	8003390 <LL_ADC_IsEnabled>
 800351c:	4604      	mov	r4, r0
 800351e:	4860      	ldr	r0, [pc, #384]	; (80036a0 <HAL_ADC_Init+0x29c>)
 8003520:	f7ff ff36 	bl	8003390 <LL_ADC_IsEnabled>
 8003524:	4603      	mov	r3, r0
 8003526:	4323      	orrs	r3, r4
 8003528:	2b00      	cmp	r3, #0
 800352a:	bf0c      	ite	eq
 800352c:	2301      	moveq	r3, #1
 800352e:	2300      	movne	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	e008      	b.n	8003546 <HAL_ADC_Init+0x142>
 8003534:	485b      	ldr	r0, [pc, #364]	; (80036a4 <HAL_ADC_Init+0x2a0>)
 8003536:	f7ff ff2b 	bl	8003390 <LL_ADC_IsEnabled>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	bf0c      	ite	eq
 8003540:	2301      	moveq	r3, #1
 8003542:	2300      	movne	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d012      	beq.n	8003570 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a53      	ldr	r2, [pc, #332]	; (800369c <HAL_ADC_Init+0x298>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d004      	beq.n	800355e <HAL_ADC_Init+0x15a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a51      	ldr	r2, [pc, #324]	; (80036a0 <HAL_ADC_Init+0x29c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d101      	bne.n	8003562 <HAL_ADC_Init+0x15e>
 800355e:	4a52      	ldr	r2, [pc, #328]	; (80036a8 <HAL_ADC_Init+0x2a4>)
 8003560:	e000      	b.n	8003564 <HAL_ADC_Init+0x160>
 8003562:	4a52      	ldr	r2, [pc, #328]	; (80036ac <HAL_ADC_Init+0x2a8>)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	4619      	mov	r1, r3
 800356a:	4610      	mov	r0, r2
 800356c:	f7ff fdbe 	bl	80030ec <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003570:	f7ff fd86 	bl	8003080 <HAL_GetREVID>
 8003574:	4603      	mov	r3, r0
 8003576:	f241 0203 	movw	r2, #4099	; 0x1003
 800357a:	4293      	cmp	r3, r2
 800357c:	d914      	bls.n	80035a8 <HAL_ADC_Init+0x1a4>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2b10      	cmp	r3, #16
 8003584:	d110      	bne.n	80035a8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	7d5b      	ldrb	r3, [r3, #21]
 800358a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003590:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003596:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	7f1b      	ldrb	r3, [r3, #28]
 800359c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800359e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035a0:	f043 030c 	orr.w	r3, r3, #12
 80035a4:	61bb      	str	r3, [r7, #24]
 80035a6:	e00d      	b.n	80035c4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	7d5b      	ldrb	r3, [r3, #21]
 80035ac:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035b2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80035b8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	7f1b      	ldrb	r3, [r3, #28]
 80035be:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	7f1b      	ldrb	r3, [r3, #28]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d106      	bne.n	80035da <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	045b      	lsls	r3, r3, #17
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d009      	beq.n	80035f6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	4b2c      	ldr	r3, [pc, #176]	; (80036b0 <HAL_ADC_Init+0x2ac>)
 80035fe:	4013      	ands	r3, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	69b9      	ldr	r1, [r7, #24]
 8003606:	430b      	orrs	r3, r1
 8003608:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff fed1 	bl	80033b6 <LL_ADC_REG_IsConversionOngoing>
 8003614:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff fede 	bl	80033dc <LL_ADC_INJ_IsConversionOngoing>
 8003620:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d15f      	bne.n	80036e8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d15c      	bne.n	80036e8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	7d1b      	ldrb	r3, [r3, #20]
 8003632:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003638:	4313      	orrs	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	4b1c      	ldr	r3, [pc, #112]	; (80036b4 <HAL_ADC_Init+0x2b0>)
 8003644:	4013      	ands	r3, r2
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6812      	ldr	r2, [r2, #0]
 800364a:	69b9      	ldr	r1, [r7, #24]
 800364c:	430b      	orrs	r3, r1
 800364e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003656:	2b01      	cmp	r3, #1
 8003658:	d130      	bne.n	80036bc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <HAL_ADC_Init+0x2b4>)
 8003668:	4013      	ands	r3, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800366e:	3a01      	subs	r2, #1
 8003670:	0411      	lsls	r1, r2, #16
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003676:	4311      	orrs	r1, r2
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800367c:	4311      	orrs	r1, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003682:	430a      	orrs	r2, r1
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0201 	orr.w	r2, r2, #1
 800368e:	611a      	str	r2, [r3, #16]
 8003690:	e01c      	b.n	80036cc <HAL_ADC_Init+0x2c8>
 8003692:	bf00      	nop
 8003694:	24000000 	.word	0x24000000
 8003698:	053e2d63 	.word	0x053e2d63
 800369c:	40022000 	.word	0x40022000
 80036a0:	40022100 	.word	0x40022100
 80036a4:	58026000 	.word	0x58026000
 80036a8:	40022300 	.word	0x40022300
 80036ac:	58026300 	.word	0x58026300
 80036b0:	fff0c003 	.word	0xfff0c003
 80036b4:	ffffbffc 	.word	0xffffbffc
 80036b8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fb80 	bl	8003de8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d10c      	bne.n	800370a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	f023 010f 	bic.w	r1, r3, #15
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	1e5a      	subs	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	631a      	str	r2, [r3, #48]	; 0x30
 8003708:	e007      	b.n	800371a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 020f 	bic.w	r2, r2, #15
 8003718:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371e:	f023 0303 	bic.w	r3, r3, #3
 8003722:	f043 0201 	orr.w	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	655a      	str	r2, [r3, #84]	; 0x54
 800372a:	e007      	b.n	800373c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003730:	f043 0210 	orr.w	r2, r3, #16
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800373c:	7ffb      	ldrb	r3, [r7, #31]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3724      	adds	r7, #36	; 0x24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd90      	pop	{r4, r7, pc}
 8003746:	bf00      	nop

08003748 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003748:	b590      	push	{r4, r7, lr}
 800374a:	b0a1      	sub	sp, #132	; 0x84
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	4a9d      	ldr	r2, [pc, #628]	; (80039d8 <HAL_ADC_ConfigChannel+0x290>)
 8003762:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x2a>
 800376e:	2302      	movs	r3, #2
 8003770:	e321      	b.n	8003db6 <HAL_ADC_ConfigChannel+0x66e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff fe19 	bl	80033b6 <LL_ADC_REG_IsConversionOngoing>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	f040 8306 	bne.w	8003d98 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003794:	2b00      	cmp	r3, #0
 8003796:	d108      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x62>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	0e9b      	lsrs	r3, r3, #26
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	2201      	movs	r2, #1
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	e016      	b.n	80037d8 <HAL_ADC_ConfigChannel+0x90>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037b2:	fa93 f3a3 	rbit	r3, r3
 80037b6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037ba:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80037bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80037c2:	2320      	movs	r3, #32
 80037c4:	e003      	b.n	80037ce <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80037c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037c8:	fab3 f383 	clz	r3, r3
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	2201      	movs	r2, #1
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6812      	ldr	r2, [r2, #0]
 80037dc:	69d1      	ldr	r1, [r2, #28]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6812      	ldr	r2, [r2, #0]
 80037e2:	430b      	orrs	r3, r1
 80037e4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	6859      	ldr	r1, [r3, #4]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	f7ff fd02 	bl	80031fc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff fdda 	bl	80033b6 <LL_ADC_REG_IsConversionOngoing>
 8003802:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff fde7 	bl	80033dc <LL_ADC_INJ_IsConversionOngoing>
 800380e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003812:	2b00      	cmp	r3, #0
 8003814:	f040 80b3 	bne.w	800397e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003818:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800381a:	2b00      	cmp	r3, #0
 800381c:	f040 80af 	bne.w	800397e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	6819      	ldr	r1, [r3, #0]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	461a      	mov	r2, r3
 800382e:	f7ff fd11 	bl	8003254 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003832:	4b6a      	ldr	r3, [pc, #424]	; (80039dc <HAL_ADC_ConfigChannel+0x294>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800383a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800383e:	d10b      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x110>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	089b      	lsrs	r3, r3, #2
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	e01d      	b.n	8003894 <HAL_ADC_ConfigChannel+0x14c>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f003 0310 	and.w	r3, r3, #16
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10b      	bne.n	800387e <HAL_ADC_ConfigChannel+0x136>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	089b      	lsrs	r3, r3, #2
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	e00a      	b.n	8003894 <HAL_ADC_ConfigChannel+0x14c>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	695a      	ldr	r2, [r3, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	089b      	lsrs	r3, r3, #2
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	2b04      	cmp	r3, #4
 800389c:	d027      	beq.n	80038ee <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	6919      	ldr	r1, [r3, #16]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038ac:	f7ff fc52 	bl	8003154 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6818      	ldr	r0, [r3, #0]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	6919      	ldr	r1, [r3, #16]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	7e5b      	ldrb	r3, [r3, #25]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d102      	bne.n	80038c6 <HAL_ADC_ConfigChannel+0x17e>
 80038c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80038c4:	e000      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x180>
 80038c6:	2300      	movs	r3, #0
 80038c8:	461a      	mov	r2, r3
 80038ca:	f7ff fc7c 	bl	80031c6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	6919      	ldr	r1, [r3, #16]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	7e1b      	ldrb	r3, [r3, #24]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d102      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x19c>
 80038de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038e2:	e000      	b.n	80038e6 <HAL_ADC_ConfigChannel+0x19e>
 80038e4:	2300      	movs	r3, #0
 80038e6:	461a      	mov	r2, r3
 80038e8:	f7ff fc54 	bl	8003194 <LL_ADC_SetDataRightShift>
 80038ec:	e047      	b.n	800397e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	069b      	lsls	r3, r3, #26
 80038fe:	429a      	cmp	r2, r3
 8003900:	d107      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003910:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003918:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	069b      	lsls	r3, r3, #26
 8003922:	429a      	cmp	r2, r3
 8003924:	d107      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003934:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800393c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	069b      	lsls	r3, r3, #26
 8003946:	429a      	cmp	r2, r3
 8003948:	d107      	bne.n	800395a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003958:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003960:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	069b      	lsls	r3, r3, #26
 800396a:	429a      	cmp	r2, r3
 800396c:	d107      	bne.n	800397e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800397c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff fd04 	bl	8003390 <LL_ADC_IsEnabled>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	f040 820d 	bne.w	8003daa <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6818      	ldr	r0, [r3, #0]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	6819      	ldr	r1, [r3, #0]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	461a      	mov	r2, r3
 800399e:	f7ff fc85 	bl	80032ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	4a0c      	ldr	r2, [pc, #48]	; (80039d8 <HAL_ADC_ConfigChannel+0x290>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	f040 8133 	bne.w	8003c14 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d110      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x298>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	0e9b      	lsrs	r3, r3, #26
 80039c4:	3301      	adds	r3, #1
 80039c6:	f003 031f 	and.w	r3, r3, #31
 80039ca:	2b09      	cmp	r3, #9
 80039cc:	bf94      	ite	ls
 80039ce:	2301      	movls	r3, #1
 80039d0:	2300      	movhi	r3, #0
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	e01e      	b.n	8003a14 <HAL_ADC_ConfigChannel+0x2cc>
 80039d6:	bf00      	nop
 80039d8:	47ff0000 	.word	0x47ff0000
 80039dc:	5c001000 	.word	0x5c001000
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039e8:	fa93 f3a3 	rbit	r3, r3
 80039ec:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80039ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80039f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80039f8:	2320      	movs	r3, #32
 80039fa:	e003      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80039fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039fe:	fab3 f383 	clz	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	3301      	adds	r3, #1
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	2b09      	cmp	r3, #9
 8003a0c:	bf94      	ite	ls
 8003a0e:	2301      	movls	r3, #1
 8003a10:	2300      	movhi	r3, #0
 8003a12:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d079      	beq.n	8003b0c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d107      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x2ec>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	0e9b      	lsrs	r3, r3, #26
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	069b      	lsls	r3, r3, #26
 8003a2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a32:	e015      	b.n	8003a60 <HAL_ADC_ConfigChannel+0x318>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a3c:	fa93 f3a3 	rbit	r3, r3
 8003a40:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a44:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003a4c:	2320      	movs	r3, #32
 8003a4e:	e003      	b.n	8003a58 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a52:	fab3 f383 	clz	r3, r3
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	3301      	adds	r3, #1
 8003a5a:	069b      	lsls	r3, r3, #26
 8003a5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d109      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0x338>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	0e9b      	lsrs	r3, r3, #26
 8003a72:	3301      	adds	r3, #1
 8003a74:	f003 031f 	and.w	r3, r3, #31
 8003a78:	2101      	movs	r1, #1
 8003a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7e:	e017      	b.n	8003ab0 <HAL_ADC_ConfigChannel+0x368>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a88:	fa93 f3a3 	rbit	r3, r3
 8003a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a90:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003a98:	2320      	movs	r3, #32
 8003a9a:	e003      	b.n	8003aa4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a9e:	fab3 f383 	clz	r3, r3
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	f003 031f 	and.w	r3, r3, #31
 8003aaa:	2101      	movs	r1, #1
 8003aac:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab0:	ea42 0103 	orr.w	r1, r2, r3
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10a      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x38e>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	0e9b      	lsrs	r3, r3, #26
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	f003 021f 	and.w	r2, r3, #31
 8003acc:	4613      	mov	r3, r2
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	4413      	add	r3, r2
 8003ad2:	051b      	lsls	r3, r3, #20
 8003ad4:	e018      	b.n	8003b08 <HAL_ADC_ConfigChannel+0x3c0>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ade:	fa93 f3a3 	rbit	r3, r3
 8003ae2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003aee:	2320      	movs	r3, #32
 8003af0:	e003      	b.n	8003afa <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af4:	fab3 f383 	clz	r3, r3
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	3301      	adds	r3, #1
 8003afc:	f003 021f 	and.w	r2, r3, #31
 8003b00:	4613      	mov	r3, r2
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	4413      	add	r3, r2
 8003b06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	e07e      	b.n	8003c0a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d107      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x3e0>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	0e9b      	lsrs	r3, r3, #26
 8003b1e:	3301      	adds	r3, #1
 8003b20:	069b      	lsls	r3, r3, #26
 8003b22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b26:	e015      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x40c>
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	fa93 f3a3 	rbit	r3, r3
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003b40:	2320      	movs	r3, #32
 8003b42:	e003      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b46:	fab3 f383 	clz	r3, r3
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	069b      	lsls	r3, r3, #26
 8003b50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d109      	bne.n	8003b74 <HAL_ADC_ConfigChannel+0x42c>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	0e9b      	lsrs	r3, r3, #26
 8003b66:	3301      	adds	r3, #1
 8003b68:	f003 031f 	and.w	r3, r3, #31
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b72:	e017      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x45c>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	fa93 f3a3 	rbit	r3, r3
 8003b80:	61bb      	str	r3, [r7, #24]
  return result;
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003b8c:	2320      	movs	r3, #32
 8003b8e:	e003      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	fab3 f383 	clz	r3, r3
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	3301      	adds	r3, #1
 8003b9a:	f003 031f 	and.w	r3, r3, #31
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba4:	ea42 0103 	orr.w	r1, r2, r3
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10d      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x488>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	0e9b      	lsrs	r3, r3, #26
 8003bba:	3301      	adds	r3, #1
 8003bbc:	f003 021f 	and.w	r2, r3, #31
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3b1e      	subs	r3, #30
 8003bc8:	051b      	lsls	r3, r3, #20
 8003bca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bce:	e01b      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x4c0>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	fa93 f3a3 	rbit	r3, r3
 8003bdc:	60fb      	str	r3, [r7, #12]
  return result;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003be8:	2320      	movs	r3, #32
 8003bea:	e003      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	fab3 f383 	clz	r3, r3
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	f003 021f 	and.w	r2, r3, #31
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	4413      	add	r3, r2
 8003c00:	3b1e      	subs	r3, #30
 8003c02:	051b      	lsls	r3, r3, #20
 8003c04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	6892      	ldr	r2, [r2, #8]
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f7ff fb20 	bl	8003254 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f280 80c6 	bge.w	8003daa <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a67      	ldr	r2, [pc, #412]	; (8003dc0 <HAL_ADC_ConfigChannel+0x678>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d004      	beq.n	8003c32 <HAL_ADC_ConfigChannel+0x4ea>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a65      	ldr	r2, [pc, #404]	; (8003dc4 <HAL_ADC_ConfigChannel+0x67c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d101      	bne.n	8003c36 <HAL_ADC_ConfigChannel+0x4ee>
 8003c32:	4b65      	ldr	r3, [pc, #404]	; (8003dc8 <HAL_ADC_ConfigChannel+0x680>)
 8003c34:	e000      	b.n	8003c38 <HAL_ADC_ConfigChannel+0x4f0>
 8003c36:	4b65      	ldr	r3, [pc, #404]	; (8003dcc <HAL_ADC_ConfigChannel+0x684>)
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff fa7d 	bl	8003138 <LL_ADC_GetCommonPathInternalCh>
 8003c3e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a5e      	ldr	r2, [pc, #376]	; (8003dc0 <HAL_ADC_ConfigChannel+0x678>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d004      	beq.n	8003c54 <HAL_ADC_ConfigChannel+0x50c>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a5d      	ldr	r2, [pc, #372]	; (8003dc4 <HAL_ADC_ConfigChannel+0x67c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d10e      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x52a>
 8003c54:	485a      	ldr	r0, [pc, #360]	; (8003dc0 <HAL_ADC_ConfigChannel+0x678>)
 8003c56:	f7ff fb9b 	bl	8003390 <LL_ADC_IsEnabled>
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	4859      	ldr	r0, [pc, #356]	; (8003dc4 <HAL_ADC_ConfigChannel+0x67c>)
 8003c5e:	f7ff fb97 	bl	8003390 <LL_ADC_IsEnabled>
 8003c62:	4603      	mov	r3, r0
 8003c64:	4323      	orrs	r3, r4
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	bf0c      	ite	eq
 8003c6a:	2301      	moveq	r3, #1
 8003c6c:	2300      	movne	r3, #0
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	e008      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x53c>
 8003c72:	4857      	ldr	r0, [pc, #348]	; (8003dd0 <HAL_ADC_ConfigChannel+0x688>)
 8003c74:	f7ff fb8c 	bl	8003390 <LL_ADC_IsEnabled>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	bf0c      	ite	eq
 8003c7e:	2301      	moveq	r3, #1
 8003c80:	2300      	movne	r3, #0
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d07d      	beq.n	8003d84 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a51      	ldr	r2, [pc, #324]	; (8003dd4 <HAL_ADC_ConfigChannel+0x68c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d130      	bne.n	8003cf4 <HAL_ADC_ConfigChannel+0x5ac>
 8003c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d12b      	bne.n	8003cf4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a4b      	ldr	r2, [pc, #300]	; (8003dd0 <HAL_ADC_ConfigChannel+0x688>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	f040 8081 	bne.w	8003daa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a44      	ldr	r2, [pc, #272]	; (8003dc0 <HAL_ADC_ConfigChannel+0x678>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <HAL_ADC_ConfigChannel+0x574>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a43      	ldr	r2, [pc, #268]	; (8003dc4 <HAL_ADC_ConfigChannel+0x67c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d101      	bne.n	8003cc0 <HAL_ADC_ConfigChannel+0x578>
 8003cbc:	4a42      	ldr	r2, [pc, #264]	; (8003dc8 <HAL_ADC_ConfigChannel+0x680>)
 8003cbe:	e000      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x57a>
 8003cc0:	4a42      	ldr	r2, [pc, #264]	; (8003dcc <HAL_ADC_ConfigChannel+0x684>)
 8003cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4610      	mov	r0, r2
 8003ccc:	f7ff fa21 	bl	8003112 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cd0:	4b41      	ldr	r3, [pc, #260]	; (8003dd8 <HAL_ADC_ConfigChannel+0x690>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	099b      	lsrs	r3, r3, #6
 8003cd6:	4a41      	ldr	r2, [pc, #260]	; (8003ddc <HAL_ADC_ConfigChannel+0x694>)
 8003cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cdc:	099b      	lsrs	r3, r3, #6
 8003cde:	3301      	adds	r3, #1
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003ce4:	e002      	b.n	8003cec <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f9      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cf2:	e05a      	b.n	8003daa <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a39      	ldr	r2, [pc, #228]	; (8003de0 <HAL_ADC_ConfigChannel+0x698>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d11e      	bne.n	8003d3c <HAL_ADC_ConfigChannel+0x5f4>
 8003cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d119      	bne.n	8003d3c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a30      	ldr	r2, [pc, #192]	; (8003dd0 <HAL_ADC_ConfigChannel+0x688>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d14b      	bne.n	8003daa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a2a      	ldr	r2, [pc, #168]	; (8003dc0 <HAL_ADC_ConfigChannel+0x678>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d004      	beq.n	8003d26 <HAL_ADC_ConfigChannel+0x5de>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a28      	ldr	r2, [pc, #160]	; (8003dc4 <HAL_ADC_ConfigChannel+0x67c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d101      	bne.n	8003d2a <HAL_ADC_ConfigChannel+0x5e2>
 8003d26:	4a28      	ldr	r2, [pc, #160]	; (8003dc8 <HAL_ADC_ConfigChannel+0x680>)
 8003d28:	e000      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x5e4>
 8003d2a:	4a28      	ldr	r2, [pc, #160]	; (8003dcc <HAL_ADC_ConfigChannel+0x684>)
 8003d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d32:	4619      	mov	r1, r3
 8003d34:	4610      	mov	r0, r2
 8003d36:	f7ff f9ec 	bl	8003112 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d3a:	e036      	b.n	8003daa <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a28      	ldr	r2, [pc, #160]	; (8003de4 <HAL_ADC_ConfigChannel+0x69c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d131      	bne.n	8003daa <HAL_ADC_ConfigChannel+0x662>
 8003d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d12c      	bne.n	8003daa <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a1e      	ldr	r2, [pc, #120]	; (8003dd0 <HAL_ADC_ConfigChannel+0x688>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d127      	bne.n	8003daa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a18      	ldr	r2, [pc, #96]	; (8003dc0 <HAL_ADC_ConfigChannel+0x678>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d004      	beq.n	8003d6e <HAL_ADC_ConfigChannel+0x626>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a16      	ldr	r2, [pc, #88]	; (8003dc4 <HAL_ADC_ConfigChannel+0x67c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d101      	bne.n	8003d72 <HAL_ADC_ConfigChannel+0x62a>
 8003d6e:	4a16      	ldr	r2, [pc, #88]	; (8003dc8 <HAL_ADC_ConfigChannel+0x680>)
 8003d70:	e000      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x62c>
 8003d72:	4a16      	ldr	r2, [pc, #88]	; (8003dcc <HAL_ADC_ConfigChannel+0x684>)
 8003d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	f7ff f9c8 	bl	8003112 <LL_ADC_SetCommonPathInternalCh>
 8003d82:	e012      	b.n	8003daa <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d88:	f043 0220 	orr.w	r2, r3, #32
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003d96:	e008      	b.n	8003daa <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9c:	f043 0220 	orr.w	r2, r3, #32
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003db2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3784      	adds	r7, #132	; 0x84
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd90      	pop	{r4, r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40022000 	.word	0x40022000
 8003dc4:	40022100 	.word	0x40022100
 8003dc8:	40022300 	.word	0x40022300
 8003dcc:	58026300 	.word	0x58026300
 8003dd0:	58026000 	.word	0x58026000
 8003dd4:	cb840000 	.word	0xcb840000
 8003dd8:	24000000 	.word	0x24000000
 8003ddc:	053e2d63 	.word	0x053e2d63
 8003de0:	c7520000 	.word	0xc7520000
 8003de4:	cfb80000 	.word	0xcfb80000

08003de8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a7a      	ldr	r2, [pc, #488]	; (8003fe0 <ADC_ConfigureBoostMode+0x1f8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d004      	beq.n	8003e04 <ADC_ConfigureBoostMode+0x1c>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a79      	ldr	r2, [pc, #484]	; (8003fe4 <ADC_ConfigureBoostMode+0x1fc>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d109      	bne.n	8003e18 <ADC_ConfigureBoostMode+0x30>
 8003e04:	4b78      	ldr	r3, [pc, #480]	; (8003fe8 <ADC_ConfigureBoostMode+0x200>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	bf14      	ite	ne
 8003e10:	2301      	movne	r3, #1
 8003e12:	2300      	moveq	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	e008      	b.n	8003e2a <ADC_ConfigureBoostMode+0x42>
 8003e18:	4b74      	ldr	r3, [pc, #464]	; (8003fec <ADC_ConfigureBoostMode+0x204>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	bf14      	ite	ne
 8003e24:	2301      	movne	r3, #1
 8003e26:	2300      	moveq	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d01c      	beq.n	8003e68 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003e2e:	f003 ff4b 	bl	8007cc8 <HAL_RCC_GetHCLKFreq>
 8003e32:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e3c:	d010      	beq.n	8003e60 <ADC_ConfigureBoostMode+0x78>
 8003e3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e42:	d873      	bhi.n	8003f2c <ADC_ConfigureBoostMode+0x144>
 8003e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e48:	d002      	beq.n	8003e50 <ADC_ConfigureBoostMode+0x68>
 8003e4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e4e:	d16d      	bne.n	8003f2c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	0c1b      	lsrs	r3, r3, #16
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5c:	60fb      	str	r3, [r7, #12]
        break;
 8003e5e:	e068      	b.n	8003f32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	089b      	lsrs	r3, r3, #2
 8003e64:	60fb      	str	r3, [r7, #12]
        break;
 8003e66:	e064      	b.n	8003f32 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003e68:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003e6c:	f04f 0100 	mov.w	r1, #0
 8003e70:	f005 f990 	bl	8009194 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e74:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003e7e:	d051      	beq.n	8003f24 <ADC_ConfigureBoostMode+0x13c>
 8003e80:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003e84:	d854      	bhi.n	8003f30 <ADC_ConfigureBoostMode+0x148>
 8003e86:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003e8a:	d047      	beq.n	8003f1c <ADC_ConfigureBoostMode+0x134>
 8003e8c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003e90:	d84e      	bhi.n	8003f30 <ADC_ConfigureBoostMode+0x148>
 8003e92:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003e96:	d03d      	beq.n	8003f14 <ADC_ConfigureBoostMode+0x12c>
 8003e98:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003e9c:	d848      	bhi.n	8003f30 <ADC_ConfigureBoostMode+0x148>
 8003e9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ea2:	d033      	beq.n	8003f0c <ADC_ConfigureBoostMode+0x124>
 8003ea4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ea8:	d842      	bhi.n	8003f30 <ADC_ConfigureBoostMode+0x148>
 8003eaa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003eae:	d029      	beq.n	8003f04 <ADC_ConfigureBoostMode+0x11c>
 8003eb0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003eb4:	d83c      	bhi.n	8003f30 <ADC_ConfigureBoostMode+0x148>
 8003eb6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003eba:	d01a      	beq.n	8003ef2 <ADC_ConfigureBoostMode+0x10a>
 8003ebc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003ec0:	d836      	bhi.n	8003f30 <ADC_ConfigureBoostMode+0x148>
 8003ec2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003ec6:	d014      	beq.n	8003ef2 <ADC_ConfigureBoostMode+0x10a>
 8003ec8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003ecc:	d830      	bhi.n	8003f30 <ADC_ConfigureBoostMode+0x148>
 8003ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ed2:	d00e      	beq.n	8003ef2 <ADC_ConfigureBoostMode+0x10a>
 8003ed4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ed8:	d82a      	bhi.n	8003f30 <ADC_ConfigureBoostMode+0x148>
 8003eda:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ede:	d008      	beq.n	8003ef2 <ADC_ConfigureBoostMode+0x10a>
 8003ee0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ee4:	d824      	bhi.n	8003f30 <ADC_ConfigureBoostMode+0x148>
 8003ee6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003eea:	d002      	beq.n	8003ef2 <ADC_ConfigureBoostMode+0x10a>
 8003eec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ef0:	d11e      	bne.n	8003f30 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	0c9b      	lsrs	r3, r3, #18
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f00:	60fb      	str	r3, [r7, #12]
        break;
 8003f02:	e016      	b.n	8003f32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	091b      	lsrs	r3, r3, #4
 8003f08:	60fb      	str	r3, [r7, #12]
        break;
 8003f0a:	e012      	b.n	8003f32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	60fb      	str	r3, [r7, #12]
        break;
 8003f12:	e00e      	b.n	8003f32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	099b      	lsrs	r3, r3, #6
 8003f18:	60fb      	str	r3, [r7, #12]
        break;
 8003f1a:	e00a      	b.n	8003f32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	09db      	lsrs	r3, r3, #7
 8003f20:	60fb      	str	r3, [r7, #12]
        break;
 8003f22:	e006      	b.n	8003f32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	0a1b      	lsrs	r3, r3, #8
 8003f28:	60fb      	str	r3, [r7, #12]
        break;
 8003f2a:	e002      	b.n	8003f32 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003f2c:	bf00      	nop
 8003f2e:	e000      	b.n	8003f32 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003f30:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003f32:	f7ff f8a5 	bl	8003080 <HAL_GetREVID>
 8003f36:	4603      	mov	r3, r0
 8003f38:	f241 0203 	movw	r2, #4099	; 0x1003
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d815      	bhi.n	8003f6c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4a2b      	ldr	r2, [pc, #172]	; (8003ff0 <ADC_ConfigureBoostMode+0x208>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d908      	bls.n	8003f5a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f56:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003f58:	e03e      	b.n	8003fd8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f68:	609a      	str	r2, [r3, #8]
}
 8003f6a:	e035      	b.n	8003fd8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	085b      	lsrs	r3, r3, #1
 8003f70:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4a1f      	ldr	r2, [pc, #124]	; (8003ff4 <ADC_ConfigureBoostMode+0x20c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d808      	bhi.n	8003f8c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f88:	609a      	str	r2, [r3, #8]
}
 8003f8a:	e025      	b.n	8003fd8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4a1a      	ldr	r2, [pc, #104]	; (8003ff8 <ADC_ConfigureBoostMode+0x210>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d80a      	bhi.n	8003faa <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fa6:	609a      	str	r2, [r3, #8]
}
 8003fa8:	e016      	b.n	8003fd8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4a13      	ldr	r2, [pc, #76]	; (8003ffc <ADC_ConfigureBoostMode+0x214>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d80a      	bhi.n	8003fc8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fc4:	609a      	str	r2, [r3, #8]
}
 8003fc6:	e007      	b.n	8003fd8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003fd6:	609a      	str	r2, [r3, #8]
}
 8003fd8:	bf00      	nop
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40022000 	.word	0x40022000
 8003fe4:	40022100 	.word	0x40022100
 8003fe8:	40022300 	.word	0x40022300
 8003fec:	58026300 	.word	0x58026300
 8003ff0:	01312d00 	.word	0x01312d00
 8003ff4:	005f5e10 	.word	0x005f5e10
 8003ff8:	00bebc20 	.word	0x00bebc20
 8003ffc:	017d7840 	.word	0x017d7840

08004000 <LL_ADC_IsEnabled>:
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <LL_ADC_IsEnabled+0x18>
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <LL_ADC_IsEnabled+0x1a>
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <LL_ADC_REG_IsConversionOngoing>:
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	2b04      	cmp	r3, #4
 8004038:	d101      	bne.n	800403e <LL_ADC_REG_IsConversionOngoing+0x18>
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800404c:	b590      	push	{r4, r7, lr}
 800404e:	b09f      	sub	sp, #124	; 0x7c
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004062:	2b01      	cmp	r3, #1
 8004064:	d101      	bne.n	800406a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004066:	2302      	movs	r3, #2
 8004068:	e0be      	b.n	80041e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004072:	2300      	movs	r3, #0
 8004074:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004076:	2300      	movs	r3, #0
 8004078:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a5c      	ldr	r2, [pc, #368]	; (80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d102      	bne.n	800408a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004084:	4b5b      	ldr	r3, [pc, #364]	; (80041f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004086:	60bb      	str	r3, [r7, #8]
 8004088:	e001      	b.n	800408e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800408a:	2300      	movs	r3, #0
 800408c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10b      	bne.n	80040ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004098:	f043 0220 	orr.w	r2, r3, #32
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e09d      	b.n	80041e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff ffb9 	bl	8004026 <LL_ADC_REG_IsConversionOngoing>
 80040b4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff ffb3 	bl	8004026 <LL_ADC_REG_IsConversionOngoing>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d17f      	bne.n	80041c6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80040c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d17c      	bne.n	80041c6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a47      	ldr	r2, [pc, #284]	; (80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d004      	beq.n	80040e0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a46      	ldr	r2, [pc, #280]	; (80041f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d101      	bne.n	80040e4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80040e0:	4b45      	ldr	r3, [pc, #276]	; (80041f8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80040e2:	e000      	b.n	80040e6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80040e4:	4b45      	ldr	r3, [pc, #276]	; (80041fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80040e6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d039      	beq.n	8004164 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80040f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	431a      	orrs	r2, r3
 80040fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004100:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a3a      	ldr	r2, [pc, #232]	; (80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d004      	beq.n	8004116 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a38      	ldr	r2, [pc, #224]	; (80041f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d10e      	bne.n	8004134 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004116:	4836      	ldr	r0, [pc, #216]	; (80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004118:	f7ff ff72 	bl	8004000 <LL_ADC_IsEnabled>
 800411c:	4604      	mov	r4, r0
 800411e:	4835      	ldr	r0, [pc, #212]	; (80041f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004120:	f7ff ff6e 	bl	8004000 <LL_ADC_IsEnabled>
 8004124:	4603      	mov	r3, r0
 8004126:	4323      	orrs	r3, r4
 8004128:	2b00      	cmp	r3, #0
 800412a:	bf0c      	ite	eq
 800412c:	2301      	moveq	r3, #1
 800412e:	2300      	movne	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	e008      	b.n	8004146 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004134:	4832      	ldr	r0, [pc, #200]	; (8004200 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004136:	f7ff ff63 	bl	8004000 <LL_ADC_IsEnabled>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	bf0c      	ite	eq
 8004140:	2301      	moveq	r3, #1
 8004142:	2300      	movne	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d047      	beq.n	80041da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800414a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	4b2d      	ldr	r3, [pc, #180]	; (8004204 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004150:	4013      	ands	r3, r2
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	6811      	ldr	r1, [r2, #0]
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	6892      	ldr	r2, [r2, #8]
 800415a:	430a      	orrs	r2, r1
 800415c:	431a      	orrs	r2, r3
 800415e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004160:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004162:	e03a      	b.n	80041da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800416c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a1e      	ldr	r2, [pc, #120]	; (80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d004      	beq.n	8004184 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a1d      	ldr	r2, [pc, #116]	; (80041f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d10e      	bne.n	80041a2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004184:	481a      	ldr	r0, [pc, #104]	; (80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004186:	f7ff ff3b 	bl	8004000 <LL_ADC_IsEnabled>
 800418a:	4604      	mov	r4, r0
 800418c:	4819      	ldr	r0, [pc, #100]	; (80041f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800418e:	f7ff ff37 	bl	8004000 <LL_ADC_IsEnabled>
 8004192:	4603      	mov	r3, r0
 8004194:	4323      	orrs	r3, r4
 8004196:	2b00      	cmp	r3, #0
 8004198:	bf0c      	ite	eq
 800419a:	2301      	moveq	r3, #1
 800419c:	2300      	movne	r3, #0
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	e008      	b.n	80041b4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80041a2:	4817      	ldr	r0, [pc, #92]	; (8004200 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80041a4:	f7ff ff2c 	bl	8004000 <LL_ADC_IsEnabled>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	bf0c      	ite	eq
 80041ae:	2301      	moveq	r3, #1
 80041b0:	2300      	movne	r3, #0
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d010      	beq.n	80041da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80041b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	4b11      	ldr	r3, [pc, #68]	; (8004204 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80041be:	4013      	ands	r3, r2
 80041c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041c2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041c4:	e009      	b.n	80041da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ca:	f043 0220 	orr.w	r2, r3, #32
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80041d8:	e000      	b.n	80041dc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041da:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80041e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	377c      	adds	r7, #124	; 0x7c
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd90      	pop	{r4, r7, pc}
 80041f0:	40022000 	.word	0x40022000
 80041f4:	40022100 	.word	0x40022100
 80041f8:	40022300 	.word	0x40022300
 80041fc:	58026300 	.word	0x58026300
 8004200:	58026000 	.word	0x58026000
 8004204:	fffff0e0 	.word	0xfffff0e0

08004208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <__NVIC_SetPriorityGrouping+0x40>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004224:	4013      	ands	r3, r2
 8004226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004230:	4b06      	ldr	r3, [pc, #24]	; (800424c <__NVIC_SetPriorityGrouping+0x44>)
 8004232:	4313      	orrs	r3, r2
 8004234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004236:	4a04      	ldr	r2, [pc, #16]	; (8004248 <__NVIC_SetPriorityGrouping+0x40>)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	60d3      	str	r3, [r2, #12]
}
 800423c:	bf00      	nop
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	e000ed00 	.word	0xe000ed00
 800424c:	05fa0000 	.word	0x05fa0000

08004250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004254:	4b04      	ldr	r3, [pc, #16]	; (8004268 <__NVIC_GetPriorityGrouping+0x18>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	0a1b      	lsrs	r3, r3, #8
 800425a:	f003 0307 	and.w	r3, r3, #7
}
 800425e:	4618      	mov	r0, r3
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	e000ed00 	.word	0xe000ed00

0800426c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	6039      	str	r1, [r7, #0]
 8004276:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004278:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800427c:	2b00      	cmp	r3, #0
 800427e:	db0a      	blt.n	8004296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	b2da      	uxtb	r2, r3
 8004284:	490c      	ldr	r1, [pc, #48]	; (80042b8 <__NVIC_SetPriority+0x4c>)
 8004286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800428a:	0112      	lsls	r2, r2, #4
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	440b      	add	r3, r1
 8004290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004294:	e00a      	b.n	80042ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	b2da      	uxtb	r2, r3
 800429a:	4908      	ldr	r1, [pc, #32]	; (80042bc <__NVIC_SetPriority+0x50>)
 800429c:	88fb      	ldrh	r3, [r7, #6]
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	3b04      	subs	r3, #4
 80042a4:	0112      	lsls	r2, r2, #4
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	440b      	add	r3, r1
 80042aa:	761a      	strb	r2, [r3, #24]
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	e000e100 	.word	0xe000e100
 80042bc:	e000ed00 	.word	0xe000ed00

080042c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b089      	sub	sp, #36	; 0x24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f1c3 0307 	rsb	r3, r3, #7
 80042da:	2b04      	cmp	r3, #4
 80042dc:	bf28      	it	cs
 80042de:	2304      	movcs	r3, #4
 80042e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	3304      	adds	r3, #4
 80042e6:	2b06      	cmp	r3, #6
 80042e8:	d902      	bls.n	80042f0 <NVIC_EncodePriority+0x30>
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	3b03      	subs	r3, #3
 80042ee:	e000      	b.n	80042f2 <NVIC_EncodePriority+0x32>
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f4:	f04f 32ff 	mov.w	r2, #4294967295
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	43da      	mvns	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	401a      	ands	r2, r3
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004308:	f04f 31ff 	mov.w	r1, #4294967295
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	fa01 f303 	lsl.w	r3, r1, r3
 8004312:	43d9      	mvns	r1, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004318:	4313      	orrs	r3, r2
         );
}
 800431a:	4618      	mov	r0, r3
 800431c:	3724      	adds	r7, #36	; 0x24
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
	...

08004328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3b01      	subs	r3, #1
 8004334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004338:	d301      	bcc.n	800433e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800433a:	2301      	movs	r3, #1
 800433c:	e00f      	b.n	800435e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800433e:	4a0a      	ldr	r2, [pc, #40]	; (8004368 <SysTick_Config+0x40>)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3b01      	subs	r3, #1
 8004344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004346:	210f      	movs	r1, #15
 8004348:	f04f 30ff 	mov.w	r0, #4294967295
 800434c:	f7ff ff8e 	bl	800426c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004350:	4b05      	ldr	r3, [pc, #20]	; (8004368 <SysTick_Config+0x40>)
 8004352:	2200      	movs	r2, #0
 8004354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004356:	4b04      	ldr	r3, [pc, #16]	; (8004368 <SysTick_Config+0x40>)
 8004358:	2207      	movs	r2, #7
 800435a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	e000e010 	.word	0xe000e010

0800436c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff ff47 	bl	8004208 <__NVIC_SetPriorityGrouping>
}
 800437a:	bf00      	nop
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b086      	sub	sp, #24
 8004386:	af00      	add	r7, sp, #0
 8004388:	4603      	mov	r3, r0
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	607a      	str	r2, [r7, #4]
 800438e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004390:	f7ff ff5e 	bl	8004250 <__NVIC_GetPriorityGrouping>
 8004394:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	6978      	ldr	r0, [r7, #20]
 800439c:	f7ff ff90 	bl	80042c0 <NVIC_EncodePriority>
 80043a0:	4602      	mov	r2, r0
 80043a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043a6:	4611      	mov	r1, r2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff ff5f 	bl	800426c <__NVIC_SetPriority>
}
 80043ae:	bf00      	nop
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7ff ffb2 	bl	8004328 <SysTick_Config>
 80043c4:	4603      	mov	r3, r0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e0cf      	b.n	8004582 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d106      	bne.n	80043fa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2223      	movs	r2, #35	; 0x23
 80043f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7fd fd0b 	bl	8001e10 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043fa:	4b64      	ldr	r3, [pc, #400]	; (800458c <HAL_ETH_Init+0x1bc>)
 80043fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004400:	4a62      	ldr	r2, [pc, #392]	; (800458c <HAL_ETH_Init+0x1bc>)
 8004402:	f043 0302 	orr.w	r3, r3, #2
 8004406:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800440a:	4b60      	ldr	r3, [pc, #384]	; (800458c <HAL_ETH_Init+0x1bc>)
 800440c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	60bb      	str	r3, [r7, #8]
 8004416:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	7a1b      	ldrb	r3, [r3, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d103      	bne.n	8004428 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004420:	2000      	movs	r0, #0
 8004422:	f7fe fe39 	bl	8003098 <HAL_SYSCFG_ETHInterfaceSelect>
 8004426:	e003      	b.n	8004430 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004428:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800442c:	f7fe fe34 	bl	8003098 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004430:	4b57      	ldr	r3, [pc, #348]	; (8004590 <HAL_ETH_Init+0x1c0>)
 8004432:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6812      	ldr	r2, [r2, #0]
 8004442:	f043 0301 	orr.w	r3, r3, #1
 8004446:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800444a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800444c:	f7fe fde8 	bl	8003020 <HAL_GetTick>
 8004450:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004452:	e011      	b.n	8004478 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004454:	f7fe fde4 	bl	8003020 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004462:	d909      	bls.n	8004478 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2204      	movs	r2, #4
 8004468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	22e0      	movs	r2, #224	; 0xe0
 8004470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e084      	b.n	8004582 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1e4      	bne.n	8004454 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f886 	bl	800459c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004490:	f003 fc1a 	bl	8007cc8 <HAL_RCC_GetHCLKFreq>
 8004494:	4603      	mov	r3, r0
 8004496:	4a3f      	ldr	r2, [pc, #252]	; (8004594 <HAL_ETH_Init+0x1c4>)
 8004498:	fba2 2303 	umull	r2, r3, r2, r3
 800449c:	0c9a      	lsrs	r2, r3, #18
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3a01      	subs	r2, #1
 80044a4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fa71 	bl	8004990 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80044ba:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044ca:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d009      	beq.n	80044ee <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	22e0      	movs	r2, #224	; 0xe0
 80044e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e049      	b.n	8004582 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80044fa:	4b27      	ldr	r3, [pc, #156]	; (8004598 <HAL_ETH_Init+0x1c8>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6952      	ldr	r2, [r2, #20]
 8004502:	0051      	lsls	r1, r2, #1
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	430b      	orrs	r3, r1
 800450a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800450e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fad9 	bl	8004aca <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fb1f 	bl	8004b5c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	3305      	adds	r3, #5
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	021a      	lsls	r2, r3, #8
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	3304      	adds	r3, #4
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	4619      	mov	r1, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	3303      	adds	r3, #3
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	061a      	lsls	r2, r3, #24
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	3302      	adds	r3, #2
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	041b      	lsls	r3, r3, #16
 8004550:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	3301      	adds	r3, #1
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800455c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800456a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800456c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2210      	movs	r2, #16
 800457c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	58024400 	.word	0x58024400
 8004590:	58000400 	.word	0x58000400
 8004594:	431bde83 	.word	0x431bde83
 8004598:	ffff8001 	.word	0xffff8001

0800459c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045b4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80045b6:	f003 fb87 	bl	8007cc8 <HAL_RCC_GetHCLKFreq>
 80045ba:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4a1e      	ldr	r2, [pc, #120]	; (8004638 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d908      	bls.n	80045d6 <HAL_ETH_SetMDIOClockRange+0x3a>
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4a1d      	ldr	r2, [pc, #116]	; (800463c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d804      	bhi.n	80045d6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	e027      	b.n	8004626 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4a18      	ldr	r2, [pc, #96]	; (800463c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d908      	bls.n	80045f0 <HAL_ETH_SetMDIOClockRange+0x54>
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	4a17      	ldr	r2, [pc, #92]	; (8004640 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d204      	bcs.n	80045f0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	e01a      	b.n	8004626 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4a13      	ldr	r2, [pc, #76]	; (8004640 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d303      	bcc.n	8004600 <HAL_ETH_SetMDIOClockRange+0x64>
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4a12      	ldr	r2, [pc, #72]	; (8004644 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d911      	bls.n	8004624 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4a10      	ldr	r2, [pc, #64]	; (8004644 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d908      	bls.n	800461a <HAL_ETH_SetMDIOClockRange+0x7e>
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	4a0f      	ldr	r2, [pc, #60]	; (8004648 <HAL_ETH_SetMDIOClockRange+0xac>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d804      	bhi.n	800461a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	e005      	b.n	8004626 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	e000      	b.n	8004626 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004624:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004630:	bf00      	nop
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	01312cff 	.word	0x01312cff
 800463c:	02160ebf 	.word	0x02160ebf
 8004640:	03938700 	.word	0x03938700
 8004644:	05f5e0ff 	.word	0x05f5e0ff
 8004648:	08f0d17f 	.word	0x08f0d17f

0800464c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800465e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	791b      	ldrb	r3, [r3, #4]
 8004664:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004666:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	7b1b      	ldrb	r3, [r3, #12]
 800466c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800466e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	7b5b      	ldrb	r3, [r3, #13]
 8004674:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004676:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	7b9b      	ldrb	r3, [r3, #14]
 800467c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800467e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	7bdb      	ldrb	r3, [r3, #15]
 8004684:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004686:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	7c12      	ldrb	r2, [r2, #16]
 800468c:	2a00      	cmp	r2, #0
 800468e:	d102      	bne.n	8004696 <ETH_SetMACConfig+0x4a>
 8004690:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004694:	e000      	b.n	8004698 <ETH_SetMACConfig+0x4c>
 8004696:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004698:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	7c52      	ldrb	r2, [r2, #17]
 800469e:	2a00      	cmp	r2, #0
 80046a0:	d102      	bne.n	80046a8 <ETH_SetMACConfig+0x5c>
 80046a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046a6:	e000      	b.n	80046aa <ETH_SetMACConfig+0x5e>
 80046a8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80046aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	7c9b      	ldrb	r3, [r3, #18]
 80046b0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80046b2:	431a      	orrs	r2, r3
               macconf->Speed |
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80046b8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80046be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	7f1b      	ldrb	r3, [r3, #28]
 80046c4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80046c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	7f5b      	ldrb	r3, [r3, #29]
 80046cc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80046ce:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	7f92      	ldrb	r2, [r2, #30]
 80046d4:	2a00      	cmp	r2, #0
 80046d6:	d102      	bne.n	80046de <ETH_SetMACConfig+0x92>
 80046d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046dc:	e000      	b.n	80046e0 <ETH_SetMACConfig+0x94>
 80046de:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80046e0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	7fdb      	ldrb	r3, [r3, #31]
 80046e6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80046e8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	f892 2020 	ldrb.w	r2, [r2, #32]
 80046f0:	2a00      	cmp	r2, #0
 80046f2:	d102      	bne.n	80046fa <ETH_SetMACConfig+0xae>
 80046f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046f8:	e000      	b.n	80046fc <ETH_SetMACConfig+0xb0>
 80046fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80046fc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004702:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800470a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800470c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	4b56      	ldr	r3, [pc, #344]	; (8004878 <ETH_SetMACConfig+0x22c>)
 800471e:	4013      	ands	r3, r2
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6812      	ldr	r2, [r2, #0]
 8004724:	68f9      	ldr	r1, [r7, #12]
 8004726:	430b      	orrs	r3, r1
 8004728:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004736:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004738:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004740:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004742:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800474a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800474c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004754:	2a00      	cmp	r2, #0
 8004756:	d102      	bne.n	800475e <ETH_SetMACConfig+0x112>
 8004758:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800475c:	e000      	b.n	8004760 <ETH_SetMACConfig+0x114>
 800475e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004760:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	4b42      	ldr	r3, [pc, #264]	; (800487c <ETH_SetMACConfig+0x230>)
 8004772:	4013      	ands	r3, r2
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6812      	ldr	r2, [r2, #0]
 8004778:	68f9      	ldr	r1, [r7, #12]
 800477a:	430b      	orrs	r3, r1
 800477c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004784:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	4b3a      	ldr	r3, [pc, #232]	; (8004880 <ETH_SetMACConfig+0x234>)
 8004796:	4013      	ands	r3, r2
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6812      	ldr	r2, [r2, #0]
 800479c:	68f9      	ldr	r1, [r7, #12]
 800479e:	430b      	orrs	r3, r1
 80047a0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80047a8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80047ae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80047b6:	2a00      	cmp	r2, #0
 80047b8:	d101      	bne.n	80047be <ETH_SetMACConfig+0x172>
 80047ba:	2280      	movs	r2, #128	; 0x80
 80047bc:	e000      	b.n	80047c0 <ETH_SetMACConfig+0x174>
 80047be:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80047c0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80047c8:	4313      	orrs	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047d2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80047d6:	4013      	ands	r3, r2
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	6812      	ldr	r2, [r2, #0]
 80047dc:	68f9      	ldr	r1, [r7, #12]
 80047de:	430b      	orrs	r3, r1
 80047e0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80047e8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80047f0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fe:	f023 0103 	bic.w	r1, r3, #3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	430a      	orrs	r2, r1
 800480a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004816:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004832:	2a00      	cmp	r2, #0
 8004834:	d101      	bne.n	800483a <ETH_SetMACConfig+0x1ee>
 8004836:	2240      	movs	r2, #64	; 0x40
 8004838:	e000      	b.n	800483c <ETH_SetMACConfig+0x1f0>
 800483a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800483c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004844:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004846:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800484e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004850:	4313      	orrs	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800485c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	430a      	orrs	r2, r1
 8004868:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800486c:	bf00      	nop
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	00048083 	.word	0x00048083
 800487c:	c0f88000 	.word	0xc0f88000
 8004880:	fffffef0 	.word	0xfffffef0

08004884 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	4b38      	ldr	r3, [pc, #224]	; (800497c <ETH_SetDMAConfig+0xf8>)
 800489a:	4013      	ands	r3, r2
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	6811      	ldr	r1, [r2, #0]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6812      	ldr	r2, [r2, #0]
 80048a4:	430b      	orrs	r3, r1
 80048a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048aa:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	791b      	ldrb	r3, [r3, #4]
 80048b0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80048b6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	7b1b      	ldrb	r3, [r3, #12]
 80048bc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	4b2c      	ldr	r3, [pc, #176]	; (8004980 <ETH_SetDMAConfig+0xfc>)
 80048ce:	4013      	ands	r3, r2
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6812      	ldr	r2, [r2, #0]
 80048d4:	68f9      	ldr	r1, [r7, #12]
 80048d6:	430b      	orrs	r3, r1
 80048d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048dc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	7b5b      	ldrb	r3, [r3, #13]
 80048e2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80048f8:	4b22      	ldr	r3, [pc, #136]	; (8004984 <ETH_SetDMAConfig+0x100>)
 80048fa:	4013      	ands	r3, r2
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6812      	ldr	r2, [r2, #0]
 8004900:	68f9      	ldr	r1, [r7, #12]
 8004902:	430b      	orrs	r3, r1
 8004904:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004908:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	7d1b      	ldrb	r3, [r3, #20]
 8004914:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004916:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	7f5b      	ldrb	r3, [r3, #29]
 800491c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800492a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800492e:	4b16      	ldr	r3, [pc, #88]	; (8004988 <ETH_SetDMAConfig+0x104>)
 8004930:	4013      	ands	r3, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6812      	ldr	r2, [r2, #0]
 8004936:	68f9      	ldr	r1, [r7, #12]
 8004938:	430b      	orrs	r3, r1
 800493a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800493e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	7f1b      	ldrb	r3, [r3, #28]
 8004946:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004958:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800495c:	4b0b      	ldr	r3, [pc, #44]	; (800498c <ETH_SetDMAConfig+0x108>)
 800495e:	4013      	ands	r3, r2
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6812      	ldr	r2, [r2, #0]
 8004964:	68f9      	ldr	r1, [r7, #12]
 8004966:	430b      	orrs	r3, r1
 8004968:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800496c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004970:	bf00      	nop
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	ffff87fd 	.word	0xffff87fd
 8004980:	ffff2ffe 	.word	0xffff2ffe
 8004984:	fffec000 	.word	0xfffec000
 8004988:	ffc0efef 	.word	0xffc0efef
 800498c:	7fc0ffff 	.word	0x7fc0ffff

08004990 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b0a4      	sub	sp, #144	; 0x90
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004998:	2301      	movs	r3, #1
 800499a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800499e:	2300      	movs	r3, #0
 80049a0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80049a2:	2300      	movs	r3, #0
 80049a4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80049a8:	2300      	movs	r3, #0
 80049aa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80049ae:	2301      	movs	r3, #1
 80049b0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80049b4:	2301      	movs	r3, #1
 80049b6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80049ba:	2301      	movs	r3, #1
 80049bc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80049c0:	2300      	movs	r3, #0
 80049c2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80049cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049d0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80049d2:	2300      	movs	r3, #0
 80049d4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80049d8:	2300      	movs	r3, #0
 80049da:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80049dc:	2300      	movs	r3, #0
 80049de:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80049e2:	2300      	movs	r3, #0
 80049e4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80049e8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80049ec:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80049ee:	2300      	movs	r3, #0
 80049f0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80049f4:	2300      	movs	r3, #0
 80049f6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80049f8:	2301      	movs	r3, #1
 80049fa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80049fe:	2300      	movs	r3, #0
 8004a00:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004a04:	2300      	movs	r3, #0
 8004a06:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004a12:	2300      	movs	r3, #0
 8004a14:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004a16:	2300      	movs	r3, #0
 8004a18:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004a28:	2320      	movs	r3, #32
 8004a2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004a34:	2300      	movs	r3, #0
 8004a36:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004a3a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004a40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a44:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004a46:	2300      	movs	r3, #0
 8004a48:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004a52:	2300      	movs	r3, #0
 8004a54:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004a64:	2301      	movs	r3, #1
 8004a66:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004a74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a78:	4619      	mov	r1, r3
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7ff fde6 	bl	800464c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004a80:	2301      	movs	r3, #1
 8004a82:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004a84:	2301      	movs	r3, #1
 8004a86:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004a92:	2300      	movs	r3, #0
 8004a94:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004a96:	2300      	movs	r3, #0
 8004a98:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004a9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a9e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004aa4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004aa8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004ab0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004ab4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004ab6:	f107 0308 	add.w	r3, r7, #8
 8004aba:	4619      	mov	r1, r3
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7ff fee1 	bl	8004884 <ETH_SetDMAConfig>
}
 8004ac2:	bf00      	nop
 8004ac4:	3790      	adds	r7, #144	; 0x90
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b085      	sub	sp, #20
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	e01d      	b.n	8004b14 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68d9      	ldr	r1, [r3, #12]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	4413      	add	r3, r2
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	440b      	add	r3, r1
 8004ae8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2200      	movs	r2, #0
 8004af4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2200      	movs	r2, #0
 8004afa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2200      	movs	r2, #0
 8004b00:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004b02:	68b9      	ldr	r1, [r7, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	3206      	adds	r2, #6
 8004b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3301      	adds	r3, #1
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	d9de      	bls.n	8004ad8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b28:	461a      	mov	r2, r3
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b3c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b4c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004b50:	bf00      	nop
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b64:	2300      	movs	r3, #0
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	e023      	b.n	8004bb2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6919      	ldr	r1, [r3, #16]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4613      	mov	r3, r2
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	4413      	add	r3, r2
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	440b      	add	r3, r1
 8004b7a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2200      	movs	r2, #0
 8004b86:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2200      	movs	r2, #0
 8004b92:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2200      	movs	r2, #0
 8004b98:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004ba0:	68b9      	ldr	r1, [r7, #8]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	3212      	adds	r2, #18
 8004ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	d9d8      	bls.n	8004b6a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bde:	461a      	mov	r2, r3
 8004be0:	2303      	movs	r3, #3
 8004be2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691a      	ldr	r2, [r3, #16]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c06:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004c0a:	bf00      	nop
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
	...

08004c18 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b098      	sub	sp, #96	; 0x60
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004c20:	4a84      	ldr	r2, [pc, #528]	; (8004e34 <HAL_FDCAN_Init+0x21c>)
 8004c22:	f107 030c 	add.w	r3, r7, #12
 8004c26:	4611      	mov	r1, r2
 8004c28:	224c      	movs	r2, #76	; 0x4c
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f008 f8ba 	bl	800cda4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e1c6      	b.n	8004fc8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a7e      	ldr	r2, [pc, #504]	; (8004e38 <HAL_FDCAN_Init+0x220>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d106      	bne.n	8004c52 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fd fa02 	bl	8002070 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699a      	ldr	r2, [r3, #24]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0210 	bic.w	r2, r2, #16
 8004c7a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c7c:	f7fe f9d0 	bl	8003020 <HAL_GetTick>
 8004c80:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004c82:	e014      	b.n	8004cae <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004c84:	f7fe f9cc 	bl	8003020 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b0a      	cmp	r3, #10
 8004c90:	d90d      	bls.n	8004cae <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c98:	f043 0201 	orr.w	r2, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2203      	movs	r2, #3
 8004ca6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e18c      	b.n	8004fc8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d0e3      	beq.n	8004c84 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699a      	ldr	r2, [r3, #24]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0201 	orr.w	r2, r2, #1
 8004cca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ccc:	f7fe f9a8 	bl	8003020 <HAL_GetTick>
 8004cd0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004cd2:	e014      	b.n	8004cfe <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004cd4:	f7fe f9a4 	bl	8003020 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b0a      	cmp	r3, #10
 8004ce0:	d90d      	bls.n	8004cfe <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ce8:	f043 0201 	orr.w	r2, r3, #1
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2203      	movs	r2, #3
 8004cf6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e164      	b.n	8004fc8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0e3      	beq.n	8004cd4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0202 	orr.w	r2, r2, #2
 8004d1a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	7c1b      	ldrb	r3, [r3, #16]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d108      	bne.n	8004d36 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699a      	ldr	r2, [r3, #24]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d32:	619a      	str	r2, [r3, #24]
 8004d34:	e007      	b.n	8004d46 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699a      	ldr	r2, [r3, #24]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d44:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	7c5b      	ldrb	r3, [r3, #17]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d108      	bne.n	8004d60 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699a      	ldr	r2, [r3, #24]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d5c:	619a      	str	r2, [r3, #24]
 8004d5e:	e007      	b.n	8004d70 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699a      	ldr	r2, [r3, #24]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d6e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	7c9b      	ldrb	r3, [r3, #18]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d108      	bne.n	8004d8a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699a      	ldr	r2, [r3, #24]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d86:	619a      	str	r2, [r3, #24]
 8004d88:	e007      	b.n	8004d9a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	699a      	ldr	r2, [r3, #24]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d98:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004dbe:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691a      	ldr	r2, [r3, #16]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0210 	bic.w	r2, r2, #16
 8004dce:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d108      	bne.n	8004dea <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0204 	orr.w	r2, r2, #4
 8004de6:	619a      	str	r2, [r3, #24]
 8004de8:	e030      	b.n	8004e4c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d02c      	beq.n	8004e4c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d020      	beq.n	8004e3c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	699a      	ldr	r2, [r3, #24]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e08:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691a      	ldr	r2, [r3, #16]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0210 	orr.w	r2, r2, #16
 8004e18:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d114      	bne.n	8004e4c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699a      	ldr	r2, [r3, #24]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f042 0220 	orr.w	r2, r2, #32
 8004e30:	619a      	str	r2, [r3, #24]
 8004e32:	e00b      	b.n	8004e4c <HAL_FDCAN_Init+0x234>
 8004e34:	0800d6f4 	.word	0x0800d6f4
 8004e38:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0220 	orr.w	r2, r2, #32
 8004e4a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	3b01      	subs	r3, #1
 8004e52:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e5c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004e64:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004e74:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e76:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e80:	d115      	bne.n	8004eae <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e86:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004e90:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	3b01      	subs	r3, #1
 8004e98:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004e9a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004eaa:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004eac:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed4:	4413      	add	r3, r2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d011      	beq.n	8004efe <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004ee2:	f023 0107 	bic.w	r1, r3, #7
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	3360      	adds	r3, #96	; 0x60
 8004eee:	443b      	add	r3, r7
 8004ef0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d011      	beq.n	8004f2a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004f0e:	f023 0107 	bic.w	r1, r3, #7
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	3360      	adds	r3, #96	; 0x60
 8004f1a:	443b      	add	r3, r7
 8004f1c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d012      	beq.n	8004f58 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004f3a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	3360      	adds	r3, #96	; 0x60
 8004f46:	443b      	add	r3, r7
 8004f48:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004f4c:	011a      	lsls	r2, r3, #4
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d012      	beq.n	8004f86 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004f68:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	3360      	adds	r3, #96	; 0x60
 8004f74:	443b      	add	r3, r7
 8004f76:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004f7a:	021a      	lsls	r2, r3, #8
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a11      	ldr	r2, [pc, #68]	; (8004fd0 <HAL_FDCAN_Init+0x3b8>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d107      	bne.n	8004fa0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f022 0203 	bic.w	r2, r2, #3
 8004f9e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f80b 	bl	8004fd4 <FDCAN_CalcultateRamBlockAddresses>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004fc4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3760      	adds	r7, #96	; 0x60
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	4000a000 	.word	0x4000a000

08004fd4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004fea:	4ba7      	ldr	r3, [pc, #668]	; (8005288 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	0091      	lsls	r1, r2, #2
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6812      	ldr	r2, [r2, #0]
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005004:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	041a      	lsls	r2, r3, #16
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	4413      	add	r3, r2
 8005020:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800502a:	4b97      	ldr	r3, [pc, #604]	; (8005288 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800502c:	4013      	ands	r3, r2
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	0091      	lsls	r1, r2, #2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6812      	ldr	r2, [r2, #0]
 8005036:	430b      	orrs	r3, r1
 8005038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005044:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504c:	041a      	lsls	r2, r3, #16
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	4413      	add	r3, r2
 8005062:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800506c:	4b86      	ldr	r3, [pc, #536]	; (8005288 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800506e:	4013      	ands	r3, r2
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	0091      	lsls	r1, r2, #2
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6812      	ldr	r2, [r2, #0]
 8005078:	430b      	orrs	r3, r1
 800507a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005086:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	041a      	lsls	r2, r3, #16
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80050a2:	fb02 f303 	mul.w	r3, r2, r3
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	4413      	add	r3, r2
 80050aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80050b4:	4b74      	ldr	r3, [pc, #464]	; (8005288 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80050b6:	4013      	ands	r3, r2
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	0091      	lsls	r1, r2, #2
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6812      	ldr	r2, [r2, #0]
 80050c0:	430b      	orrs	r3, r1
 80050c2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050ce:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050d6:	041a      	lsls	r2, r3, #16
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80050ea:	fb02 f303 	mul.w	r3, r2, r3
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	4413      	add	r3, r2
 80050f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80050fc:	4b62      	ldr	r3, [pc, #392]	; (8005288 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80050fe:	4013      	ands	r3, r2
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	0091      	lsls	r1, r2, #2
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6812      	ldr	r2, [r2, #0]
 8005108:	430b      	orrs	r3, r1
 800510a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005116:	fb02 f303 	mul.w	r3, r2, r3
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	4413      	add	r3, r2
 800511e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005128:	4b57      	ldr	r3, [pc, #348]	; (8005288 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800512a:	4013      	ands	r3, r2
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	0091      	lsls	r1, r2, #2
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6812      	ldr	r2, [r2, #0]
 8005134:	430b      	orrs	r3, r1
 8005136:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005142:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514a:	041a      	lsls	r2, r3, #16
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	4413      	add	r3, r2
 8005160:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800516a:	4b47      	ldr	r3, [pc, #284]	; (8005288 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800516c:	4013      	ands	r3, r2
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	0091      	lsls	r1, r2, #2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6812      	ldr	r2, [r2, #0]
 8005176:	430b      	orrs	r3, r1
 8005178:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005184:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800518c:	041a      	lsls	r2, r3, #16
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80051a0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a8:	061a      	lsls	r2, r3, #24
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051b8:	4b34      	ldr	r3, [pc, #208]	; (800528c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80051ba:	4413      	add	r3, r2
 80051bc:	009a      	lsls	r2, r3, #2
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	441a      	add	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	441a      	add	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80051ee:	fb01 f303 	mul.w	r3, r1, r3
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	441a      	add	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005206:	fb01 f303 	mul.w	r3, r1, r3
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	441a      	add	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800521e:	fb01 f303 	mul.w	r3, r1, r3
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	441a      	add	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	441a      	add	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524a:	6879      	ldr	r1, [r7, #4]
 800524c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800524e:	fb01 f303 	mul.w	r3, r1, r3
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	441a      	add	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800526a:	fb01 f303 	mul.w	r3, r1, r3
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	441a      	add	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527e:	4a04      	ldr	r2, [pc, #16]	; (8005290 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d915      	bls.n	80052b0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005284:	e006      	b.n	8005294 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005286:	bf00      	nop
 8005288:	ffff0003 	.word	0xffff0003
 800528c:	10002b00 	.word	0x10002b00
 8005290:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800529a:	f043 0220 	orr.w	r2, r3, #32
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2203      	movs	r2, #3
 80052a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e010      	b.n	80052d2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	e005      	b.n	80052c4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	3304      	adds	r3, #4
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d3f3      	bcc.n	80052b8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop

080052e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b089      	sub	sp, #36	; 0x24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80052ee:	4b89      	ldr	r3, [pc, #548]	; (8005514 <HAL_GPIO_Init+0x234>)
 80052f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052f2:	e194      	b.n	800561e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	2101      	movs	r1, #1
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005300:	4013      	ands	r3, r2
 8005302:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 8186 	beq.w	8005618 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f003 0303 	and.w	r3, r3, #3
 8005314:	2b01      	cmp	r3, #1
 8005316:	d005      	beq.n	8005324 <HAL_GPIO_Init+0x44>
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f003 0303 	and.w	r3, r3, #3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d130      	bne.n	8005386 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	2203      	movs	r2, #3
 8005330:	fa02 f303 	lsl.w	r3, r2, r3
 8005334:	43db      	mvns	r3, r3
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	4013      	ands	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	68da      	ldr	r2, [r3, #12]
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4313      	orrs	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800535a:	2201      	movs	r2, #1
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	fa02 f303 	lsl.w	r3, r2, r3
 8005362:	43db      	mvns	r3, r3
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	4013      	ands	r3, r2
 8005368:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	091b      	lsrs	r3, r3, #4
 8005370:	f003 0201 	and.w	r2, r3, #1
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	fa02 f303 	lsl.w	r3, r2, r3
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	4313      	orrs	r3, r2
 800537e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	2b03      	cmp	r3, #3
 8005390:	d017      	beq.n	80053c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	2203      	movs	r2, #3
 800539e:	fa02 f303 	lsl.w	r3, r2, r3
 80053a2:	43db      	mvns	r3, r3
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	4013      	ands	r3, r2
 80053a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	689a      	ldr	r2, [r3, #8]
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	fa02 f303 	lsl.w	r3, r2, r3
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d123      	bne.n	8005416 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	08da      	lsrs	r2, r3, #3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3208      	adds	r2, #8
 80053d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	220f      	movs	r2, #15
 80053e6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ea:	43db      	mvns	r3, r3
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	4013      	ands	r3, r2
 80053f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	691a      	ldr	r2, [r3, #16]
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	4313      	orrs	r3, r2
 8005406:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	08da      	lsrs	r2, r3, #3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3208      	adds	r2, #8
 8005410:	69b9      	ldr	r1, [r7, #24]
 8005412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	2203      	movs	r2, #3
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	43db      	mvns	r3, r3
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	4013      	ands	r3, r2
 800542c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f003 0203 	and.w	r2, r3, #3
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	fa02 f303 	lsl.w	r3, r2, r3
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	4313      	orrs	r3, r2
 8005442:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 80e0 	beq.w	8005618 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005458:	4b2f      	ldr	r3, [pc, #188]	; (8005518 <HAL_GPIO_Init+0x238>)
 800545a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800545e:	4a2e      	ldr	r2, [pc, #184]	; (8005518 <HAL_GPIO_Init+0x238>)
 8005460:	f043 0302 	orr.w	r3, r3, #2
 8005464:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005468:	4b2b      	ldr	r3, [pc, #172]	; (8005518 <HAL_GPIO_Init+0x238>)
 800546a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005476:	4a29      	ldr	r2, [pc, #164]	; (800551c <HAL_GPIO_Init+0x23c>)
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	089b      	lsrs	r3, r3, #2
 800547c:	3302      	adds	r3, #2
 800547e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	220f      	movs	r2, #15
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	43db      	mvns	r3, r3
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	4013      	ands	r3, r2
 8005498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a20      	ldr	r2, [pc, #128]	; (8005520 <HAL_GPIO_Init+0x240>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d052      	beq.n	8005548 <HAL_GPIO_Init+0x268>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a1f      	ldr	r2, [pc, #124]	; (8005524 <HAL_GPIO_Init+0x244>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d031      	beq.n	800550e <HAL_GPIO_Init+0x22e>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a1e      	ldr	r2, [pc, #120]	; (8005528 <HAL_GPIO_Init+0x248>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d02b      	beq.n	800550a <HAL_GPIO_Init+0x22a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a1d      	ldr	r2, [pc, #116]	; (800552c <HAL_GPIO_Init+0x24c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d025      	beq.n	8005506 <HAL_GPIO_Init+0x226>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a1c      	ldr	r2, [pc, #112]	; (8005530 <HAL_GPIO_Init+0x250>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d01f      	beq.n	8005502 <HAL_GPIO_Init+0x222>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a1b      	ldr	r2, [pc, #108]	; (8005534 <HAL_GPIO_Init+0x254>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d019      	beq.n	80054fe <HAL_GPIO_Init+0x21e>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a1a      	ldr	r2, [pc, #104]	; (8005538 <HAL_GPIO_Init+0x258>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d013      	beq.n	80054fa <HAL_GPIO_Init+0x21a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a19      	ldr	r2, [pc, #100]	; (800553c <HAL_GPIO_Init+0x25c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00d      	beq.n	80054f6 <HAL_GPIO_Init+0x216>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a18      	ldr	r2, [pc, #96]	; (8005540 <HAL_GPIO_Init+0x260>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d007      	beq.n	80054f2 <HAL_GPIO_Init+0x212>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a17      	ldr	r2, [pc, #92]	; (8005544 <HAL_GPIO_Init+0x264>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d101      	bne.n	80054ee <HAL_GPIO_Init+0x20e>
 80054ea:	2309      	movs	r3, #9
 80054ec:	e02d      	b.n	800554a <HAL_GPIO_Init+0x26a>
 80054ee:	230a      	movs	r3, #10
 80054f0:	e02b      	b.n	800554a <HAL_GPIO_Init+0x26a>
 80054f2:	2308      	movs	r3, #8
 80054f4:	e029      	b.n	800554a <HAL_GPIO_Init+0x26a>
 80054f6:	2307      	movs	r3, #7
 80054f8:	e027      	b.n	800554a <HAL_GPIO_Init+0x26a>
 80054fa:	2306      	movs	r3, #6
 80054fc:	e025      	b.n	800554a <HAL_GPIO_Init+0x26a>
 80054fe:	2305      	movs	r3, #5
 8005500:	e023      	b.n	800554a <HAL_GPIO_Init+0x26a>
 8005502:	2304      	movs	r3, #4
 8005504:	e021      	b.n	800554a <HAL_GPIO_Init+0x26a>
 8005506:	2303      	movs	r3, #3
 8005508:	e01f      	b.n	800554a <HAL_GPIO_Init+0x26a>
 800550a:	2302      	movs	r3, #2
 800550c:	e01d      	b.n	800554a <HAL_GPIO_Init+0x26a>
 800550e:	2301      	movs	r3, #1
 8005510:	e01b      	b.n	800554a <HAL_GPIO_Init+0x26a>
 8005512:	bf00      	nop
 8005514:	58000080 	.word	0x58000080
 8005518:	58024400 	.word	0x58024400
 800551c:	58000400 	.word	0x58000400
 8005520:	58020000 	.word	0x58020000
 8005524:	58020400 	.word	0x58020400
 8005528:	58020800 	.word	0x58020800
 800552c:	58020c00 	.word	0x58020c00
 8005530:	58021000 	.word	0x58021000
 8005534:	58021400 	.word	0x58021400
 8005538:	58021800 	.word	0x58021800
 800553c:	58021c00 	.word	0x58021c00
 8005540:	58022000 	.word	0x58022000
 8005544:	58022400 	.word	0x58022400
 8005548:	2300      	movs	r3, #0
 800554a:	69fa      	ldr	r2, [r7, #28]
 800554c:	f002 0203 	and.w	r2, r2, #3
 8005550:	0092      	lsls	r2, r2, #2
 8005552:	4093      	lsls	r3, r2
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	4313      	orrs	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800555a:	4938      	ldr	r1, [pc, #224]	; (800563c <HAL_GPIO_Init+0x35c>)
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	089b      	lsrs	r3, r3, #2
 8005560:	3302      	adds	r3, #2
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	43db      	mvns	r3, r3
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	4013      	ands	r3, r2
 8005578:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800558e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	43db      	mvns	r3, r3
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	4013      	ands	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80055bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	43db      	mvns	r3, r3
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	4013      	ands	r3, r2
 80055d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	43db      	mvns	r3, r3
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	4013      	ands	r3, r2
 80055fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	4313      	orrs	r3, r2
 8005610:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	3301      	adds	r3, #1
 800561c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	fa22 f303 	lsr.w	r3, r2, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	f47f ae63 	bne.w	80052f4 <HAL_GPIO_Init+0x14>
  }
}
 800562e:	bf00      	nop
 8005630:	bf00      	nop
 8005632:	3724      	adds	r7, #36	; 0x24
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	58000400 	.word	0x58000400

08005640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	460b      	mov	r3, r1
 800564a:	807b      	strh	r3, [r7, #2]
 800564c:	4613      	mov	r3, r2
 800564e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005650:	787b      	ldrb	r3, [r7, #1]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005656:	887a      	ldrh	r2, [r7, #2]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800565c:	e003      	b.n	8005666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800565e:	887b      	ldrh	r3, [r7, #2]
 8005660:	041a      	lsls	r2, r3, #16
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	619a      	str	r2, [r3, #24]
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
	...

08005674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e07f      	b.n	8005786 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d106      	bne.n	80056a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7fc fdb8 	bl	8002210 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2224      	movs	r2, #36	; 0x24
 80056a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0201 	bic.w	r2, r2, #1
 80056b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80056c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d107      	bne.n	80056ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056ea:	609a      	str	r2, [r3, #8]
 80056ec:	e006      	b.n	80056fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689a      	ldr	r2, [r3, #8]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80056fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d104      	bne.n	800570e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800570c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6859      	ldr	r1, [r3, #4]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	4b1d      	ldr	r3, [pc, #116]	; (8005790 <HAL_I2C_Init+0x11c>)
 800571a:	430b      	orrs	r3, r1
 800571c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800572c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691a      	ldr	r2, [r3, #16]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	69d9      	ldr	r1, [r3, #28]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a1a      	ldr	r2, [r3, #32]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	02008000 	.word	0x02008000

08005794 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b088      	sub	sp, #32
 8005798:	af02      	add	r7, sp, #8
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	607a      	str	r2, [r7, #4]
 800579e:	461a      	mov	r2, r3
 80057a0:	460b      	mov	r3, r1
 80057a2:	817b      	strh	r3, [r7, #10]
 80057a4:	4613      	mov	r3, r2
 80057a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	f040 80da 	bne.w	800596a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_I2C_Master_Transmit+0x30>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e0d3      	b.n	800596c <HAL_I2C_Master_Transmit+0x1d8>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057cc:	f7fd fc28 	bl	8003020 <HAL_GetTick>
 80057d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	2319      	movs	r3, #25
 80057d8:	2201      	movs	r2, #1
 80057da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f000 faee 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e0be      	b.n	800596c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2221      	movs	r2, #33	; 0x21
 80057f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2210      	movs	r2, #16
 80057fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	893a      	ldrh	r2, [r7, #8]
 800580e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581a:	b29b      	uxth	r3, r3
 800581c:	2bff      	cmp	r3, #255	; 0xff
 800581e:	d90e      	bls.n	800583e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	22ff      	movs	r2, #255	; 0xff
 8005824:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582a:	b2da      	uxtb	r2, r3
 800582c:	8979      	ldrh	r1, [r7, #10]
 800582e:	4b51      	ldr	r3, [pc, #324]	; (8005974 <HAL_I2C_Master_Transmit+0x1e0>)
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 fcfe 	bl	8006238 <I2C_TransferConfig>
 800583c:	e06c      	b.n	8005918 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005842:	b29a      	uxth	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584c:	b2da      	uxtb	r2, r3
 800584e:	8979      	ldrh	r1, [r7, #10]
 8005850:	4b48      	ldr	r3, [pc, #288]	; (8005974 <HAL_I2C_Master_Transmit+0x1e0>)
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 fced 	bl	8006238 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800585e:	e05b      	b.n	8005918 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	6a39      	ldr	r1, [r7, #32]
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 fafa 	bl	8005e5e <I2C_WaitOnTXISFlagUntilTimeout>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e07b      	b.n	800596c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	781a      	ldrb	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800589c:	3b01      	subs	r3, #1
 800589e:	b29a      	uxth	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d034      	beq.n	8005918 <HAL_I2C_Master_Transmit+0x184>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d130      	bne.n	8005918 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	2200      	movs	r2, #0
 80058be:	2180      	movs	r1, #128	; 0x80
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 fa7d 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e04d      	b.n	800596c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2bff      	cmp	r3, #255	; 0xff
 80058d8:	d90e      	bls.n	80058f8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	22ff      	movs	r2, #255	; 0xff
 80058de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	8979      	ldrh	r1, [r7, #10]
 80058e8:	2300      	movs	r3, #0
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 fca1 	bl	8006238 <I2C_TransferConfig>
 80058f6:	e00f      	b.n	8005918 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005906:	b2da      	uxtb	r2, r3
 8005908:	8979      	ldrh	r1, [r7, #10]
 800590a:	2300      	movs	r3, #0
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 fc90 	bl	8006238 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d19e      	bne.n	8005860 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	6a39      	ldr	r1, [r7, #32]
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 fae0 	bl	8005eec <I2C_WaitOnSTOPFlagUntilTimeout>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e01a      	b.n	800596c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2220      	movs	r2, #32
 800593c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6859      	ldr	r1, [r3, #4]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <HAL_I2C_Master_Transmit+0x1e4>)
 800594a:	400b      	ands	r3, r1
 800594c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2220      	movs	r2, #32
 8005952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	e000      	b.n	800596c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800596a:	2302      	movs	r3, #2
  }
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	80002000 	.word	0x80002000
 8005978:	fe00e800 	.word	0xfe00e800

0800597c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b088      	sub	sp, #32
 8005980:	af02      	add	r7, sp, #8
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	607a      	str	r2, [r7, #4]
 8005986:	461a      	mov	r2, r3
 8005988:	460b      	mov	r3, r1
 800598a:	817b      	strh	r3, [r7, #10]
 800598c:	4613      	mov	r3, r2
 800598e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b20      	cmp	r3, #32
 800599a:	f040 80db 	bne.w	8005b54 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d101      	bne.n	80059ac <HAL_I2C_Master_Receive+0x30>
 80059a8:	2302      	movs	r3, #2
 80059aa:	e0d4      	b.n	8005b56 <HAL_I2C_Master_Receive+0x1da>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059b4:	f7fd fb34 	bl	8003020 <HAL_GetTick>
 80059b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	2319      	movs	r3, #25
 80059c0:	2201      	movs	r2, #1
 80059c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 f9fa 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e0bf      	b.n	8005b56 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2222      	movs	r2, #34	; 0x22
 80059da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2210      	movs	r2, #16
 80059e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	893a      	ldrh	r2, [r7, #8]
 80059f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	2bff      	cmp	r3, #255	; 0xff
 8005a06:	d90e      	bls.n	8005a26 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	22ff      	movs	r2, #255	; 0xff
 8005a0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	8979      	ldrh	r1, [r7, #10]
 8005a16:	4b52      	ldr	r3, [pc, #328]	; (8005b60 <HAL_I2C_Master_Receive+0x1e4>)
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 fc0a 	bl	8006238 <I2C_TransferConfig>
 8005a24:	e06d      	b.n	8005b02 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	8979      	ldrh	r1, [r7, #10]
 8005a38:	4b49      	ldr	r3, [pc, #292]	; (8005b60 <HAL_I2C_Master_Receive+0x1e4>)
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 fbf9 	bl	8006238 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005a46:	e05c      	b.n	8005b02 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	6a39      	ldr	r1, [r7, #32]
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 fa91 	bl	8005f74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e07c      	b.n	8005b56 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	3b01      	subs	r3, #1
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d034      	beq.n	8005b02 <HAL_I2C_Master_Receive+0x186>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d130      	bne.n	8005b02 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2180      	movs	r1, #128	; 0x80
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 f988 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e04d      	b.n	8005b56 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	2bff      	cmp	r3, #255	; 0xff
 8005ac2:	d90e      	bls.n	8005ae2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	22ff      	movs	r2, #255	; 0xff
 8005ac8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	8979      	ldrh	r1, [r7, #10]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 fbac 	bl	8006238 <I2C_TransferConfig>
 8005ae0:	e00f      	b.n	8005b02 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	8979      	ldrh	r1, [r7, #10]
 8005af4:	2300      	movs	r3, #0
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 fb9b 	bl	8006238 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d19d      	bne.n	8005a48 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	6a39      	ldr	r1, [r7, #32]
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 f9eb 	bl	8005eec <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e01a      	b.n	8005b56 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2220      	movs	r2, #32
 8005b26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6859      	ldr	r1, [r3, #4]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	4b0c      	ldr	r3, [pc, #48]	; (8005b64 <HAL_I2C_Master_Receive+0x1e8>)
 8005b34:	400b      	ands	r3, r1
 8005b36:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b50:	2300      	movs	r3, #0
 8005b52:	e000      	b.n	8005b56 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005b54:	2302      	movs	r3, #2
  }
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3718      	adds	r7, #24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	80002400 	.word	0x80002400
 8005b64:	fe00e800 	.word	0xfe00e800

08005b68 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08a      	sub	sp, #40	; 0x28
 8005b6c:	af02      	add	r7, sp, #8
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	607a      	str	r2, [r7, #4]
 8005b72:	603b      	str	r3, [r7, #0]
 8005b74:	460b      	mov	r3, r1
 8005b76:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b20      	cmp	r3, #32
 8005b86:	f040 80ef 	bne.w	8005d68 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b98:	d101      	bne.n	8005b9e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e0e5      	b.n	8005d6a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_I2C_IsDeviceReady+0x44>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e0de      	b.n	8005d6a <HAL_I2C_IsDeviceReady+0x202>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2224      	movs	r2, #36	; 0x24
 8005bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d105      	bne.n	8005bd6 <HAL_I2C_IsDeviceReady+0x6e>
 8005bca:	897b      	ldrh	r3, [r7, #10]
 8005bcc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005bd0:	4b68      	ldr	r3, [pc, #416]	; (8005d74 <HAL_I2C_IsDeviceReady+0x20c>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	e004      	b.n	8005be0 <HAL_I2C_IsDeviceReady+0x78>
 8005bd6:	897b      	ldrh	r3, [r7, #10]
 8005bd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bdc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	6812      	ldr	r2, [r2, #0]
 8005be4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005be6:	f7fd fa1b 	bl	8003020 <HAL_GetTick>
 8005bea:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	f003 0320 	and.w	r3, r3, #32
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	bf0c      	ite	eq
 8005bfa:	2301      	moveq	r3, #1
 8005bfc:	2300      	movne	r3, #0
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	f003 0310 	and.w	r3, r3, #16
 8005c0c:	2b10      	cmp	r3, #16
 8005c0e:	bf0c      	ite	eq
 8005c10:	2301      	moveq	r3, #1
 8005c12:	2300      	movne	r3, #0
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005c18:	e034      	b.n	8005c84 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c20:	d01a      	beq.n	8005c58 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c22:	f7fd f9fd 	bl	8003020 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d302      	bcc.n	8005c38 <HAL_I2C_IsDeviceReady+0xd0>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10f      	bne.n	8005c58 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c44:	f043 0220 	orr.w	r2, r3, #32
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e088      	b.n	8005d6a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b20      	cmp	r3, #32
 8005c64:	bf0c      	ite	eq
 8005c66:	2301      	moveq	r3, #1
 8005c68:	2300      	movne	r3, #0
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	2b10      	cmp	r3, #16
 8005c7a:	bf0c      	ite	eq
 8005c7c:	2301      	moveq	r3, #1
 8005c7e:	2300      	movne	r3, #0
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005c84:	7ffb      	ldrb	r3, [r7, #31]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d102      	bne.n	8005c90 <HAL_I2C_IsDeviceReady+0x128>
 8005c8a:	7fbb      	ldrb	r3, [r7, #30]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d0c4      	beq.n	8005c1a <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	f003 0310 	and.w	r3, r3, #16
 8005c9a:	2b10      	cmp	r3, #16
 8005c9c:	d01a      	beq.n	8005cd4 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2120      	movs	r1, #32
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 f889 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e058      	b.n	8005d6a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	e04a      	b.n	8005d6a <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	2120      	movs	r1, #32
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 f86e 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e03d      	b.n	8005d6a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2210      	movs	r2, #16
 8005cf4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d118      	bne.n	8005d38 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d14:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2120      	movs	r1, #32
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 f84d 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e01c      	b.n	8005d6a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2220      	movs	r2, #32
 8005d36:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	f63f af3d 	bhi.w	8005bc2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d54:	f043 0220 	orr.w	r2, r3, #32
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e000      	b.n	8005d6a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8005d68:	2302      	movs	r3, #2
  }
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3720      	adds	r7, #32
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	02002000 	.word	0x02002000

08005d78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d103      	bne.n	8005d96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2200      	movs	r2, #0
 8005d94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d007      	beq.n	8005db4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	699a      	ldr	r2, [r3, #24]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0201 	orr.w	r2, r2, #1
 8005db2:	619a      	str	r2, [r3, #24]
  }
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	603b      	str	r3, [r7, #0]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dd0:	e031      	b.n	8005e36 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd8:	d02d      	beq.n	8005e36 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dda:	f7fd f921 	bl	8003020 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d302      	bcc.n	8005df0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d122      	bne.n	8005e36 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	bf0c      	ite	eq
 8005e00:	2301      	moveq	r3, #1
 8005e02:	2300      	movne	r3, #0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	461a      	mov	r2, r3
 8005e08:	79fb      	ldrb	r3, [r7, #7]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d113      	bne.n	8005e36 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e12:	f043 0220 	orr.w	r2, r3, #32
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e00f      	b.n	8005e56 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	699a      	ldr	r2, [r3, #24]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	bf0c      	ite	eq
 8005e46:	2301      	moveq	r3, #1
 8005e48:	2300      	movne	r3, #0
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	79fb      	ldrb	r3, [r7, #7]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d0be      	beq.n	8005dd2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e6a:	e033      	b.n	8005ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	68b9      	ldr	r1, [r7, #8]
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 f901 	bl	8006078 <I2C_IsErrorOccurred>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e031      	b.n	8005ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e86:	d025      	beq.n	8005ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e88:	f7fd f8ca 	bl	8003020 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d302      	bcc.n	8005e9e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d11a      	bne.n	8005ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d013      	beq.n	8005ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb0:	f043 0220 	orr.w	r2, r3, #32
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e007      	b.n	8005ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d1c4      	bne.n	8005e6c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ef8:	e02f      	b.n	8005f5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	68b9      	ldr	r1, [r7, #8]
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 f8ba 	bl	8006078 <I2C_IsErrorOccurred>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e02d      	b.n	8005f6a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f0e:	f7fd f887 	bl	8003020 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d302      	bcc.n	8005f24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d11a      	bne.n	8005f5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	f003 0320 	and.w	r3, r3, #32
 8005f2e:	2b20      	cmp	r3, #32
 8005f30:	d013      	beq.n	8005f5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f36:	f043 0220 	orr.w	r2, r3, #32
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2220      	movs	r2, #32
 8005f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e007      	b.n	8005f6a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d1c8      	bne.n	8005efa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
	...

08005f74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f80:	e06b      	b.n	800605a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	68b9      	ldr	r1, [r7, #8]
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f000 f876 	bl	8006078 <I2C_IsErrorOccurred>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e069      	b.n	800606a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	f003 0320 	and.w	r3, r3, #32
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	d138      	bne.n	8006016 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	f003 0304 	and.w	r3, r3, #4
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	d105      	bne.n	8005fbe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	e055      	b.n	800606a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	f003 0310 	and.w	r3, r3, #16
 8005fc8:	2b10      	cmp	r3, #16
 8005fca:	d107      	bne.n	8005fdc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2210      	movs	r2, #16
 8005fd2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2204      	movs	r2, #4
 8005fd8:	645a      	str	r2, [r3, #68]	; 0x44
 8005fda:	e002      	b.n	8005fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6859      	ldr	r1, [r3, #4]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	4b1f      	ldr	r3, [pc, #124]	; (8006074 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8005ff6:	400b      	ands	r3, r1
 8005ff8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e029      	b.n	800606a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006016:	f7fd f803 	bl	8003020 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	429a      	cmp	r2, r3
 8006024:	d302      	bcc.n	800602c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d116      	bne.n	800605a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	f003 0304 	and.w	r3, r3, #4
 8006036:	2b04      	cmp	r3, #4
 8006038:	d00f      	beq.n	800605a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800603e:	f043 0220 	orr.w	r2, r3, #32
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2220      	movs	r2, #32
 800604a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e007      	b.n	800606a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b04      	cmp	r3, #4
 8006066:	d18c      	bne.n	8005f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	fe00e800 	.word	0xfe00e800

08006078 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08a      	sub	sp, #40	; 0x28
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006084:	2300      	movs	r3, #0
 8006086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006092:	2300      	movs	r3, #0
 8006094:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	f003 0310 	and.w	r3, r3, #16
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d068      	beq.n	8006176 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2210      	movs	r2, #16
 80060aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060ac:	e049      	b.n	8006142 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b4:	d045      	beq.n	8006142 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80060b6:	f7fc ffb3 	bl	8003020 <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d302      	bcc.n	80060cc <I2C_IsErrorOccurred+0x54>
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d13a      	bne.n	8006142 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ee:	d121      	bne.n	8006134 <I2C_IsErrorOccurred+0xbc>
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060f6:	d01d      	beq.n	8006134 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80060f8:	7cfb      	ldrb	r3, [r7, #19]
 80060fa:	2b20      	cmp	r3, #32
 80060fc:	d01a      	beq.n	8006134 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800610c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800610e:	f7fc ff87 	bl	8003020 <HAL_GetTick>
 8006112:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006114:	e00e      	b.n	8006134 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006116:	f7fc ff83 	bl	8003020 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b19      	cmp	r3, #25
 8006122:	d907      	bls.n	8006134 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	f043 0320 	orr.w	r3, r3, #32
 800612a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006132:	e006      	b.n	8006142 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	f003 0320 	and.w	r3, r3, #32
 800613e:	2b20      	cmp	r3, #32
 8006140:	d1e9      	bne.n	8006116 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	f003 0320 	and.w	r3, r3, #32
 800614c:	2b20      	cmp	r3, #32
 800614e:	d003      	beq.n	8006158 <I2C_IsErrorOccurred+0xe0>
 8006150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006154:	2b00      	cmp	r3, #0
 8006156:	d0aa      	beq.n	80060ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800615c:	2b00      	cmp	r3, #0
 800615e:	d103      	bne.n	8006168 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2220      	movs	r2, #32
 8006166:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	f043 0304 	orr.w	r3, r3, #4
 800616e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00b      	beq.n	80061a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	f043 0301 	orr.w	r3, r3, #1
 800618e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006198:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00b      	beq.n	80061c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	f043 0308 	orr.w	r3, r3, #8
 80061b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00b      	beq.n	80061e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	f043 0302 	orr.w	r3, r3, #2
 80061d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80061e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d01c      	beq.n	8006226 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f7ff fdc3 	bl	8005d78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6859      	ldr	r1, [r3, #4]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	4b0d      	ldr	r3, [pc, #52]	; (8006234 <I2C_IsErrorOccurred+0x1bc>)
 80061fe:	400b      	ands	r3, r1
 8006200:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	431a      	orrs	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2220      	movs	r2, #32
 8006212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800622a:	4618      	mov	r0, r3
 800622c:	3728      	adds	r7, #40	; 0x28
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	fe00e800 	.word	0xfe00e800

08006238 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	607b      	str	r3, [r7, #4]
 8006242:	460b      	mov	r3, r1
 8006244:	817b      	strh	r3, [r7, #10]
 8006246:	4613      	mov	r3, r2
 8006248:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800624a:	897b      	ldrh	r3, [r7, #10]
 800624c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006250:	7a7b      	ldrb	r3, [r7, #9]
 8006252:	041b      	lsls	r3, r3, #16
 8006254:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006258:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	4313      	orrs	r3, r2
 8006262:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006266:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	0d5b      	lsrs	r3, r3, #21
 8006272:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006276:	4b08      	ldr	r3, [pc, #32]	; (8006298 <I2C_TransferConfig+0x60>)
 8006278:	430b      	orrs	r3, r1
 800627a:	43db      	mvns	r3, r3
 800627c:	ea02 0103 	and.w	r1, r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	430a      	orrs	r2, r1
 8006288:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800628a:	bf00      	nop
 800628c:	371c      	adds	r7, #28
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	03ff63ff 	.word	0x03ff63ff

0800629c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b20      	cmp	r3, #32
 80062b0:	d138      	bne.n	8006324 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80062bc:	2302      	movs	r3, #2
 80062be:	e032      	b.n	8006326 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2224      	movs	r2, #36	; 0x24
 80062cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f022 0201 	bic.w	r2, r2, #1
 80062de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6819      	ldr	r1, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0201 	orr.w	r2, r2, #1
 800630e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2220      	movs	r2, #32
 8006314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	e000      	b.n	8006326 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006324:	2302      	movs	r3, #2
  }
}
 8006326:	4618      	mov	r0, r3
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006332:	b480      	push	{r7}
 8006334:	b085      	sub	sp, #20
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b20      	cmp	r3, #32
 8006346:	d139      	bne.n	80063bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800634e:	2b01      	cmp	r3, #1
 8006350:	d101      	bne.n	8006356 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006352:	2302      	movs	r3, #2
 8006354:	e033      	b.n	80063be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2224      	movs	r2, #36	; 0x24
 8006362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 0201 	bic.w	r2, r2, #1
 8006374:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006384:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	021b      	lsls	r3, r3, #8
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0201 	orr.w	r2, r2, #1
 80063a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	e000      	b.n	80063be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80063bc:	2302      	movs	r3, #2
  }
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
	...

080063cc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e0bf      	b.n	800655e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d106      	bne.n	80063f8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7fb ff76 	bl	80022e4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	699a      	ldr	r2, [r3, #24]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800640e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6999      	ldr	r1, [r3, #24]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006424:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	430a      	orrs	r2, r1
 8006432:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6899      	ldr	r1, [r3, #8]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	4b4a      	ldr	r3, [pc, #296]	; (8006568 <HAL_LTDC_Init+0x19c>)
 8006440:	400b      	ands	r3, r1
 8006442:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	041b      	lsls	r3, r3, #16
 800644a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6899      	ldr	r1, [r3, #8]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699a      	ldr	r2, [r3, #24]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	431a      	orrs	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68d9      	ldr	r1, [r3, #12]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	4b3e      	ldr	r3, [pc, #248]	; (8006568 <HAL_LTDC_Init+0x19c>)
 800646e:	400b      	ands	r3, r1
 8006470:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	041b      	lsls	r3, r3, #16
 8006478:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68d9      	ldr	r1, [r3, #12]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a1a      	ldr	r2, [r3, #32]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6919      	ldr	r1, [r3, #16]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	4b33      	ldr	r3, [pc, #204]	; (8006568 <HAL_LTDC_Init+0x19c>)
 800649c:	400b      	ands	r3, r1
 800649e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a4:	041b      	lsls	r3, r3, #16
 80064a6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6919      	ldr	r1, [r3, #16]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	431a      	orrs	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6959      	ldr	r1, [r3, #20]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	4b27      	ldr	r3, [pc, #156]	; (8006568 <HAL_LTDC_Init+0x19c>)
 80064ca:	400b      	ands	r3, r1
 80064cc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d2:	041b      	lsls	r3, r3, #16
 80064d4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6959      	ldr	r1, [r3, #20]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064f2:	021b      	lsls	r3, r3, #8
 80064f4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80064fc:	041b      	lsls	r3, r3, #16
 80064fe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800650e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0206 	orr.w	r2, r2, #6
 800653a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699a      	ldr	r2, [r3, #24]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f042 0201 	orr.w	r2, r2, #1
 800654a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	f000f800 	.word	0xf000f800

0800656c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800656c:	b5b0      	push	{r4, r5, r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <HAL_LTDC_ConfigLayer+0x1a>
 8006582:	2302      	movs	r3, #2
 8006584:	e02c      	b.n	80065e0 <HAL_LTDC_ConfigLayer+0x74>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2202      	movs	r2, #2
 8006592:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2134      	movs	r1, #52	; 0x34
 800659c:	fb01 f303 	mul.w	r3, r1, r3
 80065a0:	4413      	add	r3, r2
 80065a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	4614      	mov	r4, r2
 80065aa:	461d      	mov	r5, r3
 80065ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065b8:	682b      	ldr	r3, [r5, #0]
 80065ba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	68b9      	ldr	r1, [r7, #8]
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 f811 	bl	80065e8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2201      	movs	r2, #1
 80065cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bdb0      	pop	{r4, r5, r7, pc}

080065e8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b089      	sub	sp, #36	; 0x24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	0c1b      	lsrs	r3, r3, #16
 8006600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006604:	4413      	add	r3, r2
 8006606:	041b      	lsls	r3, r3, #16
 8006608:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	01db      	lsls	r3, r3, #7
 8006614:	4413      	add	r3, r2
 8006616:	3384      	adds	r3, #132	; 0x84
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	6812      	ldr	r2, [r2, #0]
 800661e:	4611      	mov	r1, r2
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	01d2      	lsls	r2, r2, #7
 8006624:	440a      	add	r2, r1
 8006626:	3284      	adds	r2, #132	; 0x84
 8006628:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800662c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	0c1b      	lsrs	r3, r3, #16
 800663a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800663e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006640:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4619      	mov	r1, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	01db      	lsls	r3, r3, #7
 800664c:	440b      	add	r3, r1
 800664e:	3384      	adds	r3, #132	; 0x84
 8006650:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006656:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	68da      	ldr	r2, [r3, #12]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006666:	4413      	add	r3, r2
 8006668:	041b      	lsls	r3, r3, #16
 800666a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	461a      	mov	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	01db      	lsls	r3, r3, #7
 8006676:	4413      	add	r3, r2
 8006678:	3384      	adds	r3, #132	; 0x84
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	6812      	ldr	r2, [r2, #0]
 8006680:	4611      	mov	r1, r2
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	01d2      	lsls	r2, r2, #7
 8006686:	440a      	add	r2, r1
 8006688:	3284      	adds	r2, #132	; 0x84
 800668a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800668e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800669e:	4413      	add	r3, r2
 80066a0:	1c5a      	adds	r2, r3, #1
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4619      	mov	r1, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	01db      	lsls	r3, r3, #7
 80066ac:	440b      	add	r3, r1
 80066ae:	3384      	adds	r3, #132	; 0x84
 80066b0:	4619      	mov	r1, r3
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	461a      	mov	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	01db      	lsls	r3, r3, #7
 80066c2:	4413      	add	r3, r2
 80066c4:	3384      	adds	r3, #132	; 0x84
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	6812      	ldr	r2, [r2, #0]
 80066cc:	4611      	mov	r1, r2
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	01d2      	lsls	r2, r2, #7
 80066d2:	440a      	add	r2, r1
 80066d4:	3284      	adds	r2, #132	; 0x84
 80066d6:	f023 0307 	bic.w	r3, r3, #7
 80066da:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	461a      	mov	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	01db      	lsls	r3, r3, #7
 80066e6:	4413      	add	r3, r2
 80066e8:	3384      	adds	r3, #132	; 0x84
 80066ea:	461a      	mov	r2, r3
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80066f8:	021b      	lsls	r3, r3, #8
 80066fa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006702:	041b      	lsls	r3, r3, #16
 8006704:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	061b      	lsls	r3, r3, #24
 800670c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	461a      	mov	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	01db      	lsls	r3, r3, #7
 8006718:	4413      	add	r3, r2
 800671a:	3384      	adds	r3, #132	; 0x84
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	461a      	mov	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	01db      	lsls	r3, r3, #7
 8006728:	4413      	add	r3, r2
 800672a:	3384      	adds	r3, #132	; 0x84
 800672c:	461a      	mov	r2, r3
 800672e:	2300      	movs	r3, #0
 8006730:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006738:	461a      	mov	r2, r3
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	431a      	orrs	r2, r3
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	431a      	orrs	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4619      	mov	r1, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	01db      	lsls	r3, r3, #7
 800674c:	440b      	add	r3, r1
 800674e:	3384      	adds	r3, #132	; 0x84
 8006750:	4619      	mov	r1, r3
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	4313      	orrs	r3, r2
 8006756:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	461a      	mov	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	01db      	lsls	r3, r3, #7
 8006762:	4413      	add	r3, r2
 8006764:	3384      	adds	r3, #132	; 0x84
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	6812      	ldr	r2, [r2, #0]
 800676c:	4611      	mov	r1, r2
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	01d2      	lsls	r2, r2, #7
 8006772:	440a      	add	r2, r1
 8006774:	3284      	adds	r2, #132	; 0x84
 8006776:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800677a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	461a      	mov	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	01db      	lsls	r3, r3, #7
 8006786:	4413      	add	r3, r2
 8006788:	3384      	adds	r3, #132	; 0x84
 800678a:	461a      	mov	r2, r3
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	01db      	lsls	r3, r3, #7
 800679c:	4413      	add	r3, r2
 800679e:	3384      	adds	r3, #132	; 0x84
 80067a0:	69da      	ldr	r2, [r3, #28]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4619      	mov	r1, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	01db      	lsls	r3, r3, #7
 80067ac:	440b      	add	r3, r1
 80067ae:	3384      	adds	r3, #132	; 0x84
 80067b0:	4619      	mov	r1, r3
 80067b2:	4b58      	ldr	r3, [pc, #352]	; (8006914 <LTDC_SetConfig+0x32c>)
 80067b4:	4013      	ands	r3, r2
 80067b6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	69da      	ldr	r2, [r3, #28]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	68f9      	ldr	r1, [r7, #12]
 80067c2:	6809      	ldr	r1, [r1, #0]
 80067c4:	4608      	mov	r0, r1
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	01c9      	lsls	r1, r1, #7
 80067ca:	4401      	add	r1, r0
 80067cc:	3184      	adds	r1, #132	; 0x84
 80067ce:	4313      	orrs	r3, r2
 80067d0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	461a      	mov	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	01db      	lsls	r3, r3, #7
 80067dc:	4413      	add	r3, r2
 80067de:	3384      	adds	r3, #132	; 0x84
 80067e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	01db      	lsls	r3, r3, #7
 80067ec:	4413      	add	r3, r2
 80067ee:	3384      	adds	r3, #132	; 0x84
 80067f0:	461a      	mov	r2, r3
 80067f2:	2300      	movs	r3, #0
 80067f4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	461a      	mov	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	01db      	lsls	r3, r3, #7
 8006800:	4413      	add	r3, r2
 8006802:	3384      	adds	r3, #132	; 0x84
 8006804:	461a      	mov	r2, r3
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d102      	bne.n	800681a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006814:	2304      	movs	r3, #4
 8006816:	61fb      	str	r3, [r7, #28]
 8006818:	e01b      	b.n	8006852 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d102      	bne.n	8006828 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006822:	2303      	movs	r3, #3
 8006824:	61fb      	str	r3, [r7, #28]
 8006826:	e014      	b.n	8006852 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	2b04      	cmp	r3, #4
 800682e:	d00b      	beq.n	8006848 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006834:	2b02      	cmp	r3, #2
 8006836:	d007      	beq.n	8006848 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800683c:	2b03      	cmp	r3, #3
 800683e:	d003      	beq.n	8006848 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006844:	2b07      	cmp	r3, #7
 8006846:	d102      	bne.n	800684e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006848:	2302      	movs	r3, #2
 800684a:	61fb      	str	r3, [r7, #28]
 800684c:	e001      	b.n	8006852 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800684e:	2301      	movs	r3, #1
 8006850:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	01db      	lsls	r3, r3, #7
 800685c:	4413      	add	r3, r2
 800685e:	3384      	adds	r3, #132	; 0x84
 8006860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	6812      	ldr	r2, [r2, #0]
 8006866:	4611      	mov	r1, r2
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	01d2      	lsls	r2, r2, #7
 800686c:	440a      	add	r2, r1
 800686e:	3284      	adds	r2, #132	; 0x84
 8006870:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006874:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687a:	69fa      	ldr	r2, [r7, #28]
 800687c:	fb02 f303 	mul.w	r3, r2, r3
 8006880:	041a      	lsls	r2, r3, #16
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	6859      	ldr	r1, [r3, #4]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	1acb      	subs	r3, r1, r3
 800688c:	69f9      	ldr	r1, [r7, #28]
 800688e:	fb01 f303 	mul.w	r3, r1, r3
 8006892:	3307      	adds	r3, #7
 8006894:	68f9      	ldr	r1, [r7, #12]
 8006896:	6809      	ldr	r1, [r1, #0]
 8006898:	4608      	mov	r0, r1
 800689a:	6879      	ldr	r1, [r7, #4]
 800689c:	01c9      	lsls	r1, r1, #7
 800689e:	4401      	add	r1, r0
 80068a0:	3184      	adds	r1, #132	; 0x84
 80068a2:	4313      	orrs	r3, r2
 80068a4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	461a      	mov	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	01db      	lsls	r3, r3, #7
 80068b0:	4413      	add	r3, r2
 80068b2:	3384      	adds	r3, #132	; 0x84
 80068b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4619      	mov	r1, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	01db      	lsls	r3, r3, #7
 80068c0:	440b      	add	r3, r1
 80068c2:	3384      	adds	r3, #132	; 0x84
 80068c4:	4619      	mov	r1, r3
 80068c6:	4b14      	ldr	r3, [pc, #80]	; (8006918 <LTDC_SetConfig+0x330>)
 80068c8:	4013      	ands	r3, r2
 80068ca:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	461a      	mov	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	01db      	lsls	r3, r3, #7
 80068d6:	4413      	add	r3, r2
 80068d8:	3384      	adds	r3, #132	; 0x84
 80068da:	461a      	mov	r2, r3
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	461a      	mov	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	01db      	lsls	r3, r3, #7
 80068ec:	4413      	add	r3, r2
 80068ee:	3384      	adds	r3, #132	; 0x84
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	6812      	ldr	r2, [r2, #0]
 80068f6:	4611      	mov	r1, r2
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	01d2      	lsls	r2, r2, #7
 80068fc:	440a      	add	r2, r1
 80068fe:	3284      	adds	r2, #132	; 0x84
 8006900:	f043 0301 	orr.w	r3, r3, #1
 8006904:	6013      	str	r3, [r2, #0]
}
 8006906:	bf00      	nop
 8006908:	3724      	adds	r7, #36	; 0x24
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	fffff8f8 	.word	0xfffff8f8
 8006918:	fffff800 	.word	0xfffff800

0800691c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800691c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800691e:	b08f      	sub	sp, #60	; 0x3c
 8006920:	af0a      	add	r7, sp, #40	; 0x28
 8006922:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e116      	b.n	8006b5c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	d106      	bne.n	800694e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7fb ffeb 	bl	8002924 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2203      	movs	r2, #3
 8006952:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695e:	2b00      	cmp	r3, #0
 8006960:	d102      	bne.n	8006968 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4618      	mov	r0, r3
 800696e:	f005 ff15 	bl	800c79c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	603b      	str	r3, [r7, #0]
 8006978:	687e      	ldr	r6, [r7, #4]
 800697a:	466d      	mov	r5, sp
 800697c:	f106 0410 	add.w	r4, r6, #16
 8006980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006988:	e894 0003 	ldmia.w	r4, {r0, r1}
 800698c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006990:	1d33      	adds	r3, r6, #4
 8006992:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006994:	6838      	ldr	r0, [r7, #0]
 8006996:	f005 fe93 	bl	800c6c0 <USB_CoreInit>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d005      	beq.n	80069ac <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e0d7      	b.n	8006b5c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2100      	movs	r1, #0
 80069b2:	4618      	mov	r0, r3
 80069b4:	f005 ff03 	bl	800c7be <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069b8:	2300      	movs	r3, #0
 80069ba:	73fb      	strb	r3, [r7, #15]
 80069bc:	e04a      	b.n	8006a54 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80069be:	7bfa      	ldrb	r2, [r7, #15]
 80069c0:	6879      	ldr	r1, [r7, #4]
 80069c2:	4613      	mov	r3, r2
 80069c4:	00db      	lsls	r3, r3, #3
 80069c6:	4413      	add	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	440b      	add	r3, r1
 80069cc:	333d      	adds	r3, #61	; 0x3d
 80069ce:	2201      	movs	r2, #1
 80069d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80069d2:	7bfa      	ldrb	r2, [r7, #15]
 80069d4:	6879      	ldr	r1, [r7, #4]
 80069d6:	4613      	mov	r3, r2
 80069d8:	00db      	lsls	r3, r3, #3
 80069da:	4413      	add	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	440b      	add	r3, r1
 80069e0:	333c      	adds	r3, #60	; 0x3c
 80069e2:	7bfa      	ldrb	r2, [r7, #15]
 80069e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80069e6:	7bfa      	ldrb	r2, [r7, #15]
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
 80069ea:	b298      	uxth	r0, r3
 80069ec:	6879      	ldr	r1, [r7, #4]
 80069ee:	4613      	mov	r3, r2
 80069f0:	00db      	lsls	r3, r3, #3
 80069f2:	4413      	add	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	440b      	add	r3, r1
 80069f8:	3356      	adds	r3, #86	; 0x56
 80069fa:	4602      	mov	r2, r0
 80069fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80069fe:	7bfa      	ldrb	r2, [r7, #15]
 8006a00:	6879      	ldr	r1, [r7, #4]
 8006a02:	4613      	mov	r3, r2
 8006a04:	00db      	lsls	r3, r3, #3
 8006a06:	4413      	add	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	440b      	add	r3, r1
 8006a0c:	3340      	adds	r3, #64	; 0x40
 8006a0e:	2200      	movs	r2, #0
 8006a10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006a12:	7bfa      	ldrb	r2, [r7, #15]
 8006a14:	6879      	ldr	r1, [r7, #4]
 8006a16:	4613      	mov	r3, r2
 8006a18:	00db      	lsls	r3, r3, #3
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	440b      	add	r3, r1
 8006a20:	3344      	adds	r3, #68	; 0x44
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006a26:	7bfa      	ldrb	r2, [r7, #15]
 8006a28:	6879      	ldr	r1, [r7, #4]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	00db      	lsls	r3, r3, #3
 8006a2e:	4413      	add	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	440b      	add	r3, r1
 8006a34:	3348      	adds	r3, #72	; 0x48
 8006a36:	2200      	movs	r2, #0
 8006a38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006a3a:	7bfa      	ldrb	r2, [r7, #15]
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	00db      	lsls	r3, r3, #3
 8006a42:	4413      	add	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	440b      	add	r3, r1
 8006a48:	334c      	adds	r3, #76	; 0x4c
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a4e:	7bfb      	ldrb	r3, [r7, #15]
 8006a50:	3301      	adds	r3, #1
 8006a52:	73fb      	strb	r3, [r7, #15]
 8006a54:	7bfa      	ldrb	r2, [r7, #15]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d3af      	bcc.n	80069be <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a5e:	2300      	movs	r3, #0
 8006a60:	73fb      	strb	r3, [r7, #15]
 8006a62:	e044      	b.n	8006aee <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006a64:	7bfa      	ldrb	r2, [r7, #15]
 8006a66:	6879      	ldr	r1, [r7, #4]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	4413      	add	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	440b      	add	r3, r1
 8006a72:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006a76:	2200      	movs	r2, #0
 8006a78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006a7a:	7bfa      	ldrb	r2, [r7, #15]
 8006a7c:	6879      	ldr	r1, [r7, #4]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	00db      	lsls	r3, r3, #3
 8006a82:	4413      	add	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	440b      	add	r3, r1
 8006a88:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006a8c:	7bfa      	ldrb	r2, [r7, #15]
 8006a8e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006a90:	7bfa      	ldrb	r2, [r7, #15]
 8006a92:	6879      	ldr	r1, [r7, #4]
 8006a94:	4613      	mov	r3, r2
 8006a96:	00db      	lsls	r3, r3, #3
 8006a98:	4413      	add	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	440b      	add	r3, r1
 8006a9e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006aa6:	7bfa      	ldrb	r2, [r7, #15]
 8006aa8:	6879      	ldr	r1, [r7, #4]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	00db      	lsls	r3, r3, #3
 8006aae:	4413      	add	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	440b      	add	r3, r1
 8006ab4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006ab8:	2200      	movs	r2, #0
 8006aba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006abc:	7bfa      	ldrb	r2, [r7, #15]
 8006abe:	6879      	ldr	r1, [r7, #4]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	4413      	add	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	440b      	add	r3, r1
 8006aca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006ace:	2200      	movs	r2, #0
 8006ad0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006ad2:	7bfa      	ldrb	r2, [r7, #15]
 8006ad4:	6879      	ldr	r1, [r7, #4]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	00db      	lsls	r3, r3, #3
 8006ada:	4413      	add	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	440b      	add	r3, r1
 8006ae0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
 8006aea:	3301      	adds	r3, #1
 8006aec:	73fb      	strb	r3, [r7, #15]
 8006aee:	7bfa      	ldrb	r2, [r7, #15]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d3b5      	bcc.n	8006a64 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	603b      	str	r3, [r7, #0]
 8006afe:	687e      	ldr	r6, [r7, #4]
 8006b00:	466d      	mov	r5, sp
 8006b02:	f106 0410 	add.w	r4, r6, #16
 8006b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006b12:	e885 0003 	stmia.w	r5, {r0, r1}
 8006b16:	1d33      	adds	r3, r6, #4
 8006b18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b1a:	6838      	ldr	r0, [r7, #0]
 8006b1c:	f005 fe9c 	bl	800c858 <USB_DevInit>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d005      	beq.n	8006b32 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2202      	movs	r2, #2
 8006b2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e014      	b.n	8006b5c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d102      	bne.n	8006b50 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f80a 	bl	8006b64 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f006 f85a 	bl	800cc0e <USB_DevDisconnect>

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b92:	4b05      	ldr	r3, [pc, #20]	; (8006ba8 <HAL_PCDEx_ActivateLPM+0x44>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	10000003 	.word	0x10000003

08006bac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006bb4:	4b19      	ldr	r3, [pc, #100]	; (8006c1c <HAL_PWREx_ConfigSupply+0x70>)
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f003 0304 	and.w	r3, r3, #4
 8006bbc:	2b04      	cmp	r3, #4
 8006bbe:	d00a      	beq.n	8006bd6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006bc0:	4b16      	ldr	r3, [pc, #88]	; (8006c1c <HAL_PWREx_ConfigSupply+0x70>)
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d001      	beq.n	8006bd2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e01f      	b.n	8006c12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	e01d      	b.n	8006c12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006bd6:	4b11      	ldr	r3, [pc, #68]	; (8006c1c <HAL_PWREx_ConfigSupply+0x70>)
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f023 0207 	bic.w	r2, r3, #7
 8006bde:	490f      	ldr	r1, [pc, #60]	; (8006c1c <HAL_PWREx_ConfigSupply+0x70>)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006be6:	f7fc fa1b 	bl	8003020 <HAL_GetTick>
 8006bea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006bec:	e009      	b.n	8006c02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006bee:	f7fc fa17 	bl	8003020 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bfc:	d901      	bls.n	8006c02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e007      	b.n	8006c12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006c02:	4b06      	ldr	r3, [pc, #24]	; (8006c1c <HAL_PWREx_ConfigSupply+0x70>)
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c0e:	d1ee      	bne.n	8006bee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	58024800 	.word	0x58024800

08006c20 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006c20:	b480      	push	{r7}
 8006c22:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006c24:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	4a04      	ldr	r2, [pc, #16]	; (8006c3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c2e:	60d3      	str	r3, [r2, #12]
}
 8006c30:	bf00      	nop
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	58024800 	.word	0x58024800

08006c40 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af02      	add	r7, sp, #8
 8006c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006c48:	f7fc f9ea 	bl	8003020 <HAL_GetTick>
 8006c4c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e05f      	b.n	8006d18 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d107      	bne.n	8006c74 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7fb fc2b 	bl	80024c0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006c6a:	f241 3188 	movw	r1, #5000	; 0x1388
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f85a 	bl	8006d28 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	3b01      	subs	r3, #1
 8006c84:	021a      	lsls	r2, r3, #8
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	2120      	movs	r1, #32
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f852 	bl	8006d44 <QSPI_WaitFlagStateUntilTimeout>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006ca4:	7afb      	ldrb	r3, [r7, #11]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d135      	bne.n	8006d16 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	4b1b      	ldr	r3, [pc, #108]	; (8006d20 <HAL_QSPI_Init+0xe0>)
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	6852      	ldr	r2, [r2, #4]
 8006cb8:	0611      	lsls	r1, r2, #24
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	68d2      	ldr	r2, [r2, #12]
 8006cbe:	4311      	orrs	r1, r2
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	69d2      	ldr	r2, [r2, #28]
 8006cc4:	4311      	orrs	r1, r2
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	6a12      	ldr	r2, [r2, #32]
 8006cca:	4311      	orrs	r1, r2
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	6812      	ldr	r2, [r2, #0]
 8006cd0:	430b      	orrs	r3, r1
 8006cd2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	4b12      	ldr	r3, [pc, #72]	; (8006d24 <HAL_QSPI_Init+0xe4>)
 8006cdc:	4013      	ands	r3, r2
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	6912      	ldr	r2, [r2, #16]
 8006ce2:	0411      	lsls	r1, r2, #16
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	6952      	ldr	r2, [r2, #20]
 8006ce8:	4311      	orrs	r1, r2
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	6992      	ldr	r2, [r2, #24]
 8006cee:	4311      	orrs	r1, r2
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	6812      	ldr	r2, [r2, #0]
 8006cf4:	430b      	orrs	r3, r1
 8006cf6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f042 0201 	orr.w	r2, r2, #1
 8006d06:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8006d16:	7afb      	ldrb	r3, [r7, #11]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	00ffff2f 	.word	0x00ffff2f
 8006d24:	ffe0f8fe 	.word	0xffe0f8fe

08006d28 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	603b      	str	r3, [r7, #0]
 8006d50:	4613      	mov	r3, r2
 8006d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006d54:	e01a      	b.n	8006d8c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5c:	d016      	beq.n	8006d8c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d5e:	f7fc f95f 	bl	8003020 <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d302      	bcc.n	8006d74 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10b      	bne.n	8006d8c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2204      	movs	r2, #4
 8006d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d80:	f043 0201 	orr.w	r2, r3, #1
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e00e      	b.n	8006daa <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689a      	ldr	r2, [r3, #8]
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	4013      	ands	r3, r2
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	bf14      	ite	ne
 8006d9a:	2301      	movne	r3, #1
 8006d9c:	2300      	moveq	r3, #0
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	461a      	mov	r2, r3
 8006da2:	79fb      	ldrb	r3, [r7, #7]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d1d6      	bne.n	8006d56 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
	...

08006db4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b08c      	sub	sp, #48	; 0x30
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d102      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	f000 bc48 	b.w	8007658 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0301 	and.w	r3, r3, #1
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 8088 	beq.w	8006ee6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dd6:	4b99      	ldr	r3, [pc, #612]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006de0:	4b96      	ldr	r3, [pc, #600]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de8:	2b10      	cmp	r3, #16
 8006dea:	d007      	beq.n	8006dfc <HAL_RCC_OscConfig+0x48>
 8006dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dee:	2b18      	cmp	r3, #24
 8006df0:	d111      	bne.n	8006e16 <HAL_RCC_OscConfig+0x62>
 8006df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df4:	f003 0303 	and.w	r3, r3, #3
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d10c      	bne.n	8006e16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dfc:	4b8f      	ldr	r3, [pc, #572]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d06d      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x130>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d169      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	f000 bc21 	b.w	8007658 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e1e:	d106      	bne.n	8006e2e <HAL_RCC_OscConfig+0x7a>
 8006e20:	4b86      	ldr	r3, [pc, #536]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a85      	ldr	r2, [pc, #532]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e2a:	6013      	str	r3, [r2, #0]
 8006e2c:	e02e      	b.n	8006e8c <HAL_RCC_OscConfig+0xd8>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10c      	bne.n	8006e50 <HAL_RCC_OscConfig+0x9c>
 8006e36:	4b81      	ldr	r3, [pc, #516]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a80      	ldr	r2, [pc, #512]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e40:	6013      	str	r3, [r2, #0]
 8006e42:	4b7e      	ldr	r3, [pc, #504]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a7d      	ldr	r2, [pc, #500]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e4c:	6013      	str	r3, [r2, #0]
 8006e4e:	e01d      	b.n	8006e8c <HAL_RCC_OscConfig+0xd8>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e58:	d10c      	bne.n	8006e74 <HAL_RCC_OscConfig+0xc0>
 8006e5a:	4b78      	ldr	r3, [pc, #480]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a77      	ldr	r2, [pc, #476]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	4b75      	ldr	r3, [pc, #468]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a74      	ldr	r2, [pc, #464]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e70:	6013      	str	r3, [r2, #0]
 8006e72:	e00b      	b.n	8006e8c <HAL_RCC_OscConfig+0xd8>
 8006e74:	4b71      	ldr	r3, [pc, #452]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a70      	ldr	r2, [pc, #448]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e7e:	6013      	str	r3, [r2, #0]
 8006e80:	4b6e      	ldr	r3, [pc, #440]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a6d      	ldr	r2, [pc, #436]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d013      	beq.n	8006ebc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e94:	f7fc f8c4 	bl	8003020 <HAL_GetTick>
 8006e98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e9c:	f7fc f8c0 	bl	8003020 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b64      	cmp	r3, #100	; 0x64
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e3d4      	b.n	8007658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006eae:	4b63      	ldr	r3, [pc, #396]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d0f0      	beq.n	8006e9c <HAL_RCC_OscConfig+0xe8>
 8006eba:	e014      	b.n	8006ee6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ebc:	f7fc f8b0 	bl	8003020 <HAL_GetTick>
 8006ec0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ec2:	e008      	b.n	8006ed6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ec4:	f7fc f8ac 	bl	8003020 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	2b64      	cmp	r3, #100	; 0x64
 8006ed0:	d901      	bls.n	8006ed6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e3c0      	b.n	8007658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ed6:	4b59      	ldr	r3, [pc, #356]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1f0      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x110>
 8006ee2:	e000      	b.n	8006ee6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f000 80ca 	beq.w	8007088 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ef4:	4b51      	ldr	r3, [pc, #324]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006efc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006efe:	4b4f      	ldr	r3, [pc, #316]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f02:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d007      	beq.n	8006f1a <HAL_RCC_OscConfig+0x166>
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	2b18      	cmp	r3, #24
 8006f0e:	d156      	bne.n	8006fbe <HAL_RCC_OscConfig+0x20a>
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	f003 0303 	and.w	r3, r3, #3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d151      	bne.n	8006fbe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f1a:	4b48      	ldr	r3, [pc, #288]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0304 	and.w	r3, r3, #4
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d005      	beq.n	8006f32 <HAL_RCC_OscConfig+0x17e>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e392      	b.n	8007658 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f32:	4b42      	ldr	r3, [pc, #264]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f023 0219 	bic.w	r2, r3, #25
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	493f      	ldr	r1, [pc, #252]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f44:	f7fc f86c 	bl	8003020 <HAL_GetTick>
 8006f48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f4a:	e008      	b.n	8006f5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f4c:	f7fc f868 	bl	8003020 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d901      	bls.n	8006f5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e37c      	b.n	8007658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f5e:	4b37      	ldr	r3, [pc, #220]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0304 	and.w	r3, r3, #4
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d0f0      	beq.n	8006f4c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f6a:	f7fc f889 	bl	8003080 <HAL_GetREVID>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	f241 0203 	movw	r2, #4099	; 0x1003
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d817      	bhi.n	8006fa8 <HAL_RCC_OscConfig+0x1f4>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	2b40      	cmp	r3, #64	; 0x40
 8006f7e:	d108      	bne.n	8006f92 <HAL_RCC_OscConfig+0x1de>
 8006f80:	4b2e      	ldr	r3, [pc, #184]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006f88:	4a2c      	ldr	r2, [pc, #176]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f8e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f90:	e07a      	b.n	8007088 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f92:	4b2a      	ldr	r3, [pc, #168]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	031b      	lsls	r3, r3, #12
 8006fa0:	4926      	ldr	r1, [pc, #152]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fa6:	e06f      	b.n	8007088 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fa8:	4b24      	ldr	r3, [pc, #144]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	061b      	lsls	r3, r3, #24
 8006fb6:	4921      	ldr	r1, [pc, #132]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fbc:	e064      	b.n	8007088 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d047      	beq.n	8007056 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006fc6:	4b1d      	ldr	r3, [pc, #116]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f023 0219 	bic.w	r2, r3, #25
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	491a      	ldr	r1, [pc, #104]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd8:	f7fc f822 	bl	8003020 <HAL_GetTick>
 8006fdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fde:	e008      	b.n	8006ff2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fe0:	f7fc f81e 	bl	8003020 <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d901      	bls.n	8006ff2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e332      	b.n	8007658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ff2:	4b12      	ldr	r3, [pc, #72]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0304 	and.w	r3, r3, #4
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d0f0      	beq.n	8006fe0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ffe:	f7fc f83f 	bl	8003080 <HAL_GetREVID>
 8007002:	4603      	mov	r3, r0
 8007004:	f241 0203 	movw	r2, #4099	; 0x1003
 8007008:	4293      	cmp	r3, r2
 800700a:	d819      	bhi.n	8007040 <HAL_RCC_OscConfig+0x28c>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	2b40      	cmp	r3, #64	; 0x40
 8007012:	d108      	bne.n	8007026 <HAL_RCC_OscConfig+0x272>
 8007014:	4b09      	ldr	r3, [pc, #36]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800701c:	4a07      	ldr	r2, [pc, #28]	; (800703c <HAL_RCC_OscConfig+0x288>)
 800701e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007022:	6053      	str	r3, [r2, #4]
 8007024:	e030      	b.n	8007088 <HAL_RCC_OscConfig+0x2d4>
 8007026:	4b05      	ldr	r3, [pc, #20]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	031b      	lsls	r3, r3, #12
 8007034:	4901      	ldr	r1, [pc, #4]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8007036:	4313      	orrs	r3, r2
 8007038:	604b      	str	r3, [r1, #4]
 800703a:	e025      	b.n	8007088 <HAL_RCC_OscConfig+0x2d4>
 800703c:	58024400 	.word	0x58024400
 8007040:	4b9a      	ldr	r3, [pc, #616]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	061b      	lsls	r3, r3, #24
 800704e:	4997      	ldr	r1, [pc, #604]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007050:	4313      	orrs	r3, r2
 8007052:	604b      	str	r3, [r1, #4]
 8007054:	e018      	b.n	8007088 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007056:	4b95      	ldr	r3, [pc, #596]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a94      	ldr	r2, [pc, #592]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 800705c:	f023 0301 	bic.w	r3, r3, #1
 8007060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007062:	f7fb ffdd 	bl	8003020 <HAL_GetTick>
 8007066:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007068:	e008      	b.n	800707c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800706a:	f7fb ffd9 	bl	8003020 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	2b02      	cmp	r3, #2
 8007076:	d901      	bls.n	800707c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e2ed      	b.n	8007658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800707c:	4b8b      	ldr	r3, [pc, #556]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1f0      	bne.n	800706a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0310 	and.w	r3, r3, #16
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 80a9 	beq.w	80071e8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007096:	4b85      	ldr	r3, [pc, #532]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800709e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070a0:	4b82      	ldr	r3, [pc, #520]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 80070a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d007      	beq.n	80070bc <HAL_RCC_OscConfig+0x308>
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	2b18      	cmp	r3, #24
 80070b0:	d13a      	bne.n	8007128 <HAL_RCC_OscConfig+0x374>
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f003 0303 	and.w	r3, r3, #3
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d135      	bne.n	8007128 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070bc:	4b7b      	ldr	r3, [pc, #492]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d005      	beq.n	80070d4 <HAL_RCC_OscConfig+0x320>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	2b80      	cmp	r3, #128	; 0x80
 80070ce:	d001      	beq.n	80070d4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e2c1      	b.n	8007658 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070d4:	f7fb ffd4 	bl	8003080 <HAL_GetREVID>
 80070d8:	4603      	mov	r3, r0
 80070da:	f241 0203 	movw	r2, #4099	; 0x1003
 80070de:	4293      	cmp	r3, r2
 80070e0:	d817      	bhi.n	8007112 <HAL_RCC_OscConfig+0x35e>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	2b20      	cmp	r3, #32
 80070e8:	d108      	bne.n	80070fc <HAL_RCC_OscConfig+0x348>
 80070ea:	4b70      	ldr	r3, [pc, #448]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80070f2:	4a6e      	ldr	r2, [pc, #440]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 80070f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070f8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070fa:	e075      	b.n	80071e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070fc:	4b6b      	ldr	r3, [pc, #428]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a1b      	ldr	r3, [r3, #32]
 8007108:	069b      	lsls	r3, r3, #26
 800710a:	4968      	ldr	r1, [pc, #416]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 800710c:	4313      	orrs	r3, r2
 800710e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007110:	e06a      	b.n	80071e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007112:	4b66      	ldr	r3, [pc, #408]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	061b      	lsls	r3, r3, #24
 8007120:	4962      	ldr	r1, [pc, #392]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007122:	4313      	orrs	r3, r2
 8007124:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007126:	e05f      	b.n	80071e8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d042      	beq.n	80071b6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007130:	4b5e      	ldr	r3, [pc, #376]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a5d      	ldr	r2, [pc, #372]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800713c:	f7fb ff70 	bl	8003020 <HAL_GetTick>
 8007140:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007142:	e008      	b.n	8007156 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007144:	f7fb ff6c 	bl	8003020 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b02      	cmp	r3, #2
 8007150:	d901      	bls.n	8007156 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e280      	b.n	8007658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007156:	4b55      	ldr	r3, [pc, #340]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0f0      	beq.n	8007144 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007162:	f7fb ff8d 	bl	8003080 <HAL_GetREVID>
 8007166:	4603      	mov	r3, r0
 8007168:	f241 0203 	movw	r2, #4099	; 0x1003
 800716c:	4293      	cmp	r3, r2
 800716e:	d817      	bhi.n	80071a0 <HAL_RCC_OscConfig+0x3ec>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	2b20      	cmp	r3, #32
 8007176:	d108      	bne.n	800718a <HAL_RCC_OscConfig+0x3d6>
 8007178:	4b4c      	ldr	r3, [pc, #304]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007180:	4a4a      	ldr	r2, [pc, #296]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007182:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007186:	6053      	str	r3, [r2, #4]
 8007188:	e02e      	b.n	80071e8 <HAL_RCC_OscConfig+0x434>
 800718a:	4b48      	ldr	r3, [pc, #288]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	069b      	lsls	r3, r3, #26
 8007198:	4944      	ldr	r1, [pc, #272]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 800719a:	4313      	orrs	r3, r2
 800719c:	604b      	str	r3, [r1, #4]
 800719e:	e023      	b.n	80071e8 <HAL_RCC_OscConfig+0x434>
 80071a0:	4b42      	ldr	r3, [pc, #264]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	061b      	lsls	r3, r3, #24
 80071ae:	493f      	ldr	r1, [pc, #252]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	60cb      	str	r3, [r1, #12]
 80071b4:	e018      	b.n	80071e8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80071b6:	4b3d      	ldr	r3, [pc, #244]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a3c      	ldr	r2, [pc, #240]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 80071bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c2:	f7fb ff2d 	bl	8003020 <HAL_GetTick>
 80071c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80071c8:	e008      	b.n	80071dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80071ca:	f7fb ff29 	bl	8003020 <HAL_GetTick>
 80071ce:	4602      	mov	r2, r0
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d901      	bls.n	80071dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e23d      	b.n	8007658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80071dc:	4b33      	ldr	r3, [pc, #204]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1f0      	bne.n	80071ca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0308 	and.w	r3, r3, #8
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d036      	beq.n	8007262 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d019      	beq.n	8007230 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071fc:	4b2b      	ldr	r3, [pc, #172]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 80071fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007200:	4a2a      	ldr	r2, [pc, #168]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007202:	f043 0301 	orr.w	r3, r3, #1
 8007206:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007208:	f7fb ff0a 	bl	8003020 <HAL_GetTick>
 800720c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800720e:	e008      	b.n	8007222 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007210:	f7fb ff06 	bl	8003020 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b02      	cmp	r3, #2
 800721c:	d901      	bls.n	8007222 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e21a      	b.n	8007658 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007222:	4b22      	ldr	r3, [pc, #136]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0f0      	beq.n	8007210 <HAL_RCC_OscConfig+0x45c>
 800722e:	e018      	b.n	8007262 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007230:	4b1e      	ldr	r3, [pc, #120]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007234:	4a1d      	ldr	r2, [pc, #116]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007236:	f023 0301 	bic.w	r3, r3, #1
 800723a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800723c:	f7fb fef0 	bl	8003020 <HAL_GetTick>
 8007240:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007242:	e008      	b.n	8007256 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007244:	f7fb feec 	bl	8003020 <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	2b02      	cmp	r3, #2
 8007250:	d901      	bls.n	8007256 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e200      	b.n	8007658 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007256:	4b15      	ldr	r3, [pc, #84]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800725a:	f003 0302 	and.w	r3, r3, #2
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1f0      	bne.n	8007244 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0320 	and.w	r3, r3, #32
 800726a:	2b00      	cmp	r3, #0
 800726c:	d039      	beq.n	80072e2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d01c      	beq.n	80072b0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007276:	4b0d      	ldr	r3, [pc, #52]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a0c      	ldr	r2, [pc, #48]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 800727c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007280:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007282:	f7fb fecd 	bl	8003020 <HAL_GetTick>
 8007286:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007288:	e008      	b.n	800729c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800728a:	f7fb fec9 	bl	8003020 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b02      	cmp	r3, #2
 8007296:	d901      	bls.n	800729c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e1dd      	b.n	8007658 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800729c:	4b03      	ldr	r3, [pc, #12]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d0f0      	beq.n	800728a <HAL_RCC_OscConfig+0x4d6>
 80072a8:	e01b      	b.n	80072e2 <HAL_RCC_OscConfig+0x52e>
 80072aa:	bf00      	nop
 80072ac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80072b0:	4b9b      	ldr	r3, [pc, #620]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a9a      	ldr	r2, [pc, #616]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80072b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80072bc:	f7fb feb0 	bl	8003020 <HAL_GetTick>
 80072c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072c2:	e008      	b.n	80072d6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072c4:	f7fb feac 	bl	8003020 <HAL_GetTick>
 80072c8:	4602      	mov	r2, r0
 80072ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d901      	bls.n	80072d6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e1c0      	b.n	8007658 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072d6:	4b92      	ldr	r3, [pc, #584]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1f0      	bne.n	80072c4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0304 	and.w	r3, r3, #4
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 8081 	beq.w	80073f2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80072f0:	4b8c      	ldr	r3, [pc, #560]	; (8007524 <HAL_RCC_OscConfig+0x770>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a8b      	ldr	r2, [pc, #556]	; (8007524 <HAL_RCC_OscConfig+0x770>)
 80072f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072fc:	f7fb fe90 	bl	8003020 <HAL_GetTick>
 8007300:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007302:	e008      	b.n	8007316 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007304:	f7fb fe8c 	bl	8003020 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	2b64      	cmp	r3, #100	; 0x64
 8007310:	d901      	bls.n	8007316 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e1a0      	b.n	8007658 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007316:	4b83      	ldr	r3, [pc, #524]	; (8007524 <HAL_RCC_OscConfig+0x770>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731e:	2b00      	cmp	r3, #0
 8007320:	d0f0      	beq.n	8007304 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	2b01      	cmp	r3, #1
 8007328:	d106      	bne.n	8007338 <HAL_RCC_OscConfig+0x584>
 800732a:	4b7d      	ldr	r3, [pc, #500]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 800732c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732e:	4a7c      	ldr	r2, [pc, #496]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007330:	f043 0301 	orr.w	r3, r3, #1
 8007334:	6713      	str	r3, [r2, #112]	; 0x70
 8007336:	e02d      	b.n	8007394 <HAL_RCC_OscConfig+0x5e0>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10c      	bne.n	800735a <HAL_RCC_OscConfig+0x5a6>
 8007340:	4b77      	ldr	r3, [pc, #476]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007344:	4a76      	ldr	r2, [pc, #472]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007346:	f023 0301 	bic.w	r3, r3, #1
 800734a:	6713      	str	r3, [r2, #112]	; 0x70
 800734c:	4b74      	ldr	r3, [pc, #464]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 800734e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007350:	4a73      	ldr	r2, [pc, #460]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007352:	f023 0304 	bic.w	r3, r3, #4
 8007356:	6713      	str	r3, [r2, #112]	; 0x70
 8007358:	e01c      	b.n	8007394 <HAL_RCC_OscConfig+0x5e0>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	2b05      	cmp	r3, #5
 8007360:	d10c      	bne.n	800737c <HAL_RCC_OscConfig+0x5c8>
 8007362:	4b6f      	ldr	r3, [pc, #444]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007366:	4a6e      	ldr	r2, [pc, #440]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007368:	f043 0304 	orr.w	r3, r3, #4
 800736c:	6713      	str	r3, [r2, #112]	; 0x70
 800736e:	4b6c      	ldr	r3, [pc, #432]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007372:	4a6b      	ldr	r2, [pc, #428]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007374:	f043 0301 	orr.w	r3, r3, #1
 8007378:	6713      	str	r3, [r2, #112]	; 0x70
 800737a:	e00b      	b.n	8007394 <HAL_RCC_OscConfig+0x5e0>
 800737c:	4b68      	ldr	r3, [pc, #416]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 800737e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007380:	4a67      	ldr	r2, [pc, #412]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007382:	f023 0301 	bic.w	r3, r3, #1
 8007386:	6713      	str	r3, [r2, #112]	; 0x70
 8007388:	4b65      	ldr	r3, [pc, #404]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 800738a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738c:	4a64      	ldr	r2, [pc, #400]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 800738e:	f023 0304 	bic.w	r3, r3, #4
 8007392:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d015      	beq.n	80073c8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800739c:	f7fb fe40 	bl	8003020 <HAL_GetTick>
 80073a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073a2:	e00a      	b.n	80073ba <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073a4:	f7fb fe3c 	bl	8003020 <HAL_GetTick>
 80073a8:	4602      	mov	r2, r0
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e14e      	b.n	8007658 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073ba:	4b59      	ldr	r3, [pc, #356]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80073bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073be:	f003 0302 	and.w	r3, r3, #2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d0ee      	beq.n	80073a4 <HAL_RCC_OscConfig+0x5f0>
 80073c6:	e014      	b.n	80073f2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c8:	f7fb fe2a 	bl	8003020 <HAL_GetTick>
 80073cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073ce:	e00a      	b.n	80073e6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073d0:	f7fb fe26 	bl	8003020 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	f241 3288 	movw	r2, #5000	; 0x1388
 80073de:	4293      	cmp	r3, r2
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e138      	b.n	8007658 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073e6:	4b4e      	ldr	r3, [pc, #312]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80073e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1ee      	bne.n	80073d0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 812d 	beq.w	8007656 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80073fc:	4b48      	ldr	r3, [pc, #288]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007404:	2b18      	cmp	r3, #24
 8007406:	f000 80bd 	beq.w	8007584 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740e:	2b02      	cmp	r3, #2
 8007410:	f040 809e 	bne.w	8007550 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007414:	4b42      	ldr	r3, [pc, #264]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a41      	ldr	r2, [pc, #260]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 800741a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800741e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007420:	f7fb fdfe 	bl	8003020 <HAL_GetTick>
 8007424:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007426:	e008      	b.n	800743a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007428:	f7fb fdfa 	bl	8003020 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	2b02      	cmp	r3, #2
 8007434:	d901      	bls.n	800743a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e10e      	b.n	8007658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800743a:	4b39      	ldr	r3, [pc, #228]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1f0      	bne.n	8007428 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007446:	4b36      	ldr	r3, [pc, #216]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800744a:	4b37      	ldr	r3, [pc, #220]	; (8007528 <HAL_RCC_OscConfig+0x774>)
 800744c:	4013      	ands	r3, r2
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007456:	0112      	lsls	r2, r2, #4
 8007458:	430a      	orrs	r2, r1
 800745a:	4931      	ldr	r1, [pc, #196]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 800745c:	4313      	orrs	r3, r2
 800745e:	628b      	str	r3, [r1, #40]	; 0x28
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007464:	3b01      	subs	r3, #1
 8007466:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800746e:	3b01      	subs	r3, #1
 8007470:	025b      	lsls	r3, r3, #9
 8007472:	b29b      	uxth	r3, r3
 8007474:	431a      	orrs	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747a:	3b01      	subs	r3, #1
 800747c:	041b      	lsls	r3, r3, #16
 800747e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007482:	431a      	orrs	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007488:	3b01      	subs	r3, #1
 800748a:	061b      	lsls	r3, r3, #24
 800748c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007490:	4923      	ldr	r1, [pc, #140]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007492:	4313      	orrs	r3, r2
 8007494:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007496:	4b22      	ldr	r3, [pc, #136]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749a:	4a21      	ldr	r2, [pc, #132]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 800749c:	f023 0301 	bic.w	r3, r3, #1
 80074a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80074a2:	4b1f      	ldr	r3, [pc, #124]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074a6:	4b21      	ldr	r3, [pc, #132]	; (800752c <HAL_RCC_OscConfig+0x778>)
 80074a8:	4013      	ands	r3, r2
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80074ae:	00d2      	lsls	r2, r2, #3
 80074b0:	491b      	ldr	r1, [pc, #108]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80074b6:	4b1a      	ldr	r3, [pc, #104]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ba:	f023 020c 	bic.w	r2, r3, #12
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	4917      	ldr	r1, [pc, #92]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074c4:	4313      	orrs	r3, r2
 80074c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80074c8:	4b15      	ldr	r3, [pc, #84]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	f023 0202 	bic.w	r2, r3, #2
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d4:	4912      	ldr	r1, [pc, #72]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80074da:	4b11      	ldr	r3, [pc, #68]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074de:	4a10      	ldr	r2, [pc, #64]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e6:	4b0e      	ldr	r3, [pc, #56]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ea:	4a0d      	ldr	r2, [pc, #52]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80074f2:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f6:	4a0a      	ldr	r2, [pc, #40]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80074fe:	4b08      	ldr	r3, [pc, #32]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007502:	4a07      	ldr	r2, [pc, #28]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007504:	f043 0301 	orr.w	r3, r3, #1
 8007508:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800750a:	4b05      	ldr	r3, [pc, #20]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a04      	ldr	r2, [pc, #16]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007510:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007516:	f7fb fd83 	bl	8003020 <HAL_GetTick>
 800751a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800751c:	e011      	b.n	8007542 <HAL_RCC_OscConfig+0x78e>
 800751e:	bf00      	nop
 8007520:	58024400 	.word	0x58024400
 8007524:	58024800 	.word	0x58024800
 8007528:	fffffc0c 	.word	0xfffffc0c
 800752c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007530:	f7fb fd76 	bl	8003020 <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	2b02      	cmp	r3, #2
 800753c:	d901      	bls.n	8007542 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e08a      	b.n	8007658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007542:	4b47      	ldr	r3, [pc, #284]	; (8007660 <HAL_RCC_OscConfig+0x8ac>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d0f0      	beq.n	8007530 <HAL_RCC_OscConfig+0x77c>
 800754e:	e082      	b.n	8007656 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007550:	4b43      	ldr	r3, [pc, #268]	; (8007660 <HAL_RCC_OscConfig+0x8ac>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a42      	ldr	r2, [pc, #264]	; (8007660 <HAL_RCC_OscConfig+0x8ac>)
 8007556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800755a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800755c:	f7fb fd60 	bl	8003020 <HAL_GetTick>
 8007560:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007562:	e008      	b.n	8007576 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007564:	f7fb fd5c 	bl	8003020 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	2b02      	cmp	r3, #2
 8007570:	d901      	bls.n	8007576 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e070      	b.n	8007658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007576:	4b3a      	ldr	r3, [pc, #232]	; (8007660 <HAL_RCC_OscConfig+0x8ac>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1f0      	bne.n	8007564 <HAL_RCC_OscConfig+0x7b0>
 8007582:	e068      	b.n	8007656 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007584:	4b36      	ldr	r3, [pc, #216]	; (8007660 <HAL_RCC_OscConfig+0x8ac>)
 8007586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007588:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800758a:	4b35      	ldr	r3, [pc, #212]	; (8007660 <HAL_RCC_OscConfig+0x8ac>)
 800758c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	2b01      	cmp	r3, #1
 8007596:	d031      	beq.n	80075fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	f003 0203 	and.w	r2, r3, #3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d12a      	bne.n	80075fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	091b      	lsrs	r3, r3, #4
 80075aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d122      	bne.n	80075fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d11a      	bne.n	80075fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	0a5b      	lsrs	r3, r3, #9
 80075ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d111      	bne.n	80075fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	0c1b      	lsrs	r3, r3, #16
 80075dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d108      	bne.n	80075fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	0e1b      	lsrs	r3, r3, #24
 80075ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d001      	beq.n	8007600 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e02b      	b.n	8007658 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007600:	4b17      	ldr	r3, [pc, #92]	; (8007660 <HAL_RCC_OscConfig+0x8ac>)
 8007602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007604:	08db      	lsrs	r3, r3, #3
 8007606:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800760a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	429a      	cmp	r2, r3
 8007614:	d01f      	beq.n	8007656 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007616:	4b12      	ldr	r3, [pc, #72]	; (8007660 <HAL_RCC_OscConfig+0x8ac>)
 8007618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761a:	4a11      	ldr	r2, [pc, #68]	; (8007660 <HAL_RCC_OscConfig+0x8ac>)
 800761c:	f023 0301 	bic.w	r3, r3, #1
 8007620:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007622:	f7fb fcfd 	bl	8003020 <HAL_GetTick>
 8007626:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007628:	bf00      	nop
 800762a:	f7fb fcf9 	bl	8003020 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	4293      	cmp	r3, r2
 8007634:	d0f9      	beq.n	800762a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007636:	4b0a      	ldr	r3, [pc, #40]	; (8007660 <HAL_RCC_OscConfig+0x8ac>)
 8007638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800763a:	4b0a      	ldr	r3, [pc, #40]	; (8007664 <HAL_RCC_OscConfig+0x8b0>)
 800763c:	4013      	ands	r3, r2
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007642:	00d2      	lsls	r2, r2, #3
 8007644:	4906      	ldr	r1, [pc, #24]	; (8007660 <HAL_RCC_OscConfig+0x8ac>)
 8007646:	4313      	orrs	r3, r2
 8007648:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800764a:	4b05      	ldr	r3, [pc, #20]	; (8007660 <HAL_RCC_OscConfig+0x8ac>)
 800764c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764e:	4a04      	ldr	r2, [pc, #16]	; (8007660 <HAL_RCC_OscConfig+0x8ac>)
 8007650:	f043 0301 	orr.w	r3, r3, #1
 8007654:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3730      	adds	r7, #48	; 0x30
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	58024400 	.word	0x58024400
 8007664:	ffff0007 	.word	0xffff0007

08007668 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e19c      	b.n	80079b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800767c:	4b8a      	ldr	r3, [pc, #552]	; (80078a8 <HAL_RCC_ClockConfig+0x240>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 030f 	and.w	r3, r3, #15
 8007684:	683a      	ldr	r2, [r7, #0]
 8007686:	429a      	cmp	r2, r3
 8007688:	d910      	bls.n	80076ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800768a:	4b87      	ldr	r3, [pc, #540]	; (80078a8 <HAL_RCC_ClockConfig+0x240>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f023 020f 	bic.w	r2, r3, #15
 8007692:	4985      	ldr	r1, [pc, #532]	; (80078a8 <HAL_RCC_ClockConfig+0x240>)
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	4313      	orrs	r3, r2
 8007698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800769a:	4b83      	ldr	r3, [pc, #524]	; (80078a8 <HAL_RCC_ClockConfig+0x240>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 030f 	and.w	r3, r3, #15
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d001      	beq.n	80076ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e184      	b.n	80079b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0304 	and.w	r3, r3, #4
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d010      	beq.n	80076da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	691a      	ldr	r2, [r3, #16]
 80076bc:	4b7b      	ldr	r3, [pc, #492]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d908      	bls.n	80076da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80076c8:	4b78      	ldr	r3, [pc, #480]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 80076ca:	699b      	ldr	r3, [r3, #24]
 80076cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	4975      	ldr	r1, [pc, #468]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0308 	and.w	r3, r3, #8
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d010      	beq.n	8007708 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	695a      	ldr	r2, [r3, #20]
 80076ea:	4b70      	ldr	r3, [pc, #448]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d908      	bls.n	8007708 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80076f6:	4b6d      	ldr	r3, [pc, #436]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	496a      	ldr	r1, [pc, #424]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 8007704:	4313      	orrs	r3, r2
 8007706:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0310 	and.w	r3, r3, #16
 8007710:	2b00      	cmp	r3, #0
 8007712:	d010      	beq.n	8007736 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	699a      	ldr	r2, [r3, #24]
 8007718:	4b64      	ldr	r3, [pc, #400]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007720:	429a      	cmp	r2, r3
 8007722:	d908      	bls.n	8007736 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007724:	4b61      	ldr	r3, [pc, #388]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 8007726:	69db      	ldr	r3, [r3, #28]
 8007728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	495e      	ldr	r1, [pc, #376]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 8007732:	4313      	orrs	r3, r2
 8007734:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0320 	and.w	r3, r3, #32
 800773e:	2b00      	cmp	r3, #0
 8007740:	d010      	beq.n	8007764 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	69da      	ldr	r2, [r3, #28]
 8007746:	4b59      	ldr	r3, [pc, #356]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800774e:	429a      	cmp	r2, r3
 8007750:	d908      	bls.n	8007764 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007752:	4b56      	ldr	r3, [pc, #344]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	4953      	ldr	r1, [pc, #332]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 8007760:	4313      	orrs	r3, r2
 8007762:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0302 	and.w	r3, r3, #2
 800776c:	2b00      	cmp	r3, #0
 800776e:	d010      	beq.n	8007792 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68da      	ldr	r2, [r3, #12]
 8007774:	4b4d      	ldr	r3, [pc, #308]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	f003 030f 	and.w	r3, r3, #15
 800777c:	429a      	cmp	r2, r3
 800777e:	d908      	bls.n	8007792 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007780:	4b4a      	ldr	r3, [pc, #296]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	f023 020f 	bic.w	r2, r3, #15
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	4947      	ldr	r1, [pc, #284]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 800778e:	4313      	orrs	r3, r2
 8007790:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 0301 	and.w	r3, r3, #1
 800779a:	2b00      	cmp	r3, #0
 800779c:	d055      	beq.n	800784a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800779e:	4b43      	ldr	r3, [pc, #268]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	4940      	ldr	r1, [pc, #256]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d107      	bne.n	80077c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80077b8:	4b3c      	ldr	r3, [pc, #240]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d121      	bne.n	8007808 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e0f6      	b.n	80079b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	2b03      	cmp	r3, #3
 80077ce:	d107      	bne.n	80077e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80077d0:	4b36      	ldr	r3, [pc, #216]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d115      	bne.n	8007808 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e0ea      	b.n	80079b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d107      	bne.n	80077f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80077e8:	4b30      	ldr	r3, [pc, #192]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d109      	bne.n	8007808 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e0de      	b.n	80079b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077f8:	4b2c      	ldr	r3, [pc, #176]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0304 	and.w	r3, r3, #4
 8007800:	2b00      	cmp	r3, #0
 8007802:	d101      	bne.n	8007808 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e0d6      	b.n	80079b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007808:	4b28      	ldr	r3, [pc, #160]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	f023 0207 	bic.w	r2, r3, #7
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	4925      	ldr	r1, [pc, #148]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 8007816:	4313      	orrs	r3, r2
 8007818:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800781a:	f7fb fc01 	bl	8003020 <HAL_GetTick>
 800781e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007820:	e00a      	b.n	8007838 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007822:	f7fb fbfd 	bl	8003020 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007830:	4293      	cmp	r3, r2
 8007832:	d901      	bls.n	8007838 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e0be      	b.n	80079b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007838:	4b1c      	ldr	r3, [pc, #112]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	00db      	lsls	r3, r3, #3
 8007846:	429a      	cmp	r2, r3
 8007848:	d1eb      	bne.n	8007822 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0302 	and.w	r3, r3, #2
 8007852:	2b00      	cmp	r3, #0
 8007854:	d010      	beq.n	8007878 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	4b14      	ldr	r3, [pc, #80]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	f003 030f 	and.w	r3, r3, #15
 8007862:	429a      	cmp	r2, r3
 8007864:	d208      	bcs.n	8007878 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007866:	4b11      	ldr	r3, [pc, #68]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	f023 020f 	bic.w	r2, r3, #15
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	490e      	ldr	r1, [pc, #56]	; (80078ac <HAL_RCC_ClockConfig+0x244>)
 8007874:	4313      	orrs	r3, r2
 8007876:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007878:	4b0b      	ldr	r3, [pc, #44]	; (80078a8 <HAL_RCC_ClockConfig+0x240>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 030f 	and.w	r3, r3, #15
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	429a      	cmp	r2, r3
 8007884:	d214      	bcs.n	80078b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007886:	4b08      	ldr	r3, [pc, #32]	; (80078a8 <HAL_RCC_ClockConfig+0x240>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f023 020f 	bic.w	r2, r3, #15
 800788e:	4906      	ldr	r1, [pc, #24]	; (80078a8 <HAL_RCC_ClockConfig+0x240>)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	4313      	orrs	r3, r2
 8007894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007896:	4b04      	ldr	r3, [pc, #16]	; (80078a8 <HAL_RCC_ClockConfig+0x240>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 030f 	and.w	r3, r3, #15
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d005      	beq.n	80078b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e086      	b.n	80079b6 <HAL_RCC_ClockConfig+0x34e>
 80078a8:	52002000 	.word	0x52002000
 80078ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0304 	and.w	r3, r3, #4
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d010      	beq.n	80078de <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	691a      	ldr	r2, [r3, #16]
 80078c0:	4b3f      	ldr	r3, [pc, #252]	; (80079c0 <HAL_RCC_ClockConfig+0x358>)
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d208      	bcs.n	80078de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80078cc:	4b3c      	ldr	r3, [pc, #240]	; (80079c0 <HAL_RCC_ClockConfig+0x358>)
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	4939      	ldr	r1, [pc, #228]	; (80079c0 <HAL_RCC_ClockConfig+0x358>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0308 	and.w	r3, r3, #8
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d010      	beq.n	800790c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	695a      	ldr	r2, [r3, #20]
 80078ee:	4b34      	ldr	r3, [pc, #208]	; (80079c0 <HAL_RCC_ClockConfig+0x358>)
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d208      	bcs.n	800790c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80078fa:	4b31      	ldr	r3, [pc, #196]	; (80079c0 <HAL_RCC_ClockConfig+0x358>)
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	492e      	ldr	r1, [pc, #184]	; (80079c0 <HAL_RCC_ClockConfig+0x358>)
 8007908:	4313      	orrs	r3, r2
 800790a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0310 	and.w	r3, r3, #16
 8007914:	2b00      	cmp	r3, #0
 8007916:	d010      	beq.n	800793a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	699a      	ldr	r2, [r3, #24]
 800791c:	4b28      	ldr	r3, [pc, #160]	; (80079c0 <HAL_RCC_ClockConfig+0x358>)
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007924:	429a      	cmp	r2, r3
 8007926:	d208      	bcs.n	800793a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007928:	4b25      	ldr	r3, [pc, #148]	; (80079c0 <HAL_RCC_ClockConfig+0x358>)
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	4922      	ldr	r1, [pc, #136]	; (80079c0 <HAL_RCC_ClockConfig+0x358>)
 8007936:	4313      	orrs	r3, r2
 8007938:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0320 	and.w	r3, r3, #32
 8007942:	2b00      	cmp	r3, #0
 8007944:	d010      	beq.n	8007968 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	69da      	ldr	r2, [r3, #28]
 800794a:	4b1d      	ldr	r3, [pc, #116]	; (80079c0 <HAL_RCC_ClockConfig+0x358>)
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007952:	429a      	cmp	r2, r3
 8007954:	d208      	bcs.n	8007968 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007956:	4b1a      	ldr	r3, [pc, #104]	; (80079c0 <HAL_RCC_ClockConfig+0x358>)
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	4917      	ldr	r1, [pc, #92]	; (80079c0 <HAL_RCC_ClockConfig+0x358>)
 8007964:	4313      	orrs	r3, r2
 8007966:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007968:	f000 f834 	bl	80079d4 <HAL_RCC_GetSysClockFreq>
 800796c:	4602      	mov	r2, r0
 800796e:	4b14      	ldr	r3, [pc, #80]	; (80079c0 <HAL_RCC_ClockConfig+0x358>)
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	0a1b      	lsrs	r3, r3, #8
 8007974:	f003 030f 	and.w	r3, r3, #15
 8007978:	4912      	ldr	r1, [pc, #72]	; (80079c4 <HAL_RCC_ClockConfig+0x35c>)
 800797a:	5ccb      	ldrb	r3, [r1, r3]
 800797c:	f003 031f 	and.w	r3, r3, #31
 8007980:	fa22 f303 	lsr.w	r3, r2, r3
 8007984:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007986:	4b0e      	ldr	r3, [pc, #56]	; (80079c0 <HAL_RCC_ClockConfig+0x358>)
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	f003 030f 	and.w	r3, r3, #15
 800798e:	4a0d      	ldr	r2, [pc, #52]	; (80079c4 <HAL_RCC_ClockConfig+0x35c>)
 8007990:	5cd3      	ldrb	r3, [r2, r3]
 8007992:	f003 031f 	and.w	r3, r3, #31
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	fa22 f303 	lsr.w	r3, r2, r3
 800799c:	4a0a      	ldr	r2, [pc, #40]	; (80079c8 <HAL_RCC_ClockConfig+0x360>)
 800799e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80079a0:	4a0a      	ldr	r2, [pc, #40]	; (80079cc <HAL_RCC_ClockConfig+0x364>)
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80079a6:	4b0a      	ldr	r3, [pc, #40]	; (80079d0 <HAL_RCC_ClockConfig+0x368>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7fb faee 	bl	8002f8c <HAL_InitTick>
 80079b0:	4603      	mov	r3, r0
 80079b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3718      	adds	r7, #24
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	58024400 	.word	0x58024400
 80079c4:	0800d740 	.word	0x0800d740
 80079c8:	24000004 	.word	0x24000004
 80079cc:	24000000 	.word	0x24000000
 80079d0:	24000008 	.word	0x24000008

080079d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b089      	sub	sp, #36	; 0x24
 80079d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079da:	4bb3      	ldr	r3, [pc, #716]	; (8007ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079e2:	2b18      	cmp	r3, #24
 80079e4:	f200 8155 	bhi.w	8007c92 <HAL_RCC_GetSysClockFreq+0x2be>
 80079e8:	a201      	add	r2, pc, #4	; (adr r2, 80079f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80079ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ee:	bf00      	nop
 80079f0:	08007a55 	.word	0x08007a55
 80079f4:	08007c93 	.word	0x08007c93
 80079f8:	08007c93 	.word	0x08007c93
 80079fc:	08007c93 	.word	0x08007c93
 8007a00:	08007c93 	.word	0x08007c93
 8007a04:	08007c93 	.word	0x08007c93
 8007a08:	08007c93 	.word	0x08007c93
 8007a0c:	08007c93 	.word	0x08007c93
 8007a10:	08007a7b 	.word	0x08007a7b
 8007a14:	08007c93 	.word	0x08007c93
 8007a18:	08007c93 	.word	0x08007c93
 8007a1c:	08007c93 	.word	0x08007c93
 8007a20:	08007c93 	.word	0x08007c93
 8007a24:	08007c93 	.word	0x08007c93
 8007a28:	08007c93 	.word	0x08007c93
 8007a2c:	08007c93 	.word	0x08007c93
 8007a30:	08007a81 	.word	0x08007a81
 8007a34:	08007c93 	.word	0x08007c93
 8007a38:	08007c93 	.word	0x08007c93
 8007a3c:	08007c93 	.word	0x08007c93
 8007a40:	08007c93 	.word	0x08007c93
 8007a44:	08007c93 	.word	0x08007c93
 8007a48:	08007c93 	.word	0x08007c93
 8007a4c:	08007c93 	.word	0x08007c93
 8007a50:	08007a87 	.word	0x08007a87
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a54:	4b94      	ldr	r3, [pc, #592]	; (8007ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0320 	and.w	r3, r3, #32
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d009      	beq.n	8007a74 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a60:	4b91      	ldr	r3, [pc, #580]	; (8007ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	08db      	lsrs	r3, r3, #3
 8007a66:	f003 0303 	and.w	r3, r3, #3
 8007a6a:	4a90      	ldr	r2, [pc, #576]	; (8007cac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a70:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007a72:	e111      	b.n	8007c98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007a74:	4b8d      	ldr	r3, [pc, #564]	; (8007cac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a76:	61bb      	str	r3, [r7, #24]
      break;
 8007a78:	e10e      	b.n	8007c98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007a7a:	4b8d      	ldr	r3, [pc, #564]	; (8007cb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007a7c:	61bb      	str	r3, [r7, #24]
      break;
 8007a7e:	e10b      	b.n	8007c98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007a80:	4b8c      	ldr	r3, [pc, #560]	; (8007cb4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007a82:	61bb      	str	r3, [r7, #24]
      break;
 8007a84:	e108      	b.n	8007c98 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a86:	4b88      	ldr	r3, [pc, #544]	; (8007ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8a:	f003 0303 	and.w	r3, r3, #3
 8007a8e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007a90:	4b85      	ldr	r3, [pc, #532]	; (8007ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a94:	091b      	lsrs	r3, r3, #4
 8007a96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a9a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007a9c:	4b82      	ldr	r3, [pc, #520]	; (8007ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa0:	f003 0301 	and.w	r3, r3, #1
 8007aa4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007aa6:	4b80      	ldr	r3, [pc, #512]	; (8007ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aaa:	08db      	lsrs	r3, r3, #3
 8007aac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	fb02 f303 	mul.w	r3, r2, r3
 8007ab6:	ee07 3a90 	vmov	s15, r3
 8007aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007abe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 80e1 	beq.w	8007c8c <HAL_RCC_GetSysClockFreq+0x2b8>
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	f000 8083 	beq.w	8007bd8 <HAL_RCC_GetSysClockFreq+0x204>
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	f200 80a1 	bhi.w	8007c1c <HAL_RCC_GetSysClockFreq+0x248>
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d003      	beq.n	8007ae8 <HAL_RCC_GetSysClockFreq+0x114>
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d056      	beq.n	8007b94 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007ae6:	e099      	b.n	8007c1c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ae8:	4b6f      	ldr	r3, [pc, #444]	; (8007ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0320 	and.w	r3, r3, #32
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d02d      	beq.n	8007b50 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007af4:	4b6c      	ldr	r3, [pc, #432]	; (8007ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	08db      	lsrs	r3, r3, #3
 8007afa:	f003 0303 	and.w	r3, r3, #3
 8007afe:	4a6b      	ldr	r2, [pc, #428]	; (8007cac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b00:	fa22 f303 	lsr.w	r3, r2, r3
 8007b04:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	ee07 3a90 	vmov	s15, r3
 8007b0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	ee07 3a90 	vmov	s15, r3
 8007b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b1e:	4b62      	ldr	r3, [pc, #392]	; (8007ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b26:	ee07 3a90 	vmov	s15, r3
 8007b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b32:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007cb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b4a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007b4e:	e087      	b.n	8007c60 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	ee07 3a90 	vmov	s15, r3
 8007b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007cbc <HAL_RCC_GetSysClockFreq+0x2e8>
 8007b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b62:	4b51      	ldr	r3, [pc, #324]	; (8007ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b6a:	ee07 3a90 	vmov	s15, r3
 8007b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b72:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b76:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007cb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b92:	e065      	b.n	8007c60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	ee07 3a90 	vmov	s15, r3
 8007b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b9e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007cc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ba6:	4b40      	ldr	r3, [pc, #256]	; (8007ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bae:	ee07 3a90 	vmov	s15, r3
 8007bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007cb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007bd6:	e043      	b.n	8007c60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	ee07 3a90 	vmov	s15, r3
 8007bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007cc4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bea:	4b2f      	ldr	r3, [pc, #188]	; (8007ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bf2:	ee07 3a90 	vmov	s15, r3
 8007bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bfe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007cb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c1a:	e021      	b.n	8007c60 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	ee07 3a90 	vmov	s15, r3
 8007c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c26:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007cc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c2e:	4b1e      	ldr	r3, [pc, #120]	; (8007ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c36:	ee07 3a90 	vmov	s15, r3
 8007c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c42:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007cb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c5e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007c60:	4b11      	ldr	r3, [pc, #68]	; (8007ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c64:	0a5b      	lsrs	r3, r3, #9
 8007c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	ee07 3a90 	vmov	s15, r3
 8007c74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007c78:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c84:	ee17 3a90 	vmov	r3, s15
 8007c88:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007c8a:	e005      	b.n	8007c98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	61bb      	str	r3, [r7, #24]
      break;
 8007c90:	e002      	b.n	8007c98 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007c92:	4b07      	ldr	r3, [pc, #28]	; (8007cb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c94:	61bb      	str	r3, [r7, #24]
      break;
 8007c96:	bf00      	nop
  }

  return sysclockfreq;
 8007c98:	69bb      	ldr	r3, [r7, #24]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3724      	adds	r7, #36	; 0x24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	58024400 	.word	0x58024400
 8007cac:	03d09000 	.word	0x03d09000
 8007cb0:	003d0900 	.word	0x003d0900
 8007cb4:	017d7840 	.word	0x017d7840
 8007cb8:	46000000 	.word	0x46000000
 8007cbc:	4c742400 	.word	0x4c742400
 8007cc0:	4a742400 	.word	0x4a742400
 8007cc4:	4bbebc20 	.word	0x4bbebc20

08007cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007cce:	f7ff fe81 	bl	80079d4 <HAL_RCC_GetSysClockFreq>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	4b10      	ldr	r3, [pc, #64]	; (8007d18 <HAL_RCC_GetHCLKFreq+0x50>)
 8007cd6:	699b      	ldr	r3, [r3, #24]
 8007cd8:	0a1b      	lsrs	r3, r3, #8
 8007cda:	f003 030f 	and.w	r3, r3, #15
 8007cde:	490f      	ldr	r1, [pc, #60]	; (8007d1c <HAL_RCC_GetHCLKFreq+0x54>)
 8007ce0:	5ccb      	ldrb	r3, [r1, r3]
 8007ce2:	f003 031f 	and.w	r3, r3, #31
 8007ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8007cea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007cec:	4b0a      	ldr	r3, [pc, #40]	; (8007d18 <HAL_RCC_GetHCLKFreq+0x50>)
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	f003 030f 	and.w	r3, r3, #15
 8007cf4:	4a09      	ldr	r2, [pc, #36]	; (8007d1c <HAL_RCC_GetHCLKFreq+0x54>)
 8007cf6:	5cd3      	ldrb	r3, [r2, r3]
 8007cf8:	f003 031f 	and.w	r3, r3, #31
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8007d02:	4a07      	ldr	r2, [pc, #28]	; (8007d20 <HAL_RCC_GetHCLKFreq+0x58>)
 8007d04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d06:	4a07      	ldr	r2, [pc, #28]	; (8007d24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007d0c:	4b04      	ldr	r3, [pc, #16]	; (8007d20 <HAL_RCC_GetHCLKFreq+0x58>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	58024400 	.word	0x58024400
 8007d1c:	0800d740 	.word	0x0800d740
 8007d20:	24000004 	.word	0x24000004
 8007d24:	24000000 	.word	0x24000000

08007d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007d2c:	f7ff ffcc 	bl	8007cc8 <HAL_RCC_GetHCLKFreq>
 8007d30:	4602      	mov	r2, r0
 8007d32:	4b06      	ldr	r3, [pc, #24]	; (8007d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d34:	69db      	ldr	r3, [r3, #28]
 8007d36:	091b      	lsrs	r3, r3, #4
 8007d38:	f003 0307 	and.w	r3, r3, #7
 8007d3c:	4904      	ldr	r1, [pc, #16]	; (8007d50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d3e:	5ccb      	ldrb	r3, [r1, r3]
 8007d40:	f003 031f 	and.w	r3, r3, #31
 8007d44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	58024400 	.word	0x58024400
 8007d50:	0800d740 	.word	0x0800d740

08007d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007d58:	f7ff ffb6 	bl	8007cc8 <HAL_RCC_GetHCLKFreq>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	4b06      	ldr	r3, [pc, #24]	; (8007d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d60:	69db      	ldr	r3, [r3, #28]
 8007d62:	0a1b      	lsrs	r3, r3, #8
 8007d64:	f003 0307 	and.w	r3, r3, #7
 8007d68:	4904      	ldr	r1, [pc, #16]	; (8007d7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d6a:	5ccb      	ldrb	r3, [r1, r3]
 8007d6c:	f003 031f 	and.w	r3, r3, #31
 8007d70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	58024400 	.word	0x58024400
 8007d7c:	0800d740 	.word	0x0800d740

08007d80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d84:	b0ca      	sub	sp, #296	; 0x128
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d92:	2300      	movs	r3, #0
 8007d94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007da4:	2500      	movs	r5, #0
 8007da6:	ea54 0305 	orrs.w	r3, r4, r5
 8007daa:	d049      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007db2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007db6:	d02f      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007db8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007dbc:	d828      	bhi.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007dbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dc2:	d01a      	beq.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007dc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dc8:	d822      	bhi.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d003      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dd2:	d007      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007dd4:	e01c      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dd6:	4bb8      	ldr	r3, [pc, #736]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dda:	4ab7      	ldr	r2, [pc, #732]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007de0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007de2:	e01a      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007de8:	3308      	adds	r3, #8
 8007dea:	2102      	movs	r1, #2
 8007dec:	4618      	mov	r0, r3
 8007dee:	f002 fb61 	bl	800a4b4 <RCCEx_PLL2_Config>
 8007df2:	4603      	mov	r3, r0
 8007df4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007df8:	e00f      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dfe:	3328      	adds	r3, #40	; 0x28
 8007e00:	2102      	movs	r1, #2
 8007e02:	4618      	mov	r0, r3
 8007e04:	f002 fc08 	bl	800a618 <RCCEx_PLL3_Config>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007e0e:	e004      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e16:	e000      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10a      	bne.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007e22:	4ba5      	ldr	r3, [pc, #660]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e26:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e30:	4aa1      	ldr	r2, [pc, #644]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e32:	430b      	orrs	r3, r1
 8007e34:	6513      	str	r3, [r2, #80]	; 0x50
 8007e36:	e003      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007e4c:	f04f 0900 	mov.w	r9, #0
 8007e50:	ea58 0309 	orrs.w	r3, r8, r9
 8007e54:	d047      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e5c:	2b04      	cmp	r3, #4
 8007e5e:	d82a      	bhi.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007e60:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e66:	bf00      	nop
 8007e68:	08007e7d 	.word	0x08007e7d
 8007e6c:	08007e8b 	.word	0x08007e8b
 8007e70:	08007ea1 	.word	0x08007ea1
 8007e74:	08007ebf 	.word	0x08007ebf
 8007e78:	08007ebf 	.word	0x08007ebf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e7c:	4b8e      	ldr	r3, [pc, #568]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e80:	4a8d      	ldr	r2, [pc, #564]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e88:	e01a      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e8e:	3308      	adds	r3, #8
 8007e90:	2100      	movs	r1, #0
 8007e92:	4618      	mov	r0, r3
 8007e94:	f002 fb0e 	bl	800a4b4 <RCCEx_PLL2_Config>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e9e:	e00f      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ea4:	3328      	adds	r3, #40	; 0x28
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f002 fbb5 	bl	800a618 <RCCEx_PLL3_Config>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007eb4:	e004      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ebc:	e000      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10a      	bne.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ec8:	4b7b      	ldr	r3, [pc, #492]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ecc:	f023 0107 	bic.w	r1, r3, #7
 8007ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ed6:	4a78      	ldr	r2, [pc, #480]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ed8:	430b      	orrs	r3, r1
 8007eda:	6513      	str	r3, [r2, #80]	; 0x50
 8007edc:	e003      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ede:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ee2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007ef2:	f04f 0b00 	mov.w	fp, #0
 8007ef6:	ea5a 030b 	orrs.w	r3, sl, fp
 8007efa:	d04c      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f06:	d030      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f0c:	d829      	bhi.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007f0e:	2bc0      	cmp	r3, #192	; 0xc0
 8007f10:	d02d      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007f12:	2bc0      	cmp	r3, #192	; 0xc0
 8007f14:	d825      	bhi.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007f16:	2b80      	cmp	r3, #128	; 0x80
 8007f18:	d018      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007f1a:	2b80      	cmp	r3, #128	; 0x80
 8007f1c:	d821      	bhi.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d002      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007f22:	2b40      	cmp	r3, #64	; 0x40
 8007f24:	d007      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007f26:	e01c      	b.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f28:	4b63      	ldr	r3, [pc, #396]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2c:	4a62      	ldr	r2, [pc, #392]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007f34:	e01c      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f3a:	3308      	adds	r3, #8
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f002 fab8 	bl	800a4b4 <RCCEx_PLL2_Config>
 8007f44:	4603      	mov	r3, r0
 8007f46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007f4a:	e011      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f50:	3328      	adds	r3, #40	; 0x28
 8007f52:	2100      	movs	r1, #0
 8007f54:	4618      	mov	r0, r3
 8007f56:	f002 fb5f 	bl	800a618 <RCCEx_PLL3_Config>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007f60:	e006      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f68:	e002      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007f6a:	bf00      	nop
 8007f6c:	e000      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007f6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10a      	bne.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007f78:	4b4f      	ldr	r3, [pc, #316]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f7c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f86:	4a4c      	ldr	r2, [pc, #304]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f88:	430b      	orrs	r3, r1
 8007f8a:	6513      	str	r3, [r2, #80]	; 0x50
 8007f8c:	e003      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007fa2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007fac:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	d053      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007fbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fc2:	d035      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007fc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fc8:	d82e      	bhi.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007fca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007fce:	d031      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007fd0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007fd4:	d828      	bhi.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007fd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fda:	d01a      	beq.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007fdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fe0:	d822      	bhi.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d003      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007fe6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fea:	d007      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007fec:	e01c      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fee:	4b32      	ldr	r3, [pc, #200]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff2:	4a31      	ldr	r2, [pc, #196]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ffa:	e01c      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008000:	3308      	adds	r3, #8
 8008002:	2100      	movs	r1, #0
 8008004:	4618      	mov	r0, r3
 8008006:	f002 fa55 	bl	800a4b4 <RCCEx_PLL2_Config>
 800800a:	4603      	mov	r3, r0
 800800c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008010:	e011      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008016:	3328      	adds	r3, #40	; 0x28
 8008018:	2100      	movs	r1, #0
 800801a:	4618      	mov	r0, r3
 800801c:	f002 fafc 	bl	800a618 <RCCEx_PLL3_Config>
 8008020:	4603      	mov	r3, r0
 8008022:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008026:	e006      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800802e:	e002      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008030:	bf00      	nop
 8008032:	e000      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10b      	bne.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800803e:	4b1e      	ldr	r3, [pc, #120]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008042:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800804a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800804e:	4a1a      	ldr	r2, [pc, #104]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008050:	430b      	orrs	r3, r1
 8008052:	6593      	str	r3, [r2, #88]	; 0x58
 8008054:	e003      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008056:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800805a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800805e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008066:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800806a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800806e:	2300      	movs	r3, #0
 8008070:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008074:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008078:	460b      	mov	r3, r1
 800807a:	4313      	orrs	r3, r2
 800807c:	d056      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800807e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008082:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008086:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800808a:	d038      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800808c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008090:	d831      	bhi.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008092:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008096:	d034      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008098:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800809c:	d82b      	bhi.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800809e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080a2:	d01d      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80080a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080a8:	d825      	bhi.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d006      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80080ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080b2:	d00a      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80080b4:	e01f      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80080b6:	bf00      	nop
 80080b8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080bc:	4ba2      	ldr	r3, [pc, #648]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c0:	4aa1      	ldr	r2, [pc, #644]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080c8:	e01c      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080ce:	3308      	adds	r3, #8
 80080d0:	2100      	movs	r1, #0
 80080d2:	4618      	mov	r0, r3
 80080d4:	f002 f9ee 	bl	800a4b4 <RCCEx_PLL2_Config>
 80080d8:	4603      	mov	r3, r0
 80080da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80080de:	e011      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080e4:	3328      	adds	r3, #40	; 0x28
 80080e6:	2100      	movs	r1, #0
 80080e8:	4618      	mov	r0, r3
 80080ea:	f002 fa95 	bl	800a618 <RCCEx_PLL3_Config>
 80080ee:	4603      	mov	r3, r0
 80080f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080f4:	e006      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080fc:	e002      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80080fe:	bf00      	nop
 8008100:	e000      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008104:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10b      	bne.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800810c:	4b8e      	ldr	r3, [pc, #568]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800810e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008110:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008118:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800811c:	4a8a      	ldr	r2, [pc, #552]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800811e:	430b      	orrs	r3, r1
 8008120:	6593      	str	r3, [r2, #88]	; 0x58
 8008122:	e003      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008124:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008128:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800812c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008134:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008138:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800813c:	2300      	movs	r3, #0
 800813e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008142:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008146:	460b      	mov	r3, r1
 8008148:	4313      	orrs	r3, r2
 800814a:	d03a      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800814c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008152:	2b30      	cmp	r3, #48	; 0x30
 8008154:	d01f      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008156:	2b30      	cmp	r3, #48	; 0x30
 8008158:	d819      	bhi.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800815a:	2b20      	cmp	r3, #32
 800815c:	d00c      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800815e:	2b20      	cmp	r3, #32
 8008160:	d815      	bhi.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008162:	2b00      	cmp	r3, #0
 8008164:	d019      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008166:	2b10      	cmp	r3, #16
 8008168:	d111      	bne.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800816a:	4b77      	ldr	r3, [pc, #476]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800816c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816e:	4a76      	ldr	r2, [pc, #472]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008174:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008176:	e011      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800817c:	3308      	adds	r3, #8
 800817e:	2102      	movs	r1, #2
 8008180:	4618      	mov	r0, r3
 8008182:	f002 f997 	bl	800a4b4 <RCCEx_PLL2_Config>
 8008186:	4603      	mov	r3, r0
 8008188:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800818c:	e006      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008194:	e002      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008196:	bf00      	nop
 8008198:	e000      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800819a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800819c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10a      	bne.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80081a4:	4b68      	ldr	r3, [pc, #416]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081a8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80081ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b2:	4a65      	ldr	r2, [pc, #404]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081b4:	430b      	orrs	r3, r1
 80081b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081b8:	e003      	b.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80081c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ca:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80081ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80081d2:	2300      	movs	r3, #0
 80081d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80081d8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80081dc:	460b      	mov	r3, r1
 80081de:	4313      	orrs	r3, r2
 80081e0:	d051      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80081e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081ec:	d035      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80081ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081f2:	d82e      	bhi.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80081f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081f8:	d031      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80081fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081fe:	d828      	bhi.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008204:	d01a      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800820a:	d822      	bhi.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800820c:	2b00      	cmp	r3, #0
 800820e:	d003      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008214:	d007      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008216:	e01c      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008218:	4b4b      	ldr	r3, [pc, #300]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800821a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821c:	4a4a      	ldr	r2, [pc, #296]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800821e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008222:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008224:	e01c      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800822a:	3308      	adds	r3, #8
 800822c:	2100      	movs	r1, #0
 800822e:	4618      	mov	r0, r3
 8008230:	f002 f940 	bl	800a4b4 <RCCEx_PLL2_Config>
 8008234:	4603      	mov	r3, r0
 8008236:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800823a:	e011      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800823c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008240:	3328      	adds	r3, #40	; 0x28
 8008242:	2100      	movs	r1, #0
 8008244:	4618      	mov	r0, r3
 8008246:	f002 f9e7 	bl	800a618 <RCCEx_PLL3_Config>
 800824a:	4603      	mov	r3, r0
 800824c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008250:	e006      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008258:	e002      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800825a:	bf00      	nop
 800825c:	e000      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800825e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008260:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10a      	bne.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008268:	4b37      	ldr	r3, [pc, #220]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800826a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800826c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008276:	4a34      	ldr	r2, [pc, #208]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008278:	430b      	orrs	r3, r1
 800827a:	6513      	str	r3, [r2, #80]	; 0x50
 800827c:	e003      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800827e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008282:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008292:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008296:	2300      	movs	r3, #0
 8008298:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800829c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80082a0:	460b      	mov	r3, r1
 80082a2:	4313      	orrs	r3, r2
 80082a4:	d056      	beq.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80082a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80082b0:	d033      	beq.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80082b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80082b6:	d82c      	bhi.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80082b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80082bc:	d02f      	beq.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80082be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80082c2:	d826      	bhi.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80082c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80082c8:	d02b      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80082ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80082ce:	d820      	bhi.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80082d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082d4:	d012      	beq.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80082d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082da:	d81a      	bhi.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d022      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80082e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082e4:	d115      	bne.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ea:	3308      	adds	r3, #8
 80082ec:	2101      	movs	r1, #1
 80082ee:	4618      	mov	r0, r3
 80082f0:	f002 f8e0 	bl	800a4b4 <RCCEx_PLL2_Config>
 80082f4:	4603      	mov	r3, r0
 80082f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80082fa:	e015      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008300:	3328      	adds	r3, #40	; 0x28
 8008302:	2101      	movs	r1, #1
 8008304:	4618      	mov	r0, r3
 8008306:	f002 f987 	bl	800a618 <RCCEx_PLL3_Config>
 800830a:	4603      	mov	r3, r0
 800830c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008310:	e00a      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008318:	e006      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800831a:	bf00      	nop
 800831c:	e004      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800831e:	bf00      	nop
 8008320:	e002      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008322:	bf00      	nop
 8008324:	e000      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008326:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008328:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10d      	bne.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008330:	4b05      	ldr	r3, [pc, #20]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008334:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800833c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800833e:	4a02      	ldr	r2, [pc, #8]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008340:	430b      	orrs	r3, r1
 8008342:	6513      	str	r3, [r2, #80]	; 0x50
 8008344:	e006      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008346:	bf00      	nop
 8008348:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800834c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008350:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008360:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008364:	2300      	movs	r3, #0
 8008366:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800836a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800836e:	460b      	mov	r3, r1
 8008370:	4313      	orrs	r3, r2
 8008372:	d055      	beq.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008378:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800837c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008380:	d033      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008382:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008386:	d82c      	bhi.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800838c:	d02f      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800838e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008392:	d826      	bhi.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008394:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008398:	d02b      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800839a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800839e:	d820      	bhi.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80083a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083a4:	d012      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80083a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083aa:	d81a      	bhi.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d022      	beq.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80083b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083b4:	d115      	bne.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083ba:	3308      	adds	r3, #8
 80083bc:	2101      	movs	r1, #1
 80083be:	4618      	mov	r0, r3
 80083c0:	f002 f878 	bl	800a4b4 <RCCEx_PLL2_Config>
 80083c4:	4603      	mov	r3, r0
 80083c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80083ca:	e015      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083d0:	3328      	adds	r3, #40	; 0x28
 80083d2:	2101      	movs	r1, #1
 80083d4:	4618      	mov	r0, r3
 80083d6:	f002 f91f 	bl	800a618 <RCCEx_PLL3_Config>
 80083da:	4603      	mov	r3, r0
 80083dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80083e0:	e00a      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80083e8:	e006      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80083ea:	bf00      	nop
 80083ec:	e004      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80083ee:	bf00      	nop
 80083f0:	e002      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80083f2:	bf00      	nop
 80083f4:	e000      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80083f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10b      	bne.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008400:	4ba3      	ldr	r3, [pc, #652]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008404:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800840c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008410:	4a9f      	ldr	r2, [pc, #636]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008412:	430b      	orrs	r3, r1
 8008414:	6593      	str	r3, [r2, #88]	; 0x58
 8008416:	e003      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008418:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800841c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008428:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800842c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008430:	2300      	movs	r3, #0
 8008432:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008436:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800843a:	460b      	mov	r3, r1
 800843c:	4313      	orrs	r3, r2
 800843e:	d037      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008446:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800844a:	d00e      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800844c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008450:	d816      	bhi.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008452:	2b00      	cmp	r3, #0
 8008454:	d018      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008456:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800845a:	d111      	bne.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800845c:	4b8c      	ldr	r3, [pc, #560]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800845e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008460:	4a8b      	ldr	r2, [pc, #556]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008466:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008468:	e00f      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800846a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800846e:	3308      	adds	r3, #8
 8008470:	2101      	movs	r1, #1
 8008472:	4618      	mov	r0, r3
 8008474:	f002 f81e 	bl	800a4b4 <RCCEx_PLL2_Config>
 8008478:	4603      	mov	r3, r0
 800847a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800847e:	e004      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008486:	e000      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800848a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10a      	bne.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008492:	4b7f      	ldr	r3, [pc, #508]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008496:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800849a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800849e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a0:	4a7b      	ldr	r2, [pc, #492]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084a2:	430b      	orrs	r3, r1
 80084a4:	6513      	str	r3, [r2, #80]	; 0x50
 80084a6:	e003      	b.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80084b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80084bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084c0:	2300      	movs	r3, #0
 80084c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80084c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80084ca:	460b      	mov	r3, r1
 80084cc:	4313      	orrs	r3, r2
 80084ce:	d039      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80084d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084d6:	2b03      	cmp	r3, #3
 80084d8:	d81c      	bhi.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80084da:	a201      	add	r2, pc, #4	; (adr r2, 80084e0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80084dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e0:	0800851d 	.word	0x0800851d
 80084e4:	080084f1 	.word	0x080084f1
 80084e8:	080084ff 	.word	0x080084ff
 80084ec:	0800851d 	.word	0x0800851d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084f0:	4b67      	ldr	r3, [pc, #412]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f4:	4a66      	ldr	r2, [pc, #408]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80084fc:	e00f      	b.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80084fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008502:	3308      	adds	r3, #8
 8008504:	2102      	movs	r1, #2
 8008506:	4618      	mov	r0, r3
 8008508:	f001 ffd4 	bl	800a4b4 <RCCEx_PLL2_Config>
 800850c:	4603      	mov	r3, r0
 800850e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008512:	e004      	b.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800851a:	e000      	b.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800851c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800851e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10a      	bne.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008526:	4b5a      	ldr	r3, [pc, #360]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800852a:	f023 0103 	bic.w	r1, r3, #3
 800852e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008534:	4a56      	ldr	r2, [pc, #344]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008536:	430b      	orrs	r3, r1
 8008538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800853a:	e003      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800853c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008540:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008550:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008554:	2300      	movs	r3, #0
 8008556:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800855a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800855e:	460b      	mov	r3, r1
 8008560:	4313      	orrs	r3, r2
 8008562:	f000 809f 	beq.w	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008566:	4b4b      	ldr	r3, [pc, #300]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a4a      	ldr	r2, [pc, #296]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800856c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008570:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008572:	f7fa fd55 	bl	8003020 <HAL_GetTick>
 8008576:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800857a:	e00b      	b.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800857c:	f7fa fd50 	bl	8003020 <HAL_GetTick>
 8008580:	4602      	mov	r2, r0
 8008582:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	2b64      	cmp	r3, #100	; 0x64
 800858a:	d903      	bls.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008592:	e005      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008594:	4b3f      	ldr	r3, [pc, #252]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800859c:	2b00      	cmp	r3, #0
 800859e:	d0ed      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80085a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d179      	bne.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80085a8:	4b39      	ldr	r3, [pc, #228]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80085ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80085b4:	4053      	eors	r3, r2
 80085b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d015      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085be:	4b34      	ldr	r3, [pc, #208]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80085ca:	4b31      	ldr	r3, [pc, #196]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ce:	4a30      	ldr	r2, [pc, #192]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085d4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80085d6:	4b2e      	ldr	r3, [pc, #184]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085da:	4a2d      	ldr	r2, [pc, #180]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085e0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80085e2:	4a2b      	ldr	r2, [pc, #172]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80085e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80085ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80085f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085f6:	d118      	bne.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085f8:	f7fa fd12 	bl	8003020 <HAL_GetTick>
 80085fc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008600:	e00d      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008602:	f7fa fd0d 	bl	8003020 <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800860c:	1ad2      	subs	r2, r2, r3
 800860e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008612:	429a      	cmp	r2, r3
 8008614:	d903      	bls.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800861c:	e005      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800861e:	4b1c      	ldr	r3, [pc, #112]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008622:	f003 0302 	and.w	r3, r3, #2
 8008626:	2b00      	cmp	r3, #0
 8008628:	d0eb      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800862a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800862e:	2b00      	cmp	r3, #0
 8008630:	d129      	bne.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008636:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800863a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800863e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008642:	d10e      	bne.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008644:	4b12      	ldr	r3, [pc, #72]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800864c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008650:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008654:	091a      	lsrs	r2, r3, #4
 8008656:	4b10      	ldr	r3, [pc, #64]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008658:	4013      	ands	r3, r2
 800865a:	4a0d      	ldr	r2, [pc, #52]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800865c:	430b      	orrs	r3, r1
 800865e:	6113      	str	r3, [r2, #16]
 8008660:	e005      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008662:	4b0b      	ldr	r3, [pc, #44]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	4a0a      	ldr	r2, [pc, #40]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008668:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800866c:	6113      	str	r3, [r2, #16]
 800866e:	4b08      	ldr	r3, [pc, #32]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008670:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008676:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800867a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800867e:	4a04      	ldr	r2, [pc, #16]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008680:	430b      	orrs	r3, r1
 8008682:	6713      	str	r3, [r2, #112]	; 0x70
 8008684:	e00e      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008686:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800868a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800868e:	e009      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008690:	58024400 	.word	0x58024400
 8008694:	58024800 	.word	0x58024800
 8008698:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800869c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80086a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	f002 0301 	and.w	r3, r2, #1
 80086b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086b4:	2300      	movs	r3, #0
 80086b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80086ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80086be:	460b      	mov	r3, r1
 80086c0:	4313      	orrs	r3, r2
 80086c2:	f000 8089 	beq.w	80087d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80086c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086cc:	2b28      	cmp	r3, #40	; 0x28
 80086ce:	d86b      	bhi.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80086d0:	a201      	add	r2, pc, #4	; (adr r2, 80086d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80086d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d6:	bf00      	nop
 80086d8:	080087b1 	.word	0x080087b1
 80086dc:	080087a9 	.word	0x080087a9
 80086e0:	080087a9 	.word	0x080087a9
 80086e4:	080087a9 	.word	0x080087a9
 80086e8:	080087a9 	.word	0x080087a9
 80086ec:	080087a9 	.word	0x080087a9
 80086f0:	080087a9 	.word	0x080087a9
 80086f4:	080087a9 	.word	0x080087a9
 80086f8:	0800877d 	.word	0x0800877d
 80086fc:	080087a9 	.word	0x080087a9
 8008700:	080087a9 	.word	0x080087a9
 8008704:	080087a9 	.word	0x080087a9
 8008708:	080087a9 	.word	0x080087a9
 800870c:	080087a9 	.word	0x080087a9
 8008710:	080087a9 	.word	0x080087a9
 8008714:	080087a9 	.word	0x080087a9
 8008718:	08008793 	.word	0x08008793
 800871c:	080087a9 	.word	0x080087a9
 8008720:	080087a9 	.word	0x080087a9
 8008724:	080087a9 	.word	0x080087a9
 8008728:	080087a9 	.word	0x080087a9
 800872c:	080087a9 	.word	0x080087a9
 8008730:	080087a9 	.word	0x080087a9
 8008734:	080087a9 	.word	0x080087a9
 8008738:	080087b1 	.word	0x080087b1
 800873c:	080087a9 	.word	0x080087a9
 8008740:	080087a9 	.word	0x080087a9
 8008744:	080087a9 	.word	0x080087a9
 8008748:	080087a9 	.word	0x080087a9
 800874c:	080087a9 	.word	0x080087a9
 8008750:	080087a9 	.word	0x080087a9
 8008754:	080087a9 	.word	0x080087a9
 8008758:	080087b1 	.word	0x080087b1
 800875c:	080087a9 	.word	0x080087a9
 8008760:	080087a9 	.word	0x080087a9
 8008764:	080087a9 	.word	0x080087a9
 8008768:	080087a9 	.word	0x080087a9
 800876c:	080087a9 	.word	0x080087a9
 8008770:	080087a9 	.word	0x080087a9
 8008774:	080087a9 	.word	0x080087a9
 8008778:	080087b1 	.word	0x080087b1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800877c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008780:	3308      	adds	r3, #8
 8008782:	2101      	movs	r1, #1
 8008784:	4618      	mov	r0, r3
 8008786:	f001 fe95 	bl	800a4b4 <RCCEx_PLL2_Config>
 800878a:	4603      	mov	r3, r0
 800878c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008790:	e00f      	b.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008796:	3328      	adds	r3, #40	; 0x28
 8008798:	2101      	movs	r1, #1
 800879a:	4618      	mov	r0, r3
 800879c:	f001 ff3c 	bl	800a618 <RCCEx_PLL3_Config>
 80087a0:	4603      	mov	r3, r0
 80087a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80087a6:	e004      	b.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80087ae:	e000      	b.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80087b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d10a      	bne.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80087ba:	4bbf      	ldr	r3, [pc, #764]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087be:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80087c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087c8:	4abb      	ldr	r2, [pc, #748]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087ca:	430b      	orrs	r3, r1
 80087cc:	6553      	str	r3, [r2, #84]	; 0x54
 80087ce:	e003      	b.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80087d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e0:	f002 0302 	and.w	r3, r2, #2
 80087e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087e8:	2300      	movs	r3, #0
 80087ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80087ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80087f2:	460b      	mov	r3, r1
 80087f4:	4313      	orrs	r3, r2
 80087f6:	d041      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80087f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087fe:	2b05      	cmp	r3, #5
 8008800:	d824      	bhi.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008802:	a201      	add	r2, pc, #4	; (adr r2, 8008808 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008808:	08008855 	.word	0x08008855
 800880c:	08008821 	.word	0x08008821
 8008810:	08008837 	.word	0x08008837
 8008814:	08008855 	.word	0x08008855
 8008818:	08008855 	.word	0x08008855
 800881c:	08008855 	.word	0x08008855
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008824:	3308      	adds	r3, #8
 8008826:	2101      	movs	r1, #1
 8008828:	4618      	mov	r0, r3
 800882a:	f001 fe43 	bl	800a4b4 <RCCEx_PLL2_Config>
 800882e:	4603      	mov	r3, r0
 8008830:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008834:	e00f      	b.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800883a:	3328      	adds	r3, #40	; 0x28
 800883c:	2101      	movs	r1, #1
 800883e:	4618      	mov	r0, r3
 8008840:	f001 feea 	bl	800a618 <RCCEx_PLL3_Config>
 8008844:	4603      	mov	r3, r0
 8008846:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800884a:	e004      	b.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008852:	e000      	b.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008854:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008856:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10a      	bne.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800885e:	4b96      	ldr	r3, [pc, #600]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008862:	f023 0107 	bic.w	r1, r3, #7
 8008866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800886a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800886c:	4a92      	ldr	r2, [pc, #584]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800886e:	430b      	orrs	r3, r1
 8008870:	6553      	str	r3, [r2, #84]	; 0x54
 8008872:	e003      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008874:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008878:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800887c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008884:	f002 0304 	and.w	r3, r2, #4
 8008888:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800888c:	2300      	movs	r3, #0
 800888e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008892:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008896:	460b      	mov	r3, r1
 8008898:	4313      	orrs	r3, r2
 800889a:	d044      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800889c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088a4:	2b05      	cmp	r3, #5
 80088a6:	d825      	bhi.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80088a8:	a201      	add	r2, pc, #4	; (adr r2, 80088b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80088aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ae:	bf00      	nop
 80088b0:	080088fd 	.word	0x080088fd
 80088b4:	080088c9 	.word	0x080088c9
 80088b8:	080088df 	.word	0x080088df
 80088bc:	080088fd 	.word	0x080088fd
 80088c0:	080088fd 	.word	0x080088fd
 80088c4:	080088fd 	.word	0x080088fd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088cc:	3308      	adds	r3, #8
 80088ce:	2101      	movs	r1, #1
 80088d0:	4618      	mov	r0, r3
 80088d2:	f001 fdef 	bl	800a4b4 <RCCEx_PLL2_Config>
 80088d6:	4603      	mov	r3, r0
 80088d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80088dc:	e00f      	b.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e2:	3328      	adds	r3, #40	; 0x28
 80088e4:	2101      	movs	r1, #1
 80088e6:	4618      	mov	r0, r3
 80088e8:	f001 fe96 	bl	800a618 <RCCEx_PLL3_Config>
 80088ec:	4603      	mov	r3, r0
 80088ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80088f2:	e004      	b.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80088fa:	e000      	b.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80088fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10b      	bne.n	800891e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008906:	4b6c      	ldr	r3, [pc, #432]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800890a:	f023 0107 	bic.w	r1, r3, #7
 800890e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008916:	4a68      	ldr	r2, [pc, #416]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008918:	430b      	orrs	r3, r1
 800891a:	6593      	str	r3, [r2, #88]	; 0x58
 800891c:	e003      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800891e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008922:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800892a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892e:	f002 0320 	and.w	r3, r2, #32
 8008932:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008936:	2300      	movs	r3, #0
 8008938:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800893c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008940:	460b      	mov	r3, r1
 8008942:	4313      	orrs	r3, r2
 8008944:	d055      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800894a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800894e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008952:	d033      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008954:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008958:	d82c      	bhi.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800895a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800895e:	d02f      	beq.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008964:	d826      	bhi.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008966:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800896a:	d02b      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800896c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008970:	d820      	bhi.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008976:	d012      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800897c:	d81a      	bhi.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800897e:	2b00      	cmp	r3, #0
 8008980:	d022      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008986:	d115      	bne.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800898c:	3308      	adds	r3, #8
 800898e:	2100      	movs	r1, #0
 8008990:	4618      	mov	r0, r3
 8008992:	f001 fd8f 	bl	800a4b4 <RCCEx_PLL2_Config>
 8008996:	4603      	mov	r3, r0
 8008998:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800899c:	e015      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800899e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089a2:	3328      	adds	r3, #40	; 0x28
 80089a4:	2102      	movs	r1, #2
 80089a6:	4618      	mov	r0, r3
 80089a8:	f001 fe36 	bl	800a618 <RCCEx_PLL3_Config>
 80089ac:	4603      	mov	r3, r0
 80089ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80089b2:	e00a      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089ba:	e006      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80089bc:	bf00      	nop
 80089be:	e004      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80089c0:	bf00      	nop
 80089c2:	e002      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80089c4:	bf00      	nop
 80089c6:	e000      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80089c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10b      	bne.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80089d2:	4b39      	ldr	r3, [pc, #228]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80089d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80089da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089e2:	4a35      	ldr	r2, [pc, #212]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80089e4:	430b      	orrs	r3, r1
 80089e6:	6553      	str	r3, [r2, #84]	; 0x54
 80089e8:	e003      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80089f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80089fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008a02:	2300      	movs	r3, #0
 8008a04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008a08:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	d058      	beq.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a1a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008a1e:	d033      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008a20:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008a24:	d82c      	bhi.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a2a:	d02f      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a30:	d826      	bhi.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a36:	d02b      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008a38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a3c:	d820      	bhi.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a42:	d012      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008a44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a48:	d81a      	bhi.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d022      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a52:	d115      	bne.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a58:	3308      	adds	r3, #8
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f001 fd29 	bl	800a4b4 <RCCEx_PLL2_Config>
 8008a62:	4603      	mov	r3, r0
 8008a64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008a68:	e015      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a6e:	3328      	adds	r3, #40	; 0x28
 8008a70:	2102      	movs	r1, #2
 8008a72:	4618      	mov	r0, r3
 8008a74:	f001 fdd0 	bl	800a618 <RCCEx_PLL3_Config>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008a7e:	e00a      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a86:	e006      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a88:	bf00      	nop
 8008a8a:	e004      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a8c:	bf00      	nop
 8008a8e:	e002      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a90:	bf00      	nop
 8008a92:	e000      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10e      	bne.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008a9e:	4b06      	ldr	r3, [pc, #24]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aa2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008aae:	4a02      	ldr	r2, [pc, #8]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ab0:	430b      	orrs	r3, r1
 8008ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8008ab4:	e006      	b.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008ab6:	bf00      	nop
 8008ab8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008abc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ac0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008acc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008ad0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ada:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008ade:	460b      	mov	r3, r1
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	d055      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ae8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008aec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008af0:	d033      	beq.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008af2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008af6:	d82c      	bhi.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008afc:	d02f      	beq.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b02:	d826      	bhi.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008b04:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008b08:	d02b      	beq.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008b0a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008b0e:	d820      	bhi.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008b10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b14:	d012      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008b16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b1a:	d81a      	bhi.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d022      	beq.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b24:	d115      	bne.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b2a:	3308      	adds	r3, #8
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f001 fcc0 	bl	800a4b4 <RCCEx_PLL2_Config>
 8008b34:	4603      	mov	r3, r0
 8008b36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008b3a:	e015      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b40:	3328      	adds	r3, #40	; 0x28
 8008b42:	2102      	movs	r1, #2
 8008b44:	4618      	mov	r0, r3
 8008b46:	f001 fd67 	bl	800a618 <RCCEx_PLL3_Config>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008b50:	e00a      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b58:	e006      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b5a:	bf00      	nop
 8008b5c:	e004      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b5e:	bf00      	nop
 8008b60:	e002      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b62:	bf00      	nop
 8008b64:	e000      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10b      	bne.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008b70:	4ba1      	ldr	r3, [pc, #644]	; (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b74:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008b80:	4a9d      	ldr	r2, [pc, #628]	; (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b82:	430b      	orrs	r3, r1
 8008b84:	6593      	str	r3, [r2, #88]	; 0x58
 8008b86:	e003      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b98:	f002 0308 	and.w	r3, r2, #8
 8008b9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008ba6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008baa:	460b      	mov	r3, r1
 8008bac:	4313      	orrs	r3, r2
 8008bae:	d01e      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bbc:	d10c      	bne.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bc2:	3328      	adds	r3, #40	; 0x28
 8008bc4:	2102      	movs	r1, #2
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f001 fd26 	bl	800a618 <RCCEx_PLL3_Config>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d002      	beq.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008bd8:	4b87      	ldr	r3, [pc, #540]	; (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bdc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008be8:	4a83      	ldr	r2, [pc, #524]	; (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bea:	430b      	orrs	r3, r1
 8008bec:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf6:	f002 0310 	and.w	r3, r2, #16
 8008bfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008bfe:	2300      	movs	r3, #0
 8008c00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008c04:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008c08:	460b      	mov	r3, r1
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	d01e      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c1a:	d10c      	bne.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c20:	3328      	adds	r3, #40	; 0x28
 8008c22:	2102      	movs	r1, #2
 8008c24:	4618      	mov	r0, r3
 8008c26:	f001 fcf7 	bl	800a618 <RCCEx_PLL3_Config>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d002      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008c36:	4b70      	ldr	r3, [pc, #448]	; (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c46:	4a6c      	ldr	r2, [pc, #432]	; (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c48:	430b      	orrs	r3, r1
 8008c4a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c54:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008c58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c62:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008c66:	460b      	mov	r3, r1
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	d03e      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c78:	d022      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008c7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c7e:	d81b      	bhi.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d003      	beq.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c88:	d00b      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008c8a:	e015      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c90:	3308      	adds	r3, #8
 8008c92:	2100      	movs	r1, #0
 8008c94:	4618      	mov	r0, r3
 8008c96:	f001 fc0d 	bl	800a4b4 <RCCEx_PLL2_Config>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008ca0:	e00f      	b.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ca6:	3328      	adds	r3, #40	; 0x28
 8008ca8:	2102      	movs	r1, #2
 8008caa:	4618      	mov	r0, r3
 8008cac:	f001 fcb4 	bl	800a618 <RCCEx_PLL3_Config>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008cb6:	e004      	b.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008cbe:	e000      	b.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10b      	bne.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008cca:	4b4b      	ldr	r3, [pc, #300]	; (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cce:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008cda:	4a47      	ldr	r2, [pc, #284]	; (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cdc:	430b      	orrs	r3, r1
 8008cde:	6593      	str	r3, [r2, #88]	; 0x58
 8008ce0:	e003      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ce6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008cf6:	67bb      	str	r3, [r7, #120]	; 0x78
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008cfc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008d00:	460b      	mov	r3, r1
 8008d02:	4313      	orrs	r3, r2
 8008d04:	d03b      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d12:	d01f      	beq.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008d14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d18:	d818      	bhi.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d1e:	d003      	beq.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008d20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d24:	d007      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008d26:	e011      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d28:	4b33      	ldr	r3, [pc, #204]	; (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2c:	4a32      	ldr	r2, [pc, #200]	; (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008d34:	e00f      	b.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d3a:	3328      	adds	r3, #40	; 0x28
 8008d3c:	2101      	movs	r1, #1
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f001 fc6a 	bl	800a618 <RCCEx_PLL3_Config>
 8008d44:	4603      	mov	r3, r0
 8008d46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008d4a:	e004      	b.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d52:	e000      	b.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008d54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10b      	bne.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d5e:	4b26      	ldr	r3, [pc, #152]	; (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d62:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d6e:	4a22      	ldr	r2, [pc, #136]	; (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d70:	430b      	orrs	r3, r1
 8008d72:	6553      	str	r3, [r2, #84]	; 0x54
 8008d74:	e003      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d86:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008d8a:	673b      	str	r3, [r7, #112]	; 0x70
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	677b      	str	r3, [r7, #116]	; 0x74
 8008d90:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008d94:	460b      	mov	r3, r1
 8008d96:	4313      	orrs	r3, r2
 8008d98:	d034      	beq.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d003      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008da8:	d007      	beq.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008daa:	e011      	b.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dac:	4b12      	ldr	r3, [pc, #72]	; (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db0:	4a11      	ldr	r2, [pc, #68]	; (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008db6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008db8:	e00e      	b.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dbe:	3308      	adds	r3, #8
 8008dc0:	2102      	movs	r1, #2
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f001 fb76 	bl	800a4b4 <RCCEx_PLL2_Config>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008dce:	e003      	b.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008dd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10d      	bne.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008de0:	4b05      	ldr	r3, [pc, #20]	; (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008de4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dee:	4a02      	ldr	r2, [pc, #8]	; (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008df0:	430b      	orrs	r3, r1
 8008df2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008df4:	e006      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008df6:	bf00      	nop
 8008df8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008e10:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e12:	2300      	movs	r3, #0
 8008e14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e16:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	d00c      	beq.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e24:	3328      	adds	r3, #40	; 0x28
 8008e26:	2102      	movs	r1, #2
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f001 fbf5 	bl	800a618 <RCCEx_PLL3_Config>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d002      	beq.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e42:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008e46:	663b      	str	r3, [r7, #96]	; 0x60
 8008e48:	2300      	movs	r3, #0
 8008e4a:	667b      	str	r3, [r7, #100]	; 0x64
 8008e4c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008e50:	460b      	mov	r3, r1
 8008e52:	4313      	orrs	r3, r2
 8008e54:	d038      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e62:	d018      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008e64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e68:	d811      	bhi.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e6e:	d014      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e74:	d80b      	bhi.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d011      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e7e:	d106      	bne.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e80:	4bc3      	ldr	r3, [pc, #780]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e84:	4ac2      	ldr	r2, [pc, #776]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008e8c:	e008      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e94:	e004      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008e96:	bf00      	nop
 8008e98:	e002      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008e9a:	bf00      	nop
 8008e9c:	e000      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10b      	bne.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008ea8:	4bb9      	ldr	r3, [pc, #740]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008eb8:	4ab5      	ldr	r2, [pc, #724]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008eba:	430b      	orrs	r3, r1
 8008ebc:	6553      	str	r3, [r2, #84]	; 0x54
 8008ebe:	e003      	b.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ec4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008ed4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008eda:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008ede:	460b      	mov	r3, r1
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	d009      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008ee4:	4baa      	ldr	r3, [pc, #680]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ee8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ef2:	4aa7      	ldr	r2, [pc, #668]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ef4:	430b      	orrs	r3, r1
 8008ef6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f00:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008f04:	653b      	str	r3, [r7, #80]	; 0x50
 8008f06:	2300      	movs	r3, #0
 8008f08:	657b      	str	r3, [r7, #84]	; 0x54
 8008f0a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008f0e:	460b      	mov	r3, r1
 8008f10:	4313      	orrs	r3, r2
 8008f12:	d00a      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008f14:	4b9e      	ldr	r3, [pc, #632]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008f24:	4a9a      	ldr	r2, [pc, #616]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f26:	430b      	orrs	r3, r1
 8008f28:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f32:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008f36:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f38:	2300      	movs	r3, #0
 8008f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f3c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008f40:	460b      	mov	r3, r1
 8008f42:	4313      	orrs	r3, r2
 8008f44:	d009      	beq.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008f46:	4b92      	ldr	r3, [pc, #584]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f4a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f54:	4a8e      	ldr	r2, [pc, #568]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f56:	430b      	orrs	r3, r1
 8008f58:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f62:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008f66:	643b      	str	r3, [r7, #64]	; 0x40
 8008f68:	2300      	movs	r3, #0
 8008f6a:	647b      	str	r3, [r7, #68]	; 0x44
 8008f6c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008f70:	460b      	mov	r3, r1
 8008f72:	4313      	orrs	r3, r2
 8008f74:	d00e      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f76:	4b86      	ldr	r3, [pc, #536]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	4a85      	ldr	r2, [pc, #532]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f80:	6113      	str	r3, [r2, #16]
 8008f82:	4b83      	ldr	r3, [pc, #524]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f84:	6919      	ldr	r1, [r3, #16]
 8008f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f8a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008f8e:	4a80      	ldr	r2, [pc, #512]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f90:	430b      	orrs	r3, r1
 8008f92:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008fa0:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fa6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008faa:	460b      	mov	r3, r1
 8008fac:	4313      	orrs	r3, r2
 8008fae:	d009      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008fb0:	4b77      	ldr	r3, [pc, #476]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fb4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fbe:	4a74      	ldr	r2, [pc, #464]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fc0:	430b      	orrs	r3, r1
 8008fc2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fcc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008fd0:	633b      	str	r3, [r7, #48]	; 0x30
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8008fd6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008fda:	460b      	mov	r3, r1
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	d00a      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008fe0:	4b6b      	ldr	r3, [pc, #428]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ff0:	4a67      	ldr	r2, [pc, #412]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ff2:	430b      	orrs	r3, r1
 8008ff4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffe:	2100      	movs	r1, #0
 8009000:	62b9      	str	r1, [r7, #40]	; 0x28
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009008:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800900c:	460b      	mov	r3, r1
 800900e:	4313      	orrs	r3, r2
 8009010:	d011      	beq.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009016:	3308      	adds	r3, #8
 8009018:	2100      	movs	r1, #0
 800901a:	4618      	mov	r0, r3
 800901c:	f001 fa4a 	bl	800a4b4 <RCCEx_PLL2_Config>
 8009020:	4603      	mov	r3, r0
 8009022:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009026:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800902a:	2b00      	cmp	r3, #0
 800902c:	d003      	beq.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800902e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009032:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800903a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903e:	2100      	movs	r1, #0
 8009040:	6239      	str	r1, [r7, #32]
 8009042:	f003 0302 	and.w	r3, r3, #2
 8009046:	627b      	str	r3, [r7, #36]	; 0x24
 8009048:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800904c:	460b      	mov	r3, r1
 800904e:	4313      	orrs	r3, r2
 8009050:	d011      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009056:	3308      	adds	r3, #8
 8009058:	2101      	movs	r1, #1
 800905a:	4618      	mov	r0, r3
 800905c:	f001 fa2a 	bl	800a4b4 <RCCEx_PLL2_Config>
 8009060:	4603      	mov	r3, r0
 8009062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009066:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800906a:	2b00      	cmp	r3, #0
 800906c:	d003      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800906e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009072:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800907a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907e:	2100      	movs	r1, #0
 8009080:	61b9      	str	r1, [r7, #24]
 8009082:	f003 0304 	and.w	r3, r3, #4
 8009086:	61fb      	str	r3, [r7, #28]
 8009088:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800908c:	460b      	mov	r3, r1
 800908e:	4313      	orrs	r3, r2
 8009090:	d011      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009096:	3308      	adds	r3, #8
 8009098:	2102      	movs	r1, #2
 800909a:	4618      	mov	r0, r3
 800909c:	f001 fa0a 	bl	800a4b4 <RCCEx_PLL2_Config>
 80090a0:	4603      	mov	r3, r0
 80090a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80090a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d003      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80090b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090be:	2100      	movs	r1, #0
 80090c0:	6139      	str	r1, [r7, #16]
 80090c2:	f003 0308 	and.w	r3, r3, #8
 80090c6:	617b      	str	r3, [r7, #20]
 80090c8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80090cc:	460b      	mov	r3, r1
 80090ce:	4313      	orrs	r3, r2
 80090d0:	d011      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090d6:	3328      	adds	r3, #40	; 0x28
 80090d8:	2100      	movs	r1, #0
 80090da:	4618      	mov	r0, r3
 80090dc:	f001 fa9c 	bl	800a618 <RCCEx_PLL3_Config>
 80090e0:	4603      	mov	r3, r0
 80090e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80090e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d003      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80090f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fe:	2100      	movs	r1, #0
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	f003 0310 	and.w	r3, r3, #16
 8009106:	60fb      	str	r3, [r7, #12]
 8009108:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800910c:	460b      	mov	r3, r1
 800910e:	4313      	orrs	r3, r2
 8009110:	d011      	beq.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009116:	3328      	adds	r3, #40	; 0x28
 8009118:	2101      	movs	r1, #1
 800911a:	4618      	mov	r0, r3
 800911c:	f001 fa7c 	bl	800a618 <RCCEx_PLL3_Config>
 8009120:	4603      	mov	r3, r0
 8009122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009126:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800912a:	2b00      	cmp	r3, #0
 800912c:	d003      	beq.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800912e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009132:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800913a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913e:	2100      	movs	r1, #0
 8009140:	6039      	str	r1, [r7, #0]
 8009142:	f003 0320 	and.w	r3, r3, #32
 8009146:	607b      	str	r3, [r7, #4]
 8009148:	e9d7 1200 	ldrd	r1, r2, [r7]
 800914c:	460b      	mov	r3, r1
 800914e:	4313      	orrs	r3, r2
 8009150:	d011      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009156:	3328      	adds	r3, #40	; 0x28
 8009158:	2102      	movs	r1, #2
 800915a:	4618      	mov	r0, r3
 800915c:	f001 fa5c 	bl	800a618 <RCCEx_PLL3_Config>
 8009160:	4603      	mov	r3, r0
 8009162:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009166:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800916e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009172:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009176:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800917a:	2b00      	cmp	r3, #0
 800917c:	d101      	bne.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	e000      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
}
 8009184:	4618      	mov	r0, r3
 8009186:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800918a:	46bd      	mov	sp, r7
 800918c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009190:	58024400 	.word	0x58024400

08009194 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b090      	sub	sp, #64	; 0x40
 8009198:	af00      	add	r7, sp, #0
 800919a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800919e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091a2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80091a6:	430b      	orrs	r3, r1
 80091a8:	f040 8094 	bne.w	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80091ac:	4b9e      	ldr	r3, [pc, #632]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091b0:	f003 0307 	and.w	r3, r3, #7
 80091b4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80091b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b8:	2b04      	cmp	r3, #4
 80091ba:	f200 8087 	bhi.w	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80091be:	a201      	add	r2, pc, #4	; (adr r2, 80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80091c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c4:	080091d9 	.word	0x080091d9
 80091c8:	08009201 	.word	0x08009201
 80091cc:	08009229 	.word	0x08009229
 80091d0:	080092c5 	.word	0x080092c5
 80091d4:	08009251 	.word	0x08009251
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091d8:	4b93      	ldr	r3, [pc, #588]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091e4:	d108      	bne.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091ea:	4618      	mov	r0, r3
 80091ec:	f001 f810 	bl	800a210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091f4:	f000 bd45 	b.w	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091f8:	2300      	movs	r3, #0
 80091fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091fc:	f000 bd41 	b.w	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009200:	4b89      	ldr	r3, [pc, #548]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009208:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800920c:	d108      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800920e:	f107 0318 	add.w	r3, r7, #24
 8009212:	4618      	mov	r0, r3
 8009214:	f000 fd54 	bl	8009cc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800921c:	f000 bd31 	b.w	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009220:	2300      	movs	r3, #0
 8009222:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009224:	f000 bd2d 	b.w	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009228:	4b7f      	ldr	r3, [pc, #508]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009234:	d108      	bne.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009236:	f107 030c 	add.w	r3, r7, #12
 800923a:	4618      	mov	r0, r3
 800923c:	f000 fe94 	bl	8009f68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009244:	f000 bd1d 	b.w	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009248:	2300      	movs	r3, #0
 800924a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800924c:	f000 bd19 	b.w	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009250:	4b75      	ldr	r3, [pc, #468]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009254:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009258:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800925a:	4b73      	ldr	r3, [pc, #460]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f003 0304 	and.w	r3, r3, #4
 8009262:	2b04      	cmp	r3, #4
 8009264:	d10c      	bne.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009268:	2b00      	cmp	r3, #0
 800926a:	d109      	bne.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800926c:	4b6e      	ldr	r3, [pc, #440]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	08db      	lsrs	r3, r3, #3
 8009272:	f003 0303 	and.w	r3, r3, #3
 8009276:	4a6d      	ldr	r2, [pc, #436]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009278:	fa22 f303 	lsr.w	r3, r2, r3
 800927c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800927e:	e01f      	b.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009280:	4b69      	ldr	r3, [pc, #420]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800928c:	d106      	bne.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800928e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009290:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009294:	d102      	bne.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009296:	4b66      	ldr	r3, [pc, #408]	; (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800929a:	e011      	b.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800929c:	4b62      	ldr	r3, [pc, #392]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092a8:	d106      	bne.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80092aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092b0:	d102      	bne.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80092b2:	4b60      	ldr	r3, [pc, #384]	; (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80092b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092b6:	e003      	b.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80092b8:	2300      	movs	r3, #0
 80092ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80092bc:	f000 bce1 	b.w	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80092c0:	f000 bcdf 	b.w	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80092c4:	4b5c      	ldr	r3, [pc, #368]	; (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80092c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092c8:	f000 bcdb 	b.w	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80092cc:	2300      	movs	r3, #0
 80092ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092d0:	f000 bcd7 	b.w	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80092d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092d8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80092dc:	430b      	orrs	r3, r1
 80092de:	f040 80ad 	bne.w	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80092e2:	4b51      	ldr	r3, [pc, #324]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80092e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092e6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80092ea:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80092ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092f2:	d056      	beq.n	80093a2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80092f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092fa:	f200 8090 	bhi.w	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80092fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009300:	2bc0      	cmp	r3, #192	; 0xc0
 8009302:	f000 8088 	beq.w	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009308:	2bc0      	cmp	r3, #192	; 0xc0
 800930a:	f200 8088 	bhi.w	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009310:	2b80      	cmp	r3, #128	; 0x80
 8009312:	d032      	beq.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009316:	2b80      	cmp	r3, #128	; 0x80
 8009318:	f200 8081 	bhi.w	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800931c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931e:	2b00      	cmp	r3, #0
 8009320:	d003      	beq.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009324:	2b40      	cmp	r3, #64	; 0x40
 8009326:	d014      	beq.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009328:	e079      	b.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800932a:	4b3f      	ldr	r3, [pc, #252]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009332:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009336:	d108      	bne.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800933c:	4618      	mov	r0, r3
 800933e:	f000 ff67 	bl	800a210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009344:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009346:	f000 bc9c 	b.w	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800934a:	2300      	movs	r3, #0
 800934c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800934e:	f000 bc98 	b.w	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009352:	4b35      	ldr	r3, [pc, #212]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800935a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800935e:	d108      	bne.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009360:	f107 0318 	add.w	r3, r7, #24
 8009364:	4618      	mov	r0, r3
 8009366:	f000 fcab 	bl	8009cc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800936e:	f000 bc88 	b.w	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009372:	2300      	movs	r3, #0
 8009374:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009376:	f000 bc84 	b.w	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800937a:	4b2b      	ldr	r3, [pc, #172]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009382:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009386:	d108      	bne.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009388:	f107 030c 	add.w	r3, r7, #12
 800938c:	4618      	mov	r0, r3
 800938e:	f000 fdeb 	bl	8009f68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009396:	f000 bc74 	b.w	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800939a:	2300      	movs	r3, #0
 800939c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800939e:	f000 bc70 	b.w	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80093a2:	4b21      	ldr	r3, [pc, #132]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80093aa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093ac:	4b1e      	ldr	r3, [pc, #120]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 0304 	and.w	r3, r3, #4
 80093b4:	2b04      	cmp	r3, #4
 80093b6:	d10c      	bne.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80093b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d109      	bne.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093be:	4b1a      	ldr	r3, [pc, #104]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	08db      	lsrs	r3, r3, #3
 80093c4:	f003 0303 	and.w	r3, r3, #3
 80093c8:	4a18      	ldr	r2, [pc, #96]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80093ca:	fa22 f303 	lsr.w	r3, r2, r3
 80093ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093d0:	e01f      	b.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093d2:	4b15      	ldr	r3, [pc, #84]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093de:	d106      	bne.n	80093ee <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80093e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093e6:	d102      	bne.n	80093ee <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80093e8:	4b11      	ldr	r3, [pc, #68]	; (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80093ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ec:	e011      	b.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093ee:	4b0e      	ldr	r3, [pc, #56]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093fa:	d106      	bne.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80093fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009402:	d102      	bne.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009404:	4b0b      	ldr	r3, [pc, #44]	; (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009408:	e003      	b.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800940a:	2300      	movs	r3, #0
 800940c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800940e:	f000 bc38 	b.w	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009412:	f000 bc36 	b.w	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009416:	4b08      	ldr	r3, [pc, #32]	; (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009418:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800941a:	f000 bc32 	b.w	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800941e:	2300      	movs	r3, #0
 8009420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009422:	f000 bc2e 	b.w	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009426:	bf00      	nop
 8009428:	58024400 	.word	0x58024400
 800942c:	03d09000 	.word	0x03d09000
 8009430:	003d0900 	.word	0x003d0900
 8009434:	017d7840 	.word	0x017d7840
 8009438:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800943c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009440:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009444:	430b      	orrs	r3, r1
 8009446:	f040 809c 	bne.w	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800944a:	4b9e      	ldr	r3, [pc, #632]	; (80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800944c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800944e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009452:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009456:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800945a:	d054      	beq.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800945c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009462:	f200 808b 	bhi.w	800957c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009468:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800946c:	f000 8083 	beq.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009472:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009476:	f200 8081 	bhi.w	800957c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800947a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009480:	d02f      	beq.n	80094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009488:	d878      	bhi.n	800957c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800948a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948c:	2b00      	cmp	r3, #0
 800948e:	d004      	beq.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009492:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009496:	d012      	beq.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009498:	e070      	b.n	800957c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800949a:	4b8a      	ldr	r3, [pc, #552]	; (80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094a6:	d107      	bne.n	80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094ac:	4618      	mov	r0, r3
 80094ae:	f000 feaf 	bl	800a210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094b6:	e3e4      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094b8:	2300      	movs	r3, #0
 80094ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094bc:	e3e1      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094be:	4b81      	ldr	r3, [pc, #516]	; (80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094ca:	d107      	bne.n	80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094cc:	f107 0318 	add.w	r3, r7, #24
 80094d0:	4618      	mov	r0, r3
 80094d2:	f000 fbf5 	bl	8009cc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094da:	e3d2      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094dc:	2300      	movs	r3, #0
 80094de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094e0:	e3cf      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094e2:	4b78      	ldr	r3, [pc, #480]	; (80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094ee:	d107      	bne.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094f0:	f107 030c 	add.w	r3, r7, #12
 80094f4:	4618      	mov	r0, r3
 80094f6:	f000 fd37 	bl	8009f68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094fe:	e3c0      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009500:	2300      	movs	r3, #0
 8009502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009504:	e3bd      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009506:	4b6f      	ldr	r3, [pc, #444]	; (80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800950a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800950e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009510:	4b6c      	ldr	r3, [pc, #432]	; (80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 0304 	and.w	r3, r3, #4
 8009518:	2b04      	cmp	r3, #4
 800951a:	d10c      	bne.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800951c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800951e:	2b00      	cmp	r3, #0
 8009520:	d109      	bne.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009522:	4b68      	ldr	r3, [pc, #416]	; (80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	08db      	lsrs	r3, r3, #3
 8009528:	f003 0303 	and.w	r3, r3, #3
 800952c:	4a66      	ldr	r2, [pc, #408]	; (80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800952e:	fa22 f303 	lsr.w	r3, r2, r3
 8009532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009534:	e01e      	b.n	8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009536:	4b63      	ldr	r3, [pc, #396]	; (80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800953e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009542:	d106      	bne.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009546:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800954a:	d102      	bne.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800954c:	4b5f      	ldr	r3, [pc, #380]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800954e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009550:	e010      	b.n	8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009552:	4b5c      	ldr	r3, [pc, #368]	; (80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800955a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800955e:	d106      	bne.n	800956e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009566:	d102      	bne.n	800956e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009568:	4b59      	ldr	r3, [pc, #356]	; (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800956a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800956c:	e002      	b.n	8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800956e:	2300      	movs	r3, #0
 8009570:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009572:	e386      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009574:	e385      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009576:	4b57      	ldr	r3, [pc, #348]	; (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009578:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800957a:	e382      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800957c:	2300      	movs	r3, #0
 800957e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009580:	e37f      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009582:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009586:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800958a:	430b      	orrs	r3, r1
 800958c:	f040 80a7 	bne.w	80096de <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009590:	4b4c      	ldr	r3, [pc, #304]	; (80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009594:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009598:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800959a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095a0:	d055      	beq.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80095a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095a8:	f200 8096 	bhi.w	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80095ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80095b2:	f000 8084 	beq.w	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80095b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80095bc:	f200 808c 	bhi.w	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80095c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095c6:	d030      	beq.n	800962a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80095c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095ce:	f200 8083 	bhi.w	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80095d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d004      	beq.n	80095e2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80095d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80095de:	d012      	beq.n	8009606 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80095e0:	e07a      	b.n	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095e2:	4b38      	ldr	r3, [pc, #224]	; (80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095ee:	d107      	bne.n	8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095f4:	4618      	mov	r0, r3
 80095f6:	f000 fe0b 	bl	800a210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095fe:	e340      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009600:	2300      	movs	r3, #0
 8009602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009604:	e33d      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009606:	4b2f      	ldr	r3, [pc, #188]	; (80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800960e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009612:	d107      	bne.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009614:	f107 0318 	add.w	r3, r7, #24
 8009618:	4618      	mov	r0, r3
 800961a:	f000 fb51 	bl	8009cc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009622:	e32e      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009624:	2300      	movs	r3, #0
 8009626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009628:	e32b      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800962a:	4b26      	ldr	r3, [pc, #152]	; (80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009632:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009636:	d107      	bne.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009638:	f107 030c 	add.w	r3, r7, #12
 800963c:	4618      	mov	r0, r3
 800963e:	f000 fc93 	bl	8009f68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009646:	e31c      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009648:	2300      	movs	r3, #0
 800964a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800964c:	e319      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800964e:	4b1d      	ldr	r3, [pc, #116]	; (80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009652:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009656:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009658:	4b1a      	ldr	r3, [pc, #104]	; (80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f003 0304 	and.w	r3, r3, #4
 8009660:	2b04      	cmp	r3, #4
 8009662:	d10c      	bne.n	800967e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009666:	2b00      	cmp	r3, #0
 8009668:	d109      	bne.n	800967e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800966a:	4b16      	ldr	r3, [pc, #88]	; (80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	08db      	lsrs	r3, r3, #3
 8009670:	f003 0303 	and.w	r3, r3, #3
 8009674:	4a14      	ldr	r2, [pc, #80]	; (80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009676:	fa22 f303 	lsr.w	r3, r2, r3
 800967a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800967c:	e01e      	b.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800967e:	4b11      	ldr	r3, [pc, #68]	; (80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800968a:	d106      	bne.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800968c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800968e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009692:	d102      	bne.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009694:	4b0d      	ldr	r3, [pc, #52]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009698:	e010      	b.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800969a:	4b0a      	ldr	r3, [pc, #40]	; (80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096a6:	d106      	bne.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80096a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096ae:	d102      	bne.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80096b0:	4b07      	ldr	r3, [pc, #28]	; (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80096b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096b4:	e002      	b.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80096b6:	2300      	movs	r3, #0
 80096b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80096ba:	e2e2      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096bc:	e2e1      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80096be:	4b05      	ldr	r3, [pc, #20]	; (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80096c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096c2:	e2de      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096c4:	58024400 	.word	0x58024400
 80096c8:	03d09000 	.word	0x03d09000
 80096cc:	003d0900 	.word	0x003d0900
 80096d0:	017d7840 	.word	0x017d7840
 80096d4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80096d8:	2300      	movs	r3, #0
 80096da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096dc:	e2d1      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80096de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096e2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80096e6:	430b      	orrs	r3, r1
 80096e8:	f040 809c 	bne.w	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80096ec:	4b93      	ldr	r3, [pc, #588]	; (800993c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096f0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80096f4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80096f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096fc:	d054      	beq.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80096fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009700:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009704:	f200 808b 	bhi.w	800981e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800970e:	f000 8083 	beq.w	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009714:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009718:	f200 8081 	bhi.w	800981e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800971c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009722:	d02f      	beq.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800972a:	d878      	bhi.n	800981e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800972c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972e:	2b00      	cmp	r3, #0
 8009730:	d004      	beq.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009738:	d012      	beq.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800973a:	e070      	b.n	800981e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800973c:	4b7f      	ldr	r3, [pc, #508]	; (800993c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009744:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009748:	d107      	bne.n	800975a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800974a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800974e:	4618      	mov	r0, r3
 8009750:	f000 fd5e 	bl	800a210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009756:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009758:	e293      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800975a:	2300      	movs	r3, #0
 800975c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800975e:	e290      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009760:	4b76      	ldr	r3, [pc, #472]	; (800993c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800976c:	d107      	bne.n	800977e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800976e:	f107 0318 	add.w	r3, r7, #24
 8009772:	4618      	mov	r0, r3
 8009774:	f000 faa4 	bl	8009cc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800977c:	e281      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800977e:	2300      	movs	r3, #0
 8009780:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009782:	e27e      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009784:	4b6d      	ldr	r3, [pc, #436]	; (800993c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800978c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009790:	d107      	bne.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009792:	f107 030c 	add.w	r3, r7, #12
 8009796:	4618      	mov	r0, r3
 8009798:	f000 fbe6 	bl	8009f68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097a0:	e26f      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097a2:	2300      	movs	r3, #0
 80097a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097a6:	e26c      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097a8:	4b64      	ldr	r3, [pc, #400]	; (800993c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80097b0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097b2:	4b62      	ldr	r3, [pc, #392]	; (800993c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 0304 	and.w	r3, r3, #4
 80097ba:	2b04      	cmp	r3, #4
 80097bc:	d10c      	bne.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80097be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d109      	bne.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097c4:	4b5d      	ldr	r3, [pc, #372]	; (800993c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	08db      	lsrs	r3, r3, #3
 80097ca:	f003 0303 	and.w	r3, r3, #3
 80097ce:	4a5c      	ldr	r2, [pc, #368]	; (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80097d0:	fa22 f303 	lsr.w	r3, r2, r3
 80097d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097d6:	e01e      	b.n	8009816 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097d8:	4b58      	ldr	r3, [pc, #352]	; (800993c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097e4:	d106      	bne.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80097e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097ec:	d102      	bne.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80097ee:	4b55      	ldr	r3, [pc, #340]	; (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097f2:	e010      	b.n	8009816 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097f4:	4b51      	ldr	r3, [pc, #324]	; (800993c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009800:	d106      	bne.n	8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009808:	d102      	bne.n	8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800980a:	4b4f      	ldr	r3, [pc, #316]	; (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800980c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800980e:	e002      	b.n	8009816 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009810:	2300      	movs	r3, #0
 8009812:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009814:	e235      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009816:	e234      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009818:	4b4c      	ldr	r3, [pc, #304]	; (800994c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800981a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800981c:	e231      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800981e:	2300      	movs	r3, #0
 8009820:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009822:	e22e      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009828:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800982c:	430b      	orrs	r3, r1
 800982e:	f040 808f 	bne.w	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009832:	4b42      	ldr	r3, [pc, #264]	; (800993c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009836:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800983a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800983c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009842:	d06b      	beq.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009846:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800984a:	d874      	bhi.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800984c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009852:	d056      	beq.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009856:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800985a:	d86c      	bhi.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800985c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009862:	d03b      	beq.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009866:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800986a:	d864      	bhi.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800986c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009872:	d021      	beq.n	80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009876:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800987a:	d85c      	bhi.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800987c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987e:	2b00      	cmp	r3, #0
 8009880:	d004      	beq.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009888:	d004      	beq.n	8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800988a:	e054      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800988c:	f7fe fa4c 	bl	8007d28 <HAL_RCC_GetPCLK1Freq>
 8009890:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009892:	e1f6      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009894:	4b29      	ldr	r3, [pc, #164]	; (800993c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800989c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80098a0:	d107      	bne.n	80098b2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098a2:	f107 0318 	add.w	r3, r7, #24
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 fa0a 	bl	8009cc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098b0:	e1e7      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098b2:	2300      	movs	r3, #0
 80098b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098b6:	e1e4      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098b8:	4b20      	ldr	r3, [pc, #128]	; (800993c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098c4:	d107      	bne.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098c6:	f107 030c 	add.w	r3, r7, #12
 80098ca:	4618      	mov	r0, r3
 80098cc:	f000 fb4c 	bl	8009f68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098d4:	e1d5      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098d6:	2300      	movs	r3, #0
 80098d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098da:	e1d2      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80098dc:	4b17      	ldr	r3, [pc, #92]	; (800993c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 0304 	and.w	r3, r3, #4
 80098e4:	2b04      	cmp	r3, #4
 80098e6:	d109      	bne.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098e8:	4b14      	ldr	r3, [pc, #80]	; (800993c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	08db      	lsrs	r3, r3, #3
 80098ee:	f003 0303 	and.w	r3, r3, #3
 80098f2:	4a13      	ldr	r2, [pc, #76]	; (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80098f4:	fa22 f303 	lsr.w	r3, r2, r3
 80098f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098fa:	e1c2      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098fc:	2300      	movs	r3, #0
 80098fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009900:	e1bf      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009902:	4b0e      	ldr	r3, [pc, #56]	; (800993c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800990a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800990e:	d102      	bne.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009910:	4b0c      	ldr	r3, [pc, #48]	; (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009912:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009914:	e1b5      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009916:	2300      	movs	r3, #0
 8009918:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800991a:	e1b2      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800991c:	4b07      	ldr	r3, [pc, #28]	; (800993c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009924:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009928:	d102      	bne.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800992a:	4b07      	ldr	r3, [pc, #28]	; (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800992c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800992e:	e1a8      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009930:	2300      	movs	r3, #0
 8009932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009934:	e1a5      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009936:	2300      	movs	r3, #0
 8009938:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800993a:	e1a2      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800993c:	58024400 	.word	0x58024400
 8009940:	03d09000 	.word	0x03d09000
 8009944:	003d0900 	.word	0x003d0900
 8009948:	017d7840 	.word	0x017d7840
 800994c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009954:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8009958:	430b      	orrs	r3, r1
 800995a:	d173      	bne.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800995c:	4b9c      	ldr	r3, [pc, #624]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800995e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009960:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009964:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009968:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800996c:	d02f      	beq.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800996e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009970:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009974:	d863      	bhi.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009978:	2b00      	cmp	r3, #0
 800997a:	d004      	beq.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800997c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009982:	d012      	beq.n	80099aa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009984:	e05b      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009986:	4b92      	ldr	r3, [pc, #584]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800998e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009992:	d107      	bne.n	80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009994:	f107 0318 	add.w	r3, r7, #24
 8009998:	4618      	mov	r0, r3
 800999a:	f000 f991 	bl	8009cc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099a2:	e16e      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099a4:	2300      	movs	r3, #0
 80099a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099a8:	e16b      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099aa:	4b89      	ldr	r3, [pc, #548]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099b6:	d107      	bne.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099b8:	f107 030c 	add.w	r3, r7, #12
 80099bc:	4618      	mov	r0, r3
 80099be:	f000 fad3 	bl	8009f68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099c6:	e15c      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099c8:	2300      	movs	r3, #0
 80099ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099cc:	e159      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099ce:	4b80      	ldr	r3, [pc, #512]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80099d6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80099d8:	4b7d      	ldr	r3, [pc, #500]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 0304 	and.w	r3, r3, #4
 80099e0:	2b04      	cmp	r3, #4
 80099e2:	d10c      	bne.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80099e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d109      	bne.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099ea:	4b79      	ldr	r3, [pc, #484]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	08db      	lsrs	r3, r3, #3
 80099f0:	f003 0303 	and.w	r3, r3, #3
 80099f4:	4a77      	ldr	r2, [pc, #476]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80099f6:	fa22 f303 	lsr.w	r3, r2, r3
 80099fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099fc:	e01e      	b.n	8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80099fe:	4b74      	ldr	r3, [pc, #464]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a0a:	d106      	bne.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a12:	d102      	bne.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a14:	4b70      	ldr	r3, [pc, #448]	; (8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a18:	e010      	b.n	8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a1a:	4b6d      	ldr	r3, [pc, #436]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a26:	d106      	bne.n	8009a36 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a2e:	d102      	bne.n	8009a36 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a30:	4b6a      	ldr	r3, [pc, #424]	; (8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a34:	e002      	b.n	8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a36:	2300      	movs	r3, #0
 8009a38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009a3a:	e122      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a3c:	e121      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a42:	e11e      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009a44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a48:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009a4c:	430b      	orrs	r3, r1
 8009a4e:	d133      	bne.n	8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009a50:	4b5f      	ldr	r3, [pc, #380]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a58:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d004      	beq.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a66:	d012      	beq.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009a68:	e023      	b.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a6a:	4b59      	ldr	r3, [pc, #356]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a76:	d107      	bne.n	8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f000 fbc7 	bl	800a210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a86:	e0fc      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a8c:	e0f9      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a8e:	4b50      	ldr	r3, [pc, #320]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a9a:	d107      	bne.n	8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a9c:	f107 0318 	add.w	r3, r7, #24
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f000 f90d 	bl	8009cc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009aa6:	6a3b      	ldr	r3, [r7, #32]
 8009aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009aaa:	e0ea      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009aac:	2300      	movs	r3, #0
 8009aae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ab0:	e0e7      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ab6:	e0e4      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009abc:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009ac0:	430b      	orrs	r3, r1
 8009ac2:	f040 808d 	bne.w	8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009ac6:	4b42      	ldr	r3, [pc, #264]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aca:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009ace:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ad6:	d06b      	beq.n	8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ada:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ade:	d874      	bhi.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ae6:	d056      	beq.n	8009b96 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aee:	d86c      	bhi.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009af6:	d03b      	beq.n	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009afe:	d864      	bhi.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b06:	d021      	beq.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b0e:	d85c      	bhi.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d004      	beq.n	8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b1c:	d004      	beq.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009b1e:	e054      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009b20:	f000 f8b8 	bl	8009c94 <HAL_RCCEx_GetD3PCLK1Freq>
 8009b24:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009b26:	e0ac      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b28:	4b29      	ldr	r3, [pc, #164]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b34:	d107      	bne.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b36:	f107 0318 	add.w	r3, r7, #24
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f000 f8c0 	bl	8009cc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b44:	e09d      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b46:	2300      	movs	r3, #0
 8009b48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b4a:	e09a      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b4c:	4b20      	ldr	r3, [pc, #128]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b58:	d107      	bne.n	8009b6a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b5a:	f107 030c 	add.w	r3, r7, #12
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f000 fa02 	bl	8009f68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b68:	e08b      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b6e:	e088      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b70:	4b17      	ldr	r3, [pc, #92]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f003 0304 	and.w	r3, r3, #4
 8009b78:	2b04      	cmp	r3, #4
 8009b7a:	d109      	bne.n	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b7c:	4b14      	ldr	r3, [pc, #80]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	08db      	lsrs	r3, r3, #3
 8009b82:	f003 0303 	and.w	r3, r3, #3
 8009b86:	4a13      	ldr	r2, [pc, #76]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009b88:	fa22 f303 	lsr.w	r3, r2, r3
 8009b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b8e:	e078      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b90:	2300      	movs	r3, #0
 8009b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b94:	e075      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009b96:	4b0e      	ldr	r3, [pc, #56]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ba2:	d102      	bne.n	8009baa <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009ba4:	4b0c      	ldr	r3, [pc, #48]	; (8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ba8:	e06b      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009baa:	2300      	movs	r3, #0
 8009bac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bae:	e068      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009bb0:	4b07      	ldr	r3, [pc, #28]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bbc:	d102      	bne.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009bbe:	4b07      	ldr	r3, [pc, #28]	; (8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bc2:	e05e      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bc8:	e05b      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bce:	e058      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009bd0:	58024400 	.word	0x58024400
 8009bd4:	03d09000 	.word	0x03d09000
 8009bd8:	003d0900 	.word	0x003d0900
 8009bdc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009be0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009be4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8009be8:	430b      	orrs	r3, r1
 8009bea:	d148      	bne.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009bec:	4b27      	ldr	r3, [pc, #156]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009bf4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bfc:	d02a      	beq.n	8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c04:	d838      	bhi.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d004      	beq.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c12:	d00d      	beq.n	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009c14:	e030      	b.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009c16:	4b1d      	ldr	r3, [pc, #116]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c22:	d102      	bne.n	8009c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009c24:	4b1a      	ldr	r3, [pc, #104]	; (8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c28:	e02b      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c2e:	e028      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c30:	4b16      	ldr	r3, [pc, #88]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c3c:	d107      	bne.n	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 fae4 	bl	800a210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c4c:	e019      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c52:	e016      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c54:	4b0d      	ldr	r3, [pc, #52]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c60:	d107      	bne.n	8009c72 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c62:	f107 0318 	add.w	r3, r7, #24
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 f82a 	bl	8009cc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c70:	e007      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c76:	e004      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c7c:	e001      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8009c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3740      	adds	r7, #64	; 0x40
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	58024400 	.word	0x58024400
 8009c90:	017d7840 	.word	0x017d7840

08009c94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009c98:	f7fe f816 	bl	8007cc8 <HAL_RCC_GetHCLKFreq>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	4b06      	ldr	r3, [pc, #24]	; (8009cb8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009ca0:	6a1b      	ldr	r3, [r3, #32]
 8009ca2:	091b      	lsrs	r3, r3, #4
 8009ca4:	f003 0307 	and.w	r3, r3, #7
 8009ca8:	4904      	ldr	r1, [pc, #16]	; (8009cbc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009caa:	5ccb      	ldrb	r3, [r1, r3]
 8009cac:	f003 031f 	and.w	r3, r3, #31
 8009cb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	58024400 	.word	0x58024400
 8009cbc:	0800d740 	.word	0x0800d740

08009cc0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b089      	sub	sp, #36	; 0x24
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009cc8:	4ba1      	ldr	r3, [pc, #644]	; (8009f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ccc:	f003 0303 	and.w	r3, r3, #3
 8009cd0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009cd2:	4b9f      	ldr	r3, [pc, #636]	; (8009f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd6:	0b1b      	lsrs	r3, r3, #12
 8009cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cdc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009cde:	4b9c      	ldr	r3, [pc, #624]	; (8009f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce2:	091b      	lsrs	r3, r3, #4
 8009ce4:	f003 0301 	and.w	r3, r3, #1
 8009ce8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009cea:	4b99      	ldr	r3, [pc, #612]	; (8009f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cee:	08db      	lsrs	r3, r3, #3
 8009cf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009cf4:	693a      	ldr	r2, [r7, #16]
 8009cf6:	fb02 f303 	mul.w	r3, r2, r3
 8009cfa:	ee07 3a90 	vmov	s15, r3
 8009cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f000 8111 	beq.w	8009f30 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	f000 8083 	beq.w	8009e1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	2b02      	cmp	r3, #2
 8009d1a:	f200 80a1 	bhi.w	8009e60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d003      	beq.n	8009d2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d056      	beq.n	8009dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009d2a:	e099      	b.n	8009e60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d2c:	4b88      	ldr	r3, [pc, #544]	; (8009f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f003 0320 	and.w	r3, r3, #32
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d02d      	beq.n	8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d38:	4b85      	ldr	r3, [pc, #532]	; (8009f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	08db      	lsrs	r3, r3, #3
 8009d3e:	f003 0303 	and.w	r3, r3, #3
 8009d42:	4a84      	ldr	r2, [pc, #528]	; (8009f54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009d44:	fa22 f303 	lsr.w	r3, r2, r3
 8009d48:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	ee07 3a90 	vmov	s15, r3
 8009d50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	ee07 3a90 	vmov	s15, r3
 8009d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d62:	4b7b      	ldr	r3, [pc, #492]	; (8009f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d6a:	ee07 3a90 	vmov	s15, r3
 8009d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d76:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009f58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009d92:	e087      	b.n	8009ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	ee07 3a90 	vmov	s15, r3
 8009d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009f5c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009da6:	4b6a      	ldr	r3, [pc, #424]	; (8009f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dae:	ee07 3a90 	vmov	s15, r3
 8009db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009f58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dd6:	e065      	b.n	8009ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	ee07 3a90 	vmov	s15, r3
 8009dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009de2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dea:	4b59      	ldr	r3, [pc, #356]	; (8009f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009df2:	ee07 3a90 	vmov	s15, r3
 8009df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dfe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009f58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e1a:	e043      	b.n	8009ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	ee07 3a90 	vmov	s15, r3
 8009e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e2e:	4b48      	ldr	r3, [pc, #288]	; (8009f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e36:	ee07 3a90 	vmov	s15, r3
 8009e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e42:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009f58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e5e:	e021      	b.n	8009ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	ee07 3a90 	vmov	s15, r3
 8009e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e72:	4b37      	ldr	r3, [pc, #220]	; (8009f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e7a:	ee07 3a90 	vmov	s15, r3
 8009e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e86:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009f58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ea2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009ea4:	4b2a      	ldr	r3, [pc, #168]	; (8009f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea8:	0a5b      	lsrs	r3, r3, #9
 8009eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eae:	ee07 3a90 	vmov	s15, r3
 8009eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009eba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ebe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eca:	ee17 2a90 	vmov	r2, s15
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009ed2:	4b1f      	ldr	r3, [pc, #124]	; (8009f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed6:	0c1b      	lsrs	r3, r3, #16
 8009ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009edc:	ee07 3a90 	vmov	s15, r3
 8009ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ee8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009eec:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ef8:	ee17 2a90 	vmov	r2, s15
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009f00:	4b13      	ldr	r3, [pc, #76]	; (8009f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f04:	0e1b      	lsrs	r3, r3, #24
 8009f06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f0a:	ee07 3a90 	vmov	s15, r3
 8009f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f26:	ee17 2a90 	vmov	r2, s15
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009f2e:	e008      	b.n	8009f42 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	609a      	str	r2, [r3, #8]
}
 8009f42:	bf00      	nop
 8009f44:	3724      	adds	r7, #36	; 0x24
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	58024400 	.word	0x58024400
 8009f54:	03d09000 	.word	0x03d09000
 8009f58:	46000000 	.word	0x46000000
 8009f5c:	4c742400 	.word	0x4c742400
 8009f60:	4a742400 	.word	0x4a742400
 8009f64:	4bbebc20 	.word	0x4bbebc20

08009f68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b089      	sub	sp, #36	; 0x24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f70:	4ba1      	ldr	r3, [pc, #644]	; (800a1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f74:	f003 0303 	and.w	r3, r3, #3
 8009f78:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009f7a:	4b9f      	ldr	r3, [pc, #636]	; (800a1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f7e:	0d1b      	lsrs	r3, r3, #20
 8009f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f84:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009f86:	4b9c      	ldr	r3, [pc, #624]	; (800a1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8a:	0a1b      	lsrs	r3, r3, #8
 8009f8c:	f003 0301 	and.w	r3, r3, #1
 8009f90:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009f92:	4b99      	ldr	r3, [pc, #612]	; (800a1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f96:	08db      	lsrs	r3, r3, #3
 8009f98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	fb02 f303 	mul.w	r3, r2, r3
 8009fa2:	ee07 3a90 	vmov	s15, r3
 8009fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009faa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f000 8111 	beq.w	800a1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	f000 8083 	beq.w	800a0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	f200 80a1 	bhi.w	800a108 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d003      	beq.n	8009fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d056      	beq.n	800a080 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009fd2:	e099      	b.n	800a108 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fd4:	4b88      	ldr	r3, [pc, #544]	; (800a1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f003 0320 	and.w	r3, r3, #32
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d02d      	beq.n	800a03c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fe0:	4b85      	ldr	r3, [pc, #532]	; (800a1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	08db      	lsrs	r3, r3, #3
 8009fe6:	f003 0303 	and.w	r3, r3, #3
 8009fea:	4a84      	ldr	r2, [pc, #528]	; (800a1fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009fec:	fa22 f303 	lsr.w	r3, r2, r3
 8009ff0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	ee07 3a90 	vmov	s15, r3
 8009ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	ee07 3a90 	vmov	s15, r3
 800a002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a00a:	4b7b      	ldr	r3, [pc, #492]	; (800a1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a00e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a012:	ee07 3a90 	vmov	s15, r3
 800a016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a01a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a01e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a200 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a02a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a02e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a032:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a036:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a03a:	e087      	b.n	800a14c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	ee07 3a90 	vmov	s15, r3
 800a042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a046:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a204 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a04a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a04e:	4b6a      	ldr	r3, [pc, #424]	; (800a1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a056:	ee07 3a90 	vmov	s15, r3
 800a05a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a05e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a062:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a200 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a06a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a06e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a07a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a07e:	e065      	b.n	800a14c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	ee07 3a90 	vmov	s15, r3
 800a086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a08a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a208 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a08e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a092:	4b59      	ldr	r3, [pc, #356]	; (800a1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a09a:	ee07 3a90 	vmov	s15, r3
 800a09e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a200 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0c2:	e043      	b.n	800a14c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	ee07 3a90 	vmov	s15, r3
 800a0ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a20c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a0d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0d6:	4b48      	ldr	r3, [pc, #288]	; (800a1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0de:	ee07 3a90 	vmov	s15, r3
 800a0e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a200 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a106:	e021      	b.n	800a14c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	ee07 3a90 	vmov	s15, r3
 800a10e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a112:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a208 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a11a:	4b37      	ldr	r3, [pc, #220]	; (800a1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a11e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a122:	ee07 3a90 	vmov	s15, r3
 800a126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a12a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a12e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a200 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a13a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a13e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a142:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a14a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a14c:	4b2a      	ldr	r3, [pc, #168]	; (800a1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a14e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a150:	0a5b      	lsrs	r3, r3, #9
 800a152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a156:	ee07 3a90 	vmov	s15, r3
 800a15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a15e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a162:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a166:	edd7 6a07 	vldr	s13, [r7, #28]
 800a16a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a16e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a172:	ee17 2a90 	vmov	r2, s15
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a17a:	4b1f      	ldr	r3, [pc, #124]	; (800a1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17e:	0c1b      	lsrs	r3, r3, #16
 800a180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a184:	ee07 3a90 	vmov	s15, r3
 800a188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a18c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a190:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a194:	edd7 6a07 	vldr	s13, [r7, #28]
 800a198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a19c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1a0:	ee17 2a90 	vmov	r2, s15
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a1a8:	4b13      	ldr	r3, [pc, #76]	; (800a1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ac:	0e1b      	lsrs	r3, r3, #24
 800a1ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1b2:	ee07 3a90 	vmov	s15, r3
 800a1b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1ce:	ee17 2a90 	vmov	r2, s15
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a1d6:	e008      	b.n	800a1ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	609a      	str	r2, [r3, #8]
}
 800a1ea:	bf00      	nop
 800a1ec:	3724      	adds	r7, #36	; 0x24
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	58024400 	.word	0x58024400
 800a1fc:	03d09000 	.word	0x03d09000
 800a200:	46000000 	.word	0x46000000
 800a204:	4c742400 	.word	0x4c742400
 800a208:	4a742400 	.word	0x4a742400
 800a20c:	4bbebc20 	.word	0x4bbebc20

0800a210 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a210:	b480      	push	{r7}
 800a212:	b089      	sub	sp, #36	; 0x24
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a218:	4ba0      	ldr	r3, [pc, #640]	; (800a49c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a21c:	f003 0303 	and.w	r3, r3, #3
 800a220:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a222:	4b9e      	ldr	r3, [pc, #632]	; (800a49c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a226:	091b      	lsrs	r3, r3, #4
 800a228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a22c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a22e:	4b9b      	ldr	r3, [pc, #620]	; (800a49c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a232:	f003 0301 	and.w	r3, r3, #1
 800a236:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a238:	4b98      	ldr	r3, [pc, #608]	; (800a49c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a23a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a23c:	08db      	lsrs	r3, r3, #3
 800a23e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a242:	693a      	ldr	r2, [r7, #16]
 800a244:	fb02 f303 	mul.w	r3, r2, r3
 800a248:	ee07 3a90 	vmov	s15, r3
 800a24c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a250:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	2b00      	cmp	r3, #0
 800a258:	f000 8111 	beq.w	800a47e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	2b02      	cmp	r3, #2
 800a260:	f000 8083 	beq.w	800a36a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a264:	69bb      	ldr	r3, [r7, #24]
 800a266:	2b02      	cmp	r3, #2
 800a268:	f200 80a1 	bhi.w	800a3ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d003      	beq.n	800a27a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	2b01      	cmp	r3, #1
 800a276:	d056      	beq.n	800a326 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a278:	e099      	b.n	800a3ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a27a:	4b88      	ldr	r3, [pc, #544]	; (800a49c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f003 0320 	and.w	r3, r3, #32
 800a282:	2b00      	cmp	r3, #0
 800a284:	d02d      	beq.n	800a2e2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a286:	4b85      	ldr	r3, [pc, #532]	; (800a49c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	08db      	lsrs	r3, r3, #3
 800a28c:	f003 0303 	and.w	r3, r3, #3
 800a290:	4a83      	ldr	r2, [pc, #524]	; (800a4a0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a292:	fa22 f303 	lsr.w	r3, r2, r3
 800a296:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	ee07 3a90 	vmov	s15, r3
 800a29e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	ee07 3a90 	vmov	s15, r3
 800a2a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2b0:	4b7a      	ldr	r3, [pc, #488]	; (800a49c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2b8:	ee07 3a90 	vmov	s15, r3
 800a2bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2c4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a4a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2dc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a2e0:	e087      	b.n	800a3f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	ee07 3a90 	vmov	s15, r3
 800a2e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a4a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a2f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2f4:	4b69      	ldr	r3, [pc, #420]	; (800a49c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2fc:	ee07 3a90 	vmov	s15, r3
 800a300:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a304:	ed97 6a03 	vldr	s12, [r7, #12]
 800a308:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a4a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a30c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a310:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a314:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a318:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a31c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a320:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a324:	e065      	b.n	800a3f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	ee07 3a90 	vmov	s15, r3
 800a32c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a330:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a4ac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a334:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a338:	4b58      	ldr	r3, [pc, #352]	; (800a49c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a33a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a33c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a340:	ee07 3a90 	vmov	s15, r3
 800a344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a348:	ed97 6a03 	vldr	s12, [r7, #12]
 800a34c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a4a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a350:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a354:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a358:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a35c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a360:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a364:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a368:	e043      	b.n	800a3f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	ee07 3a90 	vmov	s15, r3
 800a370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a374:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a4b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a378:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a37c:	4b47      	ldr	r3, [pc, #284]	; (800a49c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a37e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a384:	ee07 3a90 	vmov	s15, r3
 800a388:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a38c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a390:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a4a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a394:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a398:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a39c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3ac:	e021      	b.n	800a3f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	ee07 3a90 	vmov	s15, r3
 800a3b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3b8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a4a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a3bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3c0:	4b36      	ldr	r3, [pc, #216]	; (800a49c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3c8:	ee07 3a90 	vmov	s15, r3
 800a3cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3d4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a4a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a3d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3f0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a3f2:	4b2a      	ldr	r3, [pc, #168]	; (800a49c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f6:	0a5b      	lsrs	r3, r3, #9
 800a3f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3fc:	ee07 3a90 	vmov	s15, r3
 800a400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a404:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a408:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a40c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a418:	ee17 2a90 	vmov	r2, s15
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a420:	4b1e      	ldr	r3, [pc, #120]	; (800a49c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a424:	0c1b      	lsrs	r3, r3, #16
 800a426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a42a:	ee07 3a90 	vmov	s15, r3
 800a42e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a432:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a436:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a43a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a43e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a446:	ee17 2a90 	vmov	r2, s15
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a44e:	4b13      	ldr	r3, [pc, #76]	; (800a49c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a452:	0e1b      	lsrs	r3, r3, #24
 800a454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a458:	ee07 3a90 	vmov	s15, r3
 800a45c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a464:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a468:	edd7 6a07 	vldr	s13, [r7, #28]
 800a46c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a474:	ee17 2a90 	vmov	r2, s15
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a47c:	e008      	b.n	800a490 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	609a      	str	r2, [r3, #8]
}
 800a490:	bf00      	nop
 800a492:	3724      	adds	r7, #36	; 0x24
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr
 800a49c:	58024400 	.word	0x58024400
 800a4a0:	03d09000 	.word	0x03d09000
 800a4a4:	46000000 	.word	0x46000000
 800a4a8:	4c742400 	.word	0x4c742400
 800a4ac:	4a742400 	.word	0x4a742400
 800a4b0:	4bbebc20 	.word	0x4bbebc20

0800a4b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a4c2:	4b53      	ldr	r3, [pc, #332]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c6:	f003 0303 	and.w	r3, r3, #3
 800a4ca:	2b03      	cmp	r3, #3
 800a4cc:	d101      	bne.n	800a4d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e099      	b.n	800a606 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a4d2:	4b4f      	ldr	r3, [pc, #316]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a4e      	ldr	r2, [pc, #312]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a4d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a4dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4de:	f7f8 fd9f 	bl	8003020 <HAL_GetTick>
 800a4e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a4e4:	e008      	b.n	800a4f8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a4e6:	f7f8 fd9b 	bl	8003020 <HAL_GetTick>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	1ad3      	subs	r3, r2, r3
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	d901      	bls.n	800a4f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	e086      	b.n	800a606 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a4f8:	4b45      	ldr	r3, [pc, #276]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a500:	2b00      	cmp	r3, #0
 800a502:	d1f0      	bne.n	800a4e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a504:	4b42      	ldr	r3, [pc, #264]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a508:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	031b      	lsls	r3, r3, #12
 800a512:	493f      	ldr	r1, [pc, #252]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a514:	4313      	orrs	r3, r2
 800a516:	628b      	str	r3, [r1, #40]	; 0x28
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	3b01      	subs	r3, #1
 800a51e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	3b01      	subs	r3, #1
 800a528:	025b      	lsls	r3, r3, #9
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	431a      	orrs	r2, r3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	3b01      	subs	r3, #1
 800a534:	041b      	lsls	r3, r3, #16
 800a536:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a53a:	431a      	orrs	r2, r3
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	3b01      	subs	r3, #1
 800a542:	061b      	lsls	r3, r3, #24
 800a544:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a548:	4931      	ldr	r1, [pc, #196]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a54a:	4313      	orrs	r3, r2
 800a54c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a54e:	4b30      	ldr	r3, [pc, #192]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a552:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	695b      	ldr	r3, [r3, #20]
 800a55a:	492d      	ldr	r1, [pc, #180]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a55c:	4313      	orrs	r3, r2
 800a55e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a560:	4b2b      	ldr	r3, [pc, #172]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a564:	f023 0220 	bic.w	r2, r3, #32
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	699b      	ldr	r3, [r3, #24]
 800a56c:	4928      	ldr	r1, [pc, #160]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a56e:	4313      	orrs	r3, r2
 800a570:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a572:	4b27      	ldr	r3, [pc, #156]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a576:	4a26      	ldr	r2, [pc, #152]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a578:	f023 0310 	bic.w	r3, r3, #16
 800a57c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a57e:	4b24      	ldr	r3, [pc, #144]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a580:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a582:	4b24      	ldr	r3, [pc, #144]	; (800a614 <RCCEx_PLL2_Config+0x160>)
 800a584:	4013      	ands	r3, r2
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	69d2      	ldr	r2, [r2, #28]
 800a58a:	00d2      	lsls	r2, r2, #3
 800a58c:	4920      	ldr	r1, [pc, #128]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a58e:	4313      	orrs	r3, r2
 800a590:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a592:	4b1f      	ldr	r3, [pc, #124]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a596:	4a1e      	ldr	r2, [pc, #120]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a598:	f043 0310 	orr.w	r3, r3, #16
 800a59c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d106      	bne.n	800a5b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a5a4:	4b1a      	ldr	r3, [pc, #104]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a8:	4a19      	ldr	r2, [pc, #100]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a5aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a5ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a5b0:	e00f      	b.n	800a5d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d106      	bne.n	800a5c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a5b8:	4b15      	ldr	r3, [pc, #84]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5bc:	4a14      	ldr	r2, [pc, #80]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a5be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a5c4:	e005      	b.n	800a5d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a5c6:	4b12      	ldr	r3, [pc, #72]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ca:	4a11      	ldr	r2, [pc, #68]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a5cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a5d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a5d2:	4b0f      	ldr	r3, [pc, #60]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a0e      	ldr	r2, [pc, #56]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a5d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a5dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5de:	f7f8 fd1f 	bl	8003020 <HAL_GetTick>
 800a5e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a5e4:	e008      	b.n	800a5f8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a5e6:	f7f8 fd1b 	bl	8003020 <HAL_GetTick>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	1ad3      	subs	r3, r2, r3
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	d901      	bls.n	800a5f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	e006      	b.n	800a606 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a5f8:	4b05      	ldr	r3, [pc, #20]	; (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a600:	2b00      	cmp	r3, #0
 800a602:	d0f0      	beq.n	800a5e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a604:	7bfb      	ldrb	r3, [r7, #15]
}
 800a606:	4618      	mov	r0, r3
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	58024400 	.word	0x58024400
 800a614:	ffff0007 	.word	0xffff0007

0800a618 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a622:	2300      	movs	r3, #0
 800a624:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a626:	4b53      	ldr	r3, [pc, #332]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a62a:	f003 0303 	and.w	r3, r3, #3
 800a62e:	2b03      	cmp	r3, #3
 800a630:	d101      	bne.n	800a636 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a632:	2301      	movs	r3, #1
 800a634:	e099      	b.n	800a76a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a636:	4b4f      	ldr	r3, [pc, #316]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a4e      	ldr	r2, [pc, #312]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a63c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a640:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a642:	f7f8 fced 	bl	8003020 <HAL_GetTick>
 800a646:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a648:	e008      	b.n	800a65c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a64a:	f7f8 fce9 	bl	8003020 <HAL_GetTick>
 800a64e:	4602      	mov	r2, r0
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	2b02      	cmp	r3, #2
 800a656:	d901      	bls.n	800a65c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a658:	2303      	movs	r3, #3
 800a65a:	e086      	b.n	800a76a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a65c:	4b45      	ldr	r3, [pc, #276]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a664:	2b00      	cmp	r3, #0
 800a666:	d1f0      	bne.n	800a64a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a668:	4b42      	ldr	r3, [pc, #264]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a66a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a66c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	051b      	lsls	r3, r3, #20
 800a676:	493f      	ldr	r1, [pc, #252]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a678:	4313      	orrs	r3, r2
 800a67a:	628b      	str	r3, [r1, #40]	; 0x28
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	3b01      	subs	r3, #1
 800a682:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	3b01      	subs	r3, #1
 800a68c:	025b      	lsls	r3, r3, #9
 800a68e:	b29b      	uxth	r3, r3
 800a690:	431a      	orrs	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	3b01      	subs	r3, #1
 800a698:	041b      	lsls	r3, r3, #16
 800a69a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a69e:	431a      	orrs	r2, r3
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	061b      	lsls	r3, r3, #24
 800a6a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a6ac:	4931      	ldr	r1, [pc, #196]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a6b2:	4b30      	ldr	r3, [pc, #192]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	695b      	ldr	r3, [r3, #20]
 800a6be:	492d      	ldr	r1, [pc, #180]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a6c4:	4b2b      	ldr	r3, [pc, #172]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	699b      	ldr	r3, [r3, #24]
 800a6d0:	4928      	ldr	r1, [pc, #160]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a6d6:	4b27      	ldr	r3, [pc, #156]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a6d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6da:	4a26      	ldr	r2, [pc, #152]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a6dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a6e2:	4b24      	ldr	r3, [pc, #144]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a6e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6e6:	4b24      	ldr	r3, [pc, #144]	; (800a778 <RCCEx_PLL3_Config+0x160>)
 800a6e8:	4013      	ands	r3, r2
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	69d2      	ldr	r2, [r2, #28]
 800a6ee:	00d2      	lsls	r2, r2, #3
 800a6f0:	4920      	ldr	r1, [pc, #128]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a6f6:	4b1f      	ldr	r3, [pc, #124]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6fa:	4a1e      	ldr	r2, [pc, #120]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a6fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a700:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d106      	bne.n	800a716 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a708:	4b1a      	ldr	r3, [pc, #104]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70c:	4a19      	ldr	r2, [pc, #100]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a70e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a712:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a714:	e00f      	b.n	800a736 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d106      	bne.n	800a72a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a71c:	4b15      	ldr	r3, [pc, #84]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a720:	4a14      	ldr	r2, [pc, #80]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a722:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a726:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a728:	e005      	b.n	800a736 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a72a:	4b12      	ldr	r3, [pc, #72]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72e:	4a11      	ldr	r2, [pc, #68]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a730:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a734:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a736:	4b0f      	ldr	r3, [pc, #60]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a0e      	ldr	r2, [pc, #56]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a73c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a742:	f7f8 fc6d 	bl	8003020 <HAL_GetTick>
 800a746:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a748:	e008      	b.n	800a75c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a74a:	f7f8 fc69 	bl	8003020 <HAL_GetTick>
 800a74e:	4602      	mov	r2, r0
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	1ad3      	subs	r3, r2, r3
 800a754:	2b02      	cmp	r3, #2
 800a756:	d901      	bls.n	800a75c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a758:	2303      	movs	r3, #3
 800a75a:	e006      	b.n	800a76a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a75c:	4b05      	ldr	r3, [pc, #20]	; (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a764:	2b00      	cmp	r3, #0
 800a766:	d0f0      	beq.n	800a74a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a768:	7bfb      	ldrb	r3, [r7, #15]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	58024400 	.word	0x58024400
 800a778:	ffff0007 	.word	0xffff0007

0800a77c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d071      	beq.n	800a872 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a794:	b2db      	uxtb	r3, r3
 800a796:	2b00      	cmp	r3, #0
 800a798:	d106      	bne.n	800a7a8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f7f7 ff58 	bl	8002658 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2202      	movs	r2, #2
 800a7ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	f003 0310 	and.w	r3, r3, #16
 800a7ba:	2b10      	cmp	r3, #16
 800a7bc:	d050      	beq.n	800a860 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	22ca      	movs	r2, #202	; 0xca
 800a7c4:	625a      	str	r2, [r3, #36]	; 0x24
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2253      	movs	r2, #83	; 0x53
 800a7cc:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 f87a 	bl	800a8c8 <RTC_EnterInitMode>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a7d8:	7bfb      	ldrb	r3, [r7, #15]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d124      	bne.n	800a828 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	6899      	ldr	r1, [r3, #8]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	4b24      	ldr	r3, [pc, #144]	; (800a87c <HAL_RTC_Init+0x100>)
 800a7ea:	400b      	ands	r3, r1
 800a7ec:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	6899      	ldr	r1, [r3, #8]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	685a      	ldr	r2, [r3, #4]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	691b      	ldr	r3, [r3, #16]
 800a7fc:	431a      	orrs	r2, r3
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	699b      	ldr	r3, [r3, #24]
 800a802:	431a      	orrs	r2, r3
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	430a      	orrs	r2, r1
 800a80a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	0419      	lsls	r1, r3, #16
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	68da      	ldr	r2, [r3, #12]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	430a      	orrs	r2, r1
 800a81c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f886 	bl	800a930 <RTC_ExitInitMode>
 800a824:	4603      	mov	r3, r0
 800a826:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800a828:	7bfb      	ldrb	r3, [r7, #15]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d113      	bne.n	800a856 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f022 0203 	bic.w	r2, r2, #3
 800a83c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	69da      	ldr	r2, [r3, #28]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	695b      	ldr	r3, [r3, #20]
 800a84c:	431a      	orrs	r2, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	430a      	orrs	r2, r1
 800a854:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	22ff      	movs	r2, #255	; 0xff
 800a85c:	625a      	str	r2, [r3, #36]	; 0x24
 800a85e:	e001      	b.n	800a864 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800a860:	2300      	movs	r3, #0
 800a862:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a864:	7bfb      	ldrb	r3, [r7, #15]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d103      	bne.n	800a872 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800a872:	7bfb      	ldrb	r3, [r7, #15]
}
 800a874:	4618      	mov	r0, r3
 800a876:	3710      	adds	r7, #16
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	ff8fffbf 	.word	0xff8fffbf

0800a880 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a0d      	ldr	r2, [pc, #52]	; (800a8c4 <HAL_RTC_WaitForSynchro+0x44>)
 800a88e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800a890:	f7f8 fbc6 	bl	8003020 <HAL_GetTick>
 800a894:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a896:	e009      	b.n	800a8ac <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a898:	f7f8 fbc2 	bl	8003020 <HAL_GetTick>
 800a89c:	4602      	mov	r2, r0
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	1ad3      	subs	r3, r2, r3
 800a8a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a8a6:	d901      	bls.n	800a8ac <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	e007      	b.n	800a8bc <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	f003 0320 	and.w	r3, r3, #32
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d0ee      	beq.n	800a898 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800a8ba:	2300      	movs	r3, #0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3710      	adds	r7, #16
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	0003ff5f 	.word	0x0003ff5f

0800a8c8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d120      	bne.n	800a924 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ea:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a8ec:	f7f8 fb98 	bl	8003020 <HAL_GetTick>
 800a8f0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a8f2:	e00d      	b.n	800a910 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a8f4:	f7f8 fb94 	bl	8003020 <HAL_GetTick>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a902:	d905      	bls.n	800a910 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a904:	2303      	movs	r3, #3
 800a906:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2203      	movs	r2, #3
 800a90c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d102      	bne.n	800a924 <RTC_EnterInitMode+0x5c>
 800a91e:	7bfb      	ldrb	r3, [r7, #15]
 800a920:	2b03      	cmp	r3, #3
 800a922:	d1e7      	bne.n	800a8f4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800a924:	7bfb      	ldrb	r3, [r7, #15]
}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
	...

0800a930 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a938:	2300      	movs	r3, #0
 800a93a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a93c:	4b1a      	ldr	r3, [pc, #104]	; (800a9a8 <RTC_ExitInitMode+0x78>)
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	4a19      	ldr	r2, [pc, #100]	; (800a9a8 <RTC_ExitInitMode+0x78>)
 800a942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a946:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a948:	4b17      	ldr	r3, [pc, #92]	; (800a9a8 <RTC_ExitInitMode+0x78>)
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	f003 0320 	and.w	r3, r3, #32
 800a950:	2b00      	cmp	r3, #0
 800a952:	d10c      	bne.n	800a96e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f7ff ff93 	bl	800a880 <HAL_RTC_WaitForSynchro>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d01e      	beq.n	800a99e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2203      	movs	r2, #3
 800a964:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a968:	2303      	movs	r3, #3
 800a96a:	73fb      	strb	r3, [r7, #15]
 800a96c:	e017      	b.n	800a99e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a96e:	4b0e      	ldr	r3, [pc, #56]	; (800a9a8 <RTC_ExitInitMode+0x78>)
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	4a0d      	ldr	r2, [pc, #52]	; (800a9a8 <RTC_ExitInitMode+0x78>)
 800a974:	f023 0320 	bic.w	r3, r3, #32
 800a978:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f7ff ff80 	bl	800a880 <HAL_RTC_WaitForSynchro>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d005      	beq.n	800a992 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2203      	movs	r2, #3
 800a98a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a98e:	2303      	movs	r3, #3
 800a990:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a992:	4b05      	ldr	r3, [pc, #20]	; (800a9a8 <RTC_ExitInitMode+0x78>)
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	4a04      	ldr	r2, [pc, #16]	; (800a9a8 <RTC_ExitInitMode+0x78>)
 800a998:	f043 0320 	orr.w	r3, r3, #32
 800a99c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a99e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	58004000 	.word	0x58004000

0800a9ac <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b08a      	sub	sp, #40	; 0x28
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d101      	bne.n	800a9be <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e28e      	b.n	800aedc <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a9be:	f7f8 fb5f 	bl	8003080 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d113      	bne.n	800a9f4 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a96      	ldr	r2, [pc, #600]	; (800ac2c <HAL_SAI_Init+0x280>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d004      	beq.n	800a9e0 <HAL_SAI_Init+0x34>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a95      	ldr	r2, [pc, #596]	; (800ac30 <HAL_SAI_Init+0x284>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d107      	bne.n	800a9f0 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d103      	bne.n	800a9f0 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d001      	beq.n	800a9f4 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	e273      	b.n	800aedc <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a8c      	ldr	r2, [pc, #560]	; (800ac2c <HAL_SAI_Init+0x280>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d004      	beq.n	800aa08 <HAL_SAI_Init+0x5c>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a8c      	ldr	r2, [pc, #560]	; (800ac34 <HAL_SAI_Init+0x288>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d102      	bne.n	800aa0e <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800aa08:	4b8b      	ldr	r3, [pc, #556]	; (800ac38 <HAL_SAI_Init+0x28c>)
 800aa0a:	61bb      	str	r3, [r7, #24]
 800aa0c:	e028      	b.n	800aa60 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a8a      	ldr	r2, [pc, #552]	; (800ac3c <HAL_SAI_Init+0x290>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d004      	beq.n	800aa22 <HAL_SAI_Init+0x76>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a88      	ldr	r2, [pc, #544]	; (800ac40 <HAL_SAI_Init+0x294>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d102      	bne.n	800aa28 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800aa22:	4b88      	ldr	r3, [pc, #544]	; (800ac44 <HAL_SAI_Init+0x298>)
 800aa24:	61bb      	str	r3, [r7, #24]
 800aa26:	e01b      	b.n	800aa60 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a86      	ldr	r2, [pc, #536]	; (800ac48 <HAL_SAI_Init+0x29c>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d004      	beq.n	800aa3c <HAL_SAI_Init+0x90>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a85      	ldr	r2, [pc, #532]	; (800ac4c <HAL_SAI_Init+0x2a0>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d102      	bne.n	800aa42 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800aa3c:	4b84      	ldr	r3, [pc, #528]	; (800ac50 <HAL_SAI_Init+0x2a4>)
 800aa3e:	61bb      	str	r3, [r7, #24]
 800aa40:	e00e      	b.n	800aa60 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a7a      	ldr	r2, [pc, #488]	; (800ac30 <HAL_SAI_Init+0x284>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d004      	beq.n	800aa56 <HAL_SAI_Init+0xaa>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a80      	ldr	r2, [pc, #512]	; (800ac54 <HAL_SAI_Init+0x2a8>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d102      	bne.n	800aa5c <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800aa56:	4b80      	ldr	r3, [pc, #512]	; (800ac58 <HAL_SAI_Init+0x2ac>)
 800aa58:	61bb      	str	r3, [r7, #24]
 800aa5a:	e001      	b.n	800aa60 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e23d      	b.n	800aedc <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d106      	bne.n	800aa7a <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f7f8 f897 	bl	8002ba8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 fa40 	bl	800af00 <SAI_Disable>
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d001      	beq.n	800aa8a <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	e228      	b.n	800aedc <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2202      	movs	r2, #2
 800aa8e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	68db      	ldr	r3, [r3, #12]
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d00c      	beq.n	800aab4 <HAL_SAI_Init+0x108>
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d80d      	bhi.n	800aaba <HAL_SAI_Init+0x10e>
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d002      	beq.n	800aaa8 <HAL_SAI_Init+0xfc>
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d003      	beq.n	800aaae <HAL_SAI_Init+0x102>
 800aaa6:	e008      	b.n	800aaba <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800aaac:	e008      	b.n	800aac0 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800aaae:	2310      	movs	r3, #16
 800aab0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800aab2:	e005      	b.n	800aac0 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800aab4:	2320      	movs	r3, #32
 800aab6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800aab8:	e002      	b.n	800aac0 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800aaba:	2300      	movs	r3, #0
 800aabc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800aabe:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	2b05      	cmp	r3, #5
 800aac6:	d832      	bhi.n	800ab2e <HAL_SAI_Init+0x182>
 800aac8:	a201      	add	r2, pc, #4	; (adr r2, 800aad0 <HAL_SAI_Init+0x124>)
 800aaca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aace:	bf00      	nop
 800aad0:	0800aae9 	.word	0x0800aae9
 800aad4:	0800aaef 	.word	0x0800aaef
 800aad8:	0800aaf7 	.word	0x0800aaf7
 800aadc:	0800aaff 	.word	0x0800aaff
 800aae0:	0800ab0f 	.word	0x0800ab0f
 800aae4:	0800ab1f 	.word	0x0800ab1f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800aae8:	2300      	movs	r3, #0
 800aaea:	61fb      	str	r3, [r7, #28]
      break;
 800aaec:	e022      	b.n	800ab34 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800aaee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaf2:	61fb      	str	r3, [r7, #28]
      break;
 800aaf4:	e01e      	b.n	800ab34 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800aaf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aafa:	61fb      	str	r3, [r7, #28]
      break;
 800aafc:	e01a      	b.n	800ab34 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800aafe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab02:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ab04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab06:	f043 0301 	orr.w	r3, r3, #1
 800ab0a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ab0c:	e012      	b.n	800ab34 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ab0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab12:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800ab14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab16:	f043 0302 	orr.w	r3, r3, #2
 800ab1a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ab1c:	e00a      	b.n	800ab34 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ab1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab22:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800ab24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab26:	f043 0303 	orr.w	r3, r3, #3
 800ab2a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ab2c:	e002      	b.n	800ab34 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	61fb      	str	r3, [r7, #28]
      break;
 800ab32:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab38:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a1b      	ldr	r3, [r3, #32]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f000 80c5 	beq.w	800acce <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800ab44:	2300      	movs	r3, #0
 800ab46:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a37      	ldr	r2, [pc, #220]	; (800ac2c <HAL_SAI_Init+0x280>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d004      	beq.n	800ab5c <HAL_SAI_Init+0x1b0>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a37      	ldr	r2, [pc, #220]	; (800ac34 <HAL_SAI_Init+0x288>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d106      	bne.n	800ab6a <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ab5c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ab60:	f04f 0100 	mov.w	r1, #0
 800ab64:	f7fe fb16 	bl	8009194 <HAL_RCCEx_GetPeriphCLKFreq>
 800ab68:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a33      	ldr	r2, [pc, #204]	; (800ac3c <HAL_SAI_Init+0x290>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d004      	beq.n	800ab7e <HAL_SAI_Init+0x1d2>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a31      	ldr	r2, [pc, #196]	; (800ac40 <HAL_SAI_Init+0x294>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d106      	bne.n	800ab8c <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800ab7e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ab82:	f04f 0100 	mov.w	r1, #0
 800ab86:	f7fe fb05 	bl	8009194 <HAL_RCCEx_GetPeriphCLKFreq>
 800ab8a:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a2d      	ldr	r2, [pc, #180]	; (800ac48 <HAL_SAI_Init+0x29c>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d004      	beq.n	800aba0 <HAL_SAI_Init+0x1f4>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a2c      	ldr	r2, [pc, #176]	; (800ac4c <HAL_SAI_Init+0x2a0>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d106      	bne.n	800abae <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800aba0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800aba4:	f04f 0100 	mov.w	r1, #0
 800aba8:	f7fe faf4 	bl	8009194 <HAL_RCCEx_GetPeriphCLKFreq>
 800abac:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a1f      	ldr	r2, [pc, #124]	; (800ac30 <HAL_SAI_Init+0x284>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d106      	bne.n	800abc6 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800abb8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800abbc:	f04f 0100 	mov.w	r1, #0
 800abc0:	f7fe fae8 	bl	8009194 <HAL_RCCEx_GetPeriphCLKFreq>
 800abc4:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a22      	ldr	r2, [pc, #136]	; (800ac54 <HAL_SAI_Init+0x2a8>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d106      	bne.n	800abde <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800abd0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800abd4:	f04f 0100 	mov.w	r1, #0
 800abd8:	f7fe fadc 	bl	8009194 <HAL_RCCEx_GetPeriphCLKFreq>
 800abdc:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	699b      	ldr	r3, [r3, #24]
 800abe2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800abe6:	d139      	bne.n	800ac5c <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abec:	2b04      	cmp	r3, #4
 800abee:	d102      	bne.n	800abf6 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800abf0:	2340      	movs	r3, #64	; 0x40
 800abf2:	60fb      	str	r3, [r7, #12]
 800abf4:	e00a      	b.n	800ac0c <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abfa:	2b08      	cmp	r3, #8
 800abfc:	d103      	bne.n	800ac06 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800abfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac02:	60fb      	str	r3, [r7, #12]
 800ac04:	e002      	b.n	800ac0c <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac0a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800ac0c:	697a      	ldr	r2, [r7, #20]
 800ac0e:	4613      	mov	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	4413      	add	r3, r2
 800ac14:	005b      	lsls	r3, r3, #1
 800ac16:	4619      	mov	r1, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a1b      	ldr	r3, [r3, #32]
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	fb02 f303 	mul.w	r3, r2, r3
 800ac22:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac26:	613b      	str	r3, [r7, #16]
 800ac28:	e030      	b.n	800ac8c <HAL_SAI_Init+0x2e0>
 800ac2a:	bf00      	nop
 800ac2c:	40015804 	.word	0x40015804
 800ac30:	58005404 	.word	0x58005404
 800ac34:	40015824 	.word	0x40015824
 800ac38:	40015800 	.word	0x40015800
 800ac3c:	40015c04 	.word	0x40015c04
 800ac40:	40015c24 	.word	0x40015c24
 800ac44:	40015c00 	.word	0x40015c00
 800ac48:	40016004 	.word	0x40016004
 800ac4c:	40016024 	.word	0x40016024
 800ac50:	40016000 	.word	0x40016000
 800ac54:	58005424 	.word	0x58005424
 800ac58:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac64:	d101      	bne.n	800ac6a <HAL_SAI_Init+0x2be>
 800ac66:	2302      	movs	r3, #2
 800ac68:	e000      	b.n	800ac6c <HAL_SAI_Init+0x2c0>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800ac6e:	697a      	ldr	r2, [r7, #20]
 800ac70:	4613      	mov	r3, r2
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	4413      	add	r3, r2
 800ac76:	005b      	lsls	r3, r3, #1
 800ac78:	4619      	mov	r1, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a1b      	ldr	r3, [r3, #32]
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	fb02 f303 	mul.w	r3, r2, r3
 800ac84:	021b      	lsls	r3, r3, #8
 800ac86:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac8a:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	4a95      	ldr	r2, [pc, #596]	; (800aee4 <HAL_SAI_Init+0x538>)
 800ac90:	fba2 2303 	umull	r2, r3, r2, r3
 800ac94:	08da      	lsrs	r2, r3, #3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800ac9a:	6939      	ldr	r1, [r7, #16]
 800ac9c:	4b91      	ldr	r3, [pc, #580]	; (800aee4 <HAL_SAI_Init+0x538>)
 800ac9e:	fba3 2301 	umull	r2, r3, r3, r1
 800aca2:	08da      	lsrs	r2, r3, #3
 800aca4:	4613      	mov	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	4413      	add	r3, r2
 800acaa:	005b      	lsls	r3, r3, #1
 800acac:	1aca      	subs	r2, r1, r3
 800acae:	2a08      	cmp	r2, #8
 800acb0:	d904      	bls.n	800acbc <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb6:	1c5a      	adds	r2, r3, #1
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acc0:	2b04      	cmp	r3, #4
 800acc2:	d104      	bne.n	800acce <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc8:	085a      	lsrs	r2, r3, #1
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d003      	beq.n	800acde <HAL_SAI_Init+0x332>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d109      	bne.n	800acf2 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d101      	bne.n	800acea <HAL_SAI_Init+0x33e>
 800ace6:	2300      	movs	r3, #0
 800ace8:	e001      	b.n	800acee <HAL_SAI_Init+0x342>
 800acea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acee:	623b      	str	r3, [r7, #32]
 800acf0:	e008      	b.n	800ad04 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d102      	bne.n	800ad00 <HAL_SAI_Init+0x354>
 800acfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acfe:	e000      	b.n	800ad02 <HAL_SAI_Init+0x356>
 800ad00:	2300      	movs	r3, #0
 800ad02:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800ad04:	f7f8 f9bc 	bl	8003080 <HAL_GetREVID>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad0e:	d331      	bcc.n	800ad74 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	6819      	ldr	r1, [r3, #0]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	4b73      	ldr	r3, [pc, #460]	; (800aee8 <HAL_SAI_Init+0x53c>)
 800ad1c:	400b      	ands	r3, r1
 800ad1e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	6819      	ldr	r1, [r3, #0]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	685a      	ldr	r2, [r3, #4]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad2e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ad34:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad3a:	431a      	orrs	r2, r3
 800ad3c:	6a3b      	ldr	r3, [r7, #32]
 800ad3e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800ad48:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	695b      	ldr	r3, [r3, #20]
 800ad4e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ad54:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5a:	051b      	lsls	r3, r3, #20
 800ad5c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ad62:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	691b      	ldr	r3, [r3, #16]
 800ad68:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	430a      	orrs	r2, r1
 800ad70:	601a      	str	r2, [r3, #0]
 800ad72:	e02d      	b.n	800add0 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	6819      	ldr	r1, [r3, #0]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	4b5b      	ldr	r3, [pc, #364]	; (800aeec <HAL_SAI_Init+0x540>)
 800ad80:	400b      	ands	r3, r1
 800ad82:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	6819      	ldr	r1, [r3, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	685a      	ldr	r2, [r3, #4]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad92:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ad98:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad9e:	431a      	orrs	r2, r3
 800ada0:	6a3b      	ldr	r3, [r7, #32]
 800ada2:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800adac:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	695b      	ldr	r3, [r3, #20]
 800adb2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800adb8:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbe:	051b      	lsls	r3, r3, #20
 800adc0:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800adc6:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	430a      	orrs	r2, r1
 800adce:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	6859      	ldr	r1, [r3, #4]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	4b45      	ldr	r3, [pc, #276]	; (800aef0 <HAL_SAI_Init+0x544>)
 800addc:	400b      	ands	r3, r1
 800adde:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	6859      	ldr	r1, [r3, #4]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	69da      	ldr	r2, [r3, #28]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adee:	431a      	orrs	r2, r3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adf4:	431a      	orrs	r2, r3
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	430a      	orrs	r2, r1
 800adfc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	6899      	ldr	r1, [r3, #8]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	4b3a      	ldr	r3, [pc, #232]	; (800aef4 <HAL_SAI_Init+0x548>)
 800ae0a:	400b      	ands	r3, r1
 800ae0c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	6899      	ldr	r1, [r3, #8]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae18:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ae1e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800ae24:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800ae2a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae30:	3b01      	subs	r3, #1
 800ae32:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ae34:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	430a      	orrs	r2, r1
 800ae3c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	68d9      	ldr	r1, [r3, #12]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	f24f 0320 	movw	r3, #61472	; 0xf020
 800ae4c:	400b      	ands	r3, r1
 800ae4e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	68d9      	ldr	r1, [r3, #12]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae5e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae64:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ae66:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae6c:	3b01      	subs	r3, #1
 800ae6e:	021b      	lsls	r3, r3, #8
 800ae70:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	430a      	orrs	r2, r1
 800ae78:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a1e      	ldr	r2, [pc, #120]	; (800aef8 <HAL_SAI_Init+0x54c>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d004      	beq.n	800ae8e <HAL_SAI_Init+0x4e2>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a1c      	ldr	r2, [pc, #112]	; (800aefc <HAL_SAI_Init+0x550>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d119      	bne.n	800aec2 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae92:	f023 0201 	bic.w	r2, r3, #1
 800ae96:	69bb      	ldr	r3, [r7, #24]
 800ae98:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d10e      	bne.n	800aec2 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeac:	3b01      	subs	r3, #1
 800aeae:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800aeb0:	431a      	orrs	r2, r3
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeba:	f043 0201 	orr.w	r2, r3, #1
 800aebe:	69bb      	ldr	r3, [r7, #24]
 800aec0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3728      	adds	r7, #40	; 0x28
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	cccccccd 	.word	0xcccccccd
 800aee8:	f005c010 	.word	0xf005c010
 800aeec:	f805c010 	.word	0xf805c010
 800aef0:	ffff1ff0 	.word	0xffff1ff0
 800aef4:	fff88000 	.word	0xfff88000
 800aef8:	40015804 	.word	0x40015804
 800aefc:	58005404 	.word	0x58005404

0800af00 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800af00:	b480      	push	{r7}
 800af02:	b085      	sub	sp, #20
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800af08:	4b18      	ldr	r3, [pc, #96]	; (800af6c <SAI_Disable+0x6c>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a18      	ldr	r2, [pc, #96]	; (800af70 <SAI_Disable+0x70>)
 800af0e:	fba2 2303 	umull	r2, r3, r2, r3
 800af12:	0b1b      	lsrs	r3, r3, #12
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800af18:	2300      	movs	r3, #0
 800af1a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800af2a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10a      	bne.n	800af48 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800af42:	2303      	movs	r3, #3
 800af44:	72fb      	strb	r3, [r7, #11]
      break;
 800af46:	e009      	b.n	800af5c <SAI_Disable+0x5c>
    }
    count--;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	3b01      	subs	r3, #1
 800af4c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d1e7      	bne.n	800af2c <SAI_Disable+0x2c>

  return status;
 800af5c:	7afb      	ldrb	r3, [r7, #11]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3714      	adds	r7, #20
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	24000000 	.word	0x24000000
 800af70:	95cbec1b 	.word	0x95cbec1b

0800af74 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d101      	bne.n	800af88 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800af84:	2301      	movs	r3, #1
 800af86:	e02b      	b.n	800afe0 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	2b00      	cmp	r3, #0
 800af92:	d106      	bne.n	800afa2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f7f7 fdf9 	bl	8002b94 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2202      	movs	r2, #2
 800afa6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	3304      	adds	r3, #4
 800afb2:	4619      	mov	r1, r3
 800afb4:	4610      	mov	r0, r2
 800afb6:	f001 fabd 	bl	800c534 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6818      	ldr	r0, [r3, #0]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	461a      	mov	r2, r3
 800afc4:	6839      	ldr	r1, [r7, #0]
 800afc6:	f001 fb11 	bl	800c5ec <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800afca:	4b07      	ldr	r3, [pc, #28]	; (800afe8 <HAL_SDRAM_Init+0x74>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a06      	ldr	r2, [pc, #24]	; (800afe8 <HAL_SDRAM_Init+0x74>)
 800afd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800afd4:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2201      	movs	r2, #1
 800afda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800afde:	2300      	movs	r3, #0
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3708      	adds	r7, #8
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	52004000 	.word	0x52004000

0800afec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d101      	bne.n	800affe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800affa:	2301      	movs	r3, #1
 800affc:	e10f      	b.n	800b21e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a87      	ldr	r2, [pc, #540]	; (800b228 <HAL_SPI_Init+0x23c>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d00f      	beq.n	800b02e <HAL_SPI_Init+0x42>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4a86      	ldr	r2, [pc, #536]	; (800b22c <HAL_SPI_Init+0x240>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d00a      	beq.n	800b02e <HAL_SPI_Init+0x42>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a84      	ldr	r2, [pc, #528]	; (800b230 <HAL_SPI_Init+0x244>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d005      	beq.n	800b02e <HAL_SPI_Init+0x42>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	2b0f      	cmp	r3, #15
 800b028:	d901      	bls.n	800b02e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b02a:	2301      	movs	r3, #1
 800b02c:	e0f7      	b.n	800b21e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 f900 	bl	800b234 <SPI_GetPacketSize>
 800b034:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a7b      	ldr	r2, [pc, #492]	; (800b228 <HAL_SPI_Init+0x23c>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d00c      	beq.n	800b05a <HAL_SPI_Init+0x6e>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a79      	ldr	r2, [pc, #484]	; (800b22c <HAL_SPI_Init+0x240>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d007      	beq.n	800b05a <HAL_SPI_Init+0x6e>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a78      	ldr	r2, [pc, #480]	; (800b230 <HAL_SPI_Init+0x244>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d002      	beq.n	800b05a <HAL_SPI_Init+0x6e>
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2b08      	cmp	r3, #8
 800b058:	d811      	bhi.n	800b07e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b05e:	4a72      	ldr	r2, [pc, #456]	; (800b228 <HAL_SPI_Init+0x23c>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d009      	beq.n	800b078 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a70      	ldr	r2, [pc, #448]	; (800b22c <HAL_SPI_Init+0x240>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d004      	beq.n	800b078 <HAL_SPI_Init+0x8c>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4a6f      	ldr	r2, [pc, #444]	; (800b230 <HAL_SPI_Init+0x244>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d104      	bne.n	800b082 <HAL_SPI_Init+0x96>
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2b10      	cmp	r3, #16
 800b07c:	d901      	bls.n	800b082 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b07e:	2301      	movs	r3, #1
 800b080:	e0cd      	b.n	800b21e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d106      	bne.n	800b09c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f7f7 fb10 	bl	80026bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2202      	movs	r2, #2
 800b0a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f022 0201 	bic.w	r2, r2, #1
 800b0b2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b0be:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	699b      	ldr	r3, [r3, #24]
 800b0c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0c8:	d119      	bne.n	800b0fe <HAL_SPI_Init+0x112>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0d2:	d103      	bne.n	800b0dc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d008      	beq.n	800b0ee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10c      	bne.n	800b0fe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b0e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0ec:	d107      	bne.n	800b0fe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b0fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00f      	beq.n	800b12a <HAL_SPI_Init+0x13e>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	2b06      	cmp	r3, #6
 800b110:	d90b      	bls.n	800b12a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	430a      	orrs	r2, r1
 800b126:	601a      	str	r2, [r3, #0]
 800b128:	e007      	b.n	800b13a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b138:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	69da      	ldr	r2, [r3, #28]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b142:	431a      	orrs	r2, r3
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	431a      	orrs	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b14c:	ea42 0103 	orr.w	r1, r2, r3
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	68da      	ldr	r2, [r3, #12]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	430a      	orrs	r2, r1
 800b15a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b164:	431a      	orrs	r2, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b16a:	431a      	orrs	r2, r3
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	699b      	ldr	r3, [r3, #24]
 800b170:	431a      	orrs	r2, r3
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	691b      	ldr	r3, [r3, #16]
 800b176:	431a      	orrs	r2, r3
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	695b      	ldr	r3, [r3, #20]
 800b17c:	431a      	orrs	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6a1b      	ldr	r3, [r3, #32]
 800b182:	431a      	orrs	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	431a      	orrs	r2, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b18e:	431a      	orrs	r2, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	431a      	orrs	r2, r3
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b19a:	ea42 0103 	orr.w	r1, r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	430a      	orrs	r2, r1
 800b1a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d113      	bne.n	800b1da <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1c4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b1d8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f022 0201 	bic.w	r2, r2, #1
 800b1e8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d00a      	beq.n	800b20c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	430a      	orrs	r2, r1
 800b20a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2201      	movs	r2, #1
 800b218:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b21c:	2300      	movs	r3, #0
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	40013000 	.word	0x40013000
 800b22c:	40003800 	.word	0x40003800
 800b230:	40003c00 	.word	0x40003c00

0800b234 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b234:	b480      	push	{r7}
 800b236:	b085      	sub	sp, #20
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b240:	095b      	lsrs	r3, r3, #5
 800b242:	3301      	adds	r3, #1
 800b244:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	68db      	ldr	r3, [r3, #12]
 800b24a:	3301      	adds	r3, #1
 800b24c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	3307      	adds	r3, #7
 800b252:	08db      	lsrs	r3, r3, #3
 800b254:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	fb02 f303 	mul.w	r3, r2, r3
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3714      	adds	r7, #20
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr

0800b26a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b082      	sub	sp, #8
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d101      	bne.n	800b27c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b278:	2301      	movs	r3, #1
 800b27a:	e042      	b.n	800b302 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b282:	2b00      	cmp	r3, #0
 800b284:	d106      	bne.n	800b294 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f7f7 fade 	bl	8002850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2224      	movs	r2, #36	; 0x24
 800b298:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f022 0201 	bic.w	r2, r2, #1
 800b2aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f8bb 	bl	800b428 <UART_SetConfig>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d101      	bne.n	800b2bc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	e022      	b.n	800b302 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d002      	beq.n	800b2ca <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 fe17 	bl	800bef8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	685a      	ldr	r2, [r3, #4]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b2d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	689a      	ldr	r2, [r3, #8]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b2e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f042 0201 	orr.w	r2, r2, #1
 800b2f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 fe9e 	bl	800c03c <UART_CheckIdleState>
 800b300:	4603      	mov	r3, r0
}
 800b302:	4618      	mov	r0, r3
 800b304:	3708      	adds	r7, #8
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b08a      	sub	sp, #40	; 0x28
 800b30e:	af02      	add	r7, sp, #8
 800b310:	60f8      	str	r0, [r7, #12]
 800b312:	60b9      	str	r1, [r7, #8]
 800b314:	603b      	str	r3, [r7, #0]
 800b316:	4613      	mov	r3, r2
 800b318:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b320:	2b20      	cmp	r3, #32
 800b322:	d17b      	bne.n	800b41c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d002      	beq.n	800b330 <HAL_UART_Transmit+0x26>
 800b32a:	88fb      	ldrh	r3, [r7, #6]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d101      	bne.n	800b334 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b330:	2301      	movs	r3, #1
 800b332:	e074      	b.n	800b41e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2200      	movs	r2, #0
 800b338:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2221      	movs	r2, #33	; 0x21
 800b340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b344:	f7f7 fe6c 	bl	8003020 <HAL_GetTick>
 800b348:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	88fa      	ldrh	r2, [r7, #6]
 800b34e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	88fa      	ldrh	r2, [r7, #6]
 800b356:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b362:	d108      	bne.n	800b376 <HAL_UART_Transmit+0x6c>
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	691b      	ldr	r3, [r3, #16]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d104      	bne.n	800b376 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b36c:	2300      	movs	r3, #0
 800b36e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	61bb      	str	r3, [r7, #24]
 800b374:	e003      	b.n	800b37e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b37a:	2300      	movs	r3, #0
 800b37c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b37e:	e030      	b.n	800b3e2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	9300      	str	r3, [sp, #0]
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	2200      	movs	r2, #0
 800b388:	2180      	movs	r1, #128	; 0x80
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f000 ff00 	bl	800c190 <UART_WaitOnFlagUntilTimeout>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d005      	beq.n	800b3a2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2220      	movs	r2, #32
 800b39a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b39e:	2303      	movs	r3, #3
 800b3a0:	e03d      	b.n	800b41e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d10b      	bne.n	800b3c0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	881b      	ldrh	r3, [r3, #0]
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b3b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b3b8:	69bb      	ldr	r3, [r7, #24]
 800b3ba:	3302      	adds	r3, #2
 800b3bc:	61bb      	str	r3, [r7, #24]
 800b3be:	e007      	b.n	800b3d0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	781a      	ldrb	r2, [r3, #0]
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	b29a      	uxth	r2, r3
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d1c8      	bne.n	800b380 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	9300      	str	r3, [sp, #0]
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	2140      	movs	r1, #64	; 0x40
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f000 fec9 	bl	800c190 <UART_WaitOnFlagUntilTimeout>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d005      	beq.n	800b410 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2220      	movs	r2, #32
 800b408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b40c:	2303      	movs	r3, #3
 800b40e:	e006      	b.n	800b41e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2220      	movs	r2, #32
 800b414:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b418:	2300      	movs	r3, #0
 800b41a:	e000      	b.n	800b41e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b41c:	2302      	movs	r3, #2
  }
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3720      	adds	r7, #32
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
	...

0800b428 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b42c:	b092      	sub	sp, #72	; 0x48
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b432:	2300      	movs	r3, #0
 800b434:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	689a      	ldr	r2, [r3, #8]
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	691b      	ldr	r3, [r3, #16]
 800b440:	431a      	orrs	r2, r3
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	695b      	ldr	r3, [r3, #20]
 800b446:	431a      	orrs	r2, r3
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	69db      	ldr	r3, [r3, #28]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	4bbe      	ldr	r3, [pc, #760]	; (800b750 <UART_SetConfig+0x328>)
 800b458:	4013      	ands	r3, r2
 800b45a:	697a      	ldr	r2, [r7, #20]
 800b45c:	6812      	ldr	r2, [r2, #0]
 800b45e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b460:	430b      	orrs	r3, r1
 800b462:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	68da      	ldr	r2, [r3, #12]
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	430a      	orrs	r2, r1
 800b478:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	699b      	ldr	r3, [r3, #24]
 800b47e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4ab3      	ldr	r2, [pc, #716]	; (800b754 <UART_SetConfig+0x32c>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d004      	beq.n	800b494 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	6a1b      	ldr	r3, [r3, #32]
 800b48e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b490:	4313      	orrs	r3, r2
 800b492:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	689a      	ldr	r2, [r3, #8]
 800b49a:	4baf      	ldr	r3, [pc, #700]	; (800b758 <UART_SetConfig+0x330>)
 800b49c:	4013      	ands	r3, r2
 800b49e:	697a      	ldr	r2, [r7, #20]
 800b4a0:	6812      	ldr	r2, [r2, #0]
 800b4a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b4a4:	430b      	orrs	r3, r1
 800b4a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ae:	f023 010f 	bic.w	r1, r3, #15
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	430a      	orrs	r2, r1
 800b4bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4aa6      	ldr	r2, [pc, #664]	; (800b75c <UART_SetConfig+0x334>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d177      	bne.n	800b5b8 <UART_SetConfig+0x190>
 800b4c8:	4ba5      	ldr	r3, [pc, #660]	; (800b760 <UART_SetConfig+0x338>)
 800b4ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b4d0:	2b28      	cmp	r3, #40	; 0x28
 800b4d2:	d86d      	bhi.n	800b5b0 <UART_SetConfig+0x188>
 800b4d4:	a201      	add	r2, pc, #4	; (adr r2, 800b4dc <UART_SetConfig+0xb4>)
 800b4d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4da:	bf00      	nop
 800b4dc:	0800b581 	.word	0x0800b581
 800b4e0:	0800b5b1 	.word	0x0800b5b1
 800b4e4:	0800b5b1 	.word	0x0800b5b1
 800b4e8:	0800b5b1 	.word	0x0800b5b1
 800b4ec:	0800b5b1 	.word	0x0800b5b1
 800b4f0:	0800b5b1 	.word	0x0800b5b1
 800b4f4:	0800b5b1 	.word	0x0800b5b1
 800b4f8:	0800b5b1 	.word	0x0800b5b1
 800b4fc:	0800b589 	.word	0x0800b589
 800b500:	0800b5b1 	.word	0x0800b5b1
 800b504:	0800b5b1 	.word	0x0800b5b1
 800b508:	0800b5b1 	.word	0x0800b5b1
 800b50c:	0800b5b1 	.word	0x0800b5b1
 800b510:	0800b5b1 	.word	0x0800b5b1
 800b514:	0800b5b1 	.word	0x0800b5b1
 800b518:	0800b5b1 	.word	0x0800b5b1
 800b51c:	0800b591 	.word	0x0800b591
 800b520:	0800b5b1 	.word	0x0800b5b1
 800b524:	0800b5b1 	.word	0x0800b5b1
 800b528:	0800b5b1 	.word	0x0800b5b1
 800b52c:	0800b5b1 	.word	0x0800b5b1
 800b530:	0800b5b1 	.word	0x0800b5b1
 800b534:	0800b5b1 	.word	0x0800b5b1
 800b538:	0800b5b1 	.word	0x0800b5b1
 800b53c:	0800b599 	.word	0x0800b599
 800b540:	0800b5b1 	.word	0x0800b5b1
 800b544:	0800b5b1 	.word	0x0800b5b1
 800b548:	0800b5b1 	.word	0x0800b5b1
 800b54c:	0800b5b1 	.word	0x0800b5b1
 800b550:	0800b5b1 	.word	0x0800b5b1
 800b554:	0800b5b1 	.word	0x0800b5b1
 800b558:	0800b5b1 	.word	0x0800b5b1
 800b55c:	0800b5a1 	.word	0x0800b5a1
 800b560:	0800b5b1 	.word	0x0800b5b1
 800b564:	0800b5b1 	.word	0x0800b5b1
 800b568:	0800b5b1 	.word	0x0800b5b1
 800b56c:	0800b5b1 	.word	0x0800b5b1
 800b570:	0800b5b1 	.word	0x0800b5b1
 800b574:	0800b5b1 	.word	0x0800b5b1
 800b578:	0800b5b1 	.word	0x0800b5b1
 800b57c:	0800b5a9 	.word	0x0800b5a9
 800b580:	2301      	movs	r3, #1
 800b582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b586:	e222      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b588:	2304      	movs	r3, #4
 800b58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b58e:	e21e      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b590:	2308      	movs	r3, #8
 800b592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b596:	e21a      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b598:	2310      	movs	r3, #16
 800b59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b59e:	e216      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b5a0:	2320      	movs	r3, #32
 800b5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5a6:	e212      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b5a8:	2340      	movs	r3, #64	; 0x40
 800b5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5ae:	e20e      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b5b0:	2380      	movs	r3, #128	; 0x80
 800b5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5b6:	e20a      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a69      	ldr	r2, [pc, #420]	; (800b764 <UART_SetConfig+0x33c>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d130      	bne.n	800b624 <UART_SetConfig+0x1fc>
 800b5c2:	4b67      	ldr	r3, [pc, #412]	; (800b760 <UART_SetConfig+0x338>)
 800b5c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5c6:	f003 0307 	and.w	r3, r3, #7
 800b5ca:	2b05      	cmp	r3, #5
 800b5cc:	d826      	bhi.n	800b61c <UART_SetConfig+0x1f4>
 800b5ce:	a201      	add	r2, pc, #4	; (adr r2, 800b5d4 <UART_SetConfig+0x1ac>)
 800b5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d4:	0800b5ed 	.word	0x0800b5ed
 800b5d8:	0800b5f5 	.word	0x0800b5f5
 800b5dc:	0800b5fd 	.word	0x0800b5fd
 800b5e0:	0800b605 	.word	0x0800b605
 800b5e4:	0800b60d 	.word	0x0800b60d
 800b5e8:	0800b615 	.word	0x0800b615
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5f2:	e1ec      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b5f4:	2304      	movs	r3, #4
 800b5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5fa:	e1e8      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b5fc:	2308      	movs	r3, #8
 800b5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b602:	e1e4      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b604:	2310      	movs	r3, #16
 800b606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b60a:	e1e0      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b60c:	2320      	movs	r3, #32
 800b60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b612:	e1dc      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b614:	2340      	movs	r3, #64	; 0x40
 800b616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b61a:	e1d8      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b61c:	2380      	movs	r3, #128	; 0x80
 800b61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b622:	e1d4      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a4f      	ldr	r2, [pc, #316]	; (800b768 <UART_SetConfig+0x340>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d130      	bne.n	800b690 <UART_SetConfig+0x268>
 800b62e:	4b4c      	ldr	r3, [pc, #304]	; (800b760 <UART_SetConfig+0x338>)
 800b630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b632:	f003 0307 	and.w	r3, r3, #7
 800b636:	2b05      	cmp	r3, #5
 800b638:	d826      	bhi.n	800b688 <UART_SetConfig+0x260>
 800b63a:	a201      	add	r2, pc, #4	; (adr r2, 800b640 <UART_SetConfig+0x218>)
 800b63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b640:	0800b659 	.word	0x0800b659
 800b644:	0800b661 	.word	0x0800b661
 800b648:	0800b669 	.word	0x0800b669
 800b64c:	0800b671 	.word	0x0800b671
 800b650:	0800b679 	.word	0x0800b679
 800b654:	0800b681 	.word	0x0800b681
 800b658:	2300      	movs	r3, #0
 800b65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b65e:	e1b6      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b660:	2304      	movs	r3, #4
 800b662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b666:	e1b2      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b668:	2308      	movs	r3, #8
 800b66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b66e:	e1ae      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b670:	2310      	movs	r3, #16
 800b672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b676:	e1aa      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b678:	2320      	movs	r3, #32
 800b67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b67e:	e1a6      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b680:	2340      	movs	r3, #64	; 0x40
 800b682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b686:	e1a2      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b688:	2380      	movs	r3, #128	; 0x80
 800b68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b68e:	e19e      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4a35      	ldr	r2, [pc, #212]	; (800b76c <UART_SetConfig+0x344>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d130      	bne.n	800b6fc <UART_SetConfig+0x2d4>
 800b69a:	4b31      	ldr	r3, [pc, #196]	; (800b760 <UART_SetConfig+0x338>)
 800b69c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b69e:	f003 0307 	and.w	r3, r3, #7
 800b6a2:	2b05      	cmp	r3, #5
 800b6a4:	d826      	bhi.n	800b6f4 <UART_SetConfig+0x2cc>
 800b6a6:	a201      	add	r2, pc, #4	; (adr r2, 800b6ac <UART_SetConfig+0x284>)
 800b6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ac:	0800b6c5 	.word	0x0800b6c5
 800b6b0:	0800b6cd 	.word	0x0800b6cd
 800b6b4:	0800b6d5 	.word	0x0800b6d5
 800b6b8:	0800b6dd 	.word	0x0800b6dd
 800b6bc:	0800b6e5 	.word	0x0800b6e5
 800b6c0:	0800b6ed 	.word	0x0800b6ed
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6ca:	e180      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b6cc:	2304      	movs	r3, #4
 800b6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6d2:	e17c      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b6d4:	2308      	movs	r3, #8
 800b6d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6da:	e178      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b6dc:	2310      	movs	r3, #16
 800b6de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6e2:	e174      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b6e4:	2320      	movs	r3, #32
 800b6e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6ea:	e170      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b6ec:	2340      	movs	r3, #64	; 0x40
 800b6ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6f2:	e16c      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b6f4:	2380      	movs	r3, #128	; 0x80
 800b6f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6fa:	e168      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a1b      	ldr	r2, [pc, #108]	; (800b770 <UART_SetConfig+0x348>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d142      	bne.n	800b78c <UART_SetConfig+0x364>
 800b706:	4b16      	ldr	r3, [pc, #88]	; (800b760 <UART_SetConfig+0x338>)
 800b708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b70a:	f003 0307 	and.w	r3, r3, #7
 800b70e:	2b05      	cmp	r3, #5
 800b710:	d838      	bhi.n	800b784 <UART_SetConfig+0x35c>
 800b712:	a201      	add	r2, pc, #4	; (adr r2, 800b718 <UART_SetConfig+0x2f0>)
 800b714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b718:	0800b731 	.word	0x0800b731
 800b71c:	0800b739 	.word	0x0800b739
 800b720:	0800b741 	.word	0x0800b741
 800b724:	0800b749 	.word	0x0800b749
 800b728:	0800b775 	.word	0x0800b775
 800b72c:	0800b77d 	.word	0x0800b77d
 800b730:	2300      	movs	r3, #0
 800b732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b736:	e14a      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b738:	2304      	movs	r3, #4
 800b73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b73e:	e146      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b740:	2308      	movs	r3, #8
 800b742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b746:	e142      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b748:	2310      	movs	r3, #16
 800b74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b74e:	e13e      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b750:	cfff69f3 	.word	0xcfff69f3
 800b754:	58000c00 	.word	0x58000c00
 800b758:	11fff4ff 	.word	0x11fff4ff
 800b75c:	40011000 	.word	0x40011000
 800b760:	58024400 	.word	0x58024400
 800b764:	40004400 	.word	0x40004400
 800b768:	40004800 	.word	0x40004800
 800b76c:	40004c00 	.word	0x40004c00
 800b770:	40005000 	.word	0x40005000
 800b774:	2320      	movs	r3, #32
 800b776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b77a:	e128      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b77c:	2340      	movs	r3, #64	; 0x40
 800b77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b782:	e124      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b784:	2380      	movs	r3, #128	; 0x80
 800b786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b78a:	e120      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4acb      	ldr	r2, [pc, #812]	; (800bac0 <UART_SetConfig+0x698>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d176      	bne.n	800b884 <UART_SetConfig+0x45c>
 800b796:	4bcb      	ldr	r3, [pc, #812]	; (800bac4 <UART_SetConfig+0x69c>)
 800b798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b79a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b79e:	2b28      	cmp	r3, #40	; 0x28
 800b7a0:	d86c      	bhi.n	800b87c <UART_SetConfig+0x454>
 800b7a2:	a201      	add	r2, pc, #4	; (adr r2, 800b7a8 <UART_SetConfig+0x380>)
 800b7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a8:	0800b84d 	.word	0x0800b84d
 800b7ac:	0800b87d 	.word	0x0800b87d
 800b7b0:	0800b87d 	.word	0x0800b87d
 800b7b4:	0800b87d 	.word	0x0800b87d
 800b7b8:	0800b87d 	.word	0x0800b87d
 800b7bc:	0800b87d 	.word	0x0800b87d
 800b7c0:	0800b87d 	.word	0x0800b87d
 800b7c4:	0800b87d 	.word	0x0800b87d
 800b7c8:	0800b855 	.word	0x0800b855
 800b7cc:	0800b87d 	.word	0x0800b87d
 800b7d0:	0800b87d 	.word	0x0800b87d
 800b7d4:	0800b87d 	.word	0x0800b87d
 800b7d8:	0800b87d 	.word	0x0800b87d
 800b7dc:	0800b87d 	.word	0x0800b87d
 800b7e0:	0800b87d 	.word	0x0800b87d
 800b7e4:	0800b87d 	.word	0x0800b87d
 800b7e8:	0800b85d 	.word	0x0800b85d
 800b7ec:	0800b87d 	.word	0x0800b87d
 800b7f0:	0800b87d 	.word	0x0800b87d
 800b7f4:	0800b87d 	.word	0x0800b87d
 800b7f8:	0800b87d 	.word	0x0800b87d
 800b7fc:	0800b87d 	.word	0x0800b87d
 800b800:	0800b87d 	.word	0x0800b87d
 800b804:	0800b87d 	.word	0x0800b87d
 800b808:	0800b865 	.word	0x0800b865
 800b80c:	0800b87d 	.word	0x0800b87d
 800b810:	0800b87d 	.word	0x0800b87d
 800b814:	0800b87d 	.word	0x0800b87d
 800b818:	0800b87d 	.word	0x0800b87d
 800b81c:	0800b87d 	.word	0x0800b87d
 800b820:	0800b87d 	.word	0x0800b87d
 800b824:	0800b87d 	.word	0x0800b87d
 800b828:	0800b86d 	.word	0x0800b86d
 800b82c:	0800b87d 	.word	0x0800b87d
 800b830:	0800b87d 	.word	0x0800b87d
 800b834:	0800b87d 	.word	0x0800b87d
 800b838:	0800b87d 	.word	0x0800b87d
 800b83c:	0800b87d 	.word	0x0800b87d
 800b840:	0800b87d 	.word	0x0800b87d
 800b844:	0800b87d 	.word	0x0800b87d
 800b848:	0800b875 	.word	0x0800b875
 800b84c:	2301      	movs	r3, #1
 800b84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b852:	e0bc      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b854:	2304      	movs	r3, #4
 800b856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b85a:	e0b8      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b85c:	2308      	movs	r3, #8
 800b85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b862:	e0b4      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b864:	2310      	movs	r3, #16
 800b866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b86a:	e0b0      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b86c:	2320      	movs	r3, #32
 800b86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b872:	e0ac      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b874:	2340      	movs	r3, #64	; 0x40
 800b876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b87a:	e0a8      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b87c:	2380      	movs	r3, #128	; 0x80
 800b87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b882:	e0a4      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4a8f      	ldr	r2, [pc, #572]	; (800bac8 <UART_SetConfig+0x6a0>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d130      	bne.n	800b8f0 <UART_SetConfig+0x4c8>
 800b88e:	4b8d      	ldr	r3, [pc, #564]	; (800bac4 <UART_SetConfig+0x69c>)
 800b890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b892:	f003 0307 	and.w	r3, r3, #7
 800b896:	2b05      	cmp	r3, #5
 800b898:	d826      	bhi.n	800b8e8 <UART_SetConfig+0x4c0>
 800b89a:	a201      	add	r2, pc, #4	; (adr r2, 800b8a0 <UART_SetConfig+0x478>)
 800b89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8a0:	0800b8b9 	.word	0x0800b8b9
 800b8a4:	0800b8c1 	.word	0x0800b8c1
 800b8a8:	0800b8c9 	.word	0x0800b8c9
 800b8ac:	0800b8d1 	.word	0x0800b8d1
 800b8b0:	0800b8d9 	.word	0x0800b8d9
 800b8b4:	0800b8e1 	.word	0x0800b8e1
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8be:	e086      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b8c0:	2304      	movs	r3, #4
 800b8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8c6:	e082      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b8c8:	2308      	movs	r3, #8
 800b8ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8ce:	e07e      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b8d0:	2310      	movs	r3, #16
 800b8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8d6:	e07a      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b8d8:	2320      	movs	r3, #32
 800b8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8de:	e076      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b8e0:	2340      	movs	r3, #64	; 0x40
 800b8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8e6:	e072      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b8e8:	2380      	movs	r3, #128	; 0x80
 800b8ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8ee:	e06e      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4a75      	ldr	r2, [pc, #468]	; (800bacc <UART_SetConfig+0x6a4>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d130      	bne.n	800b95c <UART_SetConfig+0x534>
 800b8fa:	4b72      	ldr	r3, [pc, #456]	; (800bac4 <UART_SetConfig+0x69c>)
 800b8fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8fe:	f003 0307 	and.w	r3, r3, #7
 800b902:	2b05      	cmp	r3, #5
 800b904:	d826      	bhi.n	800b954 <UART_SetConfig+0x52c>
 800b906:	a201      	add	r2, pc, #4	; (adr r2, 800b90c <UART_SetConfig+0x4e4>)
 800b908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b90c:	0800b925 	.word	0x0800b925
 800b910:	0800b92d 	.word	0x0800b92d
 800b914:	0800b935 	.word	0x0800b935
 800b918:	0800b93d 	.word	0x0800b93d
 800b91c:	0800b945 	.word	0x0800b945
 800b920:	0800b94d 	.word	0x0800b94d
 800b924:	2300      	movs	r3, #0
 800b926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b92a:	e050      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b92c:	2304      	movs	r3, #4
 800b92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b932:	e04c      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b934:	2308      	movs	r3, #8
 800b936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b93a:	e048      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b93c:	2310      	movs	r3, #16
 800b93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b942:	e044      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b944:	2320      	movs	r3, #32
 800b946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b94a:	e040      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b94c:	2340      	movs	r3, #64	; 0x40
 800b94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b952:	e03c      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b954:	2380      	movs	r3, #128	; 0x80
 800b956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b95a:	e038      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a5b      	ldr	r2, [pc, #364]	; (800bad0 <UART_SetConfig+0x6a8>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d130      	bne.n	800b9c8 <UART_SetConfig+0x5a0>
 800b966:	4b57      	ldr	r3, [pc, #348]	; (800bac4 <UART_SetConfig+0x69c>)
 800b968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b96a:	f003 0307 	and.w	r3, r3, #7
 800b96e:	2b05      	cmp	r3, #5
 800b970:	d826      	bhi.n	800b9c0 <UART_SetConfig+0x598>
 800b972:	a201      	add	r2, pc, #4	; (adr r2, 800b978 <UART_SetConfig+0x550>)
 800b974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b978:	0800b991 	.word	0x0800b991
 800b97c:	0800b999 	.word	0x0800b999
 800b980:	0800b9a1 	.word	0x0800b9a1
 800b984:	0800b9a9 	.word	0x0800b9a9
 800b988:	0800b9b1 	.word	0x0800b9b1
 800b98c:	0800b9b9 	.word	0x0800b9b9
 800b990:	2302      	movs	r3, #2
 800b992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b996:	e01a      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b998:	2304      	movs	r3, #4
 800b99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b99e:	e016      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b9a0:	2308      	movs	r3, #8
 800b9a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9a6:	e012      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b9a8:	2310      	movs	r3, #16
 800b9aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9ae:	e00e      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b9b0:	2320      	movs	r3, #32
 800b9b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9b6:	e00a      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b9b8:	2340      	movs	r3, #64	; 0x40
 800b9ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9be:	e006      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b9c0:	2380      	movs	r3, #128	; 0x80
 800b9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9c6:	e002      	b.n	800b9ce <UART_SetConfig+0x5a6>
 800b9c8:	2380      	movs	r3, #128	; 0x80
 800b9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a3f      	ldr	r2, [pc, #252]	; (800bad0 <UART_SetConfig+0x6a8>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	f040 80f8 	bne.w	800bbca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b9da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b9de:	2b20      	cmp	r3, #32
 800b9e0:	dc46      	bgt.n	800ba70 <UART_SetConfig+0x648>
 800b9e2:	2b02      	cmp	r3, #2
 800b9e4:	f2c0 8082 	blt.w	800baec <UART_SetConfig+0x6c4>
 800b9e8:	3b02      	subs	r3, #2
 800b9ea:	2b1e      	cmp	r3, #30
 800b9ec:	d87e      	bhi.n	800baec <UART_SetConfig+0x6c4>
 800b9ee:	a201      	add	r2, pc, #4	; (adr r2, 800b9f4 <UART_SetConfig+0x5cc>)
 800b9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f4:	0800ba77 	.word	0x0800ba77
 800b9f8:	0800baed 	.word	0x0800baed
 800b9fc:	0800ba7f 	.word	0x0800ba7f
 800ba00:	0800baed 	.word	0x0800baed
 800ba04:	0800baed 	.word	0x0800baed
 800ba08:	0800baed 	.word	0x0800baed
 800ba0c:	0800ba8f 	.word	0x0800ba8f
 800ba10:	0800baed 	.word	0x0800baed
 800ba14:	0800baed 	.word	0x0800baed
 800ba18:	0800baed 	.word	0x0800baed
 800ba1c:	0800baed 	.word	0x0800baed
 800ba20:	0800baed 	.word	0x0800baed
 800ba24:	0800baed 	.word	0x0800baed
 800ba28:	0800baed 	.word	0x0800baed
 800ba2c:	0800ba9f 	.word	0x0800ba9f
 800ba30:	0800baed 	.word	0x0800baed
 800ba34:	0800baed 	.word	0x0800baed
 800ba38:	0800baed 	.word	0x0800baed
 800ba3c:	0800baed 	.word	0x0800baed
 800ba40:	0800baed 	.word	0x0800baed
 800ba44:	0800baed 	.word	0x0800baed
 800ba48:	0800baed 	.word	0x0800baed
 800ba4c:	0800baed 	.word	0x0800baed
 800ba50:	0800baed 	.word	0x0800baed
 800ba54:	0800baed 	.word	0x0800baed
 800ba58:	0800baed 	.word	0x0800baed
 800ba5c:	0800baed 	.word	0x0800baed
 800ba60:	0800baed 	.word	0x0800baed
 800ba64:	0800baed 	.word	0x0800baed
 800ba68:	0800baed 	.word	0x0800baed
 800ba6c:	0800badf 	.word	0x0800badf
 800ba70:	2b40      	cmp	r3, #64	; 0x40
 800ba72:	d037      	beq.n	800bae4 <UART_SetConfig+0x6bc>
 800ba74:	e03a      	b.n	800baec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ba76:	f7fe f90d 	bl	8009c94 <HAL_RCCEx_GetD3PCLK1Freq>
 800ba7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ba7c:	e03c      	b.n	800baf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7fe f91c 	bl	8009cc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba8c:	e034      	b.n	800baf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba8e:	f107 0318 	add.w	r3, r7, #24
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7fe fa68 	bl	8009f68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba98:	69fb      	ldr	r3, [r7, #28]
 800ba9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba9c:	e02c      	b.n	800baf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba9e:	4b09      	ldr	r3, [pc, #36]	; (800bac4 <UART_SetConfig+0x69c>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f003 0320 	and.w	r3, r3, #32
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d016      	beq.n	800bad8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800baaa:	4b06      	ldr	r3, [pc, #24]	; (800bac4 <UART_SetConfig+0x69c>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	08db      	lsrs	r3, r3, #3
 800bab0:	f003 0303 	and.w	r3, r3, #3
 800bab4:	4a07      	ldr	r2, [pc, #28]	; (800bad4 <UART_SetConfig+0x6ac>)
 800bab6:	fa22 f303 	lsr.w	r3, r2, r3
 800baba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800babc:	e01c      	b.n	800baf8 <UART_SetConfig+0x6d0>
 800babe:	bf00      	nop
 800bac0:	40011400 	.word	0x40011400
 800bac4:	58024400 	.word	0x58024400
 800bac8:	40007800 	.word	0x40007800
 800bacc:	40007c00 	.word	0x40007c00
 800bad0:	58000c00 	.word	0x58000c00
 800bad4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800bad8:	4b9d      	ldr	r3, [pc, #628]	; (800bd50 <UART_SetConfig+0x928>)
 800bada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800badc:	e00c      	b.n	800baf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bade:	4b9d      	ldr	r3, [pc, #628]	; (800bd54 <UART_SetConfig+0x92c>)
 800bae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bae2:	e009      	b.n	800baf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bae4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bae8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baea:	e005      	b.n	800baf8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800baec:	2300      	movs	r3, #0
 800baee:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800baf0:	2301      	movs	r3, #1
 800baf2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800baf6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800baf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	f000 81de 	beq.w	800bebc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb04:	4a94      	ldr	r2, [pc, #592]	; (800bd58 <UART_SetConfig+0x930>)
 800bb06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb0e:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb12:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	685a      	ldr	r2, [r3, #4]
 800bb18:	4613      	mov	r3, r2
 800bb1a:	005b      	lsls	r3, r3, #1
 800bb1c:	4413      	add	r3, r2
 800bb1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d305      	bcc.n	800bb30 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d903      	bls.n	800bb38 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bb30:	2301      	movs	r3, #1
 800bb32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bb36:	e1c1      	b.n	800bebc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	60bb      	str	r3, [r7, #8]
 800bb3e:	60fa      	str	r2, [r7, #12]
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb44:	4a84      	ldr	r2, [pc, #528]	; (800bd58 <UART_SetConfig+0x930>)
 800bb46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	603b      	str	r3, [r7, #0]
 800bb50:	607a      	str	r2, [r7, #4]
 800bb52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bb5a:	f7f4 fc19 	bl	8000390 <__aeabi_uldivmod>
 800bb5e:	4602      	mov	r2, r0
 800bb60:	460b      	mov	r3, r1
 800bb62:	4610      	mov	r0, r2
 800bb64:	4619      	mov	r1, r3
 800bb66:	f04f 0200 	mov.w	r2, #0
 800bb6a:	f04f 0300 	mov.w	r3, #0
 800bb6e:	020b      	lsls	r3, r1, #8
 800bb70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bb74:	0202      	lsls	r2, r0, #8
 800bb76:	6979      	ldr	r1, [r7, #20]
 800bb78:	6849      	ldr	r1, [r1, #4]
 800bb7a:	0849      	lsrs	r1, r1, #1
 800bb7c:	2000      	movs	r0, #0
 800bb7e:	460c      	mov	r4, r1
 800bb80:	4605      	mov	r5, r0
 800bb82:	eb12 0804 	adds.w	r8, r2, r4
 800bb86:	eb43 0905 	adc.w	r9, r3, r5
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	469a      	mov	sl, r3
 800bb92:	4693      	mov	fp, r2
 800bb94:	4652      	mov	r2, sl
 800bb96:	465b      	mov	r3, fp
 800bb98:	4640      	mov	r0, r8
 800bb9a:	4649      	mov	r1, r9
 800bb9c:	f7f4 fbf8 	bl	8000390 <__aeabi_uldivmod>
 800bba0:	4602      	mov	r2, r0
 800bba2:	460b      	mov	r3, r1
 800bba4:	4613      	mov	r3, r2
 800bba6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bbae:	d308      	bcc.n	800bbc2 <UART_SetConfig+0x79a>
 800bbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbb6:	d204      	bcs.n	800bbc2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbbe:	60da      	str	r2, [r3, #12]
 800bbc0:	e17c      	b.n	800bebc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bbc8:	e178      	b.n	800bebc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	69db      	ldr	r3, [r3, #28]
 800bbce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbd2:	f040 80c5 	bne.w	800bd60 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800bbd6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bbda:	2b20      	cmp	r3, #32
 800bbdc:	dc48      	bgt.n	800bc70 <UART_SetConfig+0x848>
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	db7b      	blt.n	800bcda <UART_SetConfig+0x8b2>
 800bbe2:	2b20      	cmp	r3, #32
 800bbe4:	d879      	bhi.n	800bcda <UART_SetConfig+0x8b2>
 800bbe6:	a201      	add	r2, pc, #4	; (adr r2, 800bbec <UART_SetConfig+0x7c4>)
 800bbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbec:	0800bc77 	.word	0x0800bc77
 800bbf0:	0800bc7f 	.word	0x0800bc7f
 800bbf4:	0800bcdb 	.word	0x0800bcdb
 800bbf8:	0800bcdb 	.word	0x0800bcdb
 800bbfc:	0800bc87 	.word	0x0800bc87
 800bc00:	0800bcdb 	.word	0x0800bcdb
 800bc04:	0800bcdb 	.word	0x0800bcdb
 800bc08:	0800bcdb 	.word	0x0800bcdb
 800bc0c:	0800bc97 	.word	0x0800bc97
 800bc10:	0800bcdb 	.word	0x0800bcdb
 800bc14:	0800bcdb 	.word	0x0800bcdb
 800bc18:	0800bcdb 	.word	0x0800bcdb
 800bc1c:	0800bcdb 	.word	0x0800bcdb
 800bc20:	0800bcdb 	.word	0x0800bcdb
 800bc24:	0800bcdb 	.word	0x0800bcdb
 800bc28:	0800bcdb 	.word	0x0800bcdb
 800bc2c:	0800bca7 	.word	0x0800bca7
 800bc30:	0800bcdb 	.word	0x0800bcdb
 800bc34:	0800bcdb 	.word	0x0800bcdb
 800bc38:	0800bcdb 	.word	0x0800bcdb
 800bc3c:	0800bcdb 	.word	0x0800bcdb
 800bc40:	0800bcdb 	.word	0x0800bcdb
 800bc44:	0800bcdb 	.word	0x0800bcdb
 800bc48:	0800bcdb 	.word	0x0800bcdb
 800bc4c:	0800bcdb 	.word	0x0800bcdb
 800bc50:	0800bcdb 	.word	0x0800bcdb
 800bc54:	0800bcdb 	.word	0x0800bcdb
 800bc58:	0800bcdb 	.word	0x0800bcdb
 800bc5c:	0800bcdb 	.word	0x0800bcdb
 800bc60:	0800bcdb 	.word	0x0800bcdb
 800bc64:	0800bcdb 	.word	0x0800bcdb
 800bc68:	0800bcdb 	.word	0x0800bcdb
 800bc6c:	0800bccd 	.word	0x0800bccd
 800bc70:	2b40      	cmp	r3, #64	; 0x40
 800bc72:	d02e      	beq.n	800bcd2 <UART_SetConfig+0x8aa>
 800bc74:	e031      	b.n	800bcda <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc76:	f7fc f857 	bl	8007d28 <HAL_RCC_GetPCLK1Freq>
 800bc7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bc7c:	e033      	b.n	800bce6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc7e:	f7fc f869 	bl	8007d54 <HAL_RCC_GetPCLK2Freq>
 800bc82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bc84:	e02f      	b.n	800bce6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7fe f818 	bl	8009cc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc94:	e027      	b.n	800bce6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc96:	f107 0318 	add.w	r3, r7, #24
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7fe f964 	bl	8009f68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bca0:	69fb      	ldr	r3, [r7, #28]
 800bca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bca4:	e01f      	b.n	800bce6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bca6:	4b2d      	ldr	r3, [pc, #180]	; (800bd5c <UART_SetConfig+0x934>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f003 0320 	and.w	r3, r3, #32
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d009      	beq.n	800bcc6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bcb2:	4b2a      	ldr	r3, [pc, #168]	; (800bd5c <UART_SetConfig+0x934>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	08db      	lsrs	r3, r3, #3
 800bcb8:	f003 0303 	and.w	r3, r3, #3
 800bcbc:	4a24      	ldr	r2, [pc, #144]	; (800bd50 <UART_SetConfig+0x928>)
 800bcbe:	fa22 f303 	lsr.w	r3, r2, r3
 800bcc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bcc4:	e00f      	b.n	800bce6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bcc6:	4b22      	ldr	r3, [pc, #136]	; (800bd50 <UART_SetConfig+0x928>)
 800bcc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcca:	e00c      	b.n	800bce6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bccc:	4b21      	ldr	r3, [pc, #132]	; (800bd54 <UART_SetConfig+0x92c>)
 800bcce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcd0:	e009      	b.n	800bce6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bcd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcd8:	e005      	b.n	800bce6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bcde:	2301      	movs	r3, #1
 800bce0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bce4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f000 80e7 	beq.w	800bebc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf2:	4a19      	ldr	r2, [pc, #100]	; (800bd58 <UART_SetConfig+0x930>)
 800bcf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcfc:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd00:	005a      	lsls	r2, r3, #1
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	085b      	lsrs	r3, r3, #1
 800bd08:	441a      	add	r2, r3
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd12:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd16:	2b0f      	cmp	r3, #15
 800bd18:	d916      	bls.n	800bd48 <UART_SetConfig+0x920>
 800bd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd20:	d212      	bcs.n	800bd48 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	f023 030f 	bic.w	r3, r3, #15
 800bd2a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2e:	085b      	lsrs	r3, r3, #1
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	f003 0307 	and.w	r3, r3, #7
 800bd36:	b29a      	uxth	r2, r3
 800bd38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bd44:	60da      	str	r2, [r3, #12]
 800bd46:	e0b9      	b.n	800bebc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bd4e:	e0b5      	b.n	800bebc <UART_SetConfig+0xa94>
 800bd50:	03d09000 	.word	0x03d09000
 800bd54:	003d0900 	.word	0x003d0900
 800bd58:	0800d750 	.word	0x0800d750
 800bd5c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd60:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bd64:	2b20      	cmp	r3, #32
 800bd66:	dc49      	bgt.n	800bdfc <UART_SetConfig+0x9d4>
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	db7c      	blt.n	800be66 <UART_SetConfig+0xa3e>
 800bd6c:	2b20      	cmp	r3, #32
 800bd6e:	d87a      	bhi.n	800be66 <UART_SetConfig+0xa3e>
 800bd70:	a201      	add	r2, pc, #4	; (adr r2, 800bd78 <UART_SetConfig+0x950>)
 800bd72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd76:	bf00      	nop
 800bd78:	0800be03 	.word	0x0800be03
 800bd7c:	0800be0b 	.word	0x0800be0b
 800bd80:	0800be67 	.word	0x0800be67
 800bd84:	0800be67 	.word	0x0800be67
 800bd88:	0800be13 	.word	0x0800be13
 800bd8c:	0800be67 	.word	0x0800be67
 800bd90:	0800be67 	.word	0x0800be67
 800bd94:	0800be67 	.word	0x0800be67
 800bd98:	0800be23 	.word	0x0800be23
 800bd9c:	0800be67 	.word	0x0800be67
 800bda0:	0800be67 	.word	0x0800be67
 800bda4:	0800be67 	.word	0x0800be67
 800bda8:	0800be67 	.word	0x0800be67
 800bdac:	0800be67 	.word	0x0800be67
 800bdb0:	0800be67 	.word	0x0800be67
 800bdb4:	0800be67 	.word	0x0800be67
 800bdb8:	0800be33 	.word	0x0800be33
 800bdbc:	0800be67 	.word	0x0800be67
 800bdc0:	0800be67 	.word	0x0800be67
 800bdc4:	0800be67 	.word	0x0800be67
 800bdc8:	0800be67 	.word	0x0800be67
 800bdcc:	0800be67 	.word	0x0800be67
 800bdd0:	0800be67 	.word	0x0800be67
 800bdd4:	0800be67 	.word	0x0800be67
 800bdd8:	0800be67 	.word	0x0800be67
 800bddc:	0800be67 	.word	0x0800be67
 800bde0:	0800be67 	.word	0x0800be67
 800bde4:	0800be67 	.word	0x0800be67
 800bde8:	0800be67 	.word	0x0800be67
 800bdec:	0800be67 	.word	0x0800be67
 800bdf0:	0800be67 	.word	0x0800be67
 800bdf4:	0800be67 	.word	0x0800be67
 800bdf8:	0800be59 	.word	0x0800be59
 800bdfc:	2b40      	cmp	r3, #64	; 0x40
 800bdfe:	d02e      	beq.n	800be5e <UART_SetConfig+0xa36>
 800be00:	e031      	b.n	800be66 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be02:	f7fb ff91 	bl	8007d28 <HAL_RCC_GetPCLK1Freq>
 800be06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800be08:	e033      	b.n	800be72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be0a:	f7fb ffa3 	bl	8007d54 <HAL_RCC_GetPCLK2Freq>
 800be0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800be10:	e02f      	b.n	800be72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be16:	4618      	mov	r0, r3
 800be18:	f7fd ff52 	bl	8009cc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800be1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be20:	e027      	b.n	800be72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be22:	f107 0318 	add.w	r3, r7, #24
 800be26:	4618      	mov	r0, r3
 800be28:	f7fe f89e 	bl	8009f68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be30:	e01f      	b.n	800be72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be32:	4b2d      	ldr	r3, [pc, #180]	; (800bee8 <UART_SetConfig+0xac0>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f003 0320 	and.w	r3, r3, #32
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d009      	beq.n	800be52 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800be3e:	4b2a      	ldr	r3, [pc, #168]	; (800bee8 <UART_SetConfig+0xac0>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	08db      	lsrs	r3, r3, #3
 800be44:	f003 0303 	and.w	r3, r3, #3
 800be48:	4a28      	ldr	r2, [pc, #160]	; (800beec <UART_SetConfig+0xac4>)
 800be4a:	fa22 f303 	lsr.w	r3, r2, r3
 800be4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800be50:	e00f      	b.n	800be72 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800be52:	4b26      	ldr	r3, [pc, #152]	; (800beec <UART_SetConfig+0xac4>)
 800be54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be56:	e00c      	b.n	800be72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800be58:	4b25      	ldr	r3, [pc, #148]	; (800bef0 <UART_SetConfig+0xac8>)
 800be5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be5c:	e009      	b.n	800be72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be64:	e005      	b.n	800be72 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800be66:	2300      	movs	r3, #0
 800be68:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800be6a:	2301      	movs	r3, #1
 800be6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800be70:	bf00      	nop
    }

    if (pclk != 0U)
 800be72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be74:	2b00      	cmp	r3, #0
 800be76:	d021      	beq.n	800bebc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be7c:	4a1d      	ldr	r2, [pc, #116]	; (800bef4 <UART_SetConfig+0xacc>)
 800be7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be82:	461a      	mov	r2, r3
 800be84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be86:	fbb3 f2f2 	udiv	r2, r3, r2
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	085b      	lsrs	r3, r3, #1
 800be90:	441a      	add	r2, r3
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	fbb2 f3f3 	udiv	r3, r2, r3
 800be9a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9e:	2b0f      	cmp	r3, #15
 800bea0:	d909      	bls.n	800beb6 <UART_SetConfig+0xa8e>
 800bea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bea8:	d205      	bcs.n	800beb6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800beaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beac:	b29a      	uxth	r2, r3
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	60da      	str	r2, [r3, #12]
 800beb4:	e002      	b.n	800bebc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800beb6:	2301      	movs	r3, #1
 800beb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	2201      	movs	r2, #1
 800bec0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	2201      	movs	r2, #1
 800bec8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	2200      	movs	r2, #0
 800bed0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	2200      	movs	r2, #0
 800bed6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800bed8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3748      	adds	r7, #72	; 0x48
 800bee0:	46bd      	mov	sp, r7
 800bee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bee6:	bf00      	nop
 800bee8:	58024400 	.word	0x58024400
 800beec:	03d09000 	.word	0x03d09000
 800bef0:	003d0900 	.word	0x003d0900
 800bef4:	0800d750 	.word	0x0800d750

0800bef8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf04:	f003 0301 	and.w	r3, r3, #1
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00a      	beq.n	800bf22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	430a      	orrs	r2, r1
 800bf20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf26:	f003 0302 	and.w	r3, r3, #2
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d00a      	beq.n	800bf44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	430a      	orrs	r2, r1
 800bf42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf48:	f003 0304 	and.w	r3, r3, #4
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d00a      	beq.n	800bf66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	430a      	orrs	r2, r1
 800bf64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf6a:	f003 0308 	and.w	r3, r3, #8
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d00a      	beq.n	800bf88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	430a      	orrs	r2, r1
 800bf86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf8c:	f003 0310 	and.w	r3, r3, #16
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d00a      	beq.n	800bfaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	689b      	ldr	r3, [r3, #8]
 800bf9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	430a      	orrs	r2, r1
 800bfa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfae:	f003 0320 	and.w	r3, r3, #32
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d00a      	beq.n	800bfcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	430a      	orrs	r2, r1
 800bfca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d01a      	beq.n	800c00e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	430a      	orrs	r2, r1
 800bfec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bff6:	d10a      	bne.n	800c00e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	430a      	orrs	r2, r1
 800c00c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c016:	2b00      	cmp	r3, #0
 800c018:	d00a      	beq.n	800c030 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	430a      	orrs	r2, r1
 800c02e:	605a      	str	r2, [r3, #4]
  }
}
 800c030:	bf00      	nop
 800c032:	370c      	adds	r7, #12
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b098      	sub	sp, #96	; 0x60
 800c040:	af02      	add	r7, sp, #8
 800c042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c04c:	f7f6 ffe8 	bl	8003020 <HAL_GetTick>
 800c050:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f003 0308 	and.w	r3, r3, #8
 800c05c:	2b08      	cmp	r3, #8
 800c05e:	d12f      	bne.n	800c0c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c060:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c064:	9300      	str	r3, [sp, #0]
 800c066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c068:	2200      	movs	r2, #0
 800c06a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 f88e 	bl	800c190 <UART_WaitOnFlagUntilTimeout>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d022      	beq.n	800c0c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c082:	e853 3f00 	ldrex	r3, [r3]
 800c086:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c08a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c08e:	653b      	str	r3, [r7, #80]	; 0x50
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	461a      	mov	r2, r3
 800c096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c098:	647b      	str	r3, [r7, #68]	; 0x44
 800c09a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c09c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c09e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0a0:	e841 2300 	strex	r3, r2, [r1]
 800c0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c0a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d1e6      	bne.n	800c07a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2220      	movs	r2, #32
 800c0b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0bc:	2303      	movs	r3, #3
 800c0be:	e063      	b.n	800c188 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f003 0304 	and.w	r3, r3, #4
 800c0ca:	2b04      	cmp	r3, #4
 800c0cc:	d149      	bne.n	800c162 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c0ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 f857 	bl	800c190 <UART_WaitOnFlagUntilTimeout>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d03c      	beq.n	800c162 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f0:	e853 3f00 	ldrex	r3, [r3]
 800c0f4:	623b      	str	r3, [r7, #32]
   return(result);
 800c0f6:	6a3b      	ldr	r3, [r7, #32]
 800c0f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c0fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	461a      	mov	r2, r3
 800c104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c106:	633b      	str	r3, [r7, #48]	; 0x30
 800c108:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c10a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c10c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c10e:	e841 2300 	strex	r3, r2, [r1]
 800c112:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1e6      	bne.n	800c0e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	3308      	adds	r3, #8
 800c120:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	e853 3f00 	ldrex	r3, [r3]
 800c128:	60fb      	str	r3, [r7, #12]
   return(result);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f023 0301 	bic.w	r3, r3, #1
 800c130:	64bb      	str	r3, [r7, #72]	; 0x48
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	3308      	adds	r3, #8
 800c138:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c13a:	61fa      	str	r2, [r7, #28]
 800c13c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c13e:	69b9      	ldr	r1, [r7, #24]
 800c140:	69fa      	ldr	r2, [r7, #28]
 800c142:	e841 2300 	strex	r3, r2, [r1]
 800c146:	617b      	str	r3, [r7, #20]
   return(result);
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d1e5      	bne.n	800c11a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2220      	movs	r2, #32
 800c152:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2200      	movs	r2, #0
 800c15a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c15e:	2303      	movs	r3, #3
 800c160:	e012      	b.n	800c188 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2220      	movs	r2, #32
 800c166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2220      	movs	r2, #32
 800c16e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2200      	movs	r2, #0
 800c17c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2200      	movs	r2, #0
 800c182:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c186:	2300      	movs	r3, #0
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3758      	adds	r7, #88	; 0x58
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b084      	sub	sp, #16
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	603b      	str	r3, [r7, #0]
 800c19c:	4613      	mov	r3, r2
 800c19e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1a0:	e049      	b.n	800c236 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1a8:	d045      	beq.n	800c236 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1aa:	f7f6 ff39 	bl	8003020 <HAL_GetTick>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	69ba      	ldr	r2, [r7, #24]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d302      	bcc.n	800c1c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d101      	bne.n	800c1c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c1c0:	2303      	movs	r3, #3
 800c1c2:	e048      	b.n	800c256 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f003 0304 	and.w	r3, r3, #4
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d031      	beq.n	800c236 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	69db      	ldr	r3, [r3, #28]
 800c1d8:	f003 0308 	and.w	r3, r3, #8
 800c1dc:	2b08      	cmp	r3, #8
 800c1de:	d110      	bne.n	800c202 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	2208      	movs	r2, #8
 800c1e6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800c1e8:	68f8      	ldr	r0, [r7, #12]
 800c1ea:	f000 f839 	bl	800c260 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2208      	movs	r2, #8
 800c1f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800c1fe:	2301      	movs	r3, #1
 800c200:	e029      	b.n	800c256 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	69db      	ldr	r3, [r3, #28]
 800c208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c20c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c210:	d111      	bne.n	800c236 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c21a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c21c:	68f8      	ldr	r0, [r7, #12]
 800c21e:	f000 f81f 	bl	800c260 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2220      	movs	r2, #32
 800c226:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c232:	2303      	movs	r3, #3
 800c234:	e00f      	b.n	800c256 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	69da      	ldr	r2, [r3, #28]
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	4013      	ands	r3, r2
 800c240:	68ba      	ldr	r2, [r7, #8]
 800c242:	429a      	cmp	r2, r3
 800c244:	bf0c      	ite	eq
 800c246:	2301      	moveq	r3, #1
 800c248:	2300      	movne	r3, #0
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	461a      	mov	r2, r3
 800c24e:	79fb      	ldrb	r3, [r7, #7]
 800c250:	429a      	cmp	r2, r3
 800c252:	d0a6      	beq.n	800c1a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c254:	2300      	movs	r3, #0
}
 800c256:	4618      	mov	r0, r3
 800c258:	3710      	adds	r7, #16
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
	...

0800c260 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c260:	b480      	push	{r7}
 800c262:	b095      	sub	sp, #84	; 0x54
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c270:	e853 3f00 	ldrex	r3, [r3]
 800c274:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c278:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c27c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	461a      	mov	r2, r3
 800c284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c286:	643b      	str	r3, [r7, #64]	; 0x40
 800c288:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c28a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c28c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c28e:	e841 2300 	strex	r3, r2, [r1]
 800c292:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c296:	2b00      	cmp	r3, #0
 800c298:	d1e6      	bne.n	800c268 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	3308      	adds	r3, #8
 800c2a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a2:	6a3b      	ldr	r3, [r7, #32]
 800c2a4:	e853 3f00 	ldrex	r3, [r3]
 800c2a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2aa:	69fa      	ldr	r2, [r7, #28]
 800c2ac:	4b1e      	ldr	r3, [pc, #120]	; (800c328 <UART_EndRxTransfer+0xc8>)
 800c2ae:	4013      	ands	r3, r2
 800c2b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	3308      	adds	r3, #8
 800c2b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c2bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2c2:	e841 2300 	strex	r3, r2, [r1]
 800c2c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d1e5      	bne.n	800c29a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2d2:	2b01      	cmp	r3, #1
 800c2d4:	d118      	bne.n	800c308 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	e853 3f00 	ldrex	r3, [r3]
 800c2e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	f023 0310 	bic.w	r3, r3, #16
 800c2ea:	647b      	str	r3, [r7, #68]	; 0x44
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2f4:	61bb      	str	r3, [r7, #24]
 800c2f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f8:	6979      	ldr	r1, [r7, #20]
 800c2fa:	69ba      	ldr	r2, [r7, #24]
 800c2fc:	e841 2300 	strex	r3, r2, [r1]
 800c300:	613b      	str	r3, [r7, #16]
   return(result);
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d1e6      	bne.n	800c2d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2220      	movs	r2, #32
 800c30c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2200      	movs	r2, #0
 800c314:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2200      	movs	r2, #0
 800c31a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c31c:	bf00      	nop
 800c31e:	3754      	adds	r7, #84	; 0x54
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr
 800c328:	effffffe 	.word	0xeffffffe

0800c32c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b085      	sub	sp, #20
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	d101      	bne.n	800c342 <HAL_UARTEx_DisableFifoMode+0x16>
 800c33e:	2302      	movs	r3, #2
 800c340:	e027      	b.n	800c392 <HAL_UARTEx_DisableFifoMode+0x66>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2201      	movs	r2, #1
 800c346:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2224      	movs	r2, #36	; 0x24
 800c34e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f022 0201 	bic.w	r2, r2, #1
 800c368:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c370:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2200      	movs	r2, #0
 800c376:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2220      	movs	r2, #32
 800c384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2200      	movs	r2, #0
 800c38c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c390:	2300      	movs	r3, #0
}
 800c392:	4618      	mov	r0, r3
 800c394:	3714      	adds	r7, #20
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr

0800c39e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b084      	sub	sp, #16
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
 800c3a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c3ae:	2b01      	cmp	r3, #1
 800c3b0:	d101      	bne.n	800c3b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c3b2:	2302      	movs	r3, #2
 800c3b4:	e02d      	b.n	800c412 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2224      	movs	r2, #36	; 0x24
 800c3c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	681a      	ldr	r2, [r3, #0]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f022 0201 	bic.w	r2, r2, #1
 800c3dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	683a      	ldr	r2, [r7, #0]
 800c3ee:	430a      	orrs	r2, r1
 800c3f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 f850 	bl	800c498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	68fa      	ldr	r2, [r7, #12]
 800c3fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2220      	movs	r2, #32
 800c404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2200      	movs	r2, #0
 800c40c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b084      	sub	sp, #16
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
 800c422:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d101      	bne.n	800c432 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c42e:	2302      	movs	r3, #2
 800c430:	e02d      	b.n	800c48e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2201      	movs	r2, #1
 800c436:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2224      	movs	r2, #36	; 0x24
 800c43e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	681a      	ldr	r2, [r3, #0]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f022 0201 	bic.w	r2, r2, #1
 800c458:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	689b      	ldr	r3, [r3, #8]
 800c460:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	683a      	ldr	r2, [r7, #0]
 800c46a:	430a      	orrs	r2, r1
 800c46c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 f812 	bl	800c498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	68fa      	ldr	r2, [r7, #12]
 800c47a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2220      	movs	r2, #32
 800c480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c48c:	2300      	movs	r3, #0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
	...

0800c498 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c498:	b480      	push	{r7}
 800c49a:	b085      	sub	sp, #20
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d108      	bne.n	800c4ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c4b8:	e031      	b.n	800c51e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c4ba:	2310      	movs	r3, #16
 800c4bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c4be:	2310      	movs	r3, #16
 800c4c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	689b      	ldr	r3, [r3, #8]
 800c4c8:	0e5b      	lsrs	r3, r3, #25
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	f003 0307 	and.w	r3, r3, #7
 800c4d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	689b      	ldr	r3, [r3, #8]
 800c4d8:	0f5b      	lsrs	r3, r3, #29
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	f003 0307 	and.w	r3, r3, #7
 800c4e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c4e2:	7bbb      	ldrb	r3, [r7, #14]
 800c4e4:	7b3a      	ldrb	r2, [r7, #12]
 800c4e6:	4911      	ldr	r1, [pc, #68]	; (800c52c <UARTEx_SetNbDataToProcess+0x94>)
 800c4e8:	5c8a      	ldrb	r2, [r1, r2]
 800c4ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c4ee:	7b3a      	ldrb	r2, [r7, #12]
 800c4f0:	490f      	ldr	r1, [pc, #60]	; (800c530 <UARTEx_SetNbDataToProcess+0x98>)
 800c4f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c4f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4f8:	b29a      	uxth	r2, r3
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c500:	7bfb      	ldrb	r3, [r7, #15]
 800c502:	7b7a      	ldrb	r2, [r7, #13]
 800c504:	4909      	ldr	r1, [pc, #36]	; (800c52c <UARTEx_SetNbDataToProcess+0x94>)
 800c506:	5c8a      	ldrb	r2, [r1, r2]
 800c508:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c50c:	7b7a      	ldrb	r2, [r7, #13]
 800c50e:	4908      	ldr	r1, [pc, #32]	; (800c530 <UARTEx_SetNbDataToProcess+0x98>)
 800c510:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c512:	fb93 f3f2 	sdiv	r3, r3, r2
 800c516:	b29a      	uxth	r2, r3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c51e:	bf00      	nop
 800c520:	3714      	adds	r7, #20
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	0800d768 	.word	0x0800d768
 800c530:	0800d770 	.word	0x0800d770

0800c534 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c534:	b480      	push	{r7}
 800c536:	b083      	sub	sp, #12
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d121      	bne.n	800c58a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	4b27      	ldr	r3, [pc, #156]	; (800c5e8 <FMC_SDRAM_Init+0xb4>)
 800c54c:	4013      	ands	r3, r2
 800c54e:	683a      	ldr	r2, [r7, #0]
 800c550:	6851      	ldr	r1, [r2, #4]
 800c552:	683a      	ldr	r2, [r7, #0]
 800c554:	6892      	ldr	r2, [r2, #8]
 800c556:	4311      	orrs	r1, r2
 800c558:	683a      	ldr	r2, [r7, #0]
 800c55a:	68d2      	ldr	r2, [r2, #12]
 800c55c:	4311      	orrs	r1, r2
 800c55e:	683a      	ldr	r2, [r7, #0]
 800c560:	6912      	ldr	r2, [r2, #16]
 800c562:	4311      	orrs	r1, r2
 800c564:	683a      	ldr	r2, [r7, #0]
 800c566:	6952      	ldr	r2, [r2, #20]
 800c568:	4311      	orrs	r1, r2
 800c56a:	683a      	ldr	r2, [r7, #0]
 800c56c:	6992      	ldr	r2, [r2, #24]
 800c56e:	4311      	orrs	r1, r2
 800c570:	683a      	ldr	r2, [r7, #0]
 800c572:	69d2      	ldr	r2, [r2, #28]
 800c574:	4311      	orrs	r1, r2
 800c576:	683a      	ldr	r2, [r7, #0]
 800c578:	6a12      	ldr	r2, [r2, #32]
 800c57a:	4311      	orrs	r1, r2
 800c57c:	683a      	ldr	r2, [r7, #0]
 800c57e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c580:	430a      	orrs	r2, r1
 800c582:	431a      	orrs	r2, r3
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	601a      	str	r2, [r3, #0]
 800c588:	e026      	b.n	800c5d8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	69d9      	ldr	r1, [r3, #28]
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	6a1b      	ldr	r3, [r3, #32]
 800c59a:	4319      	orrs	r1, r3
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a0:	430b      	orrs	r3, r1
 800c5a2:	431a      	orrs	r2, r3
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	685a      	ldr	r2, [r3, #4]
 800c5ac:	4b0e      	ldr	r3, [pc, #56]	; (800c5e8 <FMC_SDRAM_Init+0xb4>)
 800c5ae:	4013      	ands	r3, r2
 800c5b0:	683a      	ldr	r2, [r7, #0]
 800c5b2:	6851      	ldr	r1, [r2, #4]
 800c5b4:	683a      	ldr	r2, [r7, #0]
 800c5b6:	6892      	ldr	r2, [r2, #8]
 800c5b8:	4311      	orrs	r1, r2
 800c5ba:	683a      	ldr	r2, [r7, #0]
 800c5bc:	68d2      	ldr	r2, [r2, #12]
 800c5be:	4311      	orrs	r1, r2
 800c5c0:	683a      	ldr	r2, [r7, #0]
 800c5c2:	6912      	ldr	r2, [r2, #16]
 800c5c4:	4311      	orrs	r1, r2
 800c5c6:	683a      	ldr	r2, [r7, #0]
 800c5c8:	6952      	ldr	r2, [r2, #20]
 800c5ca:	4311      	orrs	r1, r2
 800c5cc:	683a      	ldr	r2, [r7, #0]
 800c5ce:	6992      	ldr	r2, [r2, #24]
 800c5d0:	430a      	orrs	r2, r1
 800c5d2:	431a      	orrs	r2, r3
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c5d8:	2300      	movs	r3, #0
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	370c      	adds	r7, #12
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr
 800c5e6:	bf00      	nop
 800c5e8:	ffff8000 	.word	0xffff8000

0800c5ec <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b085      	sub	sp, #20
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	60f8      	str	r0, [r7, #12]
 800c5f4:	60b9      	str	r1, [r7, #8]
 800c5f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d128      	bne.n	800c650 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	1e59      	subs	r1, r3, #1
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	3b01      	subs	r3, #1
 800c612:	011b      	lsls	r3, r3, #4
 800c614:	4319      	orrs	r1, r3
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	3b01      	subs	r3, #1
 800c61c:	021b      	lsls	r3, r3, #8
 800c61e:	4319      	orrs	r1, r3
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	68db      	ldr	r3, [r3, #12]
 800c624:	3b01      	subs	r3, #1
 800c626:	031b      	lsls	r3, r3, #12
 800c628:	4319      	orrs	r1, r3
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	691b      	ldr	r3, [r3, #16]
 800c62e:	3b01      	subs	r3, #1
 800c630:	041b      	lsls	r3, r3, #16
 800c632:	4319      	orrs	r1, r3
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	695b      	ldr	r3, [r3, #20]
 800c638:	3b01      	subs	r3, #1
 800c63a:	051b      	lsls	r3, r3, #20
 800c63c:	4319      	orrs	r1, r3
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	699b      	ldr	r3, [r3, #24]
 800c642:	3b01      	subs	r3, #1
 800c644:	061b      	lsls	r3, r3, #24
 800c646:	430b      	orrs	r3, r1
 800c648:	431a      	orrs	r2, r3
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	609a      	str	r2, [r3, #8]
 800c64e:	e02d      	b.n	800c6ac <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	689a      	ldr	r2, [r3, #8]
 800c654:	4b19      	ldr	r3, [pc, #100]	; (800c6bc <FMC_SDRAM_Timing_Init+0xd0>)
 800c656:	4013      	ands	r3, r2
 800c658:	68ba      	ldr	r2, [r7, #8]
 800c65a:	68d2      	ldr	r2, [r2, #12]
 800c65c:	3a01      	subs	r2, #1
 800c65e:	0311      	lsls	r1, r2, #12
 800c660:	68ba      	ldr	r2, [r7, #8]
 800c662:	6952      	ldr	r2, [r2, #20]
 800c664:	3a01      	subs	r2, #1
 800c666:	0512      	lsls	r2, r2, #20
 800c668:	430a      	orrs	r2, r1
 800c66a:	431a      	orrs	r2, r3
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	68db      	ldr	r3, [r3, #12]
 800c674:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	1e59      	subs	r1, r3, #1
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	3b01      	subs	r3, #1
 800c684:	011b      	lsls	r3, r3, #4
 800c686:	4319      	orrs	r1, r3
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	689b      	ldr	r3, [r3, #8]
 800c68c:	3b01      	subs	r3, #1
 800c68e:	021b      	lsls	r3, r3, #8
 800c690:	4319      	orrs	r1, r3
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	691b      	ldr	r3, [r3, #16]
 800c696:	3b01      	subs	r3, #1
 800c698:	041b      	lsls	r3, r3, #16
 800c69a:	4319      	orrs	r1, r3
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	699b      	ldr	r3, [r3, #24]
 800c6a0:	3b01      	subs	r3, #1
 800c6a2:	061b      	lsls	r3, r3, #24
 800c6a4:	430b      	orrs	r3, r1
 800c6a6:	431a      	orrs	r2, r3
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800c6ac:	2300      	movs	r3, #0
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3714      	adds	r7, #20
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b8:	4770      	bx	lr
 800c6ba:	bf00      	nop
 800c6bc:	ff0f0fff 	.word	0xff0f0fff

0800c6c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c6c0:	b084      	sub	sp, #16
 800c6c2:	b580      	push	{r7, lr}
 800c6c4:	b084      	sub	sp, #16
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
 800c6ca:	f107 001c 	add.w	r0, r7, #28
 800c6ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d120      	bne.n	800c71a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	68da      	ldr	r2, [r3, #12]
 800c6e8:	4b2a      	ldr	r3, [pc, #168]	; (800c794 <USB_CoreInit+0xd4>)
 800c6ea:	4013      	ands	r3, r2
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c6fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	d105      	bne.n	800c70e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 faac 	bl	800cc6c <USB_CoreReset>
 800c714:	4603      	mov	r3, r0
 800c716:	73fb      	strb	r3, [r7, #15]
 800c718:	e01a      	b.n	800c750 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	68db      	ldr	r3, [r3, #12]
 800c71e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 faa0 	bl	800cc6c <USB_CoreReset>
 800c72c:	4603      	mov	r3, r0
 800c72e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c732:	2b00      	cmp	r3, #0
 800c734:	d106      	bne.n	800c744 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c73a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	639a      	str	r2, [r3, #56]	; 0x38
 800c742:	e005      	b.n	800c750 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c748:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c752:	2b01      	cmp	r3, #1
 800c754:	d116      	bne.n	800c784 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c75a:	b29a      	uxth	r2, r3
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c764:	4b0c      	ldr	r3, [pc, #48]	; (800c798 <USB_CoreInit+0xd8>)
 800c766:	4313      	orrs	r3, r2
 800c768:	687a      	ldr	r2, [r7, #4]
 800c76a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	689b      	ldr	r3, [r3, #8]
 800c770:	f043 0206 	orr.w	r2, r3, #6
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	689b      	ldr	r3, [r3, #8]
 800c77c:	f043 0220 	orr.w	r2, r3, #32
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c784:	7bfb      	ldrb	r3, [r7, #15]
}
 800c786:	4618      	mov	r0, r3
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c790:	b004      	add	sp, #16
 800c792:	4770      	bx	lr
 800c794:	ffbdffbf 	.word	0xffbdffbf
 800c798:	03ee0000 	.word	0x03ee0000

0800c79c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	689b      	ldr	r3, [r3, #8]
 800c7a8:	f023 0201 	bic.w	r2, r3, #1
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c7b0:	2300      	movs	r3, #0
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	370c      	adds	r7, #12
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr

0800c7be <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c7be:	b580      	push	{r7, lr}
 800c7c0:	b084      	sub	sp, #16
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
 800c7c6:	460b      	mov	r3, r1
 800c7c8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c7da:	78fb      	ldrb	r3, [r7, #3]
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d115      	bne.n	800c80c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	68db      	ldr	r3, [r3, #12]
 800c7e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c7ec:	2001      	movs	r0, #1
 800c7ee:	f7f6 fc23 	bl	8003038 <HAL_Delay>
      ms++;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 fa29 	bl	800cc50 <USB_GetMode>
 800c7fe:	4603      	mov	r3, r0
 800c800:	2b01      	cmp	r3, #1
 800c802:	d01e      	beq.n	800c842 <USB_SetCurrentMode+0x84>
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	2b31      	cmp	r3, #49	; 0x31
 800c808:	d9f0      	bls.n	800c7ec <USB_SetCurrentMode+0x2e>
 800c80a:	e01a      	b.n	800c842 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c80c:	78fb      	ldrb	r3, [r7, #3]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d115      	bne.n	800c83e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	68db      	ldr	r3, [r3, #12]
 800c816:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c81e:	2001      	movs	r0, #1
 800c820:	f7f6 fc0a 	bl	8003038 <HAL_Delay>
      ms++;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	3301      	adds	r3, #1
 800c828:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 fa10 	bl	800cc50 <USB_GetMode>
 800c830:	4603      	mov	r3, r0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d005      	beq.n	800c842 <USB_SetCurrentMode+0x84>
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2b31      	cmp	r3, #49	; 0x31
 800c83a:	d9f0      	bls.n	800c81e <USB_SetCurrentMode+0x60>
 800c83c:	e001      	b.n	800c842 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c83e:	2301      	movs	r3, #1
 800c840:	e005      	b.n	800c84e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	2b32      	cmp	r3, #50	; 0x32
 800c846:	d101      	bne.n	800c84c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c848:	2301      	movs	r3, #1
 800c84a:	e000      	b.n	800c84e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c84c:	2300      	movs	r3, #0
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3710      	adds	r7, #16
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
	...

0800c858 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c858:	b084      	sub	sp, #16
 800c85a:	b580      	push	{r7, lr}
 800c85c:	b086      	sub	sp, #24
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
 800c862:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c866:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c86a:	2300      	movs	r3, #0
 800c86c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c872:	2300      	movs	r3, #0
 800c874:	613b      	str	r3, [r7, #16]
 800c876:	e009      	b.n	800c88c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c878:	687a      	ldr	r2, [r7, #4]
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	3340      	adds	r3, #64	; 0x40
 800c87e:	009b      	lsls	r3, r3, #2
 800c880:	4413      	add	r3, r2
 800c882:	2200      	movs	r2, #0
 800c884:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	3301      	adds	r3, #1
 800c88a:	613b      	str	r3, [r7, #16]
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	2b0e      	cmp	r3, #14
 800c890:	d9f2      	bls.n	800c878 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c894:	2b00      	cmp	r3, #0
 800c896:	d11c      	bne.n	800c8d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8a6:	f043 0302 	orr.w	r3, r3, #2
 800c8aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	601a      	str	r2, [r3, #0]
 800c8d0:	e005      	b.n	800c8de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	680b      	ldr	r3, [r1, #0]
 800c8fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c900:	2b01      	cmp	r3, #1
 800c902:	d10c      	bne.n	800c91e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c906:	2b00      	cmp	r3, #0
 800c908:	d104      	bne.n	800c914 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c90a:	2100      	movs	r1, #0
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f000 f965 	bl	800cbdc <USB_SetDevSpeed>
 800c912:	e008      	b.n	800c926 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c914:	2101      	movs	r1, #1
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 f960 	bl	800cbdc <USB_SetDevSpeed>
 800c91c:	e003      	b.n	800c926 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c91e:	2103      	movs	r1, #3
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 f95b 	bl	800cbdc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c926:	2110      	movs	r1, #16
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f000 f8f3 	bl	800cb14 <USB_FlushTxFifo>
 800c92e:	4603      	mov	r3, r0
 800c930:	2b00      	cmp	r3, #0
 800c932:	d001      	beq.n	800c938 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c934:	2301      	movs	r3, #1
 800c936:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 f91f 	bl	800cb7c <USB_FlushRxFifo>
 800c93e:	4603      	mov	r3, r0
 800c940:	2b00      	cmp	r3, #0
 800c942:	d001      	beq.n	800c948 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c944:	2301      	movs	r3, #1
 800c946:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c94e:	461a      	mov	r2, r3
 800c950:	2300      	movs	r3, #0
 800c952:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c95a:	461a      	mov	r2, r3
 800c95c:	2300      	movs	r3, #0
 800c95e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c966:	461a      	mov	r2, r3
 800c968:	2300      	movs	r3, #0
 800c96a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c96c:	2300      	movs	r3, #0
 800c96e:	613b      	str	r3, [r7, #16]
 800c970:	e043      	b.n	800c9fa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	015a      	lsls	r2, r3, #5
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	4413      	add	r3, r2
 800c97a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c984:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c988:	d118      	bne.n	800c9bc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d10a      	bne.n	800c9a6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	015a      	lsls	r2, r3, #5
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	4413      	add	r3, r2
 800c998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c99c:	461a      	mov	r2, r3
 800c99e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c9a2:	6013      	str	r3, [r2, #0]
 800c9a4:	e013      	b.n	800c9ce <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	015a      	lsls	r2, r3, #5
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	4413      	add	r3, r2
 800c9ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c9b8:	6013      	str	r3, [r2, #0]
 800c9ba:	e008      	b.n	800c9ce <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	015a      	lsls	r2, r3, #5
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	015a      	lsls	r2, r3, #5
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	4413      	add	r3, r2
 800c9d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9da:	461a      	mov	r2, r3
 800c9dc:	2300      	movs	r3, #0
 800c9de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	015a      	lsls	r2, r3, #5
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c9f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	3301      	adds	r3, #1
 800c9f8:	613b      	str	r3, [r7, #16]
 800c9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fc:	693a      	ldr	r2, [r7, #16]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d3b7      	bcc.n	800c972 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca02:	2300      	movs	r3, #0
 800ca04:	613b      	str	r3, [r7, #16]
 800ca06:	e043      	b.n	800ca90 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	015a      	lsls	r2, r3, #5
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	4413      	add	r3, r2
 800ca10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca1e:	d118      	bne.n	800ca52 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d10a      	bne.n	800ca3c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	015a      	lsls	r2, r3, #5
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	4413      	add	r3, r2
 800ca2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca32:	461a      	mov	r2, r3
 800ca34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ca38:	6013      	str	r3, [r2, #0]
 800ca3a:	e013      	b.n	800ca64 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	015a      	lsls	r2, r3, #5
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	4413      	add	r3, r2
 800ca44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca48:	461a      	mov	r2, r3
 800ca4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ca4e:	6013      	str	r3, [r2, #0]
 800ca50:	e008      	b.n	800ca64 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	015a      	lsls	r2, r3, #5
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	4413      	add	r3, r2
 800ca5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca5e:	461a      	mov	r2, r3
 800ca60:	2300      	movs	r3, #0
 800ca62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	015a      	lsls	r2, r3, #5
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	4413      	add	r3, r2
 800ca6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca70:	461a      	mov	r2, r3
 800ca72:	2300      	movs	r3, #0
 800ca74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	015a      	lsls	r2, r3, #5
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	4413      	add	r3, r2
 800ca7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca82:	461a      	mov	r2, r3
 800ca84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ca88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	3301      	adds	r3, #1
 800ca8e:	613b      	str	r3, [r7, #16]
 800ca90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca92:	693a      	ldr	r2, [r7, #16]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d3b7      	bcc.n	800ca08 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca9e:	691b      	ldr	r3, [r3, #16]
 800caa0:	68fa      	ldr	r2, [r7, #12]
 800caa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800caa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800caaa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2200      	movs	r2, #0
 800cab0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cab8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800caba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d105      	bne.n	800cacc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	699b      	ldr	r3, [r3, #24]
 800cac4:	f043 0210 	orr.w	r2, r3, #16
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	699a      	ldr	r2, [r3, #24]
 800cad0:	4b0e      	ldr	r3, [pc, #56]	; (800cb0c <USB_DevInit+0x2b4>)
 800cad2:	4313      	orrs	r3, r2
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d005      	beq.n	800caea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	699b      	ldr	r3, [r3, #24]
 800cae2:	f043 0208 	orr.w	r2, r3, #8
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800caea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caec:	2b01      	cmp	r3, #1
 800caee:	d105      	bne.n	800cafc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	699a      	ldr	r2, [r3, #24]
 800caf4:	4b06      	ldr	r3, [pc, #24]	; (800cb10 <USB_DevInit+0x2b8>)
 800caf6:	4313      	orrs	r3, r2
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cafc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3718      	adds	r7, #24
 800cb02:	46bd      	mov	sp, r7
 800cb04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb08:	b004      	add	sp, #16
 800cb0a:	4770      	bx	lr
 800cb0c:	803c3800 	.word	0x803c3800
 800cb10:	40000004 	.word	0x40000004

0800cb14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b085      	sub	sp, #20
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	3301      	adds	r3, #1
 800cb26:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	4a13      	ldr	r2, [pc, #76]	; (800cb78 <USB_FlushTxFifo+0x64>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d901      	bls.n	800cb34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cb30:	2303      	movs	r3, #3
 800cb32:	e01b      	b.n	800cb6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	691b      	ldr	r3, [r3, #16]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	daf2      	bge.n	800cb22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	019b      	lsls	r3, r3, #6
 800cb44:	f043 0220 	orr.w	r2, r3, #32
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	4a08      	ldr	r2, [pc, #32]	; (800cb78 <USB_FlushTxFifo+0x64>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d901      	bls.n	800cb5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cb5a:	2303      	movs	r3, #3
 800cb5c:	e006      	b.n	800cb6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	691b      	ldr	r3, [r3, #16]
 800cb62:	f003 0320 	and.w	r3, r3, #32
 800cb66:	2b20      	cmp	r3, #32
 800cb68:	d0f0      	beq.n	800cb4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cb6a:	2300      	movs	r3, #0
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3714      	adds	r7, #20
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr
 800cb78:	00030d40 	.word	0x00030d40

0800cb7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b085      	sub	sp, #20
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cb84:	2300      	movs	r3, #0
 800cb86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	4a11      	ldr	r2, [pc, #68]	; (800cbd8 <USB_FlushRxFifo+0x5c>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d901      	bls.n	800cb9a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cb96:	2303      	movs	r3, #3
 800cb98:	e018      	b.n	800cbcc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	daf2      	bge.n	800cb88 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cba2:	2300      	movs	r3, #0
 800cba4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2210      	movs	r2, #16
 800cbaa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	3301      	adds	r3, #1
 800cbb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	4a08      	ldr	r2, [pc, #32]	; (800cbd8 <USB_FlushRxFifo+0x5c>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d901      	bls.n	800cbbe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cbba:	2303      	movs	r3, #3
 800cbbc:	e006      	b.n	800cbcc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	691b      	ldr	r3, [r3, #16]
 800cbc2:	f003 0310 	and.w	r3, r3, #16
 800cbc6:	2b10      	cmp	r3, #16
 800cbc8:	d0f0      	beq.n	800cbac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cbca:	2300      	movs	r3, #0
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3714      	adds	r7, #20
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd6:	4770      	bx	lr
 800cbd8:	00030d40 	.word	0x00030d40

0800cbdc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b085      	sub	sp, #20
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	460b      	mov	r3, r1
 800cbe6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbf2:	681a      	ldr	r2, [r3, #0]
 800cbf4:	78fb      	ldrb	r3, [r7, #3]
 800cbf6:	68f9      	ldr	r1, [r7, #12]
 800cbf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cc00:	2300      	movs	r3, #0
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3714      	adds	r7, #20
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr

0800cc0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cc0e:	b480      	push	{r7}
 800cc10:	b085      	sub	sp, #20
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	68fa      	ldr	r2, [r7, #12]
 800cc24:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cc28:	f023 0303 	bic.w	r3, r3, #3
 800cc2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	68fa      	ldr	r2, [r7, #12]
 800cc38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc3c:	f043 0302 	orr.w	r3, r3, #2
 800cc40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cc42:	2300      	movs	r3, #0
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3714      	adds	r7, #20
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr

0800cc50 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b083      	sub	sp, #12
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	695b      	ldr	r3, [r3, #20]
 800cc5c:	f003 0301 	and.w	r3, r3, #1
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	370c      	adds	r7, #12
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b085      	sub	sp, #20
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cc74:	2300      	movs	r3, #0
 800cc76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	4a13      	ldr	r2, [pc, #76]	; (800ccd0 <USB_CoreReset+0x64>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d901      	bls.n	800cc8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cc86:	2303      	movs	r3, #3
 800cc88:	e01b      	b.n	800ccc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	691b      	ldr	r3, [r3, #16]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	daf2      	bge.n	800cc78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cc92:	2300      	movs	r3, #0
 800cc94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	691b      	ldr	r3, [r3, #16]
 800cc9a:	f043 0201 	orr.w	r2, r3, #1
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	3301      	adds	r3, #1
 800cca6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	4a09      	ldr	r2, [pc, #36]	; (800ccd0 <USB_CoreReset+0x64>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d901      	bls.n	800ccb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ccb0:	2303      	movs	r3, #3
 800ccb2:	e006      	b.n	800ccc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	691b      	ldr	r3, [r3, #16]
 800ccb8:	f003 0301 	and.w	r3, r3, #1
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	d0f0      	beq.n	800cca2 <USB_CoreReset+0x36>

  return HAL_OK;
 800ccc0:	2300      	movs	r3, #0
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3714      	adds	r7, #20
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr
 800ccce:	bf00      	nop
 800ccd0:	00030d40 	.word	0x00030d40

0800ccd4 <sniprintf>:
 800ccd4:	b40c      	push	{r2, r3}
 800ccd6:	b530      	push	{r4, r5, lr}
 800ccd8:	4b17      	ldr	r3, [pc, #92]	; (800cd38 <sniprintf+0x64>)
 800ccda:	1e0c      	subs	r4, r1, #0
 800ccdc:	681d      	ldr	r5, [r3, #0]
 800ccde:	b09d      	sub	sp, #116	; 0x74
 800cce0:	da08      	bge.n	800ccf4 <sniprintf+0x20>
 800cce2:	238b      	movs	r3, #139	; 0x8b
 800cce4:	602b      	str	r3, [r5, #0]
 800cce6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccea:	b01d      	add	sp, #116	; 0x74
 800ccec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ccf0:	b002      	add	sp, #8
 800ccf2:	4770      	bx	lr
 800ccf4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ccf8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ccfc:	bf14      	ite	ne
 800ccfe:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cd02:	4623      	moveq	r3, r4
 800cd04:	9304      	str	r3, [sp, #16]
 800cd06:	9307      	str	r3, [sp, #28]
 800cd08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cd0c:	9002      	str	r0, [sp, #8]
 800cd0e:	9006      	str	r0, [sp, #24]
 800cd10:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cd14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cd16:	ab21      	add	r3, sp, #132	; 0x84
 800cd18:	a902      	add	r1, sp, #8
 800cd1a:	4628      	mov	r0, r5
 800cd1c:	9301      	str	r3, [sp, #4]
 800cd1e:	f000 f9a1 	bl	800d064 <_svfiprintf_r>
 800cd22:	1c43      	adds	r3, r0, #1
 800cd24:	bfbc      	itt	lt
 800cd26:	238b      	movlt	r3, #139	; 0x8b
 800cd28:	602b      	strlt	r3, [r5, #0]
 800cd2a:	2c00      	cmp	r4, #0
 800cd2c:	d0dd      	beq.n	800ccea <sniprintf+0x16>
 800cd2e:	9b02      	ldr	r3, [sp, #8]
 800cd30:	2200      	movs	r2, #0
 800cd32:	701a      	strb	r2, [r3, #0]
 800cd34:	e7d9      	b.n	800ccea <sniprintf+0x16>
 800cd36:	bf00      	nop
 800cd38:	2400005c 	.word	0x2400005c

0800cd3c <memset>:
 800cd3c:	4402      	add	r2, r0
 800cd3e:	4603      	mov	r3, r0
 800cd40:	4293      	cmp	r3, r2
 800cd42:	d100      	bne.n	800cd46 <memset+0xa>
 800cd44:	4770      	bx	lr
 800cd46:	f803 1b01 	strb.w	r1, [r3], #1
 800cd4a:	e7f9      	b.n	800cd40 <memset+0x4>

0800cd4c <__errno>:
 800cd4c:	4b01      	ldr	r3, [pc, #4]	; (800cd54 <__errno+0x8>)
 800cd4e:	6818      	ldr	r0, [r3, #0]
 800cd50:	4770      	bx	lr
 800cd52:	bf00      	nop
 800cd54:	2400005c 	.word	0x2400005c

0800cd58 <__libc_init_array>:
 800cd58:	b570      	push	{r4, r5, r6, lr}
 800cd5a:	4d0d      	ldr	r5, [pc, #52]	; (800cd90 <__libc_init_array+0x38>)
 800cd5c:	4c0d      	ldr	r4, [pc, #52]	; (800cd94 <__libc_init_array+0x3c>)
 800cd5e:	1b64      	subs	r4, r4, r5
 800cd60:	10a4      	asrs	r4, r4, #2
 800cd62:	2600      	movs	r6, #0
 800cd64:	42a6      	cmp	r6, r4
 800cd66:	d109      	bne.n	800cd7c <__libc_init_array+0x24>
 800cd68:	4d0b      	ldr	r5, [pc, #44]	; (800cd98 <__libc_init_array+0x40>)
 800cd6a:	4c0c      	ldr	r4, [pc, #48]	; (800cd9c <__libc_init_array+0x44>)
 800cd6c:	f000 fc6a 	bl	800d644 <_init>
 800cd70:	1b64      	subs	r4, r4, r5
 800cd72:	10a4      	asrs	r4, r4, #2
 800cd74:	2600      	movs	r6, #0
 800cd76:	42a6      	cmp	r6, r4
 800cd78:	d105      	bne.n	800cd86 <__libc_init_array+0x2e>
 800cd7a:	bd70      	pop	{r4, r5, r6, pc}
 800cd7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd80:	4798      	blx	r3
 800cd82:	3601      	adds	r6, #1
 800cd84:	e7ee      	b.n	800cd64 <__libc_init_array+0xc>
 800cd86:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd8a:	4798      	blx	r3
 800cd8c:	3601      	adds	r6, #1
 800cd8e:	e7f2      	b.n	800cd76 <__libc_init_array+0x1e>
 800cd90:	0800d7b4 	.word	0x0800d7b4
 800cd94:	0800d7b4 	.word	0x0800d7b4
 800cd98:	0800d7b4 	.word	0x0800d7b4
 800cd9c:	0800d7b8 	.word	0x0800d7b8

0800cda0 <__retarget_lock_acquire_recursive>:
 800cda0:	4770      	bx	lr

0800cda2 <__retarget_lock_release_recursive>:
 800cda2:	4770      	bx	lr

0800cda4 <memcpy>:
 800cda4:	440a      	add	r2, r1
 800cda6:	4291      	cmp	r1, r2
 800cda8:	f100 33ff 	add.w	r3, r0, #4294967295
 800cdac:	d100      	bne.n	800cdb0 <memcpy+0xc>
 800cdae:	4770      	bx	lr
 800cdb0:	b510      	push	{r4, lr}
 800cdb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdba:	4291      	cmp	r1, r2
 800cdbc:	d1f9      	bne.n	800cdb2 <memcpy+0xe>
 800cdbe:	bd10      	pop	{r4, pc}

0800cdc0 <_free_r>:
 800cdc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdc2:	2900      	cmp	r1, #0
 800cdc4:	d044      	beq.n	800ce50 <_free_r+0x90>
 800cdc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdca:	9001      	str	r0, [sp, #4]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	f1a1 0404 	sub.w	r4, r1, #4
 800cdd2:	bfb8      	it	lt
 800cdd4:	18e4      	addlt	r4, r4, r3
 800cdd6:	f000 f8df 	bl	800cf98 <__malloc_lock>
 800cdda:	4a1e      	ldr	r2, [pc, #120]	; (800ce54 <_free_r+0x94>)
 800cddc:	9801      	ldr	r0, [sp, #4]
 800cdde:	6813      	ldr	r3, [r2, #0]
 800cde0:	b933      	cbnz	r3, 800cdf0 <_free_r+0x30>
 800cde2:	6063      	str	r3, [r4, #4]
 800cde4:	6014      	str	r4, [r2, #0]
 800cde6:	b003      	add	sp, #12
 800cde8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdec:	f000 b8da 	b.w	800cfa4 <__malloc_unlock>
 800cdf0:	42a3      	cmp	r3, r4
 800cdf2:	d908      	bls.n	800ce06 <_free_r+0x46>
 800cdf4:	6825      	ldr	r5, [r4, #0]
 800cdf6:	1961      	adds	r1, r4, r5
 800cdf8:	428b      	cmp	r3, r1
 800cdfa:	bf01      	itttt	eq
 800cdfc:	6819      	ldreq	r1, [r3, #0]
 800cdfe:	685b      	ldreq	r3, [r3, #4]
 800ce00:	1949      	addeq	r1, r1, r5
 800ce02:	6021      	streq	r1, [r4, #0]
 800ce04:	e7ed      	b.n	800cde2 <_free_r+0x22>
 800ce06:	461a      	mov	r2, r3
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	b10b      	cbz	r3, 800ce10 <_free_r+0x50>
 800ce0c:	42a3      	cmp	r3, r4
 800ce0e:	d9fa      	bls.n	800ce06 <_free_r+0x46>
 800ce10:	6811      	ldr	r1, [r2, #0]
 800ce12:	1855      	adds	r5, r2, r1
 800ce14:	42a5      	cmp	r5, r4
 800ce16:	d10b      	bne.n	800ce30 <_free_r+0x70>
 800ce18:	6824      	ldr	r4, [r4, #0]
 800ce1a:	4421      	add	r1, r4
 800ce1c:	1854      	adds	r4, r2, r1
 800ce1e:	42a3      	cmp	r3, r4
 800ce20:	6011      	str	r1, [r2, #0]
 800ce22:	d1e0      	bne.n	800cde6 <_free_r+0x26>
 800ce24:	681c      	ldr	r4, [r3, #0]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	6053      	str	r3, [r2, #4]
 800ce2a:	440c      	add	r4, r1
 800ce2c:	6014      	str	r4, [r2, #0]
 800ce2e:	e7da      	b.n	800cde6 <_free_r+0x26>
 800ce30:	d902      	bls.n	800ce38 <_free_r+0x78>
 800ce32:	230c      	movs	r3, #12
 800ce34:	6003      	str	r3, [r0, #0]
 800ce36:	e7d6      	b.n	800cde6 <_free_r+0x26>
 800ce38:	6825      	ldr	r5, [r4, #0]
 800ce3a:	1961      	adds	r1, r4, r5
 800ce3c:	428b      	cmp	r3, r1
 800ce3e:	bf04      	itt	eq
 800ce40:	6819      	ldreq	r1, [r3, #0]
 800ce42:	685b      	ldreq	r3, [r3, #4]
 800ce44:	6063      	str	r3, [r4, #4]
 800ce46:	bf04      	itt	eq
 800ce48:	1949      	addeq	r1, r1, r5
 800ce4a:	6021      	streq	r1, [r4, #0]
 800ce4c:	6054      	str	r4, [r2, #4]
 800ce4e:	e7ca      	b.n	800cde6 <_free_r+0x26>
 800ce50:	b003      	add	sp, #12
 800ce52:	bd30      	pop	{r4, r5, pc}
 800ce54:	2400123c 	.word	0x2400123c

0800ce58 <sbrk_aligned>:
 800ce58:	b570      	push	{r4, r5, r6, lr}
 800ce5a:	4e0e      	ldr	r6, [pc, #56]	; (800ce94 <sbrk_aligned+0x3c>)
 800ce5c:	460c      	mov	r4, r1
 800ce5e:	6831      	ldr	r1, [r6, #0]
 800ce60:	4605      	mov	r5, r0
 800ce62:	b911      	cbnz	r1, 800ce6a <sbrk_aligned+0x12>
 800ce64:	f000 fba6 	bl	800d5b4 <_sbrk_r>
 800ce68:	6030      	str	r0, [r6, #0]
 800ce6a:	4621      	mov	r1, r4
 800ce6c:	4628      	mov	r0, r5
 800ce6e:	f000 fba1 	bl	800d5b4 <_sbrk_r>
 800ce72:	1c43      	adds	r3, r0, #1
 800ce74:	d00a      	beq.n	800ce8c <sbrk_aligned+0x34>
 800ce76:	1cc4      	adds	r4, r0, #3
 800ce78:	f024 0403 	bic.w	r4, r4, #3
 800ce7c:	42a0      	cmp	r0, r4
 800ce7e:	d007      	beq.n	800ce90 <sbrk_aligned+0x38>
 800ce80:	1a21      	subs	r1, r4, r0
 800ce82:	4628      	mov	r0, r5
 800ce84:	f000 fb96 	bl	800d5b4 <_sbrk_r>
 800ce88:	3001      	adds	r0, #1
 800ce8a:	d101      	bne.n	800ce90 <sbrk_aligned+0x38>
 800ce8c:	f04f 34ff 	mov.w	r4, #4294967295
 800ce90:	4620      	mov	r0, r4
 800ce92:	bd70      	pop	{r4, r5, r6, pc}
 800ce94:	24001240 	.word	0x24001240

0800ce98 <_malloc_r>:
 800ce98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce9c:	1ccd      	adds	r5, r1, #3
 800ce9e:	f025 0503 	bic.w	r5, r5, #3
 800cea2:	3508      	adds	r5, #8
 800cea4:	2d0c      	cmp	r5, #12
 800cea6:	bf38      	it	cc
 800cea8:	250c      	movcc	r5, #12
 800ceaa:	2d00      	cmp	r5, #0
 800ceac:	4607      	mov	r7, r0
 800ceae:	db01      	blt.n	800ceb4 <_malloc_r+0x1c>
 800ceb0:	42a9      	cmp	r1, r5
 800ceb2:	d905      	bls.n	800cec0 <_malloc_r+0x28>
 800ceb4:	230c      	movs	r3, #12
 800ceb6:	603b      	str	r3, [r7, #0]
 800ceb8:	2600      	movs	r6, #0
 800ceba:	4630      	mov	r0, r6
 800cebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cec0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cf94 <_malloc_r+0xfc>
 800cec4:	f000 f868 	bl	800cf98 <__malloc_lock>
 800cec8:	f8d8 3000 	ldr.w	r3, [r8]
 800cecc:	461c      	mov	r4, r3
 800cece:	bb5c      	cbnz	r4, 800cf28 <_malloc_r+0x90>
 800ced0:	4629      	mov	r1, r5
 800ced2:	4638      	mov	r0, r7
 800ced4:	f7ff ffc0 	bl	800ce58 <sbrk_aligned>
 800ced8:	1c43      	adds	r3, r0, #1
 800ceda:	4604      	mov	r4, r0
 800cedc:	d155      	bne.n	800cf8a <_malloc_r+0xf2>
 800cede:	f8d8 4000 	ldr.w	r4, [r8]
 800cee2:	4626      	mov	r6, r4
 800cee4:	2e00      	cmp	r6, #0
 800cee6:	d145      	bne.n	800cf74 <_malloc_r+0xdc>
 800cee8:	2c00      	cmp	r4, #0
 800ceea:	d048      	beq.n	800cf7e <_malloc_r+0xe6>
 800ceec:	6823      	ldr	r3, [r4, #0]
 800ceee:	4631      	mov	r1, r6
 800cef0:	4638      	mov	r0, r7
 800cef2:	eb04 0903 	add.w	r9, r4, r3
 800cef6:	f000 fb5d 	bl	800d5b4 <_sbrk_r>
 800cefa:	4581      	cmp	r9, r0
 800cefc:	d13f      	bne.n	800cf7e <_malloc_r+0xe6>
 800cefe:	6821      	ldr	r1, [r4, #0]
 800cf00:	1a6d      	subs	r5, r5, r1
 800cf02:	4629      	mov	r1, r5
 800cf04:	4638      	mov	r0, r7
 800cf06:	f7ff ffa7 	bl	800ce58 <sbrk_aligned>
 800cf0a:	3001      	adds	r0, #1
 800cf0c:	d037      	beq.n	800cf7e <_malloc_r+0xe6>
 800cf0e:	6823      	ldr	r3, [r4, #0]
 800cf10:	442b      	add	r3, r5
 800cf12:	6023      	str	r3, [r4, #0]
 800cf14:	f8d8 3000 	ldr.w	r3, [r8]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d038      	beq.n	800cf8e <_malloc_r+0xf6>
 800cf1c:	685a      	ldr	r2, [r3, #4]
 800cf1e:	42a2      	cmp	r2, r4
 800cf20:	d12b      	bne.n	800cf7a <_malloc_r+0xe2>
 800cf22:	2200      	movs	r2, #0
 800cf24:	605a      	str	r2, [r3, #4]
 800cf26:	e00f      	b.n	800cf48 <_malloc_r+0xb0>
 800cf28:	6822      	ldr	r2, [r4, #0]
 800cf2a:	1b52      	subs	r2, r2, r5
 800cf2c:	d41f      	bmi.n	800cf6e <_malloc_r+0xd6>
 800cf2e:	2a0b      	cmp	r2, #11
 800cf30:	d917      	bls.n	800cf62 <_malloc_r+0xca>
 800cf32:	1961      	adds	r1, r4, r5
 800cf34:	42a3      	cmp	r3, r4
 800cf36:	6025      	str	r5, [r4, #0]
 800cf38:	bf18      	it	ne
 800cf3a:	6059      	strne	r1, [r3, #4]
 800cf3c:	6863      	ldr	r3, [r4, #4]
 800cf3e:	bf08      	it	eq
 800cf40:	f8c8 1000 	streq.w	r1, [r8]
 800cf44:	5162      	str	r2, [r4, r5]
 800cf46:	604b      	str	r3, [r1, #4]
 800cf48:	4638      	mov	r0, r7
 800cf4a:	f104 060b 	add.w	r6, r4, #11
 800cf4e:	f000 f829 	bl	800cfa4 <__malloc_unlock>
 800cf52:	f026 0607 	bic.w	r6, r6, #7
 800cf56:	1d23      	adds	r3, r4, #4
 800cf58:	1af2      	subs	r2, r6, r3
 800cf5a:	d0ae      	beq.n	800ceba <_malloc_r+0x22>
 800cf5c:	1b9b      	subs	r3, r3, r6
 800cf5e:	50a3      	str	r3, [r4, r2]
 800cf60:	e7ab      	b.n	800ceba <_malloc_r+0x22>
 800cf62:	42a3      	cmp	r3, r4
 800cf64:	6862      	ldr	r2, [r4, #4]
 800cf66:	d1dd      	bne.n	800cf24 <_malloc_r+0x8c>
 800cf68:	f8c8 2000 	str.w	r2, [r8]
 800cf6c:	e7ec      	b.n	800cf48 <_malloc_r+0xb0>
 800cf6e:	4623      	mov	r3, r4
 800cf70:	6864      	ldr	r4, [r4, #4]
 800cf72:	e7ac      	b.n	800cece <_malloc_r+0x36>
 800cf74:	4634      	mov	r4, r6
 800cf76:	6876      	ldr	r6, [r6, #4]
 800cf78:	e7b4      	b.n	800cee4 <_malloc_r+0x4c>
 800cf7a:	4613      	mov	r3, r2
 800cf7c:	e7cc      	b.n	800cf18 <_malloc_r+0x80>
 800cf7e:	230c      	movs	r3, #12
 800cf80:	603b      	str	r3, [r7, #0]
 800cf82:	4638      	mov	r0, r7
 800cf84:	f000 f80e 	bl	800cfa4 <__malloc_unlock>
 800cf88:	e797      	b.n	800ceba <_malloc_r+0x22>
 800cf8a:	6025      	str	r5, [r4, #0]
 800cf8c:	e7dc      	b.n	800cf48 <_malloc_r+0xb0>
 800cf8e:	605b      	str	r3, [r3, #4]
 800cf90:	deff      	udf	#255	; 0xff
 800cf92:	bf00      	nop
 800cf94:	2400123c 	.word	0x2400123c

0800cf98 <__malloc_lock>:
 800cf98:	4801      	ldr	r0, [pc, #4]	; (800cfa0 <__malloc_lock+0x8>)
 800cf9a:	f7ff bf01 	b.w	800cda0 <__retarget_lock_acquire_recursive>
 800cf9e:	bf00      	nop
 800cfa0:	24001238 	.word	0x24001238

0800cfa4 <__malloc_unlock>:
 800cfa4:	4801      	ldr	r0, [pc, #4]	; (800cfac <__malloc_unlock+0x8>)
 800cfa6:	f7ff befc 	b.w	800cda2 <__retarget_lock_release_recursive>
 800cfaa:	bf00      	nop
 800cfac:	24001238 	.word	0x24001238

0800cfb0 <__ssputs_r>:
 800cfb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfb4:	688e      	ldr	r6, [r1, #8]
 800cfb6:	461f      	mov	r7, r3
 800cfb8:	42be      	cmp	r6, r7
 800cfba:	680b      	ldr	r3, [r1, #0]
 800cfbc:	4682      	mov	sl, r0
 800cfbe:	460c      	mov	r4, r1
 800cfc0:	4690      	mov	r8, r2
 800cfc2:	d82c      	bhi.n	800d01e <__ssputs_r+0x6e>
 800cfc4:	898a      	ldrh	r2, [r1, #12]
 800cfc6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cfca:	d026      	beq.n	800d01a <__ssputs_r+0x6a>
 800cfcc:	6965      	ldr	r5, [r4, #20]
 800cfce:	6909      	ldr	r1, [r1, #16]
 800cfd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cfd4:	eba3 0901 	sub.w	r9, r3, r1
 800cfd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cfdc:	1c7b      	adds	r3, r7, #1
 800cfde:	444b      	add	r3, r9
 800cfe0:	106d      	asrs	r5, r5, #1
 800cfe2:	429d      	cmp	r5, r3
 800cfe4:	bf38      	it	cc
 800cfe6:	461d      	movcc	r5, r3
 800cfe8:	0553      	lsls	r3, r2, #21
 800cfea:	d527      	bpl.n	800d03c <__ssputs_r+0x8c>
 800cfec:	4629      	mov	r1, r5
 800cfee:	f7ff ff53 	bl	800ce98 <_malloc_r>
 800cff2:	4606      	mov	r6, r0
 800cff4:	b360      	cbz	r0, 800d050 <__ssputs_r+0xa0>
 800cff6:	6921      	ldr	r1, [r4, #16]
 800cff8:	464a      	mov	r2, r9
 800cffa:	f7ff fed3 	bl	800cda4 <memcpy>
 800cffe:	89a3      	ldrh	r3, [r4, #12]
 800d000:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d008:	81a3      	strh	r3, [r4, #12]
 800d00a:	6126      	str	r6, [r4, #16]
 800d00c:	6165      	str	r5, [r4, #20]
 800d00e:	444e      	add	r6, r9
 800d010:	eba5 0509 	sub.w	r5, r5, r9
 800d014:	6026      	str	r6, [r4, #0]
 800d016:	60a5      	str	r5, [r4, #8]
 800d018:	463e      	mov	r6, r7
 800d01a:	42be      	cmp	r6, r7
 800d01c:	d900      	bls.n	800d020 <__ssputs_r+0x70>
 800d01e:	463e      	mov	r6, r7
 800d020:	6820      	ldr	r0, [r4, #0]
 800d022:	4632      	mov	r2, r6
 800d024:	4641      	mov	r1, r8
 800d026:	f000 faab 	bl	800d580 <memmove>
 800d02a:	68a3      	ldr	r3, [r4, #8]
 800d02c:	1b9b      	subs	r3, r3, r6
 800d02e:	60a3      	str	r3, [r4, #8]
 800d030:	6823      	ldr	r3, [r4, #0]
 800d032:	4433      	add	r3, r6
 800d034:	6023      	str	r3, [r4, #0]
 800d036:	2000      	movs	r0, #0
 800d038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d03c:	462a      	mov	r2, r5
 800d03e:	f000 fac9 	bl	800d5d4 <_realloc_r>
 800d042:	4606      	mov	r6, r0
 800d044:	2800      	cmp	r0, #0
 800d046:	d1e0      	bne.n	800d00a <__ssputs_r+0x5a>
 800d048:	6921      	ldr	r1, [r4, #16]
 800d04a:	4650      	mov	r0, sl
 800d04c:	f7ff feb8 	bl	800cdc0 <_free_r>
 800d050:	230c      	movs	r3, #12
 800d052:	f8ca 3000 	str.w	r3, [sl]
 800d056:	89a3      	ldrh	r3, [r4, #12]
 800d058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d05c:	81a3      	strh	r3, [r4, #12]
 800d05e:	f04f 30ff 	mov.w	r0, #4294967295
 800d062:	e7e9      	b.n	800d038 <__ssputs_r+0x88>

0800d064 <_svfiprintf_r>:
 800d064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d068:	4698      	mov	r8, r3
 800d06a:	898b      	ldrh	r3, [r1, #12]
 800d06c:	061b      	lsls	r3, r3, #24
 800d06e:	b09d      	sub	sp, #116	; 0x74
 800d070:	4607      	mov	r7, r0
 800d072:	460d      	mov	r5, r1
 800d074:	4614      	mov	r4, r2
 800d076:	d50e      	bpl.n	800d096 <_svfiprintf_r+0x32>
 800d078:	690b      	ldr	r3, [r1, #16]
 800d07a:	b963      	cbnz	r3, 800d096 <_svfiprintf_r+0x32>
 800d07c:	2140      	movs	r1, #64	; 0x40
 800d07e:	f7ff ff0b 	bl	800ce98 <_malloc_r>
 800d082:	6028      	str	r0, [r5, #0]
 800d084:	6128      	str	r0, [r5, #16]
 800d086:	b920      	cbnz	r0, 800d092 <_svfiprintf_r+0x2e>
 800d088:	230c      	movs	r3, #12
 800d08a:	603b      	str	r3, [r7, #0]
 800d08c:	f04f 30ff 	mov.w	r0, #4294967295
 800d090:	e0d0      	b.n	800d234 <_svfiprintf_r+0x1d0>
 800d092:	2340      	movs	r3, #64	; 0x40
 800d094:	616b      	str	r3, [r5, #20]
 800d096:	2300      	movs	r3, #0
 800d098:	9309      	str	r3, [sp, #36]	; 0x24
 800d09a:	2320      	movs	r3, #32
 800d09c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0a4:	2330      	movs	r3, #48	; 0x30
 800d0a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d24c <_svfiprintf_r+0x1e8>
 800d0aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0ae:	f04f 0901 	mov.w	r9, #1
 800d0b2:	4623      	mov	r3, r4
 800d0b4:	469a      	mov	sl, r3
 800d0b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0ba:	b10a      	cbz	r2, 800d0c0 <_svfiprintf_r+0x5c>
 800d0bc:	2a25      	cmp	r2, #37	; 0x25
 800d0be:	d1f9      	bne.n	800d0b4 <_svfiprintf_r+0x50>
 800d0c0:	ebba 0b04 	subs.w	fp, sl, r4
 800d0c4:	d00b      	beq.n	800d0de <_svfiprintf_r+0x7a>
 800d0c6:	465b      	mov	r3, fp
 800d0c8:	4622      	mov	r2, r4
 800d0ca:	4629      	mov	r1, r5
 800d0cc:	4638      	mov	r0, r7
 800d0ce:	f7ff ff6f 	bl	800cfb0 <__ssputs_r>
 800d0d2:	3001      	adds	r0, #1
 800d0d4:	f000 80a9 	beq.w	800d22a <_svfiprintf_r+0x1c6>
 800d0d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0da:	445a      	add	r2, fp
 800d0dc:	9209      	str	r2, [sp, #36]	; 0x24
 800d0de:	f89a 3000 	ldrb.w	r3, [sl]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	f000 80a1 	beq.w	800d22a <_svfiprintf_r+0x1c6>
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0f2:	f10a 0a01 	add.w	sl, sl, #1
 800d0f6:	9304      	str	r3, [sp, #16]
 800d0f8:	9307      	str	r3, [sp, #28]
 800d0fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0fe:	931a      	str	r3, [sp, #104]	; 0x68
 800d100:	4654      	mov	r4, sl
 800d102:	2205      	movs	r2, #5
 800d104:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d108:	4850      	ldr	r0, [pc, #320]	; (800d24c <_svfiprintf_r+0x1e8>)
 800d10a:	f7f3 f8f1 	bl	80002f0 <memchr>
 800d10e:	9a04      	ldr	r2, [sp, #16]
 800d110:	b9d8      	cbnz	r0, 800d14a <_svfiprintf_r+0xe6>
 800d112:	06d0      	lsls	r0, r2, #27
 800d114:	bf44      	itt	mi
 800d116:	2320      	movmi	r3, #32
 800d118:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d11c:	0711      	lsls	r1, r2, #28
 800d11e:	bf44      	itt	mi
 800d120:	232b      	movmi	r3, #43	; 0x2b
 800d122:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d126:	f89a 3000 	ldrb.w	r3, [sl]
 800d12a:	2b2a      	cmp	r3, #42	; 0x2a
 800d12c:	d015      	beq.n	800d15a <_svfiprintf_r+0xf6>
 800d12e:	9a07      	ldr	r2, [sp, #28]
 800d130:	4654      	mov	r4, sl
 800d132:	2000      	movs	r0, #0
 800d134:	f04f 0c0a 	mov.w	ip, #10
 800d138:	4621      	mov	r1, r4
 800d13a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d13e:	3b30      	subs	r3, #48	; 0x30
 800d140:	2b09      	cmp	r3, #9
 800d142:	d94d      	bls.n	800d1e0 <_svfiprintf_r+0x17c>
 800d144:	b1b0      	cbz	r0, 800d174 <_svfiprintf_r+0x110>
 800d146:	9207      	str	r2, [sp, #28]
 800d148:	e014      	b.n	800d174 <_svfiprintf_r+0x110>
 800d14a:	eba0 0308 	sub.w	r3, r0, r8
 800d14e:	fa09 f303 	lsl.w	r3, r9, r3
 800d152:	4313      	orrs	r3, r2
 800d154:	9304      	str	r3, [sp, #16]
 800d156:	46a2      	mov	sl, r4
 800d158:	e7d2      	b.n	800d100 <_svfiprintf_r+0x9c>
 800d15a:	9b03      	ldr	r3, [sp, #12]
 800d15c:	1d19      	adds	r1, r3, #4
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	9103      	str	r1, [sp, #12]
 800d162:	2b00      	cmp	r3, #0
 800d164:	bfbb      	ittet	lt
 800d166:	425b      	neglt	r3, r3
 800d168:	f042 0202 	orrlt.w	r2, r2, #2
 800d16c:	9307      	strge	r3, [sp, #28]
 800d16e:	9307      	strlt	r3, [sp, #28]
 800d170:	bfb8      	it	lt
 800d172:	9204      	strlt	r2, [sp, #16]
 800d174:	7823      	ldrb	r3, [r4, #0]
 800d176:	2b2e      	cmp	r3, #46	; 0x2e
 800d178:	d10c      	bne.n	800d194 <_svfiprintf_r+0x130>
 800d17a:	7863      	ldrb	r3, [r4, #1]
 800d17c:	2b2a      	cmp	r3, #42	; 0x2a
 800d17e:	d134      	bne.n	800d1ea <_svfiprintf_r+0x186>
 800d180:	9b03      	ldr	r3, [sp, #12]
 800d182:	1d1a      	adds	r2, r3, #4
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	9203      	str	r2, [sp, #12]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	bfb8      	it	lt
 800d18c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d190:	3402      	adds	r4, #2
 800d192:	9305      	str	r3, [sp, #20]
 800d194:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d25c <_svfiprintf_r+0x1f8>
 800d198:	7821      	ldrb	r1, [r4, #0]
 800d19a:	2203      	movs	r2, #3
 800d19c:	4650      	mov	r0, sl
 800d19e:	f7f3 f8a7 	bl	80002f0 <memchr>
 800d1a2:	b138      	cbz	r0, 800d1b4 <_svfiprintf_r+0x150>
 800d1a4:	9b04      	ldr	r3, [sp, #16]
 800d1a6:	eba0 000a 	sub.w	r0, r0, sl
 800d1aa:	2240      	movs	r2, #64	; 0x40
 800d1ac:	4082      	lsls	r2, r0
 800d1ae:	4313      	orrs	r3, r2
 800d1b0:	3401      	adds	r4, #1
 800d1b2:	9304      	str	r3, [sp, #16]
 800d1b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1b8:	4825      	ldr	r0, [pc, #148]	; (800d250 <_svfiprintf_r+0x1ec>)
 800d1ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1be:	2206      	movs	r2, #6
 800d1c0:	f7f3 f896 	bl	80002f0 <memchr>
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	d038      	beq.n	800d23a <_svfiprintf_r+0x1d6>
 800d1c8:	4b22      	ldr	r3, [pc, #136]	; (800d254 <_svfiprintf_r+0x1f0>)
 800d1ca:	bb1b      	cbnz	r3, 800d214 <_svfiprintf_r+0x1b0>
 800d1cc:	9b03      	ldr	r3, [sp, #12]
 800d1ce:	3307      	adds	r3, #7
 800d1d0:	f023 0307 	bic.w	r3, r3, #7
 800d1d4:	3308      	adds	r3, #8
 800d1d6:	9303      	str	r3, [sp, #12]
 800d1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1da:	4433      	add	r3, r6
 800d1dc:	9309      	str	r3, [sp, #36]	; 0x24
 800d1de:	e768      	b.n	800d0b2 <_svfiprintf_r+0x4e>
 800d1e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1e4:	460c      	mov	r4, r1
 800d1e6:	2001      	movs	r0, #1
 800d1e8:	e7a6      	b.n	800d138 <_svfiprintf_r+0xd4>
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	3401      	adds	r4, #1
 800d1ee:	9305      	str	r3, [sp, #20]
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	f04f 0c0a 	mov.w	ip, #10
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1fc:	3a30      	subs	r2, #48	; 0x30
 800d1fe:	2a09      	cmp	r2, #9
 800d200:	d903      	bls.n	800d20a <_svfiprintf_r+0x1a6>
 800d202:	2b00      	cmp	r3, #0
 800d204:	d0c6      	beq.n	800d194 <_svfiprintf_r+0x130>
 800d206:	9105      	str	r1, [sp, #20]
 800d208:	e7c4      	b.n	800d194 <_svfiprintf_r+0x130>
 800d20a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d20e:	4604      	mov	r4, r0
 800d210:	2301      	movs	r3, #1
 800d212:	e7f0      	b.n	800d1f6 <_svfiprintf_r+0x192>
 800d214:	ab03      	add	r3, sp, #12
 800d216:	9300      	str	r3, [sp, #0]
 800d218:	462a      	mov	r2, r5
 800d21a:	4b0f      	ldr	r3, [pc, #60]	; (800d258 <_svfiprintf_r+0x1f4>)
 800d21c:	a904      	add	r1, sp, #16
 800d21e:	4638      	mov	r0, r7
 800d220:	f3af 8000 	nop.w
 800d224:	1c42      	adds	r2, r0, #1
 800d226:	4606      	mov	r6, r0
 800d228:	d1d6      	bne.n	800d1d8 <_svfiprintf_r+0x174>
 800d22a:	89ab      	ldrh	r3, [r5, #12]
 800d22c:	065b      	lsls	r3, r3, #25
 800d22e:	f53f af2d 	bmi.w	800d08c <_svfiprintf_r+0x28>
 800d232:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d234:	b01d      	add	sp, #116	; 0x74
 800d236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d23a:	ab03      	add	r3, sp, #12
 800d23c:	9300      	str	r3, [sp, #0]
 800d23e:	462a      	mov	r2, r5
 800d240:	4b05      	ldr	r3, [pc, #20]	; (800d258 <_svfiprintf_r+0x1f4>)
 800d242:	a904      	add	r1, sp, #16
 800d244:	4638      	mov	r0, r7
 800d246:	f000 f879 	bl	800d33c <_printf_i>
 800d24a:	e7eb      	b.n	800d224 <_svfiprintf_r+0x1c0>
 800d24c:	0800d778 	.word	0x0800d778
 800d250:	0800d782 	.word	0x0800d782
 800d254:	00000000 	.word	0x00000000
 800d258:	0800cfb1 	.word	0x0800cfb1
 800d25c:	0800d77e 	.word	0x0800d77e

0800d260 <_printf_common>:
 800d260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d264:	4616      	mov	r6, r2
 800d266:	4699      	mov	r9, r3
 800d268:	688a      	ldr	r2, [r1, #8]
 800d26a:	690b      	ldr	r3, [r1, #16]
 800d26c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d270:	4293      	cmp	r3, r2
 800d272:	bfb8      	it	lt
 800d274:	4613      	movlt	r3, r2
 800d276:	6033      	str	r3, [r6, #0]
 800d278:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d27c:	4607      	mov	r7, r0
 800d27e:	460c      	mov	r4, r1
 800d280:	b10a      	cbz	r2, 800d286 <_printf_common+0x26>
 800d282:	3301      	adds	r3, #1
 800d284:	6033      	str	r3, [r6, #0]
 800d286:	6823      	ldr	r3, [r4, #0]
 800d288:	0699      	lsls	r1, r3, #26
 800d28a:	bf42      	ittt	mi
 800d28c:	6833      	ldrmi	r3, [r6, #0]
 800d28e:	3302      	addmi	r3, #2
 800d290:	6033      	strmi	r3, [r6, #0]
 800d292:	6825      	ldr	r5, [r4, #0]
 800d294:	f015 0506 	ands.w	r5, r5, #6
 800d298:	d106      	bne.n	800d2a8 <_printf_common+0x48>
 800d29a:	f104 0a19 	add.w	sl, r4, #25
 800d29e:	68e3      	ldr	r3, [r4, #12]
 800d2a0:	6832      	ldr	r2, [r6, #0]
 800d2a2:	1a9b      	subs	r3, r3, r2
 800d2a4:	42ab      	cmp	r3, r5
 800d2a6:	dc26      	bgt.n	800d2f6 <_printf_common+0x96>
 800d2a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d2ac:	1e13      	subs	r3, r2, #0
 800d2ae:	6822      	ldr	r2, [r4, #0]
 800d2b0:	bf18      	it	ne
 800d2b2:	2301      	movne	r3, #1
 800d2b4:	0692      	lsls	r2, r2, #26
 800d2b6:	d42b      	bmi.n	800d310 <_printf_common+0xb0>
 800d2b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d2bc:	4649      	mov	r1, r9
 800d2be:	4638      	mov	r0, r7
 800d2c0:	47c0      	blx	r8
 800d2c2:	3001      	adds	r0, #1
 800d2c4:	d01e      	beq.n	800d304 <_printf_common+0xa4>
 800d2c6:	6823      	ldr	r3, [r4, #0]
 800d2c8:	6922      	ldr	r2, [r4, #16]
 800d2ca:	f003 0306 	and.w	r3, r3, #6
 800d2ce:	2b04      	cmp	r3, #4
 800d2d0:	bf02      	ittt	eq
 800d2d2:	68e5      	ldreq	r5, [r4, #12]
 800d2d4:	6833      	ldreq	r3, [r6, #0]
 800d2d6:	1aed      	subeq	r5, r5, r3
 800d2d8:	68a3      	ldr	r3, [r4, #8]
 800d2da:	bf0c      	ite	eq
 800d2dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d2e0:	2500      	movne	r5, #0
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	bfc4      	itt	gt
 800d2e6:	1a9b      	subgt	r3, r3, r2
 800d2e8:	18ed      	addgt	r5, r5, r3
 800d2ea:	2600      	movs	r6, #0
 800d2ec:	341a      	adds	r4, #26
 800d2ee:	42b5      	cmp	r5, r6
 800d2f0:	d11a      	bne.n	800d328 <_printf_common+0xc8>
 800d2f2:	2000      	movs	r0, #0
 800d2f4:	e008      	b.n	800d308 <_printf_common+0xa8>
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	4652      	mov	r2, sl
 800d2fa:	4649      	mov	r1, r9
 800d2fc:	4638      	mov	r0, r7
 800d2fe:	47c0      	blx	r8
 800d300:	3001      	adds	r0, #1
 800d302:	d103      	bne.n	800d30c <_printf_common+0xac>
 800d304:	f04f 30ff 	mov.w	r0, #4294967295
 800d308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d30c:	3501      	adds	r5, #1
 800d30e:	e7c6      	b.n	800d29e <_printf_common+0x3e>
 800d310:	18e1      	adds	r1, r4, r3
 800d312:	1c5a      	adds	r2, r3, #1
 800d314:	2030      	movs	r0, #48	; 0x30
 800d316:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d31a:	4422      	add	r2, r4
 800d31c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d320:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d324:	3302      	adds	r3, #2
 800d326:	e7c7      	b.n	800d2b8 <_printf_common+0x58>
 800d328:	2301      	movs	r3, #1
 800d32a:	4622      	mov	r2, r4
 800d32c:	4649      	mov	r1, r9
 800d32e:	4638      	mov	r0, r7
 800d330:	47c0      	blx	r8
 800d332:	3001      	adds	r0, #1
 800d334:	d0e6      	beq.n	800d304 <_printf_common+0xa4>
 800d336:	3601      	adds	r6, #1
 800d338:	e7d9      	b.n	800d2ee <_printf_common+0x8e>
	...

0800d33c <_printf_i>:
 800d33c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d340:	7e0f      	ldrb	r7, [r1, #24]
 800d342:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d344:	2f78      	cmp	r7, #120	; 0x78
 800d346:	4691      	mov	r9, r2
 800d348:	4680      	mov	r8, r0
 800d34a:	460c      	mov	r4, r1
 800d34c:	469a      	mov	sl, r3
 800d34e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d352:	d807      	bhi.n	800d364 <_printf_i+0x28>
 800d354:	2f62      	cmp	r7, #98	; 0x62
 800d356:	d80a      	bhi.n	800d36e <_printf_i+0x32>
 800d358:	2f00      	cmp	r7, #0
 800d35a:	f000 80d4 	beq.w	800d506 <_printf_i+0x1ca>
 800d35e:	2f58      	cmp	r7, #88	; 0x58
 800d360:	f000 80c0 	beq.w	800d4e4 <_printf_i+0x1a8>
 800d364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d368:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d36c:	e03a      	b.n	800d3e4 <_printf_i+0xa8>
 800d36e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d372:	2b15      	cmp	r3, #21
 800d374:	d8f6      	bhi.n	800d364 <_printf_i+0x28>
 800d376:	a101      	add	r1, pc, #4	; (adr r1, 800d37c <_printf_i+0x40>)
 800d378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d37c:	0800d3d5 	.word	0x0800d3d5
 800d380:	0800d3e9 	.word	0x0800d3e9
 800d384:	0800d365 	.word	0x0800d365
 800d388:	0800d365 	.word	0x0800d365
 800d38c:	0800d365 	.word	0x0800d365
 800d390:	0800d365 	.word	0x0800d365
 800d394:	0800d3e9 	.word	0x0800d3e9
 800d398:	0800d365 	.word	0x0800d365
 800d39c:	0800d365 	.word	0x0800d365
 800d3a0:	0800d365 	.word	0x0800d365
 800d3a4:	0800d365 	.word	0x0800d365
 800d3a8:	0800d4ed 	.word	0x0800d4ed
 800d3ac:	0800d415 	.word	0x0800d415
 800d3b0:	0800d4a7 	.word	0x0800d4a7
 800d3b4:	0800d365 	.word	0x0800d365
 800d3b8:	0800d365 	.word	0x0800d365
 800d3bc:	0800d50f 	.word	0x0800d50f
 800d3c0:	0800d365 	.word	0x0800d365
 800d3c4:	0800d415 	.word	0x0800d415
 800d3c8:	0800d365 	.word	0x0800d365
 800d3cc:	0800d365 	.word	0x0800d365
 800d3d0:	0800d4af 	.word	0x0800d4af
 800d3d4:	682b      	ldr	r3, [r5, #0]
 800d3d6:	1d1a      	adds	r2, r3, #4
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	602a      	str	r2, [r5, #0]
 800d3dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	e09f      	b.n	800d528 <_printf_i+0x1ec>
 800d3e8:	6820      	ldr	r0, [r4, #0]
 800d3ea:	682b      	ldr	r3, [r5, #0]
 800d3ec:	0607      	lsls	r7, r0, #24
 800d3ee:	f103 0104 	add.w	r1, r3, #4
 800d3f2:	6029      	str	r1, [r5, #0]
 800d3f4:	d501      	bpl.n	800d3fa <_printf_i+0xbe>
 800d3f6:	681e      	ldr	r6, [r3, #0]
 800d3f8:	e003      	b.n	800d402 <_printf_i+0xc6>
 800d3fa:	0646      	lsls	r6, r0, #25
 800d3fc:	d5fb      	bpl.n	800d3f6 <_printf_i+0xba>
 800d3fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d402:	2e00      	cmp	r6, #0
 800d404:	da03      	bge.n	800d40e <_printf_i+0xd2>
 800d406:	232d      	movs	r3, #45	; 0x2d
 800d408:	4276      	negs	r6, r6
 800d40a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d40e:	485a      	ldr	r0, [pc, #360]	; (800d578 <_printf_i+0x23c>)
 800d410:	230a      	movs	r3, #10
 800d412:	e012      	b.n	800d43a <_printf_i+0xfe>
 800d414:	682b      	ldr	r3, [r5, #0]
 800d416:	6820      	ldr	r0, [r4, #0]
 800d418:	1d19      	adds	r1, r3, #4
 800d41a:	6029      	str	r1, [r5, #0]
 800d41c:	0605      	lsls	r5, r0, #24
 800d41e:	d501      	bpl.n	800d424 <_printf_i+0xe8>
 800d420:	681e      	ldr	r6, [r3, #0]
 800d422:	e002      	b.n	800d42a <_printf_i+0xee>
 800d424:	0641      	lsls	r1, r0, #25
 800d426:	d5fb      	bpl.n	800d420 <_printf_i+0xe4>
 800d428:	881e      	ldrh	r6, [r3, #0]
 800d42a:	4853      	ldr	r0, [pc, #332]	; (800d578 <_printf_i+0x23c>)
 800d42c:	2f6f      	cmp	r7, #111	; 0x6f
 800d42e:	bf0c      	ite	eq
 800d430:	2308      	moveq	r3, #8
 800d432:	230a      	movne	r3, #10
 800d434:	2100      	movs	r1, #0
 800d436:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d43a:	6865      	ldr	r5, [r4, #4]
 800d43c:	60a5      	str	r5, [r4, #8]
 800d43e:	2d00      	cmp	r5, #0
 800d440:	bfa2      	ittt	ge
 800d442:	6821      	ldrge	r1, [r4, #0]
 800d444:	f021 0104 	bicge.w	r1, r1, #4
 800d448:	6021      	strge	r1, [r4, #0]
 800d44a:	b90e      	cbnz	r6, 800d450 <_printf_i+0x114>
 800d44c:	2d00      	cmp	r5, #0
 800d44e:	d04b      	beq.n	800d4e8 <_printf_i+0x1ac>
 800d450:	4615      	mov	r5, r2
 800d452:	fbb6 f1f3 	udiv	r1, r6, r3
 800d456:	fb03 6711 	mls	r7, r3, r1, r6
 800d45a:	5dc7      	ldrb	r7, [r0, r7]
 800d45c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d460:	4637      	mov	r7, r6
 800d462:	42bb      	cmp	r3, r7
 800d464:	460e      	mov	r6, r1
 800d466:	d9f4      	bls.n	800d452 <_printf_i+0x116>
 800d468:	2b08      	cmp	r3, #8
 800d46a:	d10b      	bne.n	800d484 <_printf_i+0x148>
 800d46c:	6823      	ldr	r3, [r4, #0]
 800d46e:	07de      	lsls	r6, r3, #31
 800d470:	d508      	bpl.n	800d484 <_printf_i+0x148>
 800d472:	6923      	ldr	r3, [r4, #16]
 800d474:	6861      	ldr	r1, [r4, #4]
 800d476:	4299      	cmp	r1, r3
 800d478:	bfde      	ittt	le
 800d47a:	2330      	movle	r3, #48	; 0x30
 800d47c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d480:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d484:	1b52      	subs	r2, r2, r5
 800d486:	6122      	str	r2, [r4, #16]
 800d488:	f8cd a000 	str.w	sl, [sp]
 800d48c:	464b      	mov	r3, r9
 800d48e:	aa03      	add	r2, sp, #12
 800d490:	4621      	mov	r1, r4
 800d492:	4640      	mov	r0, r8
 800d494:	f7ff fee4 	bl	800d260 <_printf_common>
 800d498:	3001      	adds	r0, #1
 800d49a:	d14a      	bne.n	800d532 <_printf_i+0x1f6>
 800d49c:	f04f 30ff 	mov.w	r0, #4294967295
 800d4a0:	b004      	add	sp, #16
 800d4a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4a6:	6823      	ldr	r3, [r4, #0]
 800d4a8:	f043 0320 	orr.w	r3, r3, #32
 800d4ac:	6023      	str	r3, [r4, #0]
 800d4ae:	4833      	ldr	r0, [pc, #204]	; (800d57c <_printf_i+0x240>)
 800d4b0:	2778      	movs	r7, #120	; 0x78
 800d4b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d4b6:	6823      	ldr	r3, [r4, #0]
 800d4b8:	6829      	ldr	r1, [r5, #0]
 800d4ba:	061f      	lsls	r7, r3, #24
 800d4bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800d4c0:	d402      	bmi.n	800d4c8 <_printf_i+0x18c>
 800d4c2:	065f      	lsls	r7, r3, #25
 800d4c4:	bf48      	it	mi
 800d4c6:	b2b6      	uxthmi	r6, r6
 800d4c8:	07df      	lsls	r7, r3, #31
 800d4ca:	bf48      	it	mi
 800d4cc:	f043 0320 	orrmi.w	r3, r3, #32
 800d4d0:	6029      	str	r1, [r5, #0]
 800d4d2:	bf48      	it	mi
 800d4d4:	6023      	strmi	r3, [r4, #0]
 800d4d6:	b91e      	cbnz	r6, 800d4e0 <_printf_i+0x1a4>
 800d4d8:	6823      	ldr	r3, [r4, #0]
 800d4da:	f023 0320 	bic.w	r3, r3, #32
 800d4de:	6023      	str	r3, [r4, #0]
 800d4e0:	2310      	movs	r3, #16
 800d4e2:	e7a7      	b.n	800d434 <_printf_i+0xf8>
 800d4e4:	4824      	ldr	r0, [pc, #144]	; (800d578 <_printf_i+0x23c>)
 800d4e6:	e7e4      	b.n	800d4b2 <_printf_i+0x176>
 800d4e8:	4615      	mov	r5, r2
 800d4ea:	e7bd      	b.n	800d468 <_printf_i+0x12c>
 800d4ec:	682b      	ldr	r3, [r5, #0]
 800d4ee:	6826      	ldr	r6, [r4, #0]
 800d4f0:	6961      	ldr	r1, [r4, #20]
 800d4f2:	1d18      	adds	r0, r3, #4
 800d4f4:	6028      	str	r0, [r5, #0]
 800d4f6:	0635      	lsls	r5, r6, #24
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	d501      	bpl.n	800d500 <_printf_i+0x1c4>
 800d4fc:	6019      	str	r1, [r3, #0]
 800d4fe:	e002      	b.n	800d506 <_printf_i+0x1ca>
 800d500:	0670      	lsls	r0, r6, #25
 800d502:	d5fb      	bpl.n	800d4fc <_printf_i+0x1c0>
 800d504:	8019      	strh	r1, [r3, #0]
 800d506:	2300      	movs	r3, #0
 800d508:	6123      	str	r3, [r4, #16]
 800d50a:	4615      	mov	r5, r2
 800d50c:	e7bc      	b.n	800d488 <_printf_i+0x14c>
 800d50e:	682b      	ldr	r3, [r5, #0]
 800d510:	1d1a      	adds	r2, r3, #4
 800d512:	602a      	str	r2, [r5, #0]
 800d514:	681d      	ldr	r5, [r3, #0]
 800d516:	6862      	ldr	r2, [r4, #4]
 800d518:	2100      	movs	r1, #0
 800d51a:	4628      	mov	r0, r5
 800d51c:	f7f2 fee8 	bl	80002f0 <memchr>
 800d520:	b108      	cbz	r0, 800d526 <_printf_i+0x1ea>
 800d522:	1b40      	subs	r0, r0, r5
 800d524:	6060      	str	r0, [r4, #4]
 800d526:	6863      	ldr	r3, [r4, #4]
 800d528:	6123      	str	r3, [r4, #16]
 800d52a:	2300      	movs	r3, #0
 800d52c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d530:	e7aa      	b.n	800d488 <_printf_i+0x14c>
 800d532:	6923      	ldr	r3, [r4, #16]
 800d534:	462a      	mov	r2, r5
 800d536:	4649      	mov	r1, r9
 800d538:	4640      	mov	r0, r8
 800d53a:	47d0      	blx	sl
 800d53c:	3001      	adds	r0, #1
 800d53e:	d0ad      	beq.n	800d49c <_printf_i+0x160>
 800d540:	6823      	ldr	r3, [r4, #0]
 800d542:	079b      	lsls	r3, r3, #30
 800d544:	d413      	bmi.n	800d56e <_printf_i+0x232>
 800d546:	68e0      	ldr	r0, [r4, #12]
 800d548:	9b03      	ldr	r3, [sp, #12]
 800d54a:	4298      	cmp	r0, r3
 800d54c:	bfb8      	it	lt
 800d54e:	4618      	movlt	r0, r3
 800d550:	e7a6      	b.n	800d4a0 <_printf_i+0x164>
 800d552:	2301      	movs	r3, #1
 800d554:	4632      	mov	r2, r6
 800d556:	4649      	mov	r1, r9
 800d558:	4640      	mov	r0, r8
 800d55a:	47d0      	blx	sl
 800d55c:	3001      	adds	r0, #1
 800d55e:	d09d      	beq.n	800d49c <_printf_i+0x160>
 800d560:	3501      	adds	r5, #1
 800d562:	68e3      	ldr	r3, [r4, #12]
 800d564:	9903      	ldr	r1, [sp, #12]
 800d566:	1a5b      	subs	r3, r3, r1
 800d568:	42ab      	cmp	r3, r5
 800d56a:	dcf2      	bgt.n	800d552 <_printf_i+0x216>
 800d56c:	e7eb      	b.n	800d546 <_printf_i+0x20a>
 800d56e:	2500      	movs	r5, #0
 800d570:	f104 0619 	add.w	r6, r4, #25
 800d574:	e7f5      	b.n	800d562 <_printf_i+0x226>
 800d576:	bf00      	nop
 800d578:	0800d789 	.word	0x0800d789
 800d57c:	0800d79a 	.word	0x0800d79a

0800d580 <memmove>:
 800d580:	4288      	cmp	r0, r1
 800d582:	b510      	push	{r4, lr}
 800d584:	eb01 0402 	add.w	r4, r1, r2
 800d588:	d902      	bls.n	800d590 <memmove+0x10>
 800d58a:	4284      	cmp	r4, r0
 800d58c:	4623      	mov	r3, r4
 800d58e:	d807      	bhi.n	800d5a0 <memmove+0x20>
 800d590:	1e43      	subs	r3, r0, #1
 800d592:	42a1      	cmp	r1, r4
 800d594:	d008      	beq.n	800d5a8 <memmove+0x28>
 800d596:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d59a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d59e:	e7f8      	b.n	800d592 <memmove+0x12>
 800d5a0:	4402      	add	r2, r0
 800d5a2:	4601      	mov	r1, r0
 800d5a4:	428a      	cmp	r2, r1
 800d5a6:	d100      	bne.n	800d5aa <memmove+0x2a>
 800d5a8:	bd10      	pop	{r4, pc}
 800d5aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d5ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d5b2:	e7f7      	b.n	800d5a4 <memmove+0x24>

0800d5b4 <_sbrk_r>:
 800d5b4:	b538      	push	{r3, r4, r5, lr}
 800d5b6:	4d06      	ldr	r5, [pc, #24]	; (800d5d0 <_sbrk_r+0x1c>)
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	4604      	mov	r4, r0
 800d5bc:	4608      	mov	r0, r1
 800d5be:	602b      	str	r3, [r5, #0]
 800d5c0:	f7f5 fbc0 	bl	8002d44 <_sbrk>
 800d5c4:	1c43      	adds	r3, r0, #1
 800d5c6:	d102      	bne.n	800d5ce <_sbrk_r+0x1a>
 800d5c8:	682b      	ldr	r3, [r5, #0]
 800d5ca:	b103      	cbz	r3, 800d5ce <_sbrk_r+0x1a>
 800d5cc:	6023      	str	r3, [r4, #0]
 800d5ce:	bd38      	pop	{r3, r4, r5, pc}
 800d5d0:	24001234 	.word	0x24001234

0800d5d4 <_realloc_r>:
 800d5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5d8:	4680      	mov	r8, r0
 800d5da:	4614      	mov	r4, r2
 800d5dc:	460e      	mov	r6, r1
 800d5de:	b921      	cbnz	r1, 800d5ea <_realloc_r+0x16>
 800d5e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e4:	4611      	mov	r1, r2
 800d5e6:	f7ff bc57 	b.w	800ce98 <_malloc_r>
 800d5ea:	b92a      	cbnz	r2, 800d5f8 <_realloc_r+0x24>
 800d5ec:	f7ff fbe8 	bl	800cdc0 <_free_r>
 800d5f0:	4625      	mov	r5, r4
 800d5f2:	4628      	mov	r0, r5
 800d5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5f8:	f000 f81b 	bl	800d632 <_malloc_usable_size_r>
 800d5fc:	4284      	cmp	r4, r0
 800d5fe:	4607      	mov	r7, r0
 800d600:	d802      	bhi.n	800d608 <_realloc_r+0x34>
 800d602:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d606:	d812      	bhi.n	800d62e <_realloc_r+0x5a>
 800d608:	4621      	mov	r1, r4
 800d60a:	4640      	mov	r0, r8
 800d60c:	f7ff fc44 	bl	800ce98 <_malloc_r>
 800d610:	4605      	mov	r5, r0
 800d612:	2800      	cmp	r0, #0
 800d614:	d0ed      	beq.n	800d5f2 <_realloc_r+0x1e>
 800d616:	42bc      	cmp	r4, r7
 800d618:	4622      	mov	r2, r4
 800d61a:	4631      	mov	r1, r6
 800d61c:	bf28      	it	cs
 800d61e:	463a      	movcs	r2, r7
 800d620:	f7ff fbc0 	bl	800cda4 <memcpy>
 800d624:	4631      	mov	r1, r6
 800d626:	4640      	mov	r0, r8
 800d628:	f7ff fbca 	bl	800cdc0 <_free_r>
 800d62c:	e7e1      	b.n	800d5f2 <_realloc_r+0x1e>
 800d62e:	4635      	mov	r5, r6
 800d630:	e7df      	b.n	800d5f2 <_realloc_r+0x1e>

0800d632 <_malloc_usable_size_r>:
 800d632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d636:	1f18      	subs	r0, r3, #4
 800d638:	2b00      	cmp	r3, #0
 800d63a:	bfbc      	itt	lt
 800d63c:	580b      	ldrlt	r3, [r1, r0]
 800d63e:	18c0      	addlt	r0, r0, r3
 800d640:	4770      	bx	lr
	...

0800d644 <_init>:
 800d644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d646:	bf00      	nop
 800d648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d64a:	bc08      	pop	{r3}
 800d64c:	469e      	mov	lr, r3
 800d64e:	4770      	bx	lr

0800d650 <_fini>:
 800d650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d652:	bf00      	nop
 800d654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d656:	bc08      	pop	{r3}
 800d658:	469e      	mov	lr, r3
 800d65a:	4770      	bx	lr
