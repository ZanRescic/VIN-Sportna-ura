
STM32H750B-DK_Oximeter_5_Click.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e158  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  0800e3f8  0800e3f8  0001e3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e654  0800e654  0001e654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e65c  0800e65c  0001e65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e660  0800e660  0001e660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  0800e664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000060  0800e6c4  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c0  0800e724  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001170  24000120  0800e784  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001290  0800e784  00021290  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002014e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000306e3  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004852  00000000  00000000  00050874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002398  00000000  00000000  000550c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001bd1  00000000  00000000  00057460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000417cf  00000000  00000000  00059031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002eba8  00000000  00000000  0009a800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019d47f  00000000  00000000  000c93a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a2f4  00000000  00000000  00266828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00270b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e3e0 	.word	0x0800e3e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	0800e3e0 	.word	0x0800e3e0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f003 faf6 	bl	8003c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 fa12 	bl	8000abc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000698:	f000 fa9c 	bl	8000bd4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f001 f840 	bl	8001720 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006a0:	f000 fac8 	bl	8000c34 <MX_ADC1_Init>
  MX_ADC2_Init();
 80006a4:	f000 fb3e 	bl	8000d24 <MX_ADC2_Init>
  MX_ADC3_Init();
 80006a8:	f000 fba0 	bl	8000dec <MX_ADC3_Init>
  MX_ETH_Init();
 80006ac:	f000 fc00 	bl	8000eb0 <MX_ETH_Init>
  MX_FDCAN1_Init();
 80006b0:	f000 fc4a 	bl	8000f48 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80006b4:	f000 fcac 	bl	8001010 <MX_FDCAN2_Init>
  MX_FMC_Init();
 80006b8:	f000 ffe4 	bl	8001684 <MX_FMC_Init>
  MX_LTDC_Init();
 80006bc:	f000 fd4c 	bl	8001158 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80006c0:	f000 fdfc 	bl	80012bc <MX_QUADSPI_Init>
  MX_RTC_Init();
 80006c4:	f000 fe26 	bl	8001314 <MX_RTC_Init>
  MX_SAI2_Init();
 80006c8:	f000 fe4c 	bl	8001364 <MX_SAI2_Init>
  MX_SPI2_Init();
 80006cc:	f000 ff08 	bl	80014e0 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80006d0:	f000 ff5a 	bl	8001588 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006d4:	f000 ffa4 	bl	8001620 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C4_Init();
 80006d8:	f000 fcfe 	bl	80010d8 <MX_I2C4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  application_init();
 80006dc:	f000 f804 	bl	80006e8 <application_init>
  while (1)
  {

	  application_task();
 80006e0:	f000 f86e 	bl	80007c0 <application_task>
 80006e4:	e7fc      	b.n	80006e0 <main+0x54>
	...

080006e8 <application_init>:
  }
  /* USER CODE END 3 */
}

void application_init ( void ){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
	// Click initialization.
	if (oximeter5_init() != HAL_ERROR){
 80006ee:	f001 f9d7 	bl	8001aa0 <oximeter5_init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d050      	beq.n	800079a <application_init+0xb2>
		if (oximeter5_default_cfg() != HAL_ERROR){
 80006f8:	f001 fa12 	bl	8001b20 <oximeter5_default_cfg>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d04b      	beq.n	800079a <application_init+0xb2>
			HAL_Delay ( 100 );
 8000702:	2064      	movs	r0, #100	; 0x64
 8000704:	f003 fb4e 	bl	8003da4 <HAL_Delay>
			un_brightness = 0;
 8000708:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <application_init+0xbc>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
			un_min = 0x3FFFF;
 800070e:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <application_init+0xc0>)
 8000710:	4a26      	ldr	r2, [pc, #152]	; (80007ac <application_init+0xc4>)
 8000712:	601a      	str	r2, [r3, #0]
			un_max = 0;
 8000714:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <application_init+0xc8>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
			for ( uint8_t n_cnt = 0; n_cnt < 100; n_cnt++ )
 800071a:	2300      	movs	r3, #0
 800071c:	71fb      	strb	r3, [r7, #7]
 800071e:	e030      	b.n	8000782 <application_init+0x9a>
			{
				while ( oximeter5_check_interrupt() == OXIMETER5_INTERRUPT_ACTIVE );
 8000720:	bf00      	nop
 8000722:	f001 fbaf 	bl	8001e84 <oximeter5_check_interrupt>
 8000726:	4603      	mov	r3, r0
 8000728:	2b01      	cmp	r3, #1
 800072a:	d0fa      	beq.n	8000722 <application_init+0x3a>

				oximeter5_read_sensor_data( &aun_red_buffer[ n_cnt ], &aun_ir_buffer[ n_cnt ] );
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	4a20      	ldr	r2, [pc, #128]	; (80007b4 <application_init+0xcc>)
 8000732:	441a      	add	r2, r3
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	491f      	ldr	r1, [pc, #124]	; (80007b8 <application_init+0xd0>)
 800073a:	440b      	add	r3, r1
 800073c:	4619      	mov	r1, r3
 800073e:	4610      	mov	r0, r2
 8000740:	f001 fbc4 	bl	8001ecc <oximeter5_read_sensor_data>

				if ( un_min > aun_red_buffer[ n_cnt ] )
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	4a1b      	ldr	r2, [pc, #108]	; (80007b4 <application_init+0xcc>)
 8000748:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800074c:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <application_init+0xc0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	429a      	cmp	r2, r3
 8000752:	d205      	bcs.n	8000760 <application_init+0x78>
				{
				un_min = aun_red_buffer[ n_cnt ];
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	4a17      	ldr	r2, [pc, #92]	; (80007b4 <application_init+0xcc>)
 8000758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800075c:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <application_init+0xc0>)
 800075e:	6013      	str	r3, [r2, #0]
				}

				if ( un_max < aun_red_buffer[ n_cnt ] )
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <application_init+0xcc>)
 8000764:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <application_init+0xc8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	429a      	cmp	r2, r3
 800076e:	d905      	bls.n	800077c <application_init+0x94>
				{
				un_max = aun_red_buffer[ n_cnt ];
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	4a10      	ldr	r2, [pc, #64]	; (80007b4 <application_init+0xcc>)
 8000774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000778:	4a0d      	ldr	r2, [pc, #52]	; (80007b0 <application_init+0xc8>)
 800077a:	6013      	str	r3, [r2, #0]
			for ( uint8_t n_cnt = 0; n_cnt < 100; n_cnt++ )
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	3301      	adds	r3, #1
 8000780:	71fb      	strb	r3, [r7, #7]
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b63      	cmp	r3, #99	; 0x63
 8000786:	d9cb      	bls.n	8000720 <application_init+0x38>
				}
			}
			oximeter5_get_oxygen_saturation( &aun_ir_buffer[ 0 ], 100, &aun_red_buffer[ 0 ], &n_spo2 );
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <application_init+0xd4>)
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <application_init+0xcc>)
 800078c:	2164      	movs	r1, #100	; 0x64
 800078e:	480a      	ldr	r0, [pc, #40]	; (80007b8 <application_init+0xd0>)
 8000790:	f001 fbf0 	bl	8001f74 <oximeter5_get_oxygen_saturation>

			HAL_Delay ( 100 );
 8000794:	2064      	movs	r0, #100	; 0x64
 8000796:	f003 fb05 	bl	8003da4 <HAL_Delay>
		}
	}
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	240010b4 	.word	0x240010b4
 80007a8:	240010a8 	.word	0x240010a8
 80007ac:	0003ffff 	.word	0x0003ffff
 80007b0:	240010ac 	.word	0x240010ac
 80007b4:	24000f18 	.word	0x24000f18
 80007b8:	24000d88 	.word	0x24000d88
 80007bc:	240010bc 	.word	0x240010bc

080007c0 <application_task>:
void application_task ( void ){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
	for ( uint8_t n_cnt = 25; n_cnt < 100; n_cnt++ )
 80007c6:	2319      	movs	r3, #25
 80007c8:	71fb      	strb	r3, [r7, #7]
 80007ca:	e030      	b.n	800082e <application_task+0x6e>
	{
		aun_red_buffer[ n_cnt - 25 ] = aun_red_buffer[ n_cnt ];
 80007cc:	79fa      	ldrb	r2, [r7, #7]
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	3b19      	subs	r3, #25
 80007d2:	49ab      	ldr	r1, [pc, #684]	; (8000a80 <application_task+0x2c0>)
 80007d4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007d8:	49a9      	ldr	r1, [pc, #676]	; (8000a80 <application_task+0x2c0>)
 80007da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		aun_ir_buffer[ n_cnt - 25 ] = aun_ir_buffer[ n_cnt ];
 80007de:	79fa      	ldrb	r2, [r7, #7]
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	3b19      	subs	r3, #25
 80007e4:	49a7      	ldr	r1, [pc, #668]	; (8000a84 <application_task+0x2c4>)
 80007e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007ea:	49a6      	ldr	r1, [pc, #664]	; (8000a84 <application_task+0x2c4>)
 80007ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if ( un_min > aun_red_buffer[ n_cnt ] )
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	4aa3      	ldr	r2, [pc, #652]	; (8000a80 <application_task+0x2c0>)
 80007f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007f8:	4ba3      	ldr	r3, [pc, #652]	; (8000a88 <application_task+0x2c8>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d205      	bcs.n	800080c <application_task+0x4c>
		{
			un_min = aun_red_buffer[ n_cnt ];
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	4a9f      	ldr	r2, [pc, #636]	; (8000a80 <application_task+0x2c0>)
 8000804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000808:	4a9f      	ldr	r2, [pc, #636]	; (8000a88 <application_task+0x2c8>)
 800080a:	6013      	str	r3, [r2, #0]
		}

		if ( un_max < aun_red_buffer[ n_cnt ] )
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	4a9c      	ldr	r2, [pc, #624]	; (8000a80 <application_task+0x2c0>)
 8000810:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000814:	4b9d      	ldr	r3, [pc, #628]	; (8000a8c <application_task+0x2cc>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	429a      	cmp	r2, r3
 800081a:	d905      	bls.n	8000828 <application_task+0x68>
		{
			un_max=aun_red_buffer[n_cnt];
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	4a98      	ldr	r2, [pc, #608]	; (8000a80 <application_task+0x2c0>)
 8000820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000824:	4a99      	ldr	r2, [pc, #612]	; (8000a8c <application_task+0x2cc>)
 8000826:	6013      	str	r3, [r2, #0]
	for ( uint8_t n_cnt = 25; n_cnt < 100; n_cnt++ )
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	3301      	adds	r3, #1
 800082c:	71fb      	strb	r3, [r7, #7]
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b63      	cmp	r3, #99	; 0x63
 8000832:	d9cb      	bls.n	80007cc <application_task+0xc>
		}
	}

	for ( uint8_t n_cnt = 75; n_cnt < 100; n_cnt++ )
 8000834:	234b      	movs	r3, #75	; 0x4b
 8000836:	71bb      	strb	r3, [r7, #6]
 8000838:	e119      	b.n	8000a6e <application_task+0x2ae>
	{
		un_prev_data = aun_red_buffer[ n_cnt - 1 ];
 800083a:	79bb      	ldrb	r3, [r7, #6]
 800083c:	3b01      	subs	r3, #1
 800083e:	4a90      	ldr	r2, [pc, #576]	; (8000a80 <application_task+0x2c0>)
 8000840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000844:	4a92      	ldr	r2, [pc, #584]	; (8000a90 <application_task+0x2d0>)
 8000846:	6013      	str	r3, [r2, #0]
		while ( oximeter5_check_interrupt() == OXIMETER5_INTERRUPT_ACTIVE );
 8000848:	bf00      	nop
 800084a:	f001 fb1b 	bl	8001e84 <oximeter5_check_interrupt>
 800084e:	4603      	mov	r3, r0
 8000850:	2b01      	cmp	r3, #1
 8000852:	d0fa      	beq.n	800084a <application_task+0x8a>

		oximeter5_read_sensor_data( &aun_red_buffer[ n_cnt ], &aun_ir_buffer[ n_cnt ] );
 8000854:	79bb      	ldrb	r3, [r7, #6]
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	4a89      	ldr	r2, [pc, #548]	; (8000a80 <application_task+0x2c0>)
 800085a:	441a      	add	r2, r3
 800085c:	79bb      	ldrb	r3, [r7, #6]
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	4988      	ldr	r1, [pc, #544]	; (8000a84 <application_task+0x2c4>)
 8000862:	440b      	add	r3, r1
 8000864:	4619      	mov	r1, r3
 8000866:	4610      	mov	r0, r2
 8000868:	f001 fb30 	bl	8001ecc <oximeter5_read_sensor_data>

		if ( aun_red_buffer[ n_cnt ] > un_prev_data )
 800086c:	79bb      	ldrb	r3, [r7, #6]
 800086e:	4a84      	ldr	r2, [pc, #528]	; (8000a80 <application_task+0x2c0>)
 8000870:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000874:	4b86      	ldr	r3, [pc, #536]	; (8000a90 <application_task+0x2d0>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	d94c      	bls.n	8000916 <application_task+0x156>
		{
			f_temp = aun_red_buffer[ n_cnt ]-un_prev_data;
 800087c:	79bb      	ldrb	r3, [r7, #6]
 800087e:	4a80      	ldr	r2, [pc, #512]	; (8000a80 <application_task+0x2c0>)
 8000880:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000884:	4b82      	ldr	r3, [pc, #520]	; (8000a90 <application_task+0x2d0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	ee07 3a90 	vmov	s15, r3
 800088e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000892:	4b80      	ldr	r3, [pc, #512]	; (8000a94 <application_task+0x2d4>)
 8000894:	edc3 7a00 	vstr	s15, [r3]
			f_temp /= ( un_max - un_min );
 8000898:	4b7e      	ldr	r3, [pc, #504]	; (8000a94 <application_task+0x2d4>)
 800089a:	edd3 6a00 	vldr	s13, [r3]
 800089e:	4b7b      	ldr	r3, [pc, #492]	; (8000a8c <application_task+0x2cc>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	4b79      	ldr	r3, [pc, #484]	; (8000a88 <application_task+0x2c8>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	1ad3      	subs	r3, r2, r3
 80008a8:	ee07 3a90 	vmov	s15, r3
 80008ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008b4:	4b77      	ldr	r3, [pc, #476]	; (8000a94 <application_task+0x2d4>)
 80008b6:	edc3 7a00 	vstr	s15, [r3]
			f_temp *= MAX_BRIGHTNESS;
 80008ba:	4b76      	ldr	r3, [pc, #472]	; (8000a94 <application_task+0x2d4>)
 80008bc:	edd3 7a00 	vldr	s15, [r3]
 80008c0:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8000a98 <application_task+0x2d8>
 80008c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008c8:	4b72      	ldr	r3, [pc, #456]	; (8000a94 <application_task+0x2d4>)
 80008ca:	edc3 7a00 	vstr	s15, [r3]
			f_temp = un_brightness - f_temp;
 80008ce:	4b73      	ldr	r3, [pc, #460]	; (8000a9c <application_task+0x2dc>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	ee07 3a90 	vmov	s15, r3
 80008d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008da:	4b6e      	ldr	r3, [pc, #440]	; (8000a94 <application_task+0x2d4>)
 80008dc:	edd3 7a00 	vldr	s15, [r3]
 80008e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008e4:	4b6b      	ldr	r3, [pc, #428]	; (8000a94 <application_task+0x2d4>)
 80008e6:	edc3 7a00 	vstr	s15, [r3]

			if ( f_temp < 0 )
 80008ea:	4b6a      	ldr	r3, [pc, #424]	; (8000a94 <application_task+0x2d4>)
 80008ec:	edd3 7a00 	vldr	s15, [r3]
 80008f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008f8:	d503      	bpl.n	8000902 <application_task+0x142>
			{
				un_brightness = 0;
 80008fa:	4b68      	ldr	r3, [pc, #416]	; (8000a9c <application_task+0x2dc>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	e045      	b.n	800098e <application_task+0x1ce>
			}
			else
			{
				un_brightness = ( uint32_t ) f_temp;
 8000902:	4b64      	ldr	r3, [pc, #400]	; (8000a94 <application_task+0x2d4>)
 8000904:	edd3 7a00 	vldr	s15, [r3]
 8000908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800090c:	ee17 2a90 	vmov	r2, s15
 8000910:	4b62      	ldr	r3, [pc, #392]	; (8000a9c <application_task+0x2dc>)
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	e03b      	b.n	800098e <application_task+0x1ce>
			}
		}
		else
		{
			f_temp = un_prev_data - aun_red_buffer[ n_cnt ];
 8000916:	4b5e      	ldr	r3, [pc, #376]	; (8000a90 <application_task+0x2d0>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	79bb      	ldrb	r3, [r7, #6]
 800091c:	4958      	ldr	r1, [pc, #352]	; (8000a80 <application_task+0x2c0>)
 800091e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	ee07 3a90 	vmov	s15, r3
 8000928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800092c:	4b59      	ldr	r3, [pc, #356]	; (8000a94 <application_task+0x2d4>)
 800092e:	edc3 7a00 	vstr	s15, [r3]
			f_temp /= ( un_max - un_min );
 8000932:	4b58      	ldr	r3, [pc, #352]	; (8000a94 <application_task+0x2d4>)
 8000934:	edd3 6a00 	vldr	s13, [r3]
 8000938:	4b54      	ldr	r3, [pc, #336]	; (8000a8c <application_task+0x2cc>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4b52      	ldr	r3, [pc, #328]	; (8000a88 <application_task+0x2c8>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	ee07 3a90 	vmov	s15, r3
 8000946:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800094a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800094e:	4b51      	ldr	r3, [pc, #324]	; (8000a94 <application_task+0x2d4>)
 8000950:	edc3 7a00 	vstr	s15, [r3]
			f_temp *= MAX_BRIGHTNESS;
 8000954:	4b4f      	ldr	r3, [pc, #316]	; (8000a94 <application_task+0x2d4>)
 8000956:	edd3 7a00 	vldr	s15, [r3]
 800095a:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8000a98 <application_task+0x2d8>
 800095e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000962:	4b4c      	ldr	r3, [pc, #304]	; (8000a94 <application_task+0x2d4>)
 8000964:	edc3 7a00 	vstr	s15, [r3]
			un_brightness += ( uint32_t ) f_temp;
 8000968:	4b4a      	ldr	r3, [pc, #296]	; (8000a94 <application_task+0x2d4>)
 800096a:	edd3 7a00 	vldr	s15, [r3]
 800096e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000972:	ee17 2a90 	vmov	r2, s15
 8000976:	4b49      	ldr	r3, [pc, #292]	; (8000a9c <application_task+0x2dc>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4413      	add	r3, r2
 800097c:	4a47      	ldr	r2, [pc, #284]	; (8000a9c <application_task+0x2dc>)
 800097e:	6013      	str	r3, [r2, #0]

			if ( un_brightness > MAX_BRIGHTNESS )
 8000980:	4b46      	ldr	r3, [pc, #280]	; (8000a9c <application_task+0x2dc>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2bff      	cmp	r3, #255	; 0xff
 8000986:	d902      	bls.n	800098e <application_task+0x1ce>
			{
				un_brightness = MAX_BRIGHTNESS;
 8000988:	4b44      	ldr	r3, [pc, #272]	; (8000a9c <application_task+0x2dc>)
 800098a:	22ff      	movs	r2, #255	; 0xff
 800098c:	601a      	str	r2, [r3, #0]
			}
		}

		if ( ( OXIMETER5_OK == oximeter5_get_oxygen_saturation( &aun_ir_buffer[ 0 ], 100, &aun_red_buffer[ 0 ], &n_spo2 ) ) )
 800098e:	4b44      	ldr	r3, [pc, #272]	; (8000aa0 <application_task+0x2e0>)
 8000990:	4a3b      	ldr	r2, [pc, #236]	; (8000a80 <application_task+0x2c0>)
 8000992:	2164      	movs	r1, #100	; 0x64
 8000994:	483b      	ldr	r0, [pc, #236]	; (8000a84 <application_task+0x2c4>)
 8000996:	f001 faed 	bl	8001f74 <oximeter5_get_oxygen_saturation>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d163      	bne.n	8000a68 <application_task+0x2a8>
		{
			if ( aun_ir_buffer[n_cnt] > 10000  )
 80009a0:	79bb      	ldrb	r3, [r7, #6]
 80009a2:	4a38      	ldr	r2, [pc, #224]	; (8000a84 <application_task+0x2c4>)
 80009a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a8:	f242 7210 	movw	r2, #10000	; 0x2710
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d958      	bls.n	8000a62 <application_task+0x2a2>
			{
				snprintf(SendBuffer, sizeof(SendBuffer), "\tIR    : %lu \r\n", aun_ir_buffer[ n_cnt ]);
 80009b0:	79bb      	ldrb	r3, [r7, #6]
 80009b2:	4a34      	ldr	r2, [pc, #208]	; (8000a84 <application_task+0x2c4>)
 80009b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b8:	4a3a      	ldr	r2, [pc, #232]	; (8000aa4 <application_task+0x2e4>)
 80009ba:	2132      	movs	r1, #50	; 0x32
 80009bc:	483a      	ldr	r0, [pc, #232]	; (8000aa8 <application_task+0x2e8>)
 80009be:	f00d f857 	bl	800da70 <sniprintf>
				HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 80009c2:	4839      	ldr	r0, [pc, #228]	; (8000aa8 <application_task+0x2e8>)
 80009c4:	f7ff fc8c 	bl	80002e0 <strlen>
 80009c8:	4603      	mov	r3, r0
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	2364      	movs	r3, #100	; 0x64
 80009ce:	4936      	ldr	r1, [pc, #216]	; (8000aa8 <application_task+0x2e8>)
 80009d0:	4836      	ldr	r0, [pc, #216]	; (8000aac <application_task+0x2ec>)
 80009d2:	f00b fb68 	bl	800c0a6 <HAL_UART_Transmit>

				snprintf(SendBuffer, sizeof(SendBuffer), "\tRED   : %lu \r\n", aun_red_buffer[ n_cnt ]);
 80009d6:	79bb      	ldrb	r3, [r7, #6]
 80009d8:	4a29      	ldr	r2, [pc, #164]	; (8000a80 <application_task+0x2c0>)
 80009da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009de:	4a34      	ldr	r2, [pc, #208]	; (8000ab0 <application_task+0x2f0>)
 80009e0:	2132      	movs	r1, #50	; 0x32
 80009e2:	4831      	ldr	r0, [pc, #196]	; (8000aa8 <application_task+0x2e8>)
 80009e4:	f00d f844 	bl	800da70 <sniprintf>
				HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 80009e8:	482f      	ldr	r0, [pc, #188]	; (8000aa8 <application_task+0x2e8>)
 80009ea:	f7ff fc79 	bl	80002e0 <strlen>
 80009ee:	4603      	mov	r3, r0
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	2364      	movs	r3, #100	; 0x64
 80009f4:	492c      	ldr	r1, [pc, #176]	; (8000aa8 <application_task+0x2e8>)
 80009f6:	482d      	ldr	r0, [pc, #180]	; (8000aac <application_task+0x2ec>)
 80009f8:	f00b fb55 	bl	800c0a6 <HAL_UART_Transmit>

				snprintf(SendBuffer, sizeof(SendBuffer), "- - - - - - - - - - - - - - -\r\n");
 80009fc:	4a2d      	ldr	r2, [pc, #180]	; (8000ab4 <application_task+0x2f4>)
 80009fe:	2132      	movs	r1, #50	; 0x32
 8000a00:	4829      	ldr	r0, [pc, #164]	; (8000aa8 <application_task+0x2e8>)
 8000a02:	f00d f835 	bl	800da70 <sniprintf>
				HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 8000a06:	4828      	ldr	r0, [pc, #160]	; (8000aa8 <application_task+0x2e8>)
 8000a08:	f7ff fc6a 	bl	80002e0 <strlen>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	2364      	movs	r3, #100	; 0x64
 8000a12:	4925      	ldr	r1, [pc, #148]	; (8000aa8 <application_task+0x2e8>)
 8000a14:	4825      	ldr	r0, [pc, #148]	; (8000aac <application_task+0x2ec>)
 8000a16:	f00b fb46 	bl	800c0a6 <HAL_UART_Transmit>

				snprintf(SendBuffer, sizeof(SendBuffer), "\tSPO2  : %d %%\r\n", ( uint16_t ) n_spo2);
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <application_task+0x2e0>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	4a26      	ldr	r2, [pc, #152]	; (8000ab8 <application_task+0x2f8>)
 8000a20:	2132      	movs	r1, #50	; 0x32
 8000a22:	4821      	ldr	r0, [pc, #132]	; (8000aa8 <application_task+0x2e8>)
 8000a24:	f00d f824 	bl	800da70 <sniprintf>
				HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 8000a28:	481f      	ldr	r0, [pc, #124]	; (8000aa8 <application_task+0x2e8>)
 8000a2a:	f7ff fc59 	bl	80002e0 <strlen>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	2364      	movs	r3, #100	; 0x64
 8000a34:	491c      	ldr	r1, [pc, #112]	; (8000aa8 <application_task+0x2e8>)
 8000a36:	481d      	ldr	r0, [pc, #116]	; (8000aac <application_task+0x2ec>)
 8000a38:	f00b fb35 	bl	800c0a6 <HAL_UART_Transmit>

				snprintf(SendBuffer, sizeof(SendBuffer), "- - - - - - - - - - - - - - -\r\n");
 8000a3c:	4a1d      	ldr	r2, [pc, #116]	; (8000ab4 <application_task+0x2f4>)
 8000a3e:	2132      	movs	r1, #50	; 0x32
 8000a40:	4819      	ldr	r0, [pc, #100]	; (8000aa8 <application_task+0x2e8>)
 8000a42:	f00d f815 	bl	800da70 <sniprintf>
				HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 8000a46:	4818      	ldr	r0, [pc, #96]	; (8000aa8 <application_task+0x2e8>)
 8000a48:	f7ff fc4a 	bl	80002e0 <strlen>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	2364      	movs	r3, #100	; 0x64
 8000a52:	4915      	ldr	r1, [pc, #84]	; (8000aa8 <application_task+0x2e8>)
 8000a54:	4815      	ldr	r0, [pc, #84]	; (8000aac <application_task+0x2ec>)
 8000a56:	f00b fb26 	bl	800c0a6 <HAL_UART_Transmit>


				HAL_Delay ( 100 );
 8000a5a:	2064      	movs	r0, #100	; 0x64
 8000a5c:	f003 f9a2 	bl	8003da4 <HAL_Delay>
 8000a60:	e002      	b.n	8000a68 <application_task+0x2a8>
			}
			else
			{
				HAL_Delay ( 10 );
 8000a62:	200a      	movs	r0, #10
 8000a64:	f003 f99e 	bl	8003da4 <HAL_Delay>
	for ( uint8_t n_cnt = 75; n_cnt < 100; n_cnt++ )
 8000a68:	79bb      	ldrb	r3, [r7, #6]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	71bb      	strb	r3, [r7, #6]
 8000a6e:	79bb      	ldrb	r3, [r7, #6]
 8000a70:	2b63      	cmp	r3, #99	; 0x63
 8000a72:	f67f aee2 	bls.w	800083a <application_task+0x7a>
			}
		}
	}
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	24000f18 	.word	0x24000f18
 8000a84:	24000d88 	.word	0x24000d88
 8000a88:	240010a8 	.word	0x240010a8
 8000a8c:	240010ac 	.word	0x240010ac
 8000a90:	240010b0 	.word	0x240010b0
 8000a94:	240010b8 	.word	0x240010b8
 8000a98:	437f0000 	.word	0x437f0000
 8000a9c:	240010b4 	.word	0x240010b4
 8000aa0:	240010bc 	.word	0x240010bc
 8000aa4:	0800e3f8 	.word	0x0800e3f8
 8000aa8:	240010c0 	.word	0x240010c0
 8000aac:	240007b4 	.word	0x240007b4
 8000ab0:	0800e408 	.word	0x0800e408
 8000ab4:	0800e418 	.word	0x0800e418
 8000ab8:	0800e438 	.word	0x0800e438

08000abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b09c      	sub	sp, #112	; 0x70
 8000ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac6:	224c      	movs	r2, #76	; 0x4c
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f00d f804 	bl	800dad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2220      	movs	r2, #32
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f00c fffe 	bl	800dad8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000adc:	2002      	movs	r0, #2
 8000ade:	f006 ff33 	bl	8007948 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b38      	ldr	r3, [pc, #224]	; (8000bc8 <SystemClock_Config+0x10c>)
 8000ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aea:	4a37      	ldr	r2, [pc, #220]	; (8000bc8 <SystemClock_Config+0x10c>)
 8000aec:	f023 0301 	bic.w	r3, r3, #1
 8000af0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000af2:	4b35      	ldr	r3, [pc, #212]	; (8000bc8 <SystemClock_Config+0x10c>)
 8000af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	4b33      	ldr	r3, [pc, #204]	; (8000bcc <SystemClock_Config+0x110>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b04:	4a31      	ldr	r2, [pc, #196]	; (8000bcc <SystemClock_Config+0x110>)
 8000b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b2f      	ldr	r3, [pc, #188]	; (8000bcc <SystemClock_Config+0x110>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b18:	bf00      	nop
 8000b1a:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <SystemClock_Config+0x110>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b26:	d1f8      	bne.n	8000b1a <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000b28:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <SystemClock_Config+0x114>)
 8000b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2c:	f023 0303 	bic.w	r3, r3, #3
 8000b30:	4a27      	ldr	r2, [pc, #156]	; (8000bd0 <SystemClock_Config+0x114>)
 8000b32:	f043 0302 	orr.w	r3, r3, #2
 8000b36:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000b38:	230b      	movs	r3, #11
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b3c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b42:	2301      	movs	r3, #1
 8000b44:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b46:	2340      	movs	r3, #64	; 0x40
 8000b48:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b52:	2302      	movs	r3, #2
 8000b54:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8000b56:	2316      	movs	r3, #22
 8000b58:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8000b5a:	23a9      	movs	r3, #169	; 0xa9
 8000b5c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b62:	2304      	movs	r3, #4
 8000b64:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b66:	2302      	movs	r3, #2
 8000b68:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f006 ffe8 	bl	8007b50 <HAL_RCC_OscConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b86:	f000 ff85 	bl	8001a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8a:	233f      	movs	r3, #63	; 0x3f
 8000b8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2101      	movs	r1, #1
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f007 fc28 	bl	8008404 <HAL_RCC_ClockConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0x102>
  {
    Error_Handler();
 8000bba:	f000 ff6b 	bl	8001a94 <Error_Handler>
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	3770      	adds	r7, #112	; 0x70
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	58000400 	.word	0x58000400
 8000bcc:	58024800 	.word	0x58024800
 8000bd0:	58024400 	.word	0x58024400

08000bd4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b0b0      	sub	sp, #192	; 0xc0
 8000bd8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bda:	463b      	mov	r3, r7
 8000bdc:	22c0      	movs	r2, #192	; 0xc0
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f00c ff79 	bl	800dad8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000be6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000bea:	f04f 0300 	mov.w	r3, #0
 8000bee:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000bfa:	2305      	movs	r3, #5
 8000bfc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c06:	23c0      	movs	r3, #192	; 0xc0
 8000c08:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000c0a:	2320      	movs	r3, #32
 8000c0c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c18:	463b      	mov	r3, r7
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f007 ff7e 	bl	8008b1c <HAL_RCCEx_PeriphCLKConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000c26:	f000 ff35 	bl	8001a94 <Error_Handler>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	37c0      	adds	r7, #192	; 0xc0
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c46:	463b      	mov	r3, r7
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
 8000c54:	615a      	str	r2, [r3, #20]
 8000c56:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c58:	4b30      	ldr	r3, [pc, #192]	; (8000d1c <MX_ADC1_Init+0xe8>)
 8000c5a:	4a31      	ldr	r2, [pc, #196]	; (8000d20 <MX_ADC1_Init+0xec>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <MX_ADC1_Init+0xe8>)
 8000c60:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c64:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000c66:	4b2d      	ldr	r3, [pc, #180]	; (8000d1c <MX_ADC1_Init+0xe8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c6c:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <MX_ADC1_Init+0xe8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c72:	4b2a      	ldr	r3, [pc, #168]	; (8000d1c <MX_ADC1_Init+0xe8>)
 8000c74:	2204      	movs	r2, #4
 8000c76:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c78:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <MX_ADC1_Init+0xe8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c7e:	4b27      	ldr	r3, [pc, #156]	; (8000d1c <MX_ADC1_Init+0xe8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000c84:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <MX_ADC1_Init+0xe8>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c8a:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <MX_ADC1_Init+0xe8>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c90:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <MX_ADC1_Init+0xe8>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c96:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <MX_ADC1_Init+0xe8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_ADC1_Init+0xe8>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ca2:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <MX_ADC1_Init+0xe8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <MX_ADC1_Init+0xe8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000cae:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <MX_ADC1_Init+0xe8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cb6:	4819      	ldr	r0, [pc, #100]	; (8000d1c <MX_ADC1_Init+0xe8>)
 8000cb8:	f003 fa5a 	bl	8004170 <HAL_ADC_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000cc2:	f000 fee7 	bl	8001a94 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4812      	ldr	r0, [pc, #72]	; (8000d1c <MX_ADC1_Init+0xe8>)
 8000cd2:	f004 f871 	bl	8004db8 <HAL_ADCEx_MultiModeConfigChannel>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000cdc:	f000 feda 	bl	8001a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ce4:	2306      	movs	r3, #6
 8000ce6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000cf0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfe:	463b      	mov	r3, r7
 8000d00:	4619      	mov	r1, r3
 8000d02:	4806      	ldr	r0, [pc, #24]	; (8000d1c <MX_ADC1_Init+0xe8>)
 8000d04:	f003 fbd6 	bl	80044b4 <HAL_ADC_ConfigChannel>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000d0e:	f000 fec1 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	24000174 	.word	0x24000174
 8000d20:	40022000 	.word	0x40022000

08000d24 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
 8000d38:	615a      	str	r2, [r3, #20]
 8000d3a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d3c:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <MX_ADC2_Init+0xc0>)
 8000d3e:	4a2a      	ldr	r2, [pc, #168]	; (8000de8 <MX_ADC2_Init+0xc4>)
 8000d40:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d42:	4b28      	ldr	r3, [pc, #160]	; (8000de4 <MX_ADC2_Init+0xc0>)
 8000d44:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d48:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d4a:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <MX_ADC2_Init+0xc0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d50:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <MX_ADC2_Init+0xc0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d56:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <MX_ADC2_Init+0xc0>)
 8000d58:	2204      	movs	r2, #4
 8000d5a:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d5c:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <MX_ADC2_Init+0xc0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d62:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <MX_ADC2_Init+0xc0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000d68:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <MX_ADC2_Init+0xc0>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <MX_ADC2_Init+0xc0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <MX_ADC2_Init+0xc0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_ADC2_Init+0xc0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <MX_ADC2_Init+0xc0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d86:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <MX_ADC2_Init+0xc0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d8c:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <MX_ADC2_Init+0xc0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_ADC2_Init+0xc0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d9a:	4812      	ldr	r0, [pc, #72]	; (8000de4 <MX_ADC2_Init+0xc0>)
 8000d9c:	f003 f9e8 	bl	8004170 <HAL_ADC_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000da6:	f000 fe75 	bl	8001a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000daa:	2301      	movs	r3, #1
 8000dac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dae:	2306      	movs	r3, #6
 8000db0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000db6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000dba:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_ADC2_Init+0xc0>)
 8000dce:	f003 fb71 	bl	80044b4 <HAL_ADC_ConfigChannel>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000dd8:	f000 fe5c 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	3720      	adds	r7, #32
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	240001d8 	.word	0x240001d8
 8000de8:	40022100 	.word	0x40022100

08000dec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
 8000e00:	615a      	str	r2, [r3, #20]
 8000e02:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e04:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <MX_ADC3_Init+0xb8>)
 8000e06:	4a28      	ldr	r2, [pc, #160]	; (8000ea8 <MX_ADC3_Init+0xbc>)
 8000e08:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000e0a:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <MX_ADC3_Init+0xb8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e10:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <MX_ADC3_Init+0xb8>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e16:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <MX_ADC3_Init+0xb8>)
 8000e18:	2204      	movs	r2, #4
 8000e1a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e1c:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <MX_ADC3_Init+0xb8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <MX_ADC3_Init+0xb8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000e28:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <MX_ADC3_Init+0xb8>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_ADC3_Init+0xb8>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <MX_ADC3_Init+0xb8>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <MX_ADC3_Init+0xb8>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MX_ADC3_Init+0xb8>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <MX_ADC3_Init+0xb8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_ADC3_Init+0xb8>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <MX_ADC3_Init+0xb8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e5a:	4812      	ldr	r0, [pc, #72]	; (8000ea4 <MX_ADC3_Init+0xb8>)
 8000e5c:	f003 f988 	bl	8004170 <HAL_ADC_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000e66:	f000 fe15 	bl	8001a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <MX_ADC3_Init+0xc0>)
 8000e6c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e6e:	2306      	movs	r3, #6
 8000e70:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e76:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e7a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_ADC3_Init+0xb8>)
 8000e8e:	f003 fb11 	bl	80044b4 <HAL_ADC_ConfigChannel>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000e98:	f000 fdfc 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	3720      	adds	r7, #32
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2400023c 	.word	0x2400023c
 8000ea8:	58026000 	.word	0x58026000
 8000eac:	1d500080 	.word	0x1d500080

08000eb0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000eb4:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <MX_ETH_Init+0x80>)
 8000eb6:	4a1f      	ldr	r2, [pc, #124]	; (8000f34 <MX_ETH_Init+0x84>)
 8000eb8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000eba:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <MX_ETH_Init+0x88>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <MX_ETH_Init+0x88>)
 8000ec2:	2280      	movs	r2, #128	; 0x80
 8000ec4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <MX_ETH_Init+0x88>)
 8000ec8:	22e1      	movs	r2, #225	; 0xe1
 8000eca:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_ETH_Init+0x88>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_ETH_Init+0x88>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_ETH_Init+0x88>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <MX_ETH_Init+0x80>)
 8000ee0:	4a15      	ldr	r2, [pc, #84]	; (8000f38 <MX_ETH_Init+0x88>)
 8000ee2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <MX_ETH_Init+0x80>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_ETH_Init+0x80>)
 8000eec:	4a13      	ldr	r2, [pc, #76]	; (8000f3c <MX_ETH_Init+0x8c>)
 8000eee:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_ETH_Init+0x80>)
 8000ef2:	4a13      	ldr	r2, [pc, #76]	; (8000f40 <MX_ETH_Init+0x90>)
 8000ef4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_ETH_Init+0x80>)
 8000ef8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000efc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000efe:	480c      	ldr	r0, [pc, #48]	; (8000f30 <MX_ETH_Init+0x80>)
 8000f00:	f004 f91c 	bl	800513c <HAL_ETH_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000f0a:	f000 fdc3 	bl	8001a94 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f0e:	2238      	movs	r2, #56	; 0x38
 8000f10:	2100      	movs	r1, #0
 8000f12:	480c      	ldr	r0, [pc, #48]	; (8000f44 <MX_ETH_Init+0x94>)
 8000f14:	f00c fde0 	bl	800dad8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <MX_ETH_Init+0x94>)
 8000f1a:	2221      	movs	r2, #33	; 0x21
 8000f1c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_ETH_Init+0x94>)
 8000f20:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f24:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <MX_ETH_Init+0x94>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	240002a0 	.word	0x240002a0
 8000f34:	40028000 	.word	0x40028000
 8000f38:	240010f4 	.word	0x240010f4
 8000f3c:	240000c0 	.word	0x240000c0
 8000f40:	24000060 	.word	0x24000060
 8000f44:	2400013c 	.word	0x2400013c

08000f48 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f4c:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000f4e:	4a2f      	ldr	r2, [pc, #188]	; (800100c <MX_FDCAN1_Init+0xc4>)
 8000f50:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f52:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f58:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f64:	4b28      	ldr	r3, [pc, #160]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f6a:	4b27      	ldr	r3, [pc, #156]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000f70:	4b25      	ldr	r3, [pc, #148]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000f72:	2210      	movs	r2, #16
 8000f74:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f76:	4b24      	ldr	r3, [pc, #144]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000f7e:	2202      	movs	r2, #2
 8000f80:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000f82:	4b21      	ldr	r3, [pc, #132]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000f84:	2202      	movs	r2, #2
 8000f86:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f88:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000f94:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000fa0:	4b19      	ldr	r3, [pc, #100]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000fba:	2204      	movs	r2, #4
 8000fbc:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000fbe:	4b12      	ldr	r3, [pc, #72]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000ff0:	2204      	movs	r2, #4
 8000ff2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_FDCAN1_Init+0xc0>)
 8000ff6:	f004 fcc5 	bl	8005984 <HAL_FDCAN_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001000:	f000 fd48 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	24000350 	.word	0x24000350
 800100c:	4000a000 	.word	0x4000a000

08001010 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001014:	4b2e      	ldr	r3, [pc, #184]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001016:	4a2f      	ldr	r2, [pc, #188]	; (80010d4 <MX_FDCAN2_Init+0xc4>)
 8001018:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800101a:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001020:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001026:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001028:	2200      	movs	r2, #0
 800102a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800102c:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 800102e:	2200      	movs	r2, #0
 8001030:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001032:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001034:	2200      	movs	r2, #0
 8001036:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8001038:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 800103a:	2210      	movs	r2, #16
 800103c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800103e:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001040:	2201      	movs	r2, #1
 8001042:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8001044:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001046:	2202      	movs	r2, #2
 8001048:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800104a:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 800104c:	2202      	movs	r2, #2
 800104e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001052:	2201      	movs	r2, #1
 8001054:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001056:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001058:	2201      	movs	r2, #1
 800105a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800105c:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 800105e:	2201      	movs	r2, #1
 8001060:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001064:	2201      	movs	r2, #1
 8001066:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 800106a:	2200      	movs	r2, #0
 800106c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001070:	2200      	movs	r2, #0
 8001072:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001074:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001076:	2200      	movs	r2, #0
 8001078:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 800107c:	2200      	movs	r2, #0
 800107e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001082:	2204      	movs	r2, #4
 8001084:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001088:	2200      	movs	r2, #0
 800108a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800108c:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 800108e:	2204      	movs	r2, #4
 8001090:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001094:	2200      	movs	r2, #0
 8001096:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 800109a:	2204      	movs	r2, #4
 800109c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 80010b8:	2204      	movs	r2, #4
 80010ba:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 80010be:	f004 fc61 	bl	8005984 <HAL_FDCAN_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80010c8:	f000 fce4 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	240003f0 	.word	0x240003f0
 80010d4:	4000a400 	.word	0x4000a400

080010d8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <MX_I2C4_Init+0x74>)
 80010de:	4a1c      	ldr	r2, [pc, #112]	; (8001150 <MX_I2C4_Init+0x78>)
 80010e0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_I2C4_Init+0x74>)
 80010e4:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <MX_I2C4_Init+0x7c>)
 80010e6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <MX_I2C4_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_I2C4_Init+0x74>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <MX_I2C4_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_I2C4_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_I2C4_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_I2C4_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_I2C4_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001112:	480e      	ldr	r0, [pc, #56]	; (800114c <MX_I2C4_Init+0x74>)
 8001114:	f005 f97c 	bl	8006410 <HAL_I2C_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800111e:	f000 fcb9 	bl	8001a94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001122:	2100      	movs	r1, #0
 8001124:	4809      	ldr	r0, [pc, #36]	; (800114c <MX_I2C4_Init+0x74>)
 8001126:	f005 ff87 	bl	8007038 <HAL_I2CEx_ConfigAnalogFilter>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001130:	f000 fcb0 	bl	8001a94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001134:	2100      	movs	r1, #0
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_I2C4_Init+0x74>)
 8001138:	f005 ffc9 	bl	80070ce <HAL_I2CEx_ConfigDigitalFilter>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001142:	f000 fca7 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	24000490 	.word	0x24000490
 8001150:	58001c00 	.word	0x58001c00
 8001154:	10707dbc 	.word	0x10707dbc

08001158 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b09a      	sub	sp, #104	; 0x68
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800115e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001162:	2234      	movs	r2, #52	; 0x34
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f00c fcb6 	bl	800dad8 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800116c:	463b      	mov	r3, r7
 800116e:	2234      	movs	r2, #52	; 0x34
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f00c fcb0 	bl	800dad8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001178:	4b4e      	ldr	r3, [pc, #312]	; (80012b4 <MX_LTDC_Init+0x15c>)
 800117a:	4a4f      	ldr	r2, [pc, #316]	; (80012b8 <MX_LTDC_Init+0x160>)
 800117c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800117e:	4b4d      	ldr	r3, [pc, #308]	; (80012b4 <MX_LTDC_Init+0x15c>)
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001184:	4b4b      	ldr	r3, [pc, #300]	; (80012b4 <MX_LTDC_Init+0x15c>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800118a:	4b4a      	ldr	r3, [pc, #296]	; (80012b4 <MX_LTDC_Init+0x15c>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001190:	4b48      	ldr	r3, [pc, #288]	; (80012b4 <MX_LTDC_Init+0x15c>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001196:	4b47      	ldr	r3, [pc, #284]	; (80012b4 <MX_LTDC_Init+0x15c>)
 8001198:	2207      	movs	r2, #7
 800119a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800119c:	4b45      	ldr	r3, [pc, #276]	; (80012b4 <MX_LTDC_Init+0x15c>)
 800119e:	2203      	movs	r2, #3
 80011a0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80011a2:	4b44      	ldr	r3, [pc, #272]	; (80012b4 <MX_LTDC_Init+0x15c>)
 80011a4:	220e      	movs	r2, #14
 80011a6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80011a8:	4b42      	ldr	r3, [pc, #264]	; (80012b4 <MX_LTDC_Init+0x15c>)
 80011aa:	2205      	movs	r2, #5
 80011ac:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80011ae:	4b41      	ldr	r3, [pc, #260]	; (80012b4 <MX_LTDC_Init+0x15c>)
 80011b0:	f240 228e 	movw	r2, #654	; 0x28e
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80011b6:	4b3f      	ldr	r3, [pc, #252]	; (80012b4 <MX_LTDC_Init+0x15c>)
 80011b8:	f240 12e5 	movw	r2, #485	; 0x1e5
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80011be:	4b3d      	ldr	r3, [pc, #244]	; (80012b4 <MX_LTDC_Init+0x15c>)
 80011c0:	f44f 7225 	mov.w	r2, #660	; 0x294
 80011c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80011c6:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <MX_LTDC_Init+0x15c>)
 80011c8:	f240 12e7 	movw	r2, #487	; 0x1e7
 80011cc:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80011ce:	4b39      	ldr	r3, [pc, #228]	; (80012b4 <MX_LTDC_Init+0x15c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80011d6:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <MX_LTDC_Init+0x15c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80011de:	4b35      	ldr	r3, [pc, #212]	; (80012b4 <MX_LTDC_Init+0x15c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80011e6:	4833      	ldr	r0, [pc, #204]	; (80012b4 <MX_LTDC_Init+0x15c>)
 80011e8:	f005 ffbe 	bl	8007168 <HAL_LTDC_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80011f2:	f000 fc4f 	bl	8001a94 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001206:	2300      	movs	r3, #0
 8001208:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001216:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001218:	2305      	movs	r3, #5
 800121a:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800123a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800123e:	2200      	movs	r2, #0
 8001240:	4619      	mov	r1, r3
 8001242:	481c      	ldr	r0, [pc, #112]	; (80012b4 <MX_LTDC_Init+0x15c>)
 8001244:	f006 f860 	bl	8007308 <HAL_LTDC_ConfigLayer>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800124e:	f000 fc21 	bl	8001a94 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800126e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001272:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001274:	2305      	movs	r3, #5
 8001276:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001296:	463b      	mov	r3, r7
 8001298:	2201      	movs	r2, #1
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_LTDC_Init+0x15c>)
 800129e:	f006 f833 	bl	8007308 <HAL_LTDC_ConfigLayer>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80012a8:	f000 fbf4 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	3768      	adds	r7, #104	; 0x68
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	240004e4 	.word	0x240004e4
 80012b8:	50001000 	.word	0x50001000

080012bc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_QUADSPI_Init+0x50>)
 80012c2:	4a13      	ldr	r2, [pc, #76]	; (8001310 <MX_QUADSPI_Init+0x54>)
 80012c4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_QUADSPI_Init+0x50>)
 80012c8:	22ff      	movs	r2, #255	; 0xff
 80012ca:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_QUADSPI_Init+0x50>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_QUADSPI_Init+0x50>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_QUADSPI_Init+0x50>)
 80012da:	2201      	movs	r2, #1
 80012dc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_QUADSPI_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_QUADSPI_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <MX_QUADSPI_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_QUADSPI_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_QUADSPI_Init+0x50>)
 80012f8:	f006 fb70 	bl	80079dc <HAL_QSPI_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001302:	f000 fbc7 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2400058c 	.word	0x2400058c
 8001310:	52005000 	.word	0x52005000

08001314 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001318:	4b10      	ldr	r3, [pc, #64]	; (800135c <MX_RTC_Init+0x48>)
 800131a:	4a11      	ldr	r2, [pc, #68]	; (8001360 <MX_RTC_Init+0x4c>)
 800131c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_RTC_Init+0x48>)
 8001320:	2200      	movs	r2, #0
 8001322:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001324:	4b0d      	ldr	r3, [pc, #52]	; (800135c <MX_RTC_Init+0x48>)
 8001326:	227f      	movs	r2, #127	; 0x7f
 8001328:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_RTC_Init+0x48>)
 800132c:	22ff      	movs	r2, #255	; 0xff
 800132e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <MX_RTC_Init+0x48>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_RTC_Init+0x48>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <MX_RTC_Init+0x48>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_RTC_Init+0x48>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001348:	4804      	ldr	r0, [pc, #16]	; (800135c <MX_RTC_Init+0x48>)
 800134a:	f00a f8e5 	bl	800b518 <HAL_RTC_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001354:	f000 fb9e 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	240005d8 	.word	0x240005d8
 8001360:	58004000 	.word	0x58004000

08001364 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001368:	4b58      	ldr	r3, [pc, #352]	; (80014cc <MX_SAI2_Init+0x168>)
 800136a:	4a59      	ldr	r2, [pc, #356]	; (80014d0 <MX_SAI2_Init+0x16c>)
 800136c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800136e:	4b57      	ldr	r3, [pc, #348]	; (80014cc <MX_SAI2_Init+0x168>)
 8001370:	2200      	movs	r2, #0
 8001372:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001374:	4b55      	ldr	r3, [pc, #340]	; (80014cc <MX_SAI2_Init+0x168>)
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800137a:	4b54      	ldr	r3, [pc, #336]	; (80014cc <MX_SAI2_Init+0x168>)
 800137c:	2240      	movs	r2, #64	; 0x40
 800137e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001380:	4b52      	ldr	r3, [pc, #328]	; (80014cc <MX_SAI2_Init+0x168>)
 8001382:	2200      	movs	r2, #0
 8001384:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001386:	4b51      	ldr	r3, [pc, #324]	; (80014cc <MX_SAI2_Init+0x168>)
 8001388:	2200      	movs	r2, #0
 800138a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800138c:	4b4f      	ldr	r3, [pc, #316]	; (80014cc <MX_SAI2_Init+0x168>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001392:	4b4e      	ldr	r3, [pc, #312]	; (80014cc <MX_SAI2_Init+0x168>)
 8001394:	2200      	movs	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001398:	4b4c      	ldr	r3, [pc, #304]	; (80014cc <MX_SAI2_Init+0x168>)
 800139a:	2200      	movs	r2, #0
 800139c:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800139e:	4b4b      	ldr	r3, [pc, #300]	; (80014cc <MX_SAI2_Init+0x168>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80013a4:	4b49      	ldr	r3, [pc, #292]	; (80014cc <MX_SAI2_Init+0x168>)
 80013a6:	4a4b      	ldr	r2, [pc, #300]	; (80014d4 <MX_SAI2_Init+0x170>)
 80013a8:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80013aa:	4b48      	ldr	r3, [pc, #288]	; (80014cc <MX_SAI2_Init+0x168>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80013b0:	4b46      	ldr	r3, [pc, #280]	; (80014cc <MX_SAI2_Init+0x168>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80013b6:	4b45      	ldr	r3, [pc, #276]	; (80014cc <MX_SAI2_Init+0x168>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80013bc:	4b43      	ldr	r3, [pc, #268]	; (80014cc <MX_SAI2_Init+0x168>)
 80013be:	2200      	movs	r2, #0
 80013c0:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 80013c2:	4b42      	ldr	r3, [pc, #264]	; (80014cc <MX_SAI2_Init+0x168>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 80013ca:	4b40      	ldr	r3, [pc, #256]	; (80014cc <MX_SAI2_Init+0x168>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80013d0:	4b3e      	ldr	r3, [pc, #248]	; (80014cc <MX_SAI2_Init+0x168>)
 80013d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013d6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80013d8:	4b3c      	ldr	r3, [pc, #240]	; (80014cc <MX_SAI2_Init+0x168>)
 80013da:	2208      	movs	r2, #8
 80013dc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80013de:	4b3b      	ldr	r3, [pc, #236]	; (80014cc <MX_SAI2_Init+0x168>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80013e4:	4b39      	ldr	r3, [pc, #228]	; (80014cc <MX_SAI2_Init+0x168>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80013ea:	4b38      	ldr	r3, [pc, #224]	; (80014cc <MX_SAI2_Init+0x168>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80013f0:	4b36      	ldr	r3, [pc, #216]	; (80014cc <MX_SAI2_Init+0x168>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80013f6:	4b35      	ldr	r3, [pc, #212]	; (80014cc <MX_SAI2_Init+0x168>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80013fc:	4b33      	ldr	r3, [pc, #204]	; (80014cc <MX_SAI2_Init+0x168>)
 80013fe:	2200      	movs	r2, #0
 8001400:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001402:	4b32      	ldr	r3, [pc, #200]	; (80014cc <MX_SAI2_Init+0x168>)
 8001404:	2201      	movs	r2, #1
 8001406:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001408:	4b30      	ldr	r3, [pc, #192]	; (80014cc <MX_SAI2_Init+0x168>)
 800140a:	2200      	movs	r2, #0
 800140c:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800140e:	482f      	ldr	r0, [pc, #188]	; (80014cc <MX_SAI2_Init+0x168>)
 8001410:	f00a f99a 	bl	800b748 <HAL_SAI_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 800141a:	f000 fb3b 	bl	8001a94 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800141e:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <MX_SAI2_Init+0x174>)
 8001420:	4a2e      	ldr	r2, [pc, #184]	; (80014dc <MX_SAI2_Init+0x178>)
 8001422:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001424:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <MX_SAI2_Init+0x174>)
 8001426:	2200      	movs	r2, #0
 8001428:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800142a:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <MX_SAI2_Init+0x174>)
 800142c:	2203      	movs	r2, #3
 800142e:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001430:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <MX_SAI2_Init+0x174>)
 8001432:	2240      	movs	r2, #64	; 0x40
 8001434:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001436:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <MX_SAI2_Init+0x174>)
 8001438:	2200      	movs	r2, #0
 800143a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800143c:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <MX_SAI2_Init+0x174>)
 800143e:	2200      	movs	r2, #0
 8001440:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001442:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <MX_SAI2_Init+0x174>)
 8001444:	2201      	movs	r2, #1
 8001446:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <MX_SAI2_Init+0x174>)
 800144a:	2200      	movs	r2, #0
 800144c:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800144e:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <MX_SAI2_Init+0x174>)
 8001450:	2200      	movs	r2, #0
 8001452:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001454:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <MX_SAI2_Init+0x174>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800145a:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <MX_SAI2_Init+0x174>)
 800145c:	2200      	movs	r2, #0
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <MX_SAI2_Init+0x174>)
 8001462:	2200      	movs	r2, #0
 8001464:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <MX_SAI2_Init+0x174>)
 8001468:	2200      	movs	r2, #0
 800146a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <MX_SAI2_Init+0x174>)
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <MX_SAI2_Init+0x174>)
 8001476:	2201      	movs	r2, #1
 8001478:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <MX_SAI2_Init+0x174>)
 800147c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001480:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <MX_SAI2_Init+0x174>)
 8001484:	2208      	movs	r2, #8
 8001486:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <MX_SAI2_Init+0x174>)
 800148a:	2201      	movs	r2, #1
 800148c:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800148e:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <MX_SAI2_Init+0x174>)
 8001490:	2200      	movs	r2, #0
 8001492:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <MX_SAI2_Init+0x174>)
 8001496:	2200      	movs	r2, #0
 8001498:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <MX_SAI2_Init+0x174>)
 800149c:	2200      	movs	r2, #0
 800149e:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80014a0:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <MX_SAI2_Init+0x174>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_SAI2_Init+0x174>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <MX_SAI2_Init+0x174>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_SAI2_Init+0x174>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80014b8:	4807      	ldr	r0, [pc, #28]	; (80014d8 <MX_SAI2_Init+0x174>)
 80014ba:	f00a f945 	bl	800b748 <HAL_SAI_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 80014c4:	f000 fae6 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	240005fc 	.word	0x240005fc
 80014d0:	40015c04 	.word	0x40015c04
 80014d4:	0002ee00 	.word	0x0002ee00
 80014d8:	24000694 	.word	0x24000694
 80014dc:	40015c24 	.word	0x40015c24

080014e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014e4:	4b26      	ldr	r3, [pc, #152]	; (8001580 <MX_SPI2_Init+0xa0>)
 80014e6:	4a27      	ldr	r2, [pc, #156]	; (8001584 <MX_SPI2_Init+0xa4>)
 80014e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014ea:	4b25      	ldr	r3, [pc, #148]	; (8001580 <MX_SPI2_Init+0xa0>)
 80014ec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80014f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014f2:	4b23      	ldr	r3, [pc, #140]	; (8001580 <MX_SPI2_Init+0xa0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80014f8:	4b21      	ldr	r3, [pc, #132]	; (8001580 <MX_SPI2_Init+0xa0>)
 80014fa:	2203      	movs	r2, #3
 80014fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <MX_SPI2_Init+0xa0>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001504:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <MX_SPI2_Init+0xa0>)
 8001506:	2200      	movs	r2, #0
 8001508:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800150a:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <MX_SPI2_Init+0xa0>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <MX_SPI2_Init+0xa0>)
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001516:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <MX_SPI2_Init+0xa0>)
 8001518:	2200      	movs	r2, #0
 800151a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <MX_SPI2_Init+0xa0>)
 800151e:	2200      	movs	r2, #0
 8001520:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <MX_SPI2_Init+0xa0>)
 8001524:	2200      	movs	r2, #0
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001528:	4b15      	ldr	r3, [pc, #84]	; (8001580 <MX_SPI2_Init+0xa0>)
 800152a:	2200      	movs	r2, #0
 800152c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_SPI2_Init+0xa0>)
 8001530:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001534:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_SPI2_Init+0xa0>)
 8001538:	2200      	movs	r2, #0
 800153a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <MX_SPI2_Init+0xa0>)
 800153e:	2200      	movs	r2, #0
 8001540:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_SPI2_Init+0xa0>)
 8001544:	2200      	movs	r2, #0
 8001546:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001548:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <MX_SPI2_Init+0xa0>)
 800154a:	2200      	movs	r2, #0
 800154c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_SPI2_Init+0xa0>)
 8001550:	2200      	movs	r2, #0
 8001552:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <MX_SPI2_Init+0xa0>)
 8001556:	2200      	movs	r2, #0
 8001558:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_SPI2_Init+0xa0>)
 800155c:	2200      	movs	r2, #0
 800155e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <MX_SPI2_Init+0xa0>)
 8001562:	2200      	movs	r2, #0
 8001564:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_SPI2_Init+0xa0>)
 8001568:	2200      	movs	r2, #0
 800156a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <MX_SPI2_Init+0xa0>)
 800156e:	f00a fc0b 	bl	800bd88 <HAL_SPI_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 8001578:	f000 fa8c 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	2400072c 	.word	0x2400072c
 8001584:	40003800 	.word	0x40003800

08001588 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800158c:	4b22      	ldr	r3, [pc, #136]	; (8001618 <MX_USART3_UART_Init+0x90>)
 800158e:	4a23      	ldr	r2, [pc, #140]	; (800161c <MX_USART3_UART_Init+0x94>)
 8001590:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001592:	4b21      	ldr	r3, [pc, #132]	; (8001618 <MX_USART3_UART_Init+0x90>)
 8001594:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001598:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800159a:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <MX_USART3_UART_Init+0x90>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015a0:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <MX_USART3_UART_Init+0x90>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015a6:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <MX_USART3_UART_Init+0x90>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <MX_USART3_UART_Init+0x90>)
 80015ae:	220c      	movs	r2, #12
 80015b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b2:	4b19      	ldr	r3, [pc, #100]	; (8001618 <MX_USART3_UART_Init+0x90>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <MX_USART3_UART_Init+0x90>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <MX_USART3_UART_Init+0x90>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <MX_USART3_UART_Init+0x90>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <MX_USART3_UART_Init+0x90>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015d0:	4811      	ldr	r0, [pc, #68]	; (8001618 <MX_USART3_UART_Init+0x90>)
 80015d2:	f00a fd18 	bl	800c006 <HAL_UART_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80015dc:	f000 fa5a 	bl	8001a94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e0:	2100      	movs	r1, #0
 80015e2:	480d      	ldr	r0, [pc, #52]	; (8001618 <MX_USART3_UART_Init+0x90>)
 80015e4:	f00b fda9 	bl	800d13a <HAL_UARTEx_SetTxFifoThreshold>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80015ee:	f000 fa51 	bl	8001a94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015f2:	2100      	movs	r1, #0
 80015f4:	4808      	ldr	r0, [pc, #32]	; (8001618 <MX_USART3_UART_Init+0x90>)
 80015f6:	f00b fdde 	bl	800d1b6 <HAL_UARTEx_SetRxFifoThreshold>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001600:	f000 fa48 	bl	8001a94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001604:	4804      	ldr	r0, [pc, #16]	; (8001618 <MX_USART3_UART_Init+0x90>)
 8001606:	f00b fd5f 	bl	800d0c8 <HAL_UARTEx_DisableFifoMode>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001610:	f000 fa40 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	240007b4 	.word	0x240007b4
 800161c:	40004800 	.word	0x40004800

08001620 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001626:	4a16      	ldr	r2, [pc, #88]	; (8001680 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001628:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800162c:	2209      	movs	r2, #9
 800162e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001632:	2202      	movs	r2, #2
 8001634:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800163e:	2202      	movs	r2, #2
 8001640:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001644:	2200      	movs	r2, #0
 8001646:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800164a:	2200      	movs	r2, #0
 800164c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001650:	2200      	movs	r2, #0
 8001652:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001656:	2201      	movs	r2, #1
 8001658:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800165c:	2201      	movs	r2, #1
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001662:	2200      	movs	r2, #0
 8001664:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001668:	f006 f826 	bl	80076b8 <HAL_PCD_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001672:	f000 fa0f 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	24000848 	.word	0x24000848
 8001680:	40080000 	.word	0x40080000

08001684 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
 8001698:	615a      	str	r2, [r3, #20]
 800169a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800169c:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <MX_FMC_Init+0x94>)
 800169e:	4a1f      	ldr	r2, [pc, #124]	; (800171c <MX_FMC_Init+0x98>)
 80016a0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80016a2:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <MX_FMC_Init+0x94>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <MX_FMC_Init+0x94>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80016ae:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <MX_FMC_Init+0x94>)
 80016b0:	2204      	movs	r2, #4
 80016b2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <MX_FMC_Init+0x94>)
 80016b6:	2210      	movs	r2, #16
 80016b8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <MX_FMC_Init+0x94>)
 80016bc:	2240      	movs	r2, #64	; 0x40
 80016be:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80016c0:	4b15      	ldr	r3, [pc, #84]	; (8001718 <MX_FMC_Init+0x94>)
 80016c2:	2280      	movs	r2, #128	; 0x80
 80016c4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <MX_FMC_Init+0x94>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <MX_FMC_Init+0x94>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <MX_FMC_Init+0x94>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <MX_FMC_Init+0x94>)
 80016da:	2200      	movs	r2, #0
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80016de:	2310      	movs	r3, #16
 80016e0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80016e2:	2310      	movs	r3, #16
 80016e4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80016e6:	2310      	movs	r3, #16
 80016e8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80016ea:	2310      	movs	r3, #16
 80016ec:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80016ee:	2310      	movs	r3, #16
 80016f0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80016f2:	2310      	movs	r3, #16
 80016f4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80016f6:	2310      	movs	r3, #16
 80016f8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	4619      	mov	r1, r3
 80016fe:	4806      	ldr	r0, [pc, #24]	; (8001718 <MX_FMC_Init+0x94>)
 8001700:	f00a fb06 	bl	800bd10 <HAL_SDRAM_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800170a:	f000 f9c3 	bl	8001a94 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800170e:	bf00      	nop
 8001710:	3720      	adds	r7, #32
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	24000d54 	.word	0x24000d54
 800171c:	52004140 	.word	0x52004140

08001720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b090      	sub	sp, #64	; 0x40
 8001724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001726:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001736:	4bbf      	ldr	r3, [pc, #764]	; (8001a34 <MX_GPIO_Init+0x314>)
 8001738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173c:	4abd      	ldr	r2, [pc, #756]	; (8001a34 <MX_GPIO_Init+0x314>)
 800173e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001746:	4bbb      	ldr	r3, [pc, #748]	; (8001a34 <MX_GPIO_Init+0x314>)
 8001748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
 8001752:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001754:	4bb7      	ldr	r3, [pc, #732]	; (8001a34 <MX_GPIO_Init+0x314>)
 8001756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175a:	4ab6      	ldr	r2, [pc, #728]	; (8001a34 <MX_GPIO_Init+0x314>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001764:	4bb3      	ldr	r3, [pc, #716]	; (8001a34 <MX_GPIO_Init+0x314>)
 8001766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001772:	4bb0      	ldr	r3, [pc, #704]	; (8001a34 <MX_GPIO_Init+0x314>)
 8001774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001778:	4aae      	ldr	r2, [pc, #696]	; (8001a34 <MX_GPIO_Init+0x314>)
 800177a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800177e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001782:	4bac      	ldr	r3, [pc, #688]	; (8001a34 <MX_GPIO_Init+0x314>)
 8001784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178c:	623b      	str	r3, [r7, #32]
 800178e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001790:	4ba8      	ldr	r3, [pc, #672]	; (8001a34 <MX_GPIO_Init+0x314>)
 8001792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001796:	4aa7      	ldr	r2, [pc, #668]	; (8001a34 <MX_GPIO_Init+0x314>)
 8001798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800179c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017a0:	4ba4      	ldr	r3, [pc, #656]	; (8001a34 <MX_GPIO_Init+0x314>)
 80017a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017aa:	61fb      	str	r3, [r7, #28]
 80017ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ae:	4ba1      	ldr	r3, [pc, #644]	; (8001a34 <MX_GPIO_Init+0x314>)
 80017b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b4:	4a9f      	ldr	r2, [pc, #636]	; (8001a34 <MX_GPIO_Init+0x314>)
 80017b6:	f043 0304 	orr.w	r3, r3, #4
 80017ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017be:	4b9d      	ldr	r3, [pc, #628]	; (8001a34 <MX_GPIO_Init+0x314>)
 80017c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017cc:	4b99      	ldr	r3, [pc, #612]	; (8001a34 <MX_GPIO_Init+0x314>)
 80017ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d2:	4a98      	ldr	r2, [pc, #608]	; (8001a34 <MX_GPIO_Init+0x314>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017dc:	4b95      	ldr	r3, [pc, #596]	; (8001a34 <MX_GPIO_Init+0x314>)
 80017de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ea:	4b92      	ldr	r3, [pc, #584]	; (8001a34 <MX_GPIO_Init+0x314>)
 80017ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f0:	4a90      	ldr	r2, [pc, #576]	; (8001a34 <MX_GPIO_Init+0x314>)
 80017f2:	f043 0310 	orr.w	r3, r3, #16
 80017f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017fa:	4b8e      	ldr	r3, [pc, #568]	; (8001a34 <MX_GPIO_Init+0x314>)
 80017fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001800:	f003 0310 	and.w	r3, r3, #16
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001808:	4b8a      	ldr	r3, [pc, #552]	; (8001a34 <MX_GPIO_Init+0x314>)
 800180a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180e:	4a89      	ldr	r2, [pc, #548]	; (8001a34 <MX_GPIO_Init+0x314>)
 8001810:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001814:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001818:	4b86      	ldr	r3, [pc, #536]	; (8001a34 <MX_GPIO_Init+0x314>)
 800181a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001826:	4b83      	ldr	r3, [pc, #524]	; (8001a34 <MX_GPIO_Init+0x314>)
 8001828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182c:	4a81      	ldr	r2, [pc, #516]	; (8001a34 <MX_GPIO_Init+0x314>)
 800182e:	f043 0308 	orr.w	r3, r3, #8
 8001832:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001836:	4b7f      	ldr	r3, [pc, #508]	; (8001a34 <MX_GPIO_Init+0x314>)
 8001838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001844:	4b7b      	ldr	r3, [pc, #492]	; (8001a34 <MX_GPIO_Init+0x314>)
 8001846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184a:	4a7a      	ldr	r2, [pc, #488]	; (8001a34 <MX_GPIO_Init+0x314>)
 800184c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001850:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001854:	4b77      	ldr	r3, [pc, #476]	; (8001a34 <MX_GPIO_Init+0x314>)
 8001856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001862:	4b74      	ldr	r3, [pc, #464]	; (8001a34 <MX_GPIO_Init+0x314>)
 8001864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001868:	4a72      	ldr	r2, [pc, #456]	; (8001a34 <MX_GPIO_Init+0x314>)
 800186a:	f043 0320 	orr.w	r3, r3, #32
 800186e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001872:	4b70      	ldr	r3, [pc, #448]	; (8001a34 <MX_GPIO_Init+0x314>)
 8001874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001878:	f003 0320 	and.w	r3, r3, #32
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001886:	486c      	ldr	r0, [pc, #432]	; (8001a38 <MX_GPIO_Init+0x318>)
 8001888:	f004 fda8 	bl	80063dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800188c:	2200      	movs	r2, #0
 800188e:	f241 0104 	movw	r1, #4100	; 0x1004
 8001892:	486a      	ldr	r0, [pc, #424]	; (8001a3c <MX_GPIO_Init+0x31c>)
 8001894:	f004 fda2 	bl	80063dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	2104      	movs	r1, #4
 800189c:	4868      	ldr	r0, [pc, #416]	; (8001a40 <MX_GPIO_Init+0x320>)
 800189e:	f004 fd9d 	bl	80063dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80018b4:	2303      	movs	r3, #3
 80018b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018bc:	4619      	mov	r1, r3
 80018be:	4861      	ldr	r0, [pc, #388]	; (8001a44 <MX_GPIO_Init+0x324>)
 80018c0:	f004 fbc4 	bl	800604c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c8:	2300      	movs	r3, #0
 80018ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 80018d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d4:	4619      	mov	r1, r3
 80018d6:	485c      	ldr	r0, [pc, #368]	; (8001a48 <MX_GPIO_Init+0x328>)
 80018d8:	f004 fbb8 	bl	800604c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 80018dc:	2330      	movs	r3, #48	; 0x30
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 80018ec:	230a      	movs	r3, #10
 80018ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f4:	4619      	mov	r1, r3
 80018f6:	4855      	ldr	r0, [pc, #340]	; (8001a4c <MX_GPIO_Init+0x32c>)
 80018f8:	f004 fba8 	bl	800604c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 80018fc:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001902:	2300      	movs	r3, #0
 8001904:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190e:	4619      	mov	r1, r3
 8001910:	484f      	ldr	r0, [pc, #316]	; (8001a50 <MX_GPIO_Init+0x330>)
 8001912:	f004 fb9b 	bl	800604c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191c:	2300      	movs	r3, #0
 800191e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001924:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001928:	4619      	mov	r1, r3
 800192a:	484a      	ldr	r0, [pc, #296]	; (8001a54 <MX_GPIO_Init+0x334>)
 800192c:	f004 fb8e 	bl	800604c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001934:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001942:	2301      	movs	r3, #1
 8001944:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800194a:	4619      	mov	r1, r3
 800194c:	4840      	ldr	r0, [pc, #256]	; (8001a50 <MX_GPIO_Init+0x330>)
 800194e:	f004 fb7d 	bl	800604c <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 8001952:	2380      	movs	r3, #128	; 0x80
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2300      	movs	r3, #0
 8001960:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001962:	2306      	movs	r3, #6
 8001964:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 8001966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800196a:	4619      	mov	r1, r3
 800196c:	483a      	ldr	r0, [pc, #232]	; (8001a58 <MX_GPIO_Init+0x338>)
 800196e:	f004 fb6d 	bl	800604c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001972:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001978:	2301      	movs	r3, #1
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001988:	4619      	mov	r1, r3
 800198a:	482b      	ldr	r0, [pc, #172]	; (8001a38 <MX_GPIO_Init+0x318>)
 800198c:	f004 fb5e 	bl	800604c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001990:	2304      	movs	r3, #4
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001994:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001998:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a2:	4619      	mov	r1, r3
 80019a4:	482c      	ldr	r0, [pc, #176]	; (8001a58 <MX_GPIO_Init+0x338>)
 80019a6:	f004 fb51 	bl	800604c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80019aa:	2301      	movs	r3, #1
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ae:	2300      	movs	r3, #0
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80019b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ba:	4619      	mov	r1, r3
 80019bc:	4827      	ldr	r0, [pc, #156]	; (8001a5c <MX_GPIO_Init+0x33c>)
 80019be:	f004 fb45 	bl	800604c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 80019c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d6:	4619      	mov	r1, r3
 80019d8:	481a      	ldr	r0, [pc, #104]	; (8001a44 <MX_GPIO_Init+0x324>)
 80019da:	f004 fb37 	bl	800604c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019de:	2340      	movs	r3, #64	; 0x40
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80019ee:	2309      	movs	r3, #9
 80019f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f6:	4619      	mov	r1, r3
 80019f8:	4815      	ldr	r0, [pc, #84]	; (8001a50 <MX_GPIO_Init+0x330>)
 80019fa:	f004 fb27 	bl	800604c <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 80019fe:	f241 0304 	movw	r3, #4100	; 0x1004
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a04:	2301      	movs	r3, #1
 8001a06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a14:	4619      	mov	r1, r3
 8001a16:	4809      	ldr	r0, [pc, #36]	; (8001a3c <MX_GPIO_Init+0x31c>)
 8001a18:	f004 fb18 	bl	800604c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a22:	2300      	movs	r3, #0
 8001a24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a2e:	4619      	mov	r1, r3
 8001a30:	e016      	b.n	8001a60 <MX_GPIO_Init+0x340>
 8001a32:	bf00      	nop
 8001a34:	58024400 	.word	0x58024400
 8001a38:	58022000 	.word	0x58022000
 8001a3c:	58020400 	.word	0x58020400
 8001a40:	58022400 	.word	0x58022400
 8001a44:	58021c00 	.word	0x58021c00
 8001a48:	58020c00 	.word	0x58020c00
 8001a4c:	58021000 	.word	0x58021000
 8001a50:	58020000 	.word	0x58020000
 8001a54:	58020800 	.word	0x58020800
 8001a58:	58021800 	.word	0x58021800
 8001a5c:	58022800 	.word	0x58022800
 8001a60:	480a      	ldr	r0, [pc, #40]	; (8001a8c <MX_GPIO_Init+0x36c>)
 8001a62:	f004 faf3 	bl	800604c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001a66:	2304      	movs	r3, #4
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4804      	ldr	r0, [pc, #16]	; (8001a90 <MX_GPIO_Init+0x370>)
 8001a7e:	f004 fae5 	bl	800604c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a82:	bf00      	nop
 8001a84:	3740      	adds	r7, #64	; 0x40
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	58021c00 	.word	0x58021c00
 8001a90:	58022400 	.word	0x58022400

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
}
 8001a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <Error_Handler+0x8>
	...

08001aa0 <oximeter5_init>:
 */
static void dev_find_peaks ( int32_t *pn_locs, int32_t *n_npks,  int32_t  *pn_x, uint8_t n_size, int32_t n_min_height, int32_t n_min_distance, int32_t n_max_num );


err_t oximeter5_init ( void )
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
	retval = HAL_I2C_IsDeviceReady(&hi2c4, (OXIMETER5_SET_DEV_ADDR << 1), 3, 100);
 8001aa4:	2364      	movs	r3, #100	; 0x64
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	21ae      	movs	r1, #174	; 0xae
 8001aaa:	4817      	ldr	r0, [pc, #92]	; (8001b08 <oximeter5_init+0x68>)
 8001aac:	f004 ff2a 	bl	8006904 <HAL_I2C_IsDeviceReady>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <oximeter5_init+0x6c>)
 8001ab6:	701a      	strb	r2, [r3, #0]
	if (retval != HAL_OK)
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <oximeter5_init+0x6c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d010      	beq.n	8001ae2 <oximeter5_init+0x42>
	{
		snprintf(SendBuffer1, sizeof(SendBuffer1), "Device not ready\n\r");
 8001ac0:	4a13      	ldr	r2, [pc, #76]	; (8001b10 <oximeter5_init+0x70>)
 8001ac2:	2132      	movs	r1, #50	; 0x32
 8001ac4:	4813      	ldr	r0, [pc, #76]	; (8001b14 <oximeter5_init+0x74>)
 8001ac6:	f00b ffd3 	bl	800da70 <sniprintf>
		HAL_UART_Transmit(&huart3, SendBuffer1, strlen(SendBuffer1), 100);
 8001aca:	4812      	ldr	r0, [pc, #72]	; (8001b14 <oximeter5_init+0x74>)
 8001acc:	f7fe fc08 	bl	80002e0 <strlen>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	2364      	movs	r3, #100	; 0x64
 8001ad6:	490f      	ldr	r1, [pc, #60]	; (8001b14 <oximeter5_init+0x74>)
 8001ad8:	480f      	ldr	r0, [pc, #60]	; (8001b18 <oximeter5_init+0x78>)
 8001ada:	f00a fae4 	bl	800c0a6 <HAL_UART_Transmit>
		return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00f      	b.n	8001b02 <oximeter5_init+0x62>
	} else {
		snprintf(SendBuffer1, sizeof(SendBuffer1), "Device ready\n\r");
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <oximeter5_init+0x7c>)
 8001ae4:	2132      	movs	r1, #50	; 0x32
 8001ae6:	480b      	ldr	r0, [pc, #44]	; (8001b14 <oximeter5_init+0x74>)
 8001ae8:	f00b ffc2 	bl	800da70 <sniprintf>
		HAL_UART_Transmit(&huart3, SendBuffer1, strlen(SendBuffer1), 100);
 8001aec:	4809      	ldr	r0, [pc, #36]	; (8001b14 <oximeter5_init+0x74>)
 8001aee:	f7fe fbf7 	bl	80002e0 <strlen>
 8001af2:	4603      	mov	r3, r0
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	2364      	movs	r3, #100	; 0x64
 8001af8:	4906      	ldr	r1, [pc, #24]	; (8001b14 <oximeter5_init+0x74>)
 8001afa:	4807      	ldr	r0, [pc, #28]	; (8001b18 <oximeter5_init+0x78>)
 8001afc:	f00a fad3 	bl	800c0a6 <HAL_UART_Transmit>
		return HAL_OK;
 8001b00:	2300      	movs	r3, #0
	}
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	24000490 	.word	0x24000490
 8001b0c:	240010fa 	.word	0x240010fa
 8001b10:	0800e44c 	.word	0x0800e44c
 8001b14:	240010fc 	.word	0x240010fc
 8001b18:	240007b4 	.word	0x240007b4
 8001b1c:	0800e460 	.word	0x0800e460

08001b20 <oximeter5_default_cfg>:

err_t oximeter5_default_cfg ( void )
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
    uint8_t tmp;

    err_t error_flag = oximeter5_sw_reset();
 8001b26:	f000 f9bf 	bl	8001ea8 <oximeter5_sw_reset>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1000);
 8001b2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b32:	f002 f937 	bl	8003da4 <HAL_Delay>

    error_flag |= oximeter5_generic_read(OXIMETER5_REG_INTR_STATUS_1, &tmp, 1 );
 8001b36:	f107 030e 	add.w	r3, r7, #14
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f000 f958 	bl	8001df4 <oximeter5_generic_read>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8001b4e:	200a      	movs	r0, #10
 8001b50:	f002 f928 	bl	8003da4 <HAL_Delay>

    tmp = OXIMETER5_SET_INTR_EN_1_FULL_EN;
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	73bb      	strb	r3, [r7, #14]
    tmp |= OXIMETER5_SET_INTR_EN_1_PPG_RDY_EN;
 8001b58:	7bbb      	ldrb	r3, [r7, #14]
 8001b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_INTR_ENABLE_1, &tmp, 1 );
 8001b62:	f107 030e 	add.w	r3, r7, #14
 8001b66:	2201      	movs	r2, #1
 8001b68:	4619      	mov	r1, r3
 8001b6a:	2002      	movs	r0, #2
 8001b6c:	f000 f8be 	bl	8001cec <oximeter5_generic_write>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8001b7a:	200a      	movs	r0, #10
 8001b7c:	f002 f912 	bl	8003da4 <HAL_Delay>

    tmp = OXIMETER5_SET_INTR_EN_2_TEMP_DIS;
 8001b80:	2300      	movs	r3, #0
 8001b82:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_INTR_ENABLE_2, &tmp, 1 );
 8001b84:	f107 030e 	add.w	r3, r7, #14
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	2003      	movs	r0, #3
 8001b8e:	f000 f8ad 	bl	8001cec <oximeter5_generic_write>
 8001b92:	4603      	mov	r3, r0
 8001b94:	461a      	mov	r2, r3
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8001b9c:	200a      	movs	r0, #10
 8001b9e:	f002 f901 	bl	8003da4 <HAL_Delay>

    tmp = OXIMETER5_SET_FIFO_PTR_RESET;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_FIFO_WR_PTR, &tmp, 1 );
 8001ba6:	f107 030e 	add.w	r3, r7, #14
 8001baa:	2201      	movs	r2, #1
 8001bac:	4619      	mov	r1, r3
 8001bae:	2004      	movs	r0, #4
 8001bb0:	f000 f89c 	bl	8001cec <oximeter5_generic_write>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8001bbe:	200a      	movs	r0, #10
 8001bc0:	f002 f8f0 	bl	8003da4 <HAL_Delay>

    tmp = OXIMETER5_SET_FIFO_COUNTER_RESET;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_OVF_COUNTER, &tmp, 1 );
 8001bc8:	f107 030e 	add.w	r3, r7, #14
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4619      	mov	r1, r3
 8001bd0:	2005      	movs	r0, #5
 8001bd2:	f000 f88b 	bl	8001cec <oximeter5_generic_write>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461a      	mov	r2, r3
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8001be0:	200a      	movs	r0, #10
 8001be2:	f002 f8df 	bl	8003da4 <HAL_Delay>

    tmp = OXIMETER5_SET_FIFO_PTR_RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_FIFO_RD_PTR, &tmp, 1 );
 8001bea:	f107 030e 	add.w	r3, r7, #14
 8001bee:	2201      	movs	r2, #1
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	2006      	movs	r0, #6
 8001bf4:	f000 f87a 	bl	8001cec <oximeter5_generic_write>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8001c02:	200a      	movs	r0, #10
 8001c04:	f002 f8ce 	bl	8003da4 <HAL_Delay>

    tmp = OXIMETER5_SET_FIFO_CFG_SMP_AVE_3;
 8001c08:	2340      	movs	r3, #64	; 0x40
 8001c0a:	73bb      	strb	r3, [r7, #14]
    tmp |= OXIMETER5_SET_FIFO_CFG_DATA_SAMP_15;
 8001c0c:	7bbb      	ldrb	r3, [r7, #14]
 8001c0e:	f043 030f 	orr.w	r3, r3, #15
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_FIFO_CONFIG, &tmp, 1 );
 8001c16:	f107 030e 	add.w	r3, r7, #14
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	2008      	movs	r0, #8
 8001c20:	f000 f864 	bl	8001cec <oximeter5_generic_write>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8001c2e:	200a      	movs	r0, #10
 8001c30:	f002 f8b8 	bl	8003da4 <HAL_Delay>

    tmp = OXIMETER5_SET_CFG_MODE_SpO2;
 8001c34:	2303      	movs	r3, #3
 8001c36:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_MODE_CONFIG, &tmp, 1 );
 8001c38:	f107 030e 	add.w	r3, r7, #14
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	4619      	mov	r1, r3
 8001c40:	2009      	movs	r0, #9
 8001c42:	f000 f853 	bl	8001cec <oximeter5_generic_write>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8001c50:	200a      	movs	r0, #10
 8001c52:	f002 f8a7 	bl	8003da4 <HAL_Delay>

    tmp = OXIMETER5_SET_SPO2_CFG_ADC_RGE_4096;
 8001c56:	2320      	movs	r3, #32
 8001c58:	73bb      	strb	r3, [r7, #14]
    tmp |= OXIMETER5_SET_SPO2_CFG_SR_SEC_100;
 8001c5a:	7bbb      	ldrb	r3, [r7, #14]
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	73bb      	strb	r3, [r7, #14]
    tmp |= OXIMETER5_SET_SPO2_CFG_LED_PW_18_bit;
 8001c64:	7bbb      	ldrb	r3, [r7, #14]
 8001c66:	f043 0303 	orr.w	r3, r3, #3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_SPO2_CONFIG, &tmp, 1 );
 8001c6e:	f107 030e 	add.w	r3, r7, #14
 8001c72:	2201      	movs	r2, #1
 8001c74:	4619      	mov	r1, r3
 8001c76:	200a      	movs	r0, #10
 8001c78:	f000 f838 	bl	8001cec <oximeter5_generic_write>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	461a      	mov	r2, r3
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8001c86:	200a      	movs	r0, #10
 8001c88:	f002 f88c 	bl	8003da4 <HAL_Delay>

    tmp = OXIMETER5_SET_LED_PULSE_AMPL_7_2_mA;
 8001c8c:	2324      	movs	r3, #36	; 0x24
 8001c8e:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_LED1_PA, &tmp, 1 );
 8001c90:	f107 030e 	add.w	r3, r7, #14
 8001c94:	2201      	movs	r2, #1
 8001c96:	4619      	mov	r1, r3
 8001c98:	200c      	movs	r0, #12
 8001c9a:	f000 f827 	bl	8001cec <oximeter5_generic_write>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8001ca8:	200a      	movs	r0, #10
 8001caa:	f002 f87b 	bl	8003da4 <HAL_Delay>

    tmp = OXIMETER5_SET_LED_PULSE_AMPL_7_2_mA;
 8001cae:	2324      	movs	r3, #36	; 0x24
 8001cb0:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_LED2_PA, &tmp, 1 );
 8001cb2:	f107 030e 	add.w	r3, r7, #14
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	4619      	mov	r1, r3
 8001cba:	200d      	movs	r0, #13
 8001cbc:	f000 f816 	bl	8001cec <oximeter5_generic_write>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8001cca:	200a      	movs	r0, #10
 8001ccc:	f002 f86a 	bl	8003da4 <HAL_Delay>

    uint32_t ir, red;
    error_flag = oximeter5_read_sensor_data(&ir, &red );
 8001cd0:	1d3a      	adds	r2, r7, #4
 8001cd2:	f107 0308 	add.w	r3, r7, #8
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 f8f7 	bl	8001ecc <oximeter5_read_sensor_data>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	73fb      	strb	r3, [r7, #15]

    return error_flag;
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <oximeter5_generic_write>:

err_t oximeter5_generic_write ( uint8_t reg, uint8_t *tx_buf, uint8_t tx_len )
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b0c6      	sub	sp, #280	; 0x118
 8001cf0:	af02      	add	r7, sp, #8
 8001cf2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001cf6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cfa:	6019      	str	r1, [r3, #0]
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d02:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001d06:	4602      	mov	r2, r0
 8001d08:	701a      	strb	r2, [r3, #0]
 8001d0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d0e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001d12:	460a      	mov	r2, r1
 8001d14:	701a      	strb	r2, [r3, #0]
    uint8_t data_buf[ 257 ] = { 0 };
 8001d16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	3304      	adds	r3, #4
 8001d24:	22fd      	movs	r2, #253	; 0xfd
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f00b fed5 	bl	800dad8 <memset>

    data_buf[ 0 ] = reg;
 8001d2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d36:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001d3a:	f2a2 1209 	subw	r2, r2, #265	; 0x109
 8001d3e:	7812      	ldrb	r2, [r2, #0]
 8001d40:	701a      	strb	r2, [r3, #0]

    for ( uint8_t cnt = 1; cnt <= tx_len; cnt++ )
 8001d42:	2301      	movs	r3, #1
 8001d44:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001d48:	e015      	b.n	8001d76 <oximeter5_generic_write+0x8a>
    {
        data_buf[ cnt ] = tx_buf[ cnt - 1 ];
 8001d4a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001d54:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	441a      	add	r2, r3
 8001d5c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d60:	7811      	ldrb	r1, [r2, #0]
 8001d62:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001d66:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001d6a:	54d1      	strb	r1, [r2, r3]
    for ( uint8_t cnt = 1; cnt <= tx_len; cnt++ )
 8001d6c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d70:	3301      	adds	r3, #1
 8001d72:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001d76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d7a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001d7e:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d9e0      	bls.n	8001d4a <oximeter5_generic_write+0x5e>
    }
    retval = HAL_I2C_Master_Transmit(&hi2c4, (OXIMETER5_SET_DEV_ADDR << 1), data_buf, tx_len+1, 1000);
 8001d88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d8c:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	3301      	adds	r3, #1
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	f107 020c 	add.w	r2, r7, #12
 8001d9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001da0:	9100      	str	r1, [sp, #0]
 8001da2:	21ae      	movs	r1, #174	; 0xae
 8001da4:	480e      	ldr	r0, [pc, #56]	; (8001de0 <oximeter5_generic_write+0xf4>)
 8001da6:	f004 fbc3 	bl	8006530 <HAL_I2C_Master_Transmit>
 8001daa:	4603      	mov	r3, r0
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <oximeter5_generic_write+0xf8>)
 8001db0:	701a      	strb	r2, [r3, #0]
    if (retval != HAL_OK)
 8001db2:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <oximeter5_generic_write+0xf8>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d006      	beq.n	8001dc8 <oximeter5_generic_write+0xdc>
	{
		snprintf(SendBuffer1, sizeof(SendBuffer1), "Transmit failed\n\r");
 8001dba:	4a0b      	ldr	r2, [pc, #44]	; (8001de8 <oximeter5_generic_write+0xfc>)
 8001dbc:	2132      	movs	r1, #50	; 0x32
 8001dbe:	480b      	ldr	r0, [pc, #44]	; (8001dec <oximeter5_generic_write+0x100>)
 8001dc0:	f00b fe56 	bl	800da70 <sniprintf>
		//HAL_UART_Transmit(&huart3, SendBuffer1, strlen(SendBuffer1), 100);
		return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e005      	b.n	8001dd4 <oximeter5_generic_write+0xe8>
	} else {
		snprintf(SendBuffer1, sizeof(SendBuffer1), "Transmit successful\n\r");
 8001dc8:	4a09      	ldr	r2, [pc, #36]	; (8001df0 <oximeter5_generic_write+0x104>)
 8001dca:	2132      	movs	r1, #50	; 0x32
 8001dcc:	4807      	ldr	r0, [pc, #28]	; (8001dec <oximeter5_generic_write+0x100>)
 8001dce:	f00b fe4f 	bl	800da70 <sniprintf>
		//HAL_UART_Transmit(&huart3, SendBuffer1, strlen(SendBuffer1), 100);
		return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
	}
    //return i2c_master_write( &ctx->i2c, data_buf, tx_len + 1 );
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	24000490 	.word	0x24000490
 8001de4:	240010fa 	.word	0x240010fa
 8001de8:	0800e470 	.word	0x0800e470
 8001dec:	240010fc 	.word	0x240010fc
 8001df0:	0800e484 	.word	0x0800e484

08001df4 <oximeter5_generic_read>:

err_t oximeter5_generic_read ( uint8_t reg, uint8_t *rx_buf, uint8_t rx_len )
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	6039      	str	r1, [r7, #0]
 8001dfe:	71fb      	strb	r3, [r7, #7]
 8001e00:	4613      	mov	r3, r2
 8001e02:	71bb      	strb	r3, [r7, #6]
	if (oximeter5_generic_write(reg, rx_buf, rx_len) == HAL_OK) {
 8001e04:	6839      	ldr	r1, [r7, #0]
 8001e06:	79ba      	ldrb	r2, [r7, #6]
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ff6e 	bl	8001cec <oximeter5_generic_write>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d11f      	bne.n	8001e56 <oximeter5_generic_read+0x62>
		retval = HAL_I2C_Master_Receive(&hi2c4, (OXIMETER5_SET_DEV_ADDR << 1), &rx_buf, rx_len, 1000);
 8001e16:	79bb      	ldrb	r3, [r7, #6]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	463a      	mov	r2, r7
 8001e1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e20:	9100      	str	r1, [sp, #0]
 8001e22:	21ae      	movs	r1, #174	; 0xae
 8001e24:	4811      	ldr	r0, [pc, #68]	; (8001e6c <oximeter5_generic_read+0x78>)
 8001e26:	f004 fc77 	bl	8006718 <HAL_I2C_Master_Receive>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <oximeter5_generic_read+0x7c>)
 8001e30:	701a      	strb	r2, [r3, #0]
		if (retval != HAL_OK)
 8001e32:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <oximeter5_generic_read+0x7c>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d006      	beq.n	8001e48 <oximeter5_generic_read+0x54>
		{
			snprintf(SendBuffer1, sizeof(SendBuffer1), "Receive failed\n\r");
 8001e3a:	4a0e      	ldr	r2, [pc, #56]	; (8001e74 <oximeter5_generic_read+0x80>)
 8001e3c:	2132      	movs	r1, #50	; 0x32
 8001e3e:	480e      	ldr	r0, [pc, #56]	; (8001e78 <oximeter5_generic_read+0x84>)
 8001e40:	f00b fe16 	bl	800da70 <sniprintf>
			//HAL_UART_Transmit(&huart3, SendBuffer1, strlen(SendBuffer1), 100);
			return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e00c      	b.n	8001e62 <oximeter5_generic_read+0x6e>
		} else {
			snprintf(SendBuffer1, sizeof(SendBuffer1), "Receive successful\n\r");
 8001e48:	4a0c      	ldr	r2, [pc, #48]	; (8001e7c <oximeter5_generic_read+0x88>)
 8001e4a:	2132      	movs	r1, #50	; 0x32
 8001e4c:	480a      	ldr	r0, [pc, #40]	; (8001e78 <oximeter5_generic_read+0x84>)
 8001e4e:	f00b fe0f 	bl	800da70 <sniprintf>
			//HAL_UART_Transmit(&huart3, SendBuffer1, strlen(SendBuffer1), 100);
			return HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e005      	b.n	8001e62 <oximeter5_generic_read+0x6e>
		}
	} else {
		snprintf(SendBuffer1, sizeof(SendBuffer1), "Write before read failed\n\r");
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <oximeter5_generic_read+0x8c>)
 8001e58:	2132      	movs	r1, #50	; 0x32
 8001e5a:	4807      	ldr	r0, [pc, #28]	; (8001e78 <oximeter5_generic_read+0x84>)
 8001e5c:	f00b fe08 	bl	800da70 <sniprintf>
		//HAL_UART_Transmit(&huart3, SendBuffer1, strlen(SendBuffer1), 100);
		return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
	}
    //return i2c_master_write_then_read( &ctx->i2c, &reg, 1, rx_buf, rx_len );
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	24000490 	.word	0x24000490
 8001e70:	240010fa 	.word	0x240010fa
 8001e74:	0800e49c 	.word	0x0800e49c
 8001e78:	240010fc 	.word	0x240010fc
 8001e7c:	0800e4b0 	.word	0x0800e4b0
 8001e80:	0800e4c8 	.word	0x0800e4c8

08001e84 <oximeter5_check_interrupt>:

uint8_t oximeter5_check_interrupt ( void )
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_12) == GPIO_PIN_SET ? OXIMETER5_INTERRUPT_ACTIVE : OXIMETER5_INTERRUPT_INACTIVE;
 8001e88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <oximeter5_check_interrupt+0x20>)
 8001e8e:	f004 fa8d 	bl	80063ac <HAL_GPIO_ReadPin>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	bf0c      	ite	eq
 8001e98:	2301      	moveq	r3, #1
 8001e9a:	2300      	movne	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
    //return digital_in_read( &ctx->int_pin );
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	58021c00 	.word	0x58021c00

08001ea8 <oximeter5_sw_reset>:

err_t oximeter5_sw_reset ( void )
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
    uint8_t tx_data;

    tx_data = OXIMETER5_SW_RESET;
 8001eae:	2340      	movs	r3, #64	; 0x40
 8001eb0:	71bb      	strb	r3, [r7, #6]
    err_t error_flag = oximeter5_generic_write((OXIMETER5_REG_MODE_CONFIG << 1), &tx_data, 1 );
 8001eb2:	1dbb      	adds	r3, r7, #6
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	2012      	movs	r0, #18
 8001eba:	f7ff ff17 	bl	8001cec <oximeter5_generic_write>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]

    return error_flag;
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <oximeter5_read_sensor_data>:

    return oximeter5_generic_write(OXIMETER5_REG_MODE_CONFIG, &tx_data, 1 );
}

err_t oximeter5_read_sensor_data ( uint32_t *ir, uint32_t *red )
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
    uint8_t rx_buf[ 6 ];

    err_t error_flag = oximeter5_generic_read(OXIMETER5_REG_FIFO_DATA, rx_buf, 6 );
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	2206      	movs	r2, #6
 8001edc:	4619      	mov	r1, r3
 8001ede:	2007      	movs	r0, #7
 8001ee0:	f7ff ff88 	bl	8001df4 <oximeter5_generic_read>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	73fb      	strb	r3, [r7, #15]

    *ir = rx_buf[ 0 ];
 8001ee8:	7a3b      	ldrb	r3, [r7, #8]
 8001eea:	461a      	mov	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	601a      	str	r2, [r3, #0]
    *ir <<= 8;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	021a      	lsls	r2, r3, #8
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	601a      	str	r2, [r3, #0]
    *ir |= rx_buf[ 1 ];
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	7a7a      	ldrb	r2, [r7, #9]
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	601a      	str	r2, [r3, #0]
    *ir <<= 8;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	021a      	lsls	r2, r3, #8
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	601a      	str	r2, [r3, #0]
    *ir |= rx_buf[ 2 ];
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	7aba      	ldrb	r2, [r7, #10]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	601a      	str	r2, [r3, #0]
    *ir &= DATA_18_BIT;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	601a      	str	r2, [r3, #0]

    *red = rx_buf[ 3 ];
 8001f28:	7afb      	ldrb	r3, [r7, #11]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	601a      	str	r2, [r3, #0]
    *red <<= 8;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	021a      	lsls	r2, r3, #8
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	601a      	str	r2, [r3, #0]
    *red |= rx_buf[ 4 ];
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	7b3a      	ldrb	r2, [r7, #12]
 8001f40:	431a      	orrs	r2, r3
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	601a      	str	r2, [r3, #0]
    *red <<= 8;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	021a      	lsls	r2, r3, #8
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	601a      	str	r2, [r3, #0]
    *red |= rx_buf[ 5 ];
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	7b7a      	ldrb	r2, [r7, #13]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	601a      	str	r2, [r3, #0]
    *red &= DATA_18_BIT;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	601a      	str	r2, [r3, #0]

    return error_flag;
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <oximeter5_get_oxygen_saturation>:

err_t oximeter5_get_oxygen_saturation ( uint32_t *pun_ir_buffer, int32_t n_ir_buffer_length, uint32_t *pun_red_buffer, uint8_t *pn_spo2 )
{
 8001f74:	b590      	push	{r4, r7, lr}
 8001f76:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 8001f7a:	af04      	add	r7, sp, #16
 8001f7c:	f507 747c 	add.w	r4, r7, #1008	; 0x3f0
 8001f80:	f5a4 7479 	sub.w	r4, r4, #996	; 0x3e4
 8001f84:	6020      	str	r0, [r4, #0]
 8001f86:	f507 707c 	add.w	r0, r7, #1008	; 0x3f0
 8001f8a:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
 8001f8e:	6001      	str	r1, [r0, #0]
 8001f90:	f507 717c 	add.w	r1, r7, #1008	; 0x3f0
 8001f94:	f5a1 717b 	sub.w	r1, r1, #1004	; 0x3ec
 8001f98:	600a      	str	r2, [r1, #0]
 8001f9a:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8001f9e:	f5a2 727c 	sub.w	r2, r2, #1008	; 0x3f0
 8001fa2:	6013      	str	r3, [r2, #0]
    int32_t n_nume, n_denom ;
    int32_t an_x[ BUFFER_SIZE ];
    int32_t an_y[ BUFFER_SIZE ];
    err_t error_flag;

    un_ir_mean = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

    for ( int32_t n_cnt_k = 0; n_cnt_k < n_ir_buffer_length; n_cnt_k++ )
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8001fb0:	e013      	b.n	8001fda <oximeter5_get_oxygen_saturation+0x66>
    {
        un_ir_mean += pun_ir_buffer[ n_cnt_k ];
 8001fb2:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8001fbc:	f5a2 7279 	sub.w	r2, r2, #996	; 0x3e4
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8001fca:	4413      	add	r3, r2
 8001fcc:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    for ( int32_t n_cnt_k = 0; n_cnt_k < n_ir_buffer_length; n_cnt_k++ )
 8001fd0:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8001fda:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8001fde:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001fe2:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	dbe2      	blt.n	8001fb2 <oximeter5_get_oxygen_saturation+0x3e>
    }

    un_ir_mean =un_ir_mean/n_ir_buffer_length ;
 8001fec:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8001ff0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

    // remove DC and invert signal so that we can use peak detector as valley detector
    for ( int32_t n_cnt_k = 0; n_cnt_k < n_ir_buffer_length; n_cnt_k++ )
 8002002:	2300      	movs	r3, #0
 8002004:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8002008:	e01a      	b.n	8002040 <oximeter5_get_oxygen_saturation+0xcc>
    {
        an_x[ n_cnt_k ] = -1*(pun_ir_buffer[ n_cnt_k ] - un_ir_mean );
 800200a:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002014:	f5a2 7279 	sub.w	r2, r2, #996	; 0x3e4
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	4413      	add	r3, r2
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	4619      	mov	r1, r3
 8002026:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800202a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800202e:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8002032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for ( int32_t n_cnt_k = 0; n_cnt_k < n_ir_buffer_length; n_cnt_k++ )
 8002036:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800203a:	3301      	adds	r3, #1
 800203c:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8002040:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002044:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002048:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	dbdb      	blt.n	800200a <oximeter5_get_oxygen_saturation+0x96>
    }

    // 4 pt Moving Average
    for ( int32_t n_cnt_k = 0; n_cnt_k < BUFFER_SIZE-MA4_SIZE; n_cnt_k++ )
 8002052:	2300      	movs	r3, #0
 8002054:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 8002058:	e037      	b.n	80020ca <oximeter5_get_oxygen_saturation+0x156>
    {
        an_x[ n_cnt_k ] = ( an_x[ n_cnt_k ] + an_x[ n_cnt_k + 1 ] + an_x[ n_cnt_k + 2 ] + an_x[ n_cnt_k + 3 ] ) / 4;
 800205a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800205e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8002062:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8002066:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800206a:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 800206e:	1c59      	adds	r1, r3, #1
 8002070:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002074:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8002078:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800207c:	441a      	add	r2, r3
 800207e:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8002082:	1c99      	adds	r1, r3, #2
 8002084:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002088:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800208c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002090:	441a      	add	r2, r3
 8002092:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8002096:	1cd9      	adds	r1, r3, #3
 8002098:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800209c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80020a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020a4:	4413      	add	r3, r2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	da00      	bge.n	80020ac <oximeter5_get_oxygen_saturation+0x138>
 80020aa:	3303      	adds	r3, #3
 80020ac:	109b      	asrs	r3, r3, #2
 80020ae:	4619      	mov	r1, r3
 80020b0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80020b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80020b8:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 80020bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for ( int32_t n_cnt_k = 0; n_cnt_k < BUFFER_SIZE-MA4_SIZE; n_cnt_k++ )
 80020c0:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 80020c4:	3301      	adds	r3, #1
 80020c6:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 80020ca:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 80020ce:	2b5f      	cmp	r3, #95	; 0x5f
 80020d0:	ddc3      	ble.n	800205a <oximeter5_get_oxygen_saturation+0xe6>
    }

    // calculate threshold
    n_th1 = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
    for ( int32_t n_cnt_k = 0; n_cnt_k < BUFFER_SIZE; n_cnt_k++ )
 80020d8:	2300      	movs	r3, #0
 80020da:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 80020de:	e011      	b.n	8002104 <oximeter5_get_oxygen_saturation+0x190>
    {
        n_th1 +=  an_x[ n_cnt_k ];
 80020e0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80020e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80020e8:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 80020ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f0:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 80020f4:	4413      	add	r3, r2
 80020f6:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
    for ( int32_t n_cnt_k = 0; n_cnt_k < BUFFER_SIZE; n_cnt_k++ )
 80020fa:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 80020fe:	3301      	adds	r3, #1
 8002100:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 8002104:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8002108:	2b63      	cmp	r3, #99	; 0x63
 800210a:	dde9      	ble.n	80020e0 <oximeter5_get_oxygen_saturation+0x16c>
    }

    n_th1=  n_th1 / BUFFER_SIZE;
 800210c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002110:	4a71      	ldr	r2, [pc, #452]	; (80022d8 <oximeter5_get_oxygen_saturation+0x364>)
 8002112:	fb82 1203 	smull	r1, r2, r2, r3
 8002116:	1152      	asrs	r2, r2, #5
 8002118:	17db      	asrs	r3, r3, #31
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
    if ( n_th1 < 30 )
 8002120:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002124:	2b1d      	cmp	r3, #29
 8002126:	dc02      	bgt.n	800212e <oximeter5_get_oxygen_saturation+0x1ba>
    {
        n_th1 = 30; // min allowed
 8002128:	231e      	movs	r3, #30
 800212a:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
    }

    if ( n_th1 > 60 )
 800212e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002132:	2b3c      	cmp	r3, #60	; 0x3c
 8002134:	dd02      	ble.n	800213c <oximeter5_get_oxygen_saturation+0x1c8>
    {
        n_th1 = 60; // max allowed
 8002136:	233c      	movs	r3, #60	; 0x3c
 8002138:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
    }

    for ( int32_t n_cnt_k = 0; n_cnt_k < 15; n_cnt_k++ )
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 8002142:	e00d      	b.n	8002160 <oximeter5_get_oxygen_saturation+0x1ec>
    {
        an_ir_valley_locs[ n_cnt_k ] = 0;
 8002144:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 800214e:	443b      	add	r3, r7
 8002150:	2200      	movs	r2, #0
 8002152:	f843 2ca8 	str.w	r2, [r3, #-168]
    for ( int32_t n_cnt_k = 0; n_cnt_k < 15; n_cnt_k++ )
 8002156:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 800215a:	3301      	adds	r3, #1
 800215c:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 8002160:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8002164:	2b0e      	cmp	r3, #14
 8002166:	dded      	ble.n	8002144 <oximeter5_get_oxygen_saturation+0x1d0>
    }

    // since we flipped signal, we use peak detector as valley detector
    dev_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks
 8002168:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800216c:	f507 7161 	add.w	r1, r7, #900	; 0x384
 8002170:	f507 7052 	add.w	r0, r7, #840	; 0x348
 8002174:	230f      	movs	r3, #15
 8002176:	9302      	str	r3, [sp, #8]
 8002178:	2304      	movs	r3, #4
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	2364      	movs	r3, #100	; 0x64
 8002184:	f000 fbbc 	bl	8002900 <dev_find_peaks>

    //  load raw value again for SPO2 calculation : RED(=y) and IR(=X)
    for ( int32_t n_cnt_k = 0; n_cnt_k < n_ir_buffer_length; n_cnt_k++ )
 8002188:	2300      	movs	r3, #0
 800218a:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800218e:	e02a      	b.n	80021e6 <oximeter5_get_oxygen_saturation+0x272>
    {
        an_x[ n_cnt_k ] = pun_ir_buffer[ n_cnt_k ];
 8002190:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 800219a:	f5a2 7279 	sub.w	r2, r2, #996	; 0x3e4
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	4413      	add	r3, r2
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4619      	mov	r1, r3
 80021a6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80021aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80021ae:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 80021b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        an_y[ n_cnt_k ] = pun_red_buffer[ n_cnt_k ];
 80021b6:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 80021c0:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	4413      	add	r3, r2
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4619      	mov	r1, r3
 80021cc:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80021d0:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80021d4:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 80021d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for ( int32_t n_cnt_k = 0; n_cnt_k < n_ir_buffer_length; n_cnt_k++ )
 80021dc:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80021e0:	3301      	adds	r3, #1
 80021e2:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 80021e6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80021ea:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80021ee:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	dbcb      	blt.n	8002190 <oximeter5_get_oxygen_saturation+0x21c>
    }

    // find precise min near an_ir_valley_locs
    n_exact_ir_valley_locs_count = n_npks;
 80021f8:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 80021fc:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0

    //using exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration an_ratio
    //finding AC/DC maximum of raw
    n_ratio_average = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
    n_i_ratio_count = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

    for ( int32_t n_cnt_k = 0; n_cnt_k < 5; n_cnt_k++ )
 800220c:	2300      	movs	r3, #0
 800220e:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8002212:	e00d      	b.n	8002230 <oximeter5_get_oxygen_saturation+0x2bc>
    {
        an_ratio[ n_cnt_k ] = 0;
 8002214:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 800221e:	443b      	add	r3, r7
 8002220:	2200      	movs	r2, #0
 8002222:	f843 2cbc 	str.w	r2, [r3, #-188]
    for ( int32_t n_cnt_k = 0; n_cnt_k < 5; n_cnt_k++ )
 8002226:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 800222a:	3301      	adds	r3, #1
 800222c:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8002230:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8002234:	2b04      	cmp	r3, #4
 8002236:	dded      	ble.n	8002214 <oximeter5_get_oxygen_saturation+0x2a0>
    }

    for ( int32_t n_cnt_k = 0; n_cnt_k < n_exact_ir_valley_locs_count; n_cnt_k++ )
 8002238:	2300      	movs	r3, #0
 800223a:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 800223e:	e018      	b.n	8002272 <oximeter5_get_oxygen_saturation+0x2fe>
    {
        if ( an_ir_valley_locs[ n_cnt_k ] > BUFFER_SIZE )
 8002240:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 800224a:	443b      	add	r3, r7
 800224c:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8002250:	2b64      	cmp	r3, #100	; 0x64
 8002252:	dd09      	ble.n	8002268 <oximeter5_get_oxygen_saturation+0x2f4>
        {
            // do not use SPO2 since valley loc is out of range
            *pn_spo2 = OXIMETER5_PN_SPO2_ERROR_DATA;
 8002254:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002258:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	22ff      	movs	r2, #255	; 0xff
 8002260:	701a      	strb	r2, [r3, #0]
            error_flag  = OXIMETER5_ERROR;
 8002262:	23ff      	movs	r3, #255	; 0xff
 8002264:	f887 33cf 	strb.w	r3, [r7, #975]	; 0x3cf
    for ( int32_t n_cnt_k = 0; n_cnt_k < n_exact_ir_valley_locs_count; n_cnt_k++ )
 8002268:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800226c:	3301      	adds	r3, #1
 800226e:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8002272:	f8d7 23ac 	ldr.w	r2, [r7, #940]	; 0x3ac
 8002276:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800227a:	429a      	cmp	r2, r3
 800227c:	dbe0      	blt.n	8002240 <oximeter5_get_oxygen_saturation+0x2cc>
        }
    }

    // find max between two valley locations
    // and use an_ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2
    for ( int32_t n_cnt_k = 0; n_cnt_k < n_exact_ir_valley_locs_count - 1; n_cnt_k++ )
 800227e:	2300      	movs	r3, #0
 8002280:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 8002284:	e16b      	b.n	800255e <oximeter5_get_oxygen_saturation+0x5ea>
    {
        n_y_dc_max= OXIMETER5_N_X_DC_MAX;
 8002286:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800228a:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        n_x_dc_max= OXIMETER5_N_X_DC_MAX;
 800228e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002292:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc

        if ( an_ir_valley_locs[ n_cnt_k + 1 ] - an_ir_valley_locs[ n_cnt_k ] > 3 )
 8002296:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800229a:	3301      	adds	r3, #1
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 80022a2:	443b      	add	r3, r7
 80022a4:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 80022a8:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 80022b2:	443b      	add	r3, r7
 80022b4:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	f340 814a 	ble.w	8002554 <oximeter5_get_oxygen_saturation+0x5e0>
        {
            for ( int32_t n_cnt_i = an_ir_valley_locs[ n_cnt_k]; n_cnt_i < an_ir_valley_locs[ n_cnt_k + 1 ]; n_cnt_i++ )
 80022c0:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 80022ca:	443b      	add	r3, r7
 80022cc:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 80022d0:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 80022d4:	e03b      	b.n	800234e <oximeter5_get_oxygen_saturation+0x3da>
 80022d6:	bf00      	nop
 80022d8:	51eb851f 	.word	0x51eb851f
            {
                if ( an_x[ n_cnt_i ] > n_x_dc_max )
 80022dc:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80022e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80022e4:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 80022e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ec:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 80022f0:	429a      	cmp	r2, r3
 80022f2:	da0d      	bge.n	8002310 <oximeter5_get_oxygen_saturation+0x39c>
                {
                    n_x_dc_max = an_x[ n_cnt_i ];
 80022f4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80022f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80022fc:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8002300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002304:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
                    n_x_dc_max_idx = n_cnt_i;
 8002308:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800230c:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
                }

                if ( an_y[ n_cnt_i ] > n_y_dc_max )
 8002310:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002314:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8002318:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 800231c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002320:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8002324:	429a      	cmp	r2, r3
 8002326:	da0d      	bge.n	8002344 <oximeter5_get_oxygen_saturation+0x3d0>
                {
                    n_y_dc_max = an_y[ n_cnt_i ];
 8002328:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800232c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8002330:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8002334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002338:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
                    n_y_dc_max_idx = n_cnt_i;
 800233c:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8002340:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
            for ( int32_t n_cnt_i = an_ir_valley_locs[ n_cnt_k]; n_cnt_i < an_ir_valley_locs[ n_cnt_k + 1 ]; n_cnt_i++ )
 8002344:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8002348:	3301      	adds	r3, #1
 800234a:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 800234e:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8002352:	3301      	adds	r3, #1
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 800235a:	443b      	add	r3, r7
 800235c:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8002360:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8002364:	429a      	cmp	r2, r3
 8002366:	dbb9      	blt.n	80022dc <oximeter5_get_oxygen_saturation+0x368>

                }
            }

            //red
            n_y_ac = ( an_y[ an_ir_valley_locs[ n_cnt_k + 1 ] ] - an_y[ an_ir_valley_locs[ n_cnt_k ] ] ) * ( n_y_dc_max_idx - an_ir_valley_locs[ n_cnt_k ] );
 8002368:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800236c:	3301      	adds	r3, #1
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8002374:	443b      	add	r3, r7
 8002376:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 800237a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800237e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8002382:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002386:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8002390:	443b      	add	r3, r7
 8002392:	f853 1ca8 	ldr.w	r1, [r3, #-168]
 8002396:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800239a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800239e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80023a2:	1ad2      	subs	r2, r2, r3
 80023a4:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 80023ae:	443b      	add	r3, r7
 80023b0:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 80023b4:	f8d7 13d8 	ldr.w	r1, [r7, #984]	; 0x3d8
 80023b8:	1acb      	subs	r3, r1, r3
 80023ba:	fb02 f303 	mul.w	r3, r2, r3
 80023be:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
            n_y_ac =  an_y[an_ir_valley_locs[ n_cnt_k ] ] + n_y_ac / ( an_ir_valley_locs[ n_cnt_k + 1 ] - an_ir_valley_locs[ n_cnt_k ] );
 80023c2:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 80023cc:	443b      	add	r3, r7
 80023ce:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 80023d2:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80023d6:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80023da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80023de:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80023e2:	3301      	adds	r3, #1
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 80023ea:	443b      	add	r3, r7
 80023ec:	f853 1ca8 	ldr.w	r1, [r3, #-168]
 80023f0:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 80023fa:	443b      	add	r3, r7
 80023fc:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8002400:	1acb      	subs	r3, r1, r3
 8002402:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 8002406:	fb91 f3f3 	sdiv	r3, r1, r3
 800240a:	4413      	add	r3, r2
 800240c:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
            // subracting linear DC compoenents from raw
            n_y_ac =  an_y[ n_y_dc_max_idx ] - n_y_ac;
 8002410:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002414:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8002418:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 800241c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002420:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
            // ir
            n_x_ac = ( an_x[ an_ir_valley_locs[ n_cnt_k + 1 ] ] - an_x[ an_ir_valley_locs[ n_cnt_k ] ] ) * ( n_x_dc_max_idx - an_ir_valley_locs[ n_cnt_k ] );
 800242a:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800242e:	3301      	adds	r3, #1
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8002436:	443b      	add	r3, r7
 8002438:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 800243c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002440:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8002444:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002448:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8002452:	443b      	add	r3, r7
 8002454:	f853 1ca8 	ldr.w	r1, [r3, #-168]
 8002458:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800245c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8002460:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002464:	1ad2      	subs	r2, r2, r3
 8002466:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8002470:	443b      	add	r3, r7
 8002472:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8002476:	f8d7 13d4 	ldr.w	r1, [r7, #980]	; 0x3d4
 800247a:	1acb      	subs	r3, r1, r3
 800247c:	fb02 f303 	mul.w	r3, r2, r3
 8002480:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
            // subracting linear DC compoenents from raw
            n_x_ac =  an_x[ an_ir_valley_locs[ n_cnt_k ] ] + n_x_ac / ( an_ir_valley_locs[ n_cnt_k + 1 ] - an_ir_valley_locs[ n_cnt_k ] );
 8002484:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 800248e:	443b      	add	r3, r7
 8002490:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 8002494:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002498:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800249c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80024a0:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80024a4:	3301      	adds	r3, #1
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 80024ac:	443b      	add	r3, r7
 80024ae:	f853 1ca8 	ldr.w	r1, [r3, #-168]
 80024b2:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 80024bc:	443b      	add	r3, r7
 80024be:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 80024c2:	1acb      	subs	r3, r1, r3
 80024c4:	f8d7 1390 	ldr.w	r1, [r7, #912]	; 0x390
 80024c8:	fb91 f3f3 	sdiv	r3, r1, r3
 80024cc:	4413      	add	r3, r2
 80024ce:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
            n_x_ac =  an_x[ n_y_dc_max_idx ] - n_x_ac;
 80024d2:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80024d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80024da:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 80024de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80024e2:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
            //prepare X100 to preserve floating value
            n_nume =( n_y_ac * n_x_dc_max ) >> 7;
 80024ec:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80024f0:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 80024f4:	fb02 f303 	mul.w	r3, r2, r3
 80024f8:	11db      	asrs	r3, r3, #7
 80024fa:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
            n_denom = ( n_x_ac * n_y_dc_max ) >> 7;
 80024fe:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8002502:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8002506:	fb02 f303 	mul.w	r3, r2, r3
 800250a:	11db      	asrs	r3, r3, #7
 800250c:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388

            if ( ( n_denom > 0 )  && ( n_i_ratio_count < 5 ) && ( n_nume != 0 ) )
 8002510:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002514:	2b00      	cmp	r3, #0
 8002516:	dd1d      	ble.n	8002554 <oximeter5_get_oxygen_saturation+0x5e0>
 8002518:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 800251c:	2b04      	cmp	r3, #4
 800251e:	dc19      	bgt.n	8002554 <oximeter5_get_oxygen_saturation+0x5e0>
 8002520:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8002524:	2b00      	cmp	r3, #0
 8002526:	d015      	beq.n	8002554 <oximeter5_get_oxygen_saturation+0x5e0>
            {
                an_ratio[ n_i_ratio_count ] = ( n_nume * 100 ) / n_denom;
 8002528:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 800252c:	2264      	movs	r2, #100	; 0x64
 800252e:	fb03 f202 	mul.w	r2, r3, r2
 8002532:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002536:	fb92 f2f3 	sdiv	r2, r2, r3
 800253a:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8002544:	443b      	add	r3, r7
 8002546:	f843 2cbc 	str.w	r2, [r3, #-188]
                n_i_ratio_count++;
 800254a:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 800254e:	3301      	adds	r3, #1
 8002550:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
    for ( int32_t n_cnt_k = 0; n_cnt_k < n_exact_ir_valley_locs_count - 1; n_cnt_k++ )
 8002554:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8002558:	3301      	adds	r3, #1
 800255a:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 800255e:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002562:	3b01      	subs	r3, #1
 8002564:	f8d7 23a8 	ldr.w	r2, [r7, #936]	; 0x3a8
 8002568:	429a      	cmp	r2, r3
 800256a:	f6ff ae8c 	blt.w	8002286 <oximeter5_get_oxygen_saturation+0x312>
            }
        }
    }

    // choose median value since PPG signal may varies from beat to beat
    dev_sort_ascend( an_ratio, n_i_ratio_count );
 800256e:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8002572:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	; 0x3e8
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f91f 	bl	80027ba <dev_sort_ascend>
    n_middle_idx = n_i_ratio_count / 2;
 800257c:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8002580:	2b00      	cmp	r3, #0
 8002582:	da00      	bge.n	8002586 <oximeter5_get_oxygen_saturation+0x612>
 8002584:	3301      	adds	r3, #1
 8002586:	105b      	asrs	r3, r3, #1
 8002588:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c

    if ( n_middle_idx > 1 )
 800258c:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8002590:	2b01      	cmp	r3, #1
 8002592:	dd18      	ble.n	80025c6 <oximeter5_get_oxygen_saturation+0x652>
    {
        // use median
        n_ratio_average = ( an_ratio[ n_middle_idx - 1 ] + an_ratio[ n_middle_idx ] ) / 2;
 8002594:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8002598:	3b01      	subs	r3, #1
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 80025a0:	443b      	add	r3, r7
 80025a2:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 80025a6:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 80025b0:	443b      	add	r3, r7
 80025b2:	f853 3cbc 	ldr.w	r3, [r3, #-188]
 80025b6:	4413      	add	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	da00      	bge.n	80025be <oximeter5_get_oxygen_saturation+0x64a>
 80025bc:	3301      	adds	r3, #1
 80025be:	105b      	asrs	r3, r3, #1
 80025c0:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 80025c4:	e009      	b.n	80025da <oximeter5_get_oxygen_saturation+0x666>
    }
    else
    {
        n_ratio_average = an_ratio[ n_middle_idx ];
 80025c6:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 80025d0:	443b      	add	r3, r7
 80025d2:	f853 3cbc 	ldr.w	r3, [r3, #-188]
 80025d6:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
    }

    if ( ( n_ratio_average > 2 ) && ( n_ratio_average < 184 ) )
 80025da:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80025de:	2b02      	cmp	r3, #2
 80025e0:	dd17      	ble.n	8002612 <oximeter5_get_oxygen_saturation+0x69e>
 80025e2:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80025e6:	2bb7      	cmp	r3, #183	; 0xb7
 80025e8:	dc13      	bgt.n	8002612 <oximeter5_get_oxygen_saturation+0x69e>
    {
        n_spo2_calc = uch_spo2_table[ n_ratio_average ];
 80025ea:	4a12      	ldr	r2, [pc, #72]	; (8002634 <oximeter5_get_oxygen_saturation+0x6c0>)
 80025ec:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80025f0:	4413      	add	r3, r2
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
        *pn_spo2 = n_spo2_calc;
 80025f8:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002602:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	701a      	strb	r2, [r3, #0]
        error_flag = OXIMETER5_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	f887 33cf 	strb.w	r3, [r7, #975]	; 0x3cf
 8002610:	e009      	b.n	8002626 <oximeter5_get_oxygen_saturation+0x6b2>
    }
    else
    {
        *pn_spo2 = OXIMETER5_PN_SPO2_ERROR_DATA;
 8002612:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002616:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	22ff      	movs	r2, #255	; 0xff
 800261e:	701a      	strb	r2, [r3, #0]
        error_flag  = OXIMETER5_ERROR;
 8002620:	23ff      	movs	r3, #255	; 0xff
 8002622:	f887 33cf 	strb.w	r3, [r7, #975]	; 0x3cf
    }

    return error_flag;
 8002626:	f897 33cf 	ldrb.w	r3, [r7, #975]	; 0x3cf
}
 800262a:	4618      	mov	r0, r3
 800262c:	f507 777d 	add.w	r7, r7, #1012	; 0x3f4
 8002630:	46bd      	mov	sp, r7
 8002632:	bd90      	pop	{r4, r7, pc}
 8002634:	0800e530 	.word	0x0800e530

08002638 <dev_peaks_above_min_height>:
  return error_flag;

}

static void dev_peaks_above_min_height ( int32_t *pn_locs, int32_t *n_npks,  int32_t  *pn_x, uint8_t n_size, int32_t n_min_height )
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
 8002644:	70fb      	strb	r3, [r7, #3]
    uint8_t n_width;
    uint8_t n_cnt = 1;
 8002646:	2301      	movs	r3, #1
 8002648:	75bb      	strb	r3, [r7, #22]

    *n_npks = 0;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

    while ( n_cnt < ( n_size - 1 ) )
 8002650:	e05b      	b.n	800270a <dev_peaks_above_min_height+0xd2>
    {
        if ( pn_x[ n_cnt ] > n_min_height && pn_x[ n_cnt ] > pn_x[ n_cnt - 1 ] )
 8002652:	7dbb      	ldrb	r3, [r7, #22]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6a3a      	ldr	r2, [r7, #32]
 800265e:	429a      	cmp	r2, r3
 8002660:	da50      	bge.n	8002704 <dev_peaks_above_min_height+0xcc>
 8002662:	7dbb      	ldrb	r3, [r7, #22]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	7db9      	ldrb	r1, [r7, #22]
 800266e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002672:	440b      	add	r3, r1
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	440b      	add	r3, r1
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	dd41      	ble.n	8002704 <dev_peaks_above_min_height+0xcc>
        {
            n_width = 1;
 8002680:	2301      	movs	r3, #1
 8002682:	75fb      	strb	r3, [r7, #23]

            while ( n_cnt + n_width < n_size && pn_x[ n_cnt ] == pn_x[ n_cnt + n_width ] )
 8002684:	e002      	b.n	800268c <dev_peaks_above_min_height+0x54>
            {
                n_width++;
 8002686:	7dfb      	ldrb	r3, [r7, #23]
 8002688:	3301      	adds	r3, #1
 800268a:	75fb      	strb	r3, [r7, #23]
            while ( n_cnt + n_width < n_size && pn_x[ n_cnt ] == pn_x[ n_cnt + n_width ] )
 800268c:	7dba      	ldrb	r2, [r7, #22]
 800268e:	7dfb      	ldrb	r3, [r7, #23]
 8002690:	441a      	add	r2, r3
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	429a      	cmp	r2, r3
 8002696:	da0d      	bge.n	80026b4 <dev_peaks_above_min_height+0x7c>
 8002698:	7dbb      	ldrb	r3, [r7, #22]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	4413      	add	r3, r2
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	7db9      	ldrb	r1, [r7, #22]
 80026a4:	7dfb      	ldrb	r3, [r7, #23]
 80026a6:	440b      	add	r3, r1
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	440b      	add	r3, r1
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d0e8      	beq.n	8002686 <dev_peaks_above_min_height+0x4e>
            }

            if ( pn_x[ n_cnt ] > pn_x[ n_cnt + n_width ] && ( *n_npks ) < 15 )
 80026b4:	7dbb      	ldrb	r3, [r7, #22]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	4413      	add	r3, r2
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	7db9      	ldrb	r1, [r7, #22]
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	440b      	add	r3, r1
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	440b      	add	r3, r1
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	dd14      	ble.n	80026fa <dev_peaks_above_min_height+0xc2>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b0e      	cmp	r3, #14
 80026d6:	dc10      	bgt.n	80026fa <dev_peaks_above_min_height+0xc2>
            {
                pn_locs[( *n_npks )++ ] = n_cnt;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	1c59      	adds	r1, r3, #1
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	6011      	str	r1, [r2, #0]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4413      	add	r3, r2
 80026e8:	7dba      	ldrb	r2, [r7, #22]
 80026ea:	601a      	str	r2, [r3, #0]
                n_cnt += n_width + 1;
 80026ec:	7dfa      	ldrb	r2, [r7, #23]
 80026ee:	7dbb      	ldrb	r3, [r7, #22]
 80026f0:	4413      	add	r3, r2
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	3301      	adds	r3, #1
 80026f6:	75bb      	strb	r3, [r7, #22]
 80026f8:	e003      	b.n	8002702 <dev_peaks_above_min_height+0xca>
            }
            else
            {
                n_cnt += n_width;
 80026fa:	7dba      	ldrb	r2, [r7, #22]
 80026fc:	7dfb      	ldrb	r3, [r7, #23]
 80026fe:	4413      	add	r3, r2
 8002700:	75bb      	strb	r3, [r7, #22]
            if ( pn_x[ n_cnt ] > pn_x[ n_cnt + n_width ] && ( *n_npks ) < 15 )
 8002702:	e002      	b.n	800270a <dev_peaks_above_min_height+0xd2>
            }
        }
        else
        {
            n_cnt++;
 8002704:	7dbb      	ldrb	r3, [r7, #22]
 8002706:	3301      	adds	r3, #1
 8002708:	75bb      	strb	r3, [r7, #22]
    while ( n_cnt < ( n_size - 1 ) )
 800270a:	7dba      	ldrb	r2, [r7, #22]
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	3b01      	subs	r3, #1
 8002710:	429a      	cmp	r2, r3
 8002712:	db9e      	blt.n	8002652 <dev_peaks_above_min_height+0x1a>
        }
    }
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	371c      	adds	r7, #28
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <dev_sort_indices_descend>:


static void dev_sort_indices_descend ( int32_t *pn_x, int32_t *pn_indx, int32_t n_size )
{
 8002722:	b480      	push	{r7}
 8002724:	b089      	sub	sp, #36	; 0x24
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
    int32_t n_temp;

    for ( int32_t n_cnt_i = 1; n_cnt_i < n_size; n_cnt_i++ )
 800272e:	2301      	movs	r3, #1
 8002730:	61fb      	str	r3, [r7, #28]
 8002732:	e037      	b.n	80027a4 <dev_sort_indices_descend+0x82>
    {
        n_temp = pn_indx[ n_cnt_i ];
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	4413      	add	r3, r2
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	617b      	str	r3, [r7, #20]

        int32_t n_cnt_j;
        for ( n_cnt_j = n_cnt_i; n_cnt_j > 0 && pn_x[ n_temp ] > pn_x[ pn_indx[ n_cnt_j - 1 ] ]; n_cnt_j-- )
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	61bb      	str	r3, [r7, #24]
 8002744:	e00f      	b.n	8002766 <dev_sort_indices_descend+0x44>
        {
            pn_indx[ n_cnt_j ] = pn_indx[ n_cnt_j - 1 ];
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	441a      	add	r2, r3
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	68b9      	ldr	r1, [r7, #8]
 800275a:	440b      	add	r3, r1
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	601a      	str	r2, [r3, #0]
        for ( n_cnt_j = n_cnt_i; n_cnt_j > 0 && pn_x[ n_temp ] > pn_x[ pn_indx[ n_cnt_j - 1 ] ]; n_cnt_j-- )
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	3b01      	subs	r3, #1
 8002764:	61bb      	str	r3, [r7, #24]
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	2b00      	cmp	r3, #0
 800276a:	dd12      	ble.n	8002792 <dev_sort_indices_descend+0x70>
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4413      	add	r3, r2
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	69b9      	ldr	r1, [r7, #24]
 8002778:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800277c:	440b      	add	r3, r1
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	440b      	add	r3, r1
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	68f9      	ldr	r1, [r7, #12]
 800278a:	440b      	add	r3, r1
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	dcd9      	bgt.n	8002746 <dev_sort_indices_descend+0x24>
        }

        pn_indx[ n_cnt_j ] = n_temp;
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	4413      	add	r3, r2
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	601a      	str	r2, [r3, #0]
    for ( int32_t n_cnt_i = 1; n_cnt_i < n_size; n_cnt_i++ )
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3301      	adds	r3, #1
 80027a2:	61fb      	str	r3, [r7, #28]
 80027a4:	69fa      	ldr	r2, [r7, #28]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	dbc3      	blt.n	8002734 <dev_sort_indices_descend+0x12>
    }
}
 80027ac:	bf00      	nop
 80027ae:	bf00      	nop
 80027b0:	3724      	adds	r7, #36	; 0x24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <dev_sort_ascend>:

static void dev_sort_ascend ( int32_t  *pn_x, int32_t n_size )
{
 80027ba:	b480      	push	{r7}
 80027bc:	b087      	sub	sp, #28
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	6039      	str	r1, [r7, #0]
    int32_t n_temp;

    for ( int32_t n_cnt_i = 1; n_cnt_i < n_size; n_cnt_i++ )
 80027c4:	2301      	movs	r3, #1
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	e02f      	b.n	800282a <dev_sort_ascend+0x70>
    {
        n_temp = pn_x[ n_cnt_i ];
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	60fb      	str	r3, [r7, #12]

        int32_t n_cnt_j;
        for ( n_cnt_j = n_cnt_i; n_cnt_j > 0 && n_temp < pn_x[ n_cnt_j - 1 ]; n_cnt_j-- )
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	e00f      	b.n	80027fc <dev_sort_ascend+0x42>
        {
            pn_x[ n_cnt_j ] = pn_x[ n_cnt_j - 1 ];
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	441a      	add	r2, r3
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	440b      	add	r3, r1
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	601a      	str	r2, [r3, #0]
        for ( n_cnt_j = n_cnt_i; n_cnt_j > 0 && n_temp < pn_x[ n_cnt_j - 1 ]; n_cnt_j-- )
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	3b01      	subs	r3, #1
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	dd0a      	ble.n	8002818 <dev_sort_ascend+0x5e>
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	4413      	add	r3, r2
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	429a      	cmp	r2, r3
 8002816:	dbe1      	blt.n	80027dc <dev_sort_ascend+0x22>
        }

        pn_x[ n_cnt_j ] = n_temp;
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	4413      	add	r3, r2
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	601a      	str	r2, [r3, #0]
    for ( int32_t n_cnt_i = 1; n_cnt_i < n_size; n_cnt_i++ )
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3301      	adds	r3, #1
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	dbcb      	blt.n	80027ca <dev_sort_ascend+0x10>
    }
}
 8002832:	bf00      	nop
 8002834:	bf00      	nop
 8002836:	371c      	adds	r7, #28
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <dev_remove_close_peaks>:

static void dev_remove_close_peaks ( int32_t *pn_locs, int32_t *pn_npks, int32_t *pn_x, int32_t n_min_distance )
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	603b      	str	r3, [r7, #0]
    int32_t n_old_npks, n_dist;

    dev_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	68f9      	ldr	r1, [r7, #12]
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff ff63 	bl	8002722 <dev_sort_indices_descend>

    for ( int32_t n_cnt_i = -1; n_cnt_i < *pn_npks; n_cnt_i++ )
 800285c:	f04f 33ff 	mov.w	r3, #4294967295
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	e03e      	b.n	80028e2 <dev_remove_close_peaks+0xa2>
    {
        n_old_npks = *pn_npks;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	617b      	str	r3, [r7, #20]
        *pn_npks = n_cnt_i + 1;
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	601a      	str	r2, [r3, #0]

        for ( int32_t n_cnt_j = n_cnt_i + 1; n_cnt_j < n_old_npks; n_cnt_j++ )
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3301      	adds	r3, #1
 8002876:	61bb      	str	r3, [r7, #24]
 8002878:	e02c      	b.n	80028d4 <dev_remove_close_peaks+0x94>
        {
            n_dist =  pn_locs[ n_cnt_j ] - ( n_cnt_i == -1 ? -1 : pn_locs[ n_cnt_i ] );
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4413      	add	r3, r2
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288a:	d005      	beq.n	8002898 <dev_remove_close_peaks+0x58>
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	68f9      	ldr	r1, [r7, #12]
 8002892:	440b      	add	r3, r1
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	e001      	b.n	800289c <dev_remove_close_peaks+0x5c>
 8002898:	f04f 33ff 	mov.w	r3, #4294967295
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	613b      	str	r3, [r7, #16]

            if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	dc04      	bgt.n	80028b2 <dev_remove_close_peaks+0x72>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	425b      	negs	r3, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	da0d      	bge.n	80028ce <dev_remove_close_peaks+0x8e>
            {
                pn_locs[ (*pn_npks)++ ] = pn_locs[ n_cnt_j ];
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	441a      	add	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	1c58      	adds	r0, r3, #1
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	6008      	str	r0, [r1, #0]
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	68f9      	ldr	r1, [r7, #12]
 80028c8:	440b      	add	r3, r1
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	601a      	str	r2, [r3, #0]
        for ( int32_t n_cnt_j = n_cnt_i + 1; n_cnt_j < n_old_npks; n_cnt_j++ )
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	3301      	adds	r3, #1
 80028d2:	61bb      	str	r3, [r7, #24]
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	429a      	cmp	r2, r3
 80028da:	dbce      	blt.n	800287a <dev_remove_close_peaks+0x3a>
    for ( int32_t n_cnt_i = -1; n_cnt_i < *pn_npks; n_cnt_i++ )
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	3301      	adds	r3, #1
 80028e0:	61fb      	str	r3, [r7, #28]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	dbbb      	blt.n	8002864 <dev_remove_close_peaks+0x24>
            }
        }
    }

    dev_sort_ascend( pn_locs, *pn_npks );
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4619      	mov	r1, r3
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f7ff ff61 	bl	80027ba <dev_sort_ascend>
}
 80028f8:	bf00      	nop
 80028fa:	3720      	adds	r7, #32
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <dev_find_peaks>:

static void dev_find_peaks ( int32_t *pn_locs, int32_t *n_npks,  int32_t  *pn_x, uint8_t n_size, int32_t n_min_height, int32_t n_min_distance, int32_t n_max_num )
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af02      	add	r7, sp, #8
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	70fb      	strb	r3, [r7, #3]
    dev_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	4613      	mov	r3, r2
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68b9      	ldr	r1, [r7, #8]
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f7ff fe8c 	bl	8002638 <dev_peaks_above_min_height>
    dev_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	68b9      	ldr	r1, [r7, #8]
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f7ff ff8a 	bl	8002840 <dev_remove_close_peaks>
    if ( *n_npks > n_max_num )
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6a3a      	ldr	r2, [r7, #32]
 8002932:	429a      	cmp	r2, r3
 8002934:	da02      	bge.n	800293c <dev_find_peaks+0x3c>
    {
        *n_npks = n_max_num;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	6a3a      	ldr	r2, [r7, #32]
 800293a:	601a      	str	r2, [r3, #0]
    }
}
 800293c:	bf00      	nop
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294a:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_MspInit+0x30>)
 800294c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002950:	4a08      	ldr	r2, [pc, #32]	; (8002974 <HAL_MspInit+0x30>)
 8002952:	f043 0302 	orr.w	r3, r3, #2
 8002956:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800295a:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_MspInit+0x30>)
 800295c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	607b      	str	r3, [r7, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	58024400 	.word	0x58024400

08002978 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b090      	sub	sp, #64	; 0x40
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a72      	ldr	r2, [pc, #456]	; (8002b60 <HAL_ADC_MspInit+0x1e8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d14e      	bne.n	8002a38 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800299a:	4b72      	ldr	r3, [pc, #456]	; (8002b64 <HAL_ADC_MspInit+0x1ec>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	3301      	adds	r3, #1
 80029a0:	4a70      	ldr	r2, [pc, #448]	; (8002b64 <HAL_ADC_MspInit+0x1ec>)
 80029a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80029a4:	4b6f      	ldr	r3, [pc, #444]	; (8002b64 <HAL_ADC_MspInit+0x1ec>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d10e      	bne.n	80029ca <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80029ac:	4b6e      	ldr	r3, [pc, #440]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 80029ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029b2:	4a6d      	ldr	r2, [pc, #436]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 80029b4:	f043 0320 	orr.w	r3, r3, #32
 80029b8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80029bc:	4b6a      	ldr	r3, [pc, #424]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 80029be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029c2:	f003 0320 	and.w	r3, r3, #32
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80029c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ca:	4b67      	ldr	r3, [pc, #412]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 80029cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d0:	4a65      	ldr	r2, [pc, #404]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 80029d2:	f043 0304 	orr.w	r3, r3, #4
 80029d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029da:	4b63      	ldr	r3, [pc, #396]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 80029dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e8:	4b5f      	ldr	r3, [pc, #380]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 80029ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ee:	4a5e      	ldr	r2, [pc, #376]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029f8:	4b5b      	ldr	r3, [pc, #364]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 80029fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	623b      	str	r3, [r7, #32]
 8002a04:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a06:	2301      	movs	r3, #1
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a16:	4619      	mov	r1, r3
 8002a18:	4854      	ldr	r0, [pc, #336]	; (8002b6c <HAL_ADC_MspInit+0x1f4>)
 8002a1a:	f003 fb17 	bl	800604c <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8002a1e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002a22:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8002a26:	f001 fa01 	bl	8003e2c <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8002a2a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a2e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8002a32:	f001 f9fb 	bl	8003e2c <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a36:	e08f      	b.n	8002b58 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a4c      	ldr	r2, [pc, #304]	; (8002b70 <HAL_ADC_MspInit+0x1f8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d133      	bne.n	8002aaa <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002a42:	4b48      	ldr	r3, [pc, #288]	; (8002b64 <HAL_ADC_MspInit+0x1ec>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	3301      	adds	r3, #1
 8002a48:	4a46      	ldr	r2, [pc, #280]	; (8002b64 <HAL_ADC_MspInit+0x1ec>)
 8002a4a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002a4c:	4b45      	ldr	r3, [pc, #276]	; (8002b64 <HAL_ADC_MspInit+0x1ec>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d10e      	bne.n	8002a72 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002a54:	4b44      	ldr	r3, [pc, #272]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 8002a56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a5a:	4a43      	ldr	r2, [pc, #268]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 8002a5c:	f043 0320 	orr.w	r3, r3, #32
 8002a60:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002a64:	4b40      	ldr	r3, [pc, #256]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 8002a66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	61fb      	str	r3, [r7, #28]
 8002a70:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a72:	4b3d      	ldr	r3, [pc, #244]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 8002a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a78:	4a3b      	ldr	r2, [pc, #236]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a82:	4b39      	ldr	r3, [pc, #228]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 8002a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	61bb      	str	r3, [r7, #24]
 8002a8e:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8002a90:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002a94:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8002a98:	f001 f9c8 	bl	8003e2c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8002a9c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002aa0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8002aa4:	f001 f9c2 	bl	8003e2c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8002aa8:	e056      	b.n	8002b58 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a31      	ldr	r2, [pc, #196]	; (8002b74 <HAL_ADC_MspInit+0x1fc>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d151      	bne.n	8002b58 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002ab4:	4b2c      	ldr	r3, [pc, #176]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 8002ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aba:	4a2b      	ldr	r2, [pc, #172]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 8002abc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ac4:	4b28      	ldr	r3, [pc, #160]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 8002ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ad2:	4b25      	ldr	r3, [pc, #148]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 8002ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ad8:	4a23      	ldr	r2, [pc, #140]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 8002ada:	f043 0320 	orr.w	r3, r3, #32
 8002ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ae2:	4b21      	ldr	r3, [pc, #132]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 8002ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af0:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 8002af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af6:	4a1c      	ldr	r2, [pc, #112]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 8002af8:	f043 0304 	orr.w	r3, r3, #4
 8002afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b00:	4b19      	ldr	r3, [pc, #100]	; (8002b68 <HAL_ADC_MspInit+0x1f0>)
 8002b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b14:	2303      	movs	r3, #3
 8002b16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b20:	4619      	mov	r1, r3
 8002b22:	4815      	ldr	r0, [pc, #84]	; (8002b78 <HAL_ADC_MspInit+0x200>)
 8002b24:	f003 fa92 	bl	800604c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b38:	4619      	mov	r1, r3
 8002b3a:	480c      	ldr	r0, [pc, #48]	; (8002b6c <HAL_ADC_MspInit+0x1f4>)
 8002b3c:	f003 fa86 	bl	800604c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002b40:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002b44:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002b48:	f001 f970 	bl	8003e2c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002b4c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002b50:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002b54:	f001 f96a 	bl	8003e2c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8002b58:	bf00      	nop
 8002b5a:	3740      	adds	r7, #64	; 0x40
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40022000 	.word	0x40022000
 8002b64:	24001130 	.word	0x24001130
 8002b68:	58024400 	.word	0x58024400
 8002b6c:	58020800 	.word	0x58020800
 8002b70:	40022100 	.word	0x40022100
 8002b74:	58026000 	.word	0x58026000
 8002b78:	58021400 	.word	0x58021400

08002b7c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b092      	sub	sp, #72	; 0x48
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a87      	ldr	r2, [pc, #540]	; (8002db8 <HAL_ETH_MspInit+0x23c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	f040 8108 	bne.w	8002db0 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002ba0:	4b86      	ldr	r3, [pc, #536]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002ba2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ba6:	4a85      	ldr	r2, [pc, #532]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002bb0:	4b82      	ldr	r3, [pc, #520]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002bb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bba:	633b      	str	r3, [r7, #48]	; 0x30
 8002bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002bbe:	4b7f      	ldr	r3, [pc, #508]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002bc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bc4:	4a7d      	ldr	r2, [pc, #500]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002bce:	4b7b      	ldr	r3, [pc, #492]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002bd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002bdc:	4b77      	ldr	r3, [pc, #476]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002bde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002be2:	4a76      	ldr	r2, [pc, #472]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002bec:	4b73      	ldr	r3, [pc, #460]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002bee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bfa:	4b70      	ldr	r3, [pc, #448]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c00:	4a6e      	ldr	r2, [pc, #440]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c0a:	4b6c      	ldr	r3, [pc, #432]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c18:	4b68      	ldr	r3, [pc, #416]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c1e:	4a67      	ldr	r2, [pc, #412]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002c20:	f043 0310 	orr.w	r3, r3, #16
 8002c24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c28:	4b64      	ldr	r3, [pc, #400]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c2e:	f003 0310 	and.w	r3, r3, #16
 8002c32:	623b      	str	r3, [r7, #32]
 8002c34:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002c36:	4b61      	ldr	r3, [pc, #388]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c3c:	4a5f      	ldr	r2, [pc, #380]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c46:	4b5d      	ldr	r3, [pc, #372]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c50:	61fb      	str	r3, [r7, #28]
 8002c52:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c54:	4b59      	ldr	r3, [pc, #356]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c5a:	4a58      	ldr	r2, [pc, #352]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002c5c:	f043 0304 	orr.w	r3, r3, #4
 8002c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c64:	4b55      	ldr	r3, [pc, #340]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c72:	4b52      	ldr	r3, [pc, #328]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c78:	4a50      	ldr	r2, [pc, #320]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c82:	4b4e      	ldr	r3, [pc, #312]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c90:	4b4a      	ldr	r3, [pc, #296]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c96:	4a49      	ldr	r2, [pc, #292]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ca0:	4b46      	ldr	r3, [pc, #280]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cae:	4b43      	ldr	r3, [pc, #268]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cb4:	4a41      	ldr	r2, [pc, #260]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002cb6:	f043 0302 	orr.w	r3, r3, #2
 8002cba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cbe:	4b3f      	ldr	r3, [pc, #252]	; (8002dbc <HAL_ETH_MspInit+0x240>)
 8002cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8002ccc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002cd0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002cde:	230b      	movs	r3, #11
 8002ce0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ce2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4835      	ldr	r0, [pc, #212]	; (8002dc0 <HAL_ETH_MspInit+0x244>)
 8002cea:	f003 f9af 	bl	800604c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8002cee:	2304      	movs	r3, #4
 8002cf0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002cfe:	230b      	movs	r3, #11
 8002d00:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8002d02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d06:	4619      	mov	r1, r3
 8002d08:	482e      	ldr	r0, [pc, #184]	; (8002dc4 <HAL_ETH_MspInit+0x248>)
 8002d0a:	f003 f99f 	bl	800604c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8002d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d12:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d14:	2302      	movs	r3, #2
 8002d16:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d20:	230b      	movs	r3, #11
 8002d22:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8002d24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4827      	ldr	r0, [pc, #156]	; (8002dc8 <HAL_ETH_MspInit+0x24c>)
 8002d2c:	f003 f98e 	bl	800604c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8002d30:	233e      	movs	r3, #62	; 0x3e
 8002d32:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d34:	2302      	movs	r3, #2
 8002d36:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d40:	230b      	movs	r3, #11
 8002d42:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4820      	ldr	r0, [pc, #128]	; (8002dcc <HAL_ETH_MspInit+0x250>)
 8002d4c:	f003 f97e 	bl	800604c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8002d50:	230c      	movs	r3, #12
 8002d52:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d54:	2302      	movs	r3, #2
 8002d56:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d60:	230b      	movs	r3, #11
 8002d62:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4819      	ldr	r0, [pc, #100]	; (8002dd0 <HAL_ETH_MspInit+0x254>)
 8002d6c:	f003 f96e 	bl	800604c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8002d70:	2386      	movs	r3, #134	; 0x86
 8002d72:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d74:	2302      	movs	r3, #2
 8002d76:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d80:	230b      	movs	r3, #11
 8002d82:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4812      	ldr	r0, [pc, #72]	; (8002dd4 <HAL_ETH_MspInit+0x258>)
 8002d8c:	f003 f95e 	bl	800604c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8002d90:	2303      	movs	r3, #3
 8002d92:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d94:	2302      	movs	r3, #2
 8002d96:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002da0:	230b      	movs	r3, #11
 8002da2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002da8:	4619      	mov	r1, r3
 8002daa:	480b      	ldr	r0, [pc, #44]	; (8002dd8 <HAL_ETH_MspInit+0x25c>)
 8002dac:	f003 f94e 	bl	800604c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002db0:	bf00      	nop
 8002db2:	3748      	adds	r7, #72	; 0x48
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40028000 	.word	0x40028000
 8002dbc:	58024400 	.word	0x58024400
 8002dc0:	58021800 	.word	0x58021800
 8002dc4:	58021000 	.word	0x58021000
 8002dc8:	58022000 	.word	0x58022000
 8002dcc:	58020800 	.word	0x58020800
 8002dd0:	58021c00 	.word	0x58021c00
 8002dd4:	58020000 	.word	0x58020000
 8002dd8:	58020400 	.word	0x58020400

08002ddc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b0bc      	sub	sp, #240	; 0xf0
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002df4:	f107 0318 	add.w	r3, r7, #24
 8002df8:	22c0      	movs	r2, #192	; 0xc0
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f00a fe6b 	bl	800dad8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a57      	ldr	r2, [pc, #348]	; (8002f64 <HAL_FDCAN_MspInit+0x188>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d151      	bne.n	8002eb0 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002e0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002e18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e20:	f107 0318 	add.w	r3, r7, #24
 8002e24:	4618      	mov	r0, r3
 8002e26:	f005 fe79 	bl	8008b1c <HAL_RCCEx_PeriphCLKConfig>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8002e30:	f7fe fe30 	bl	8001a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002e34:	4b4c      	ldr	r3, [pc, #304]	; (8002f68 <HAL_FDCAN_MspInit+0x18c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	4a4b      	ldr	r2, [pc, #300]	; (8002f68 <HAL_FDCAN_MspInit+0x18c>)
 8002e3c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002e3e:	4b4a      	ldr	r3, [pc, #296]	; (8002f68 <HAL_FDCAN_MspInit+0x18c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d10e      	bne.n	8002e64 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002e46:	4b49      	ldr	r3, [pc, #292]	; (8002f6c <HAL_FDCAN_MspInit+0x190>)
 8002e48:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002e4c:	4a47      	ldr	r2, [pc, #284]	; (8002f6c <HAL_FDCAN_MspInit+0x190>)
 8002e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e52:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002e56:	4b45      	ldr	r3, [pc, #276]	; (8002f6c <HAL_FDCAN_MspInit+0x190>)
 8002e58:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e64:	4b41      	ldr	r3, [pc, #260]	; (8002f6c <HAL_FDCAN_MspInit+0x190>)
 8002e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e6a:	4a40      	ldr	r2, [pc, #256]	; (8002f6c <HAL_FDCAN_MspInit+0x190>)
 8002e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e74:	4b3d      	ldr	r3, [pc, #244]	; (8002f6c <HAL_FDCAN_MspInit+0x190>)
 8002e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8002e82:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002e86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e96:	2300      	movs	r3, #0
 8002e98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002e9c:	2309      	movs	r3, #9
 8002e9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ea2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4831      	ldr	r0, [pc, #196]	; (8002f70 <HAL_FDCAN_MspInit+0x194>)
 8002eaa:	f003 f8cf 	bl	800604c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002eae:	e055      	b.n	8002f5c <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a2f      	ldr	r2, [pc, #188]	; (8002f74 <HAL_FDCAN_MspInit+0x198>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d150      	bne.n	8002f5c <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002eba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002ec6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002eca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ece:	f107 0318 	add.w	r3, r7, #24
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f005 fe22 	bl	8008b1c <HAL_RCCEx_PeriphCLKConfig>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8002ede:	f7fe fdd9 	bl	8001a94 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002ee2:	4b21      	ldr	r3, [pc, #132]	; (8002f68 <HAL_FDCAN_MspInit+0x18c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	4a1f      	ldr	r2, [pc, #124]	; (8002f68 <HAL_FDCAN_MspInit+0x18c>)
 8002eea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002eec:	4b1e      	ldr	r3, [pc, #120]	; (8002f68 <HAL_FDCAN_MspInit+0x18c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d10e      	bne.n	8002f12 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	; (8002f6c <HAL_FDCAN_MspInit+0x190>)
 8002ef6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002efa:	4a1c      	ldr	r2, [pc, #112]	; (8002f6c <HAL_FDCAN_MspInit+0x190>)
 8002efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f00:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002f04:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <HAL_FDCAN_MspInit+0x190>)
 8002f06:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f12:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <HAL_FDCAN_MspInit+0x190>)
 8002f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f18:	4a14      	ldr	r2, [pc, #80]	; (8002f6c <HAL_FDCAN_MspInit+0x190>)
 8002f1a:	f043 0302 	orr.w	r3, r3, #2
 8002f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f22:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <HAL_FDCAN_MspInit+0x190>)
 8002f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8002f30:	f242 0320 	movw	r3, #8224	; 0x2020
 8002f34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f44:	2300      	movs	r3, #0
 8002f46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002f4a:	2309      	movs	r3, #9
 8002f4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002f54:	4619      	mov	r1, r3
 8002f56:	4808      	ldr	r0, [pc, #32]	; (8002f78 <HAL_FDCAN_MspInit+0x19c>)
 8002f58:	f003 f878 	bl	800604c <HAL_GPIO_Init>
}
 8002f5c:	bf00      	nop
 8002f5e:	37f0      	adds	r7, #240	; 0xf0
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	4000a000 	.word	0x4000a000
 8002f68:	24001134 	.word	0x24001134
 8002f6c:	58024400 	.word	0x58024400
 8002f70:	58021c00 	.word	0x58021c00
 8002f74:	4000a400 	.word	0x4000a400
 8002f78:	58020400 	.word	0x58020400

08002f7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b0ba      	sub	sp, #232	; 0xe8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f94:	f107 0310 	add.w	r3, r7, #16
 8002f98:	22c0      	movs	r2, #192	; 0xc0
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f00a fd9b 	bl	800dad8 <memset>
  if(hi2c->Instance==I2C4)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a27      	ldr	r2, [pc, #156]	; (8003044 <HAL_I2C_MspInit+0xc8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d146      	bne.n	800303a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002fac:	f04f 0210 	mov.w	r2, #16
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fbe:	f107 0310 	add.w	r3, r7, #16
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f005 fdaa 	bl	8008b1c <HAL_RCCEx_PeriphCLKConfig>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002fce:	f7fe fd61 	bl	8001a94 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fd2:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <HAL_I2C_MspInit+0xcc>)
 8002fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fd8:	4a1b      	ldr	r2, [pc, #108]	; (8003048 <HAL_I2C_MspInit+0xcc>)
 8002fda:	f043 0308 	orr.w	r3, r3, #8
 8002fde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fe2:	4b19      	ldr	r3, [pc, #100]	; (8003048 <HAL_I2C_MspInit+0xcc>)
 8002fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002ff0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002ff4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ff8:	2312      	movs	r3, #18
 8002ffa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003004:	2300      	movs	r3, #0
 8003006:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800300a:	2304      	movs	r3, #4
 800300c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003010:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003014:	4619      	mov	r1, r3
 8003016:	480d      	ldr	r0, [pc, #52]	; (800304c <HAL_I2C_MspInit+0xd0>)
 8003018:	f003 f818 	bl	800604c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800301c:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <HAL_I2C_MspInit+0xcc>)
 800301e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003022:	4a09      	ldr	r2, [pc, #36]	; (8003048 <HAL_I2C_MspInit+0xcc>)
 8003024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003028:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_I2C_MspInit+0xcc>)
 800302e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003036:	60bb      	str	r3, [r7, #8]
 8003038:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800303a:	bf00      	nop
 800303c:	37e8      	adds	r7, #232	; 0xe8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	58001c00 	.word	0x58001c00
 8003048:	58024400 	.word	0x58024400
 800304c:	58020c00 	.word	0x58020c00

08003050 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b0be      	sub	sp, #248	; 0xf8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003058:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003068:	f107 0320 	add.w	r3, r7, #32
 800306c:	22c0      	movs	r2, #192	; 0xc0
 800306e:	2100      	movs	r1, #0
 8003070:	4618      	mov	r0, r3
 8003072:	f00a fd31 	bl	800dad8 <memset>
  if(hltdc->Instance==LTDC)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a66      	ldr	r2, [pc, #408]	; (8003214 <HAL_LTDC_MspInit+0x1c4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	f040 80c4 	bne.w	800320a <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003082:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 800308e:	2320      	movs	r3, #32
 8003090:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8003092:	23c0      	movs	r3, #192	; 0xc0
 8003094:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8003096:	2302      	movs	r3, #2
 8003098:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800309a:	2302      	movs	r3, #2
 800309c:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800309e:	2302      	movs	r3, #2
 80030a0:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80030a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80030a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80030a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030ac:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030b2:	f107 0320 	add.w	r3, r7, #32
 80030b6:	4618      	mov	r0, r3
 80030b8:	f005 fd30 	bl	8008b1c <HAL_RCCEx_PeriphCLKConfig>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 80030c2:	f7fe fce7 	bl	8001a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80030c6:	4b54      	ldr	r3, [pc, #336]	; (8003218 <HAL_LTDC_MspInit+0x1c8>)
 80030c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80030cc:	4a52      	ldr	r2, [pc, #328]	; (8003218 <HAL_LTDC_MspInit+0x1c8>)
 80030ce:	f043 0308 	orr.w	r3, r3, #8
 80030d2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80030d6:	4b50      	ldr	r3, [pc, #320]	; (8003218 <HAL_LTDC_MspInit+0x1c8>)
 80030d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 80030e4:	4b4c      	ldr	r3, [pc, #304]	; (8003218 <HAL_LTDC_MspInit+0x1c8>)
 80030e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ea:	4a4b      	ldr	r2, [pc, #300]	; (8003218 <HAL_LTDC_MspInit+0x1c8>)
 80030ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030f4:	4b48      	ldr	r3, [pc, #288]	; (8003218 <HAL_LTDC_MspInit+0x1c8>)
 80030f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003102:	4b45      	ldr	r3, [pc, #276]	; (8003218 <HAL_LTDC_MspInit+0x1c8>)
 8003104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003108:	4a43      	ldr	r2, [pc, #268]	; (8003218 <HAL_LTDC_MspInit+0x1c8>)
 800310a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003112:	4b41      	ldr	r3, [pc, #260]	; (8003218 <HAL_LTDC_MspInit+0x1c8>)
 8003114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003120:	4b3d      	ldr	r3, [pc, #244]	; (8003218 <HAL_LTDC_MspInit+0x1c8>)
 8003122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003126:	4a3c      	ldr	r2, [pc, #240]	; (8003218 <HAL_LTDC_MspInit+0x1c8>)
 8003128:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800312c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003130:	4b39      	ldr	r3, [pc, #228]	; (8003218 <HAL_LTDC_MspInit+0x1c8>)
 8003132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800313e:	4b36      	ldr	r3, [pc, #216]	; (8003218 <HAL_LTDC_MspInit+0x1c8>)
 8003140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003144:	4a34      	ldr	r2, [pc, #208]	; (8003218 <HAL_LTDC_MspInit+0x1c8>)
 8003146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800314a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800314e:	4b32      	ldr	r3, [pc, #200]	; (8003218 <HAL_LTDC_MspInit+0x1c8>)
 8003150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 800315c:	23fc      	movs	r3, #252	; 0xfc
 800315e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003162:	2302      	movs	r3, #2
 8003164:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003168:	2300      	movs	r3, #0
 800316a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316e:	2300      	movs	r3, #0
 8003170:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003174:	230e      	movs	r3, #14
 8003176:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800317a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800317e:	4619      	mov	r1, r3
 8003180:	4826      	ldr	r0, [pc, #152]	; (800321c <HAL_LTDC_MspInit+0x1cc>)
 8003182:	f002 ff63 	bl	800604c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8003186:	f24d 2303 	movw	r3, #53763	; 0xd203
 800318a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318e:	2302      	movs	r3, #2
 8003190:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003194:	2300      	movs	r3, #0
 8003196:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319a:	2300      	movs	r3, #0
 800319c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80031a0:	230e      	movs	r3, #14
 80031a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80031a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80031aa:	4619      	mov	r1, r3
 80031ac:	481c      	ldr	r0, [pc, #112]	; (8003220 <HAL_LTDC_MspInit+0x1d0>)
 80031ae:	f002 ff4d 	bl	800604c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 80031b2:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80031b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ba:	2302      	movs	r3, #2
 80031bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c6:	2300      	movs	r3, #0
 80031c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80031cc:	230e      	movs	r3, #14
 80031ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80031d2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80031d6:	4619      	mov	r1, r3
 80031d8:	4812      	ldr	r0, [pc, #72]	; (8003224 <HAL_LTDC_MspInit+0x1d4>)
 80031da:	f002 ff37 	bl	800604c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80031de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e6:	2302      	movs	r3, #2
 80031e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f2:	2300      	movs	r3, #0
 80031f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80031f8:	230e      	movs	r3, #14
 80031fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80031fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003202:	4619      	mov	r1, r3
 8003204:	4808      	ldr	r0, [pc, #32]	; (8003228 <HAL_LTDC_MspInit+0x1d8>)
 8003206:	f002 ff21 	bl	800604c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800320a:	bf00      	nop
 800320c:	37f8      	adds	r7, #248	; 0xf8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	50001000 	.word	0x50001000
 8003218:	58024400 	.word	0x58024400
 800321c:	58022800 	.word	0x58022800
 8003220:	58022000 	.word	0x58022000
 8003224:	58022400 	.word	0x58022400
 8003228:	58021c00 	.word	0x58021c00

0800322c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b0bc      	sub	sp, #240	; 0xf0
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003234:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003244:	f107 0318 	add.w	r3, r7, #24
 8003248:	22c0      	movs	r2, #192	; 0xc0
 800324a:	2100      	movs	r1, #0
 800324c:	4618      	mov	r0, r3
 800324e:	f00a fc43 	bl	800dad8 <memset>
  if(hqspi->Instance==QUADSPI)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a56      	ldr	r2, [pc, #344]	; (80033b0 <HAL_QSPI_MspInit+0x184>)
 8003258:	4293      	cmp	r3, r2
 800325a:	f040 80a5 	bne.w	80033a8 <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800325e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800326a:	2300      	movs	r3, #0
 800326c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800326e:	f107 0318 	add.w	r3, r7, #24
 8003272:	4618      	mov	r0, r3
 8003274:	f005 fc52 	bl	8008b1c <HAL_RCCEx_PeriphCLKConfig>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 800327e:	f7fe fc09 	bl	8001a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003282:	4b4c      	ldr	r3, [pc, #304]	; (80033b4 <HAL_QSPI_MspInit+0x188>)
 8003284:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003288:	4a4a      	ldr	r2, [pc, #296]	; (80033b4 <HAL_QSPI_MspInit+0x188>)
 800328a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800328e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003292:	4b48      	ldr	r3, [pc, #288]	; (80033b4 <HAL_QSPI_MspInit+0x188>)
 8003294:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a0:	4b44      	ldr	r3, [pc, #272]	; (80033b4 <HAL_QSPI_MspInit+0x188>)
 80032a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032a6:	4a43      	ldr	r2, [pc, #268]	; (80033b4 <HAL_QSPI_MspInit+0x188>)
 80032a8:	f043 0302 	orr.w	r3, r3, #2
 80032ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032b0:	4b40      	ldr	r3, [pc, #256]	; (80033b4 <HAL_QSPI_MspInit+0x188>)
 80032b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80032be:	4b3d      	ldr	r3, [pc, #244]	; (80033b4 <HAL_QSPI_MspInit+0x188>)
 80032c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c4:	4a3b      	ldr	r2, [pc, #236]	; (80033b4 <HAL_QSPI_MspInit+0x188>)
 80032c6:	f043 0320 	orr.w	r3, r3, #32
 80032ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032ce:	4b39      	ldr	r3, [pc, #228]	; (80033b4 <HAL_QSPI_MspInit+0x188>)
 80032d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032dc:	4b35      	ldr	r3, [pc, #212]	; (80033b4 <HAL_QSPI_MspInit+0x188>)
 80032de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032e2:	4a34      	ldr	r2, [pc, #208]	; (80033b4 <HAL_QSPI_MspInit+0x188>)
 80032e4:	f043 0308 	orr.w	r3, r3, #8
 80032e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032ec:	4b31      	ldr	r3, [pc, #196]	; (80033b4 <HAL_QSPI_MspInit+0x188>)
 80032ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	60bb      	str	r3, [r7, #8]
 80032f8:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032fa:	2340      	movs	r3, #64	; 0x40
 80032fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003300:	2302      	movs	r3, #2
 8003302:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	2300      	movs	r3, #0
 8003308:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330c:	2300      	movs	r3, #0
 800330e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003312:	230a      	movs	r3, #10
 8003314:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003318:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800331c:	4619      	mov	r1, r3
 800331e:	4826      	ldr	r0, [pc, #152]	; (80033b8 <HAL_QSPI_MspInit+0x18c>)
 8003320:	f002 fe94 	bl	800604c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8003324:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003328:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332c:	2302      	movs	r3, #2
 800332e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003338:	2300      	movs	r3, #0
 800333a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800333e:	2309      	movs	r3, #9
 8003340:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003344:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003348:	4619      	mov	r1, r3
 800334a:	481c      	ldr	r0, [pc, #112]	; (80033bc <HAL_QSPI_MspInit+0x190>)
 800334c:	f002 fe7e 	bl	800604c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003354:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003358:	2302      	movs	r3, #2
 800335a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	2300      	movs	r3, #0
 8003360:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003364:	2300      	movs	r3, #0
 8003366:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800336a:	230a      	movs	r3, #10
 800336c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003370:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003374:	4619      	mov	r1, r3
 8003376:	4811      	ldr	r0, [pc, #68]	; (80033bc <HAL_QSPI_MspInit+0x190>)
 8003378:	f002 fe68 	bl	800604c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800337c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003380:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003384:	2302      	movs	r3, #2
 8003386:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003390:	2300      	movs	r3, #0
 8003392:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003396:	2309      	movs	r3, #9
 8003398:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800339c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80033a0:	4619      	mov	r1, r3
 80033a2:	4807      	ldr	r0, [pc, #28]	; (80033c0 <HAL_QSPI_MspInit+0x194>)
 80033a4:	f002 fe52 	bl	800604c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80033a8:	bf00      	nop
 80033aa:	37f0      	adds	r7, #240	; 0xf0
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	52005000 	.word	0x52005000
 80033b4:	58024400 	.word	0x58024400
 80033b8:	58020400 	.word	0x58020400
 80033bc:	58021400 	.word	0x58021400
 80033c0:	58020c00 	.word	0x58020c00

080033c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b0b2      	sub	sp, #200	; 0xc8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033cc:	f107 0308 	add.w	r3, r7, #8
 80033d0:	22c0      	movs	r2, #192	; 0xc0
 80033d2:	2100      	movs	r1, #0
 80033d4:	4618      	mov	r0, r3
 80033d6:	f00a fb7f 	bl	800dad8 <memset>
  if(hrtc->Instance==RTC)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a10      	ldr	r2, [pc, #64]	; (8003420 <HAL_RTC_MspInit+0x5c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d119      	bne.n	8003418 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80033e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80033f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033f8:	f107 0308 	add.w	r3, r7, #8
 80033fc:	4618      	mov	r0, r3
 80033fe:	f005 fb8d 	bl	8008b1c <HAL_RCCEx_PeriphCLKConfig>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8003408:	f7fe fb44 	bl	8001a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800340c:	4b05      	ldr	r3, [pc, #20]	; (8003424 <HAL_RTC_MspInit+0x60>)
 800340e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003410:	4a04      	ldr	r2, [pc, #16]	; (8003424 <HAL_RTC_MspInit+0x60>)
 8003412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003416:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003418:	bf00      	nop
 800341a:	37c8      	adds	r7, #200	; 0xc8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	58004000 	.word	0x58004000
 8003424:	58024400 	.word	0x58024400

08003428 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b0bc      	sub	sp, #240	; 0xf0
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003430:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	605a      	str	r2, [r3, #4]
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	60da      	str	r2, [r3, #12]
 800343e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003440:	f107 0318 	add.w	r3, r7, #24
 8003444:	22c0      	movs	r2, #192	; 0xc0
 8003446:	2100      	movs	r1, #0
 8003448:	4618      	mov	r0, r3
 800344a:	f00a fb45 	bl	800dad8 <memset>
  if(hspi->Instance==SPI2)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a55      	ldr	r2, [pc, #340]	; (80035a8 <HAL_SPI_MspInit+0x180>)
 8003454:	4293      	cmp	r3, r2
 8003456:	f040 80a3 	bne.w	80035a0 <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800345a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003466:	2300      	movs	r3, #0
 8003468:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800346a:	f107 0318 	add.w	r3, r7, #24
 800346e:	4618      	mov	r0, r3
 8003470:	f005 fb54 	bl	8008b1c <HAL_RCCEx_PeriphCLKConfig>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800347a:	f7fe fb0b 	bl	8001a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800347e:	4b4b      	ldr	r3, [pc, #300]	; (80035ac <HAL_SPI_MspInit+0x184>)
 8003480:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003484:	4a49      	ldr	r2, [pc, #292]	; (80035ac <HAL_SPI_MspInit+0x184>)
 8003486:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800348a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800348e:	4b47      	ldr	r3, [pc, #284]	; (80035ac <HAL_SPI_MspInit+0x184>)
 8003490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800349c:	4b43      	ldr	r3, [pc, #268]	; (80035ac <HAL_SPI_MspInit+0x184>)
 800349e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034a2:	4a42      	ldr	r2, [pc, #264]	; (80035ac <HAL_SPI_MspInit+0x184>)
 80034a4:	f043 0302 	orr.w	r3, r3, #2
 80034a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034ac:	4b3f      	ldr	r3, [pc, #252]	; (80035ac <HAL_SPI_MspInit+0x184>)
 80034ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034ba:	4b3c      	ldr	r3, [pc, #240]	; (80035ac <HAL_SPI_MspInit+0x184>)
 80034bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034c0:	4a3a      	ldr	r2, [pc, #232]	; (80035ac <HAL_SPI_MspInit+0x184>)
 80034c2:	f043 0308 	orr.w	r3, r3, #8
 80034c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034ca:	4b38      	ldr	r3, [pc, #224]	; (80035ac <HAL_SPI_MspInit+0x184>)
 80034cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80034d8:	4b34      	ldr	r3, [pc, #208]	; (80035ac <HAL_SPI_MspInit+0x184>)
 80034da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034de:	4a33      	ldr	r2, [pc, #204]	; (80035ac <HAL_SPI_MspInit+0x184>)
 80034e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034e8:	4b30      	ldr	r3, [pc, #192]	; (80035ac <HAL_SPI_MspInit+0x184>)
 80034ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80034f6:	2310      	movs	r3, #16
 80034f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fc:	2302      	movs	r3, #2
 80034fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003502:	2300      	movs	r3, #0
 8003504:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003508:	2300      	movs	r3, #0
 800350a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800350e:	2307      	movs	r3, #7
 8003510:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003514:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003518:	4619      	mov	r1, r3
 800351a:	4825      	ldr	r0, [pc, #148]	; (80035b0 <HAL_SPI_MspInit+0x188>)
 800351c:	f002 fd96 	bl	800604c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003520:	2308      	movs	r3, #8
 8003522:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003526:	2302      	movs	r3, #2
 8003528:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352c:	2300      	movs	r3, #0
 800352e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003532:	2300      	movs	r3, #0
 8003534:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003538:	2305      	movs	r3, #5
 800353a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800353e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003542:	4619      	mov	r1, r3
 8003544:	481b      	ldr	r0, [pc, #108]	; (80035b4 <HAL_SPI_MspInit+0x18c>)
 8003546:	f002 fd81 	bl	800604c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800354a:	2304      	movs	r3, #4
 800354c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003550:	2302      	movs	r3, #2
 8003552:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	2300      	movs	r3, #0
 8003558:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355c:	2300      	movs	r3, #0
 800355e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003562:	2305      	movs	r3, #5
 8003564:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003568:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800356c:	4619      	mov	r1, r3
 800356e:	4812      	ldr	r0, [pc, #72]	; (80035b8 <HAL_SPI_MspInit+0x190>)
 8003570:	f002 fd6c 	bl	800604c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003574:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003578:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357c:	2302      	movs	r3, #2
 800357e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003582:	2300      	movs	r3, #0
 8003584:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003588:	2300      	movs	r3, #0
 800358a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800358e:	2305      	movs	r3, #5
 8003590:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003594:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003598:	4619      	mov	r1, r3
 800359a:	4805      	ldr	r0, [pc, #20]	; (80035b0 <HAL_SPI_MspInit+0x188>)
 800359c:	f002 fd56 	bl	800604c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80035a0:	bf00      	nop
 80035a2:	37f0      	adds	r7, #240	; 0xf0
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40003800 	.word	0x40003800
 80035ac:	58024400 	.word	0x58024400
 80035b0:	58020400 	.word	0x58020400
 80035b4:	58020c00 	.word	0x58020c00
 80035b8:	58022000 	.word	0x58022000

080035bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b0ba      	sub	sp, #232	; 0xe8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	60da      	str	r2, [r3, #12]
 80035d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035d4:	f107 0310 	add.w	r3, r7, #16
 80035d8:	22c0      	movs	r2, #192	; 0xc0
 80035da:	2100      	movs	r1, #0
 80035dc:	4618      	mov	r0, r3
 80035de:	f00a fa7b 	bl	800dad8 <memset>
  if(huart->Instance==USART3)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a27      	ldr	r2, [pc, #156]	; (8003684 <HAL_UART_MspInit+0xc8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d146      	bne.n	800367a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80035ec:	f04f 0202 	mov.w	r2, #2
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80035f8:	2300      	movs	r3, #0
 80035fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035fe:	f107 0310 	add.w	r3, r7, #16
 8003602:	4618      	mov	r0, r3
 8003604:	f005 fa8a 	bl	8008b1c <HAL_RCCEx_PeriphCLKConfig>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800360e:	f7fe fa41 	bl	8001a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003612:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <HAL_UART_MspInit+0xcc>)
 8003614:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003618:	4a1b      	ldr	r2, [pc, #108]	; (8003688 <HAL_UART_MspInit+0xcc>)
 800361a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800361e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003622:	4b19      	ldr	r3, [pc, #100]	; (8003688 <HAL_UART_MspInit+0xcc>)
 8003624:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003630:	4b15      	ldr	r3, [pc, #84]	; (8003688 <HAL_UART_MspInit+0xcc>)
 8003632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003636:	4a14      	ldr	r2, [pc, #80]	; (8003688 <HAL_UART_MspInit+0xcc>)
 8003638:	f043 0302 	orr.w	r3, r3, #2
 800363c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003640:	4b11      	ldr	r3, [pc, #68]	; (8003688 <HAL_UART_MspInit+0xcc>)
 8003642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800364e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003656:	2302      	movs	r3, #2
 8003658:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365c:	2300      	movs	r3, #0
 800365e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003662:	2300      	movs	r3, #0
 8003664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003668:	2307      	movs	r3, #7
 800366a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800366e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003672:	4619      	mov	r1, r3
 8003674:	4805      	ldr	r0, [pc, #20]	; (800368c <HAL_UART_MspInit+0xd0>)
 8003676:	f002 fce9 	bl	800604c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800367a:	bf00      	nop
 800367c:	37e8      	adds	r7, #232	; 0xe8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40004800 	.word	0x40004800
 8003688:	58024400 	.word	0x58024400
 800368c:	58020400 	.word	0x58020400

08003690 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b0ba      	sub	sp, #232	; 0xe8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003698:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	605a      	str	r2, [r3, #4]
 80036a2:	609a      	str	r2, [r3, #8]
 80036a4:	60da      	str	r2, [r3, #12]
 80036a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036a8:	f107 0310 	add.w	r3, r7, #16
 80036ac:	22c0      	movs	r2, #192	; 0xc0
 80036ae:	2100      	movs	r1, #0
 80036b0:	4618      	mov	r0, r3
 80036b2:	f00a fa11 	bl	800dad8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a30      	ldr	r2, [pc, #192]	; (800377c <HAL_PCD_MspInit+0xec>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d159      	bne.n	8003774 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80036c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80036cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80036d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036d4:	f107 0310 	add.w	r3, r7, #16
 80036d8:	4618      	mov	r0, r3
 80036da:	f005 fa1f 	bl	8008b1c <HAL_RCCEx_PeriphCLKConfig>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80036e4:	f7fe f9d6 	bl	8001a94 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80036e8:	f004 f968 	bl	80079bc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ec:	4b24      	ldr	r3, [pc, #144]	; (8003780 <HAL_PCD_MspInit+0xf0>)
 80036ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036f2:	4a23      	ldr	r2, [pc, #140]	; (8003780 <HAL_PCD_MspInit+0xf0>)
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036fc:	4b20      	ldr	r3, [pc, #128]	; (8003780 <HAL_PCD_MspInit+0xf0>)
 80036fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 800370a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800370e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003712:	2300      	movs	r3, #0
 8003714:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003718:	2300      	movs	r3, #0
 800371a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 800371e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003722:	4619      	mov	r1, r3
 8003724:	4817      	ldr	r0, [pc, #92]	; (8003784 <HAL_PCD_MspInit+0xf4>)
 8003726:	f002 fc91 	bl	800604c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 800372a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800372e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003732:	2302      	movs	r3, #2
 8003734:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	2300      	movs	r3, #0
 800373a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373e:	2300      	movs	r3, #0
 8003740:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003744:	230a      	movs	r3, #10
 8003746:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800374a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800374e:	4619      	mov	r1, r3
 8003750:	480c      	ldr	r0, [pc, #48]	; (8003784 <HAL_PCD_MspInit+0xf4>)
 8003752:	f002 fc7b 	bl	800604c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003756:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <HAL_PCD_MspInit+0xf0>)
 8003758:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800375c:	4a08      	ldr	r2, [pc, #32]	; (8003780 <HAL_PCD_MspInit+0xf0>)
 800375e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003762:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_PCD_MspInit+0xf0>)
 8003768:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800376c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003774:	bf00      	nop
 8003776:	37e8      	adds	r7, #232	; 0xe8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40080000 	.word	0x40080000
 8003780:	58024400 	.word	0x58024400
 8003784:	58020000 	.word	0x58020000

08003788 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003788:	b580      	push	{r7, lr}
 800378a:	b0b8      	sub	sp, #224	; 0xe0
 800378c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800378e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	605a      	str	r2, [r3, #4]
 8003798:	609a      	str	r2, [r3, #8]
 800379a:	60da      	str	r2, [r3, #12]
 800379c:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800379e:	4b51      	ldr	r3, [pc, #324]	; (80038e4 <HAL_FMC_MspInit+0x15c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f040 8099 	bne.w	80038da <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80037a8:	4b4e      	ldr	r3, [pc, #312]	; (80038e4 <HAL_FMC_MspInit+0x15c>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037ae:	f107 0308 	add.w	r3, r7, #8
 80037b2:	22c0      	movs	r2, #192	; 0xc0
 80037b4:	2100      	movs	r1, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	f00a f98e 	bl	800dad8 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80037bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037cc:	f107 0308 	add.w	r3, r7, #8
 80037d0:	4618      	mov	r0, r3
 80037d2:	f005 f9a3 	bl	8008b1c <HAL_RCCEx_PeriphCLKConfig>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80037dc:	f7fe f95a 	bl	8001a94 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80037e0:	4b41      	ldr	r3, [pc, #260]	; (80038e8 <HAL_FMC_MspInit+0x160>)
 80037e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80037e6:	4a40      	ldr	r2, [pc, #256]	; (80038e8 <HAL_FMC_MspInit+0x160>)
 80037e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037ec:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80037f0:	4b3d      	ldr	r3, [pc, #244]	; (80038e8 <HAL_FMC_MspInit+0x160>)
 80037f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80037f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037fa:	607b      	str	r3, [r7, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80037fe:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003802:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003806:	2302      	movs	r3, #2
 8003808:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380c:	2300      	movs	r3, #0
 800380e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003812:	2303      	movs	r3, #3
 8003814:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003818:	230c      	movs	r3, #12
 800381a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800381e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003822:	4619      	mov	r1, r3
 8003824:	4831      	ldr	r0, [pc, #196]	; (80038ec <HAL_FMC_MspInit+0x164>)
 8003826:	f002 fc11 	bl	800604c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 800382a:	f248 1333 	movw	r3, #33075	; 0x8133
 800382e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003832:	2302      	movs	r3, #2
 8003834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003838:	2300      	movs	r3, #0
 800383a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800383e:	2303      	movs	r3, #3
 8003840:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003844:	230c      	movs	r3, #12
 8003846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800384a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800384e:	4619      	mov	r1, r3
 8003850:	4827      	ldr	r0, [pc, #156]	; (80038f0 <HAL_FMC_MspInit+0x168>)
 8003852:	f002 fbfb 	bl	800604c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8003856:	f24c 7303 	movw	r3, #50947	; 0xc703
 800385a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385e:	2302      	movs	r3, #2
 8003860:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003864:	2300      	movs	r3, #0
 8003866:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800386a:	2303      	movs	r3, #3
 800386c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003870:	230c      	movs	r3, #12
 8003872:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003876:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800387a:	4619      	mov	r1, r3
 800387c:	481d      	ldr	r0, [pc, #116]	; (80038f4 <HAL_FMC_MspInit+0x16c>)
 800387e:	f002 fbe5 	bl	800604c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8003882:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003886:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388a:	2302      	movs	r3, #2
 800388c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003890:	2300      	movs	r3, #0
 8003892:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003896:	2303      	movs	r3, #3
 8003898:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800389c:	230c      	movs	r3, #12
 800389e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80038a6:	4619      	mov	r1, r3
 80038a8:	4813      	ldr	r0, [pc, #76]	; (80038f8 <HAL_FMC_MspInit+0x170>)
 80038aa:	f002 fbcf 	bl	800604c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80038ae:	23e0      	movs	r3, #224	; 0xe0
 80038b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b4:	2302      	movs	r3, #2
 80038b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c0:	2303      	movs	r3, #3
 80038c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038c6:	230c      	movs	r3, #12
 80038c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80038cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80038d0:	4619      	mov	r1, r3
 80038d2:	480a      	ldr	r0, [pc, #40]	; (80038fc <HAL_FMC_MspInit+0x174>)
 80038d4:	f002 fbba 	bl	800604c <HAL_GPIO_Init>
 80038d8:	e000      	b.n	80038dc <HAL_FMC_MspInit+0x154>
    return;
 80038da:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80038dc:	37e0      	adds	r7, #224	; 0xe0
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	24001138 	.word	0x24001138
 80038e8:	58024400 	.word	0x58024400
 80038ec:	58021000 	.word	0x58021000
 80038f0:	58021800 	.word	0x58021800
 80038f4:	58020c00 	.word	0x58020c00
 80038f8:	58021400 	.word	0x58021400
 80038fc:	58021c00 	.word	0x58021c00

08003900 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003908:	f7ff ff3e 	bl	8003788 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800390c:	bf00      	nop
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b0ba      	sub	sp, #232	; 0xe8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800391c:	f107 0310 	add.w	r3, r7, #16
 8003920:	22c0      	movs	r2, #192	; 0xc0
 8003922:	2100      	movs	r1, #0
 8003924:	4618      	mov	r0, r3
 8003926:	f00a f8d7 	bl	800dad8 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a45      	ldr	r2, [pc, #276]	; (8003a44 <HAL_SAI_MspInit+0x130>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d13e      	bne.n	80039b2 <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8003934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8003940:	2300      	movs	r3, #0
 8003942:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003944:	f107 0310 	add.w	r3, r7, #16
 8003948:	4618      	mov	r0, r3
 800394a:	f005 f8e7 	bl	8008b1c <HAL_RCCEx_PeriphCLKConfig>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8003954:	f7fe f89e 	bl	8001a94 <Error_Handler>
    }

    if (SAI2_client == 0)
 8003958:	4b3b      	ldr	r3, [pc, #236]	; (8003a48 <HAL_SAI_MspInit+0x134>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10e      	bne.n	800397e <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003960:	4b3a      	ldr	r3, [pc, #232]	; (8003a4c <HAL_SAI_MspInit+0x138>)
 8003962:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003966:	4a39      	ldr	r2, [pc, #228]	; (8003a4c <HAL_SAI_MspInit+0x138>)
 8003968:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800396c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003970:	4b36      	ldr	r3, [pc, #216]	; (8003a4c <HAL_SAI_MspInit+0x138>)
 8003972:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003976:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 800397e:	4b32      	ldr	r3, [pc, #200]	; (8003a48 <HAL_SAI_MspInit+0x134>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3301      	adds	r3, #1
 8003984:	4a30      	ldr	r2, [pc, #192]	; (8003a48 <HAL_SAI_MspInit+0x134>)
 8003986:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8003988:	23f0      	movs	r3, #240	; 0xf0
 800398a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398e:	2302      	movs	r3, #2
 8003990:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003994:	2300      	movs	r3, #0
 8003996:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399a:	2300      	movs	r3, #0
 800399c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80039a0:	230a      	movs	r3, #10
 80039a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80039a6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039aa:	4619      	mov	r1, r3
 80039ac:	4828      	ldr	r0, [pc, #160]	; (8003a50 <HAL_SAI_MspInit+0x13c>)
 80039ae:	f002 fb4d 	bl	800604c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a27      	ldr	r2, [pc, #156]	; (8003a54 <HAL_SAI_MspInit+0x140>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d13f      	bne.n	8003a3c <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80039bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039cc:	f107 0310 	add.w	r3, r7, #16
 80039d0:	4618      	mov	r0, r3
 80039d2:	f005 f8a3 	bl	8008b1c <HAL_RCCEx_PeriphCLKConfig>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 80039dc:	f7fe f85a 	bl	8001a94 <Error_Handler>
    }

      if (SAI2_client == 0)
 80039e0:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <HAL_SAI_MspInit+0x134>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10e      	bne.n	8003a06 <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80039e8:	4b18      	ldr	r3, [pc, #96]	; (8003a4c <HAL_SAI_MspInit+0x138>)
 80039ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039ee:	4a17      	ldr	r2, [pc, #92]	; (8003a4c <HAL_SAI_MspInit+0x138>)
 80039f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80039f8:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <HAL_SAI_MspInit+0x138>)
 80039fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a02:	60bb      	str	r3, [r7, #8]
 8003a04:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8003a06:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <HAL_SAI_MspInit+0x134>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	4a0e      	ldr	r2, [pc, #56]	; (8003a48 <HAL_SAI_MspInit+0x134>)
 8003a0e:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a24:	2300      	movs	r3, #0
 8003a26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003a2a:	230a      	movs	r3, #10
 8003a2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a30:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a34:	4619      	mov	r1, r3
 8003a36:	4808      	ldr	r0, [pc, #32]	; (8003a58 <HAL_SAI_MspInit+0x144>)
 8003a38:	f002 fb08 	bl	800604c <HAL_GPIO_Init>

    }
}
 8003a3c:	bf00      	nop
 8003a3e:	37e8      	adds	r7, #232	; 0xe8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40015c04 	.word	0x40015c04
 8003a48:	2400113c 	.word	0x2400113c
 8003a4c:	58024400 	.word	0x58024400
 8003a50:	58022000 	.word	0x58022000
 8003a54:	40015c24 	.word	0x40015c24
 8003a58:	58021800 	.word	0x58021800

08003a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a60:	e7fe      	b.n	8003a60 <NMI_Handler+0x4>

08003a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a66:	e7fe      	b.n	8003a66 <HardFault_Handler+0x4>

08003a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a6c:	e7fe      	b.n	8003a6c <MemManage_Handler+0x4>

08003a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a72:	e7fe      	b.n	8003a72 <BusFault_Handler+0x4>

08003a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a78:	e7fe      	b.n	8003a78 <UsageFault_Handler+0x4>

08003a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a96:	b480      	push	{r7}
 8003a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aa8:	f000 f95c 	bl	8003d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003aac:	bf00      	nop
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ab8:	4a14      	ldr	r2, [pc, #80]	; (8003b0c <_sbrk+0x5c>)
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <_sbrk+0x60>)
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ac4:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <_sbrk+0x64>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d102      	bne.n	8003ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003acc:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <_sbrk+0x64>)
 8003ace:	4a12      	ldr	r2, [pc, #72]	; (8003b18 <_sbrk+0x68>)
 8003ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ad2:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <_sbrk+0x64>)
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4413      	add	r3, r2
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d207      	bcs.n	8003af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ae0:	f00a f802 	bl	800dae8 <__errno>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	220c      	movs	r2, #12
 8003ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003aea:	f04f 33ff 	mov.w	r3, #4294967295
 8003aee:	e009      	b.n	8003b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003af0:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <_sbrk+0x64>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003af6:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <_sbrk+0x64>)
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4413      	add	r3, r2
 8003afe:	4a05      	ldr	r2, [pc, #20]	; (8003b14 <_sbrk+0x64>)
 8003b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b02:	68fb      	ldr	r3, [r7, #12]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	24080000 	.word	0x24080000
 8003b10:	00000400 	.word	0x00000400
 8003b14:	24001140 	.word	0x24001140
 8003b18:	24001290 	.word	0x24001290

08003b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003b20:	4b37      	ldr	r3, [pc, #220]	; (8003c00 <SystemInit+0xe4>)
 8003b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b26:	4a36      	ldr	r2, [pc, #216]	; (8003c00 <SystemInit+0xe4>)
 8003b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003b30:	4b34      	ldr	r3, [pc, #208]	; (8003c04 <SystemInit+0xe8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	2b06      	cmp	r3, #6
 8003b3a:	d807      	bhi.n	8003b4c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003b3c:	4b31      	ldr	r3, [pc, #196]	; (8003c04 <SystemInit+0xe8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f023 030f 	bic.w	r3, r3, #15
 8003b44:	4a2f      	ldr	r2, [pc, #188]	; (8003c04 <SystemInit+0xe8>)
 8003b46:	f043 0307 	orr.w	r3, r3, #7
 8003b4a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003b4c:	4b2e      	ldr	r3, [pc, #184]	; (8003c08 <SystemInit+0xec>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a2d      	ldr	r2, [pc, #180]	; (8003c08 <SystemInit+0xec>)
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003b58:	4b2b      	ldr	r3, [pc, #172]	; (8003c08 <SystemInit+0xec>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003b5e:	4b2a      	ldr	r3, [pc, #168]	; (8003c08 <SystemInit+0xec>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4929      	ldr	r1, [pc, #164]	; (8003c08 <SystemInit+0xec>)
 8003b64:	4b29      	ldr	r3, [pc, #164]	; (8003c0c <SystemInit+0xf0>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003b6a:	4b26      	ldr	r3, [pc, #152]	; (8003c04 <SystemInit+0xe8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d007      	beq.n	8003b86 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003b76:	4b23      	ldr	r3, [pc, #140]	; (8003c04 <SystemInit+0xe8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f023 030f 	bic.w	r3, r3, #15
 8003b7e:	4a21      	ldr	r2, [pc, #132]	; (8003c04 <SystemInit+0xe8>)
 8003b80:	f043 0307 	orr.w	r3, r3, #7
 8003b84:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003b86:	4b20      	ldr	r3, [pc, #128]	; (8003c08 <SystemInit+0xec>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003b8c:	4b1e      	ldr	r3, [pc, #120]	; (8003c08 <SystemInit+0xec>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003b92:	4b1d      	ldr	r3, [pc, #116]	; (8003c08 <SystemInit+0xec>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003b98:	4b1b      	ldr	r3, [pc, #108]	; (8003c08 <SystemInit+0xec>)
 8003b9a:	4a1d      	ldr	r2, [pc, #116]	; (8003c10 <SystemInit+0xf4>)
 8003b9c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003b9e:	4b1a      	ldr	r3, [pc, #104]	; (8003c08 <SystemInit+0xec>)
 8003ba0:	4a1c      	ldr	r2, [pc, #112]	; (8003c14 <SystemInit+0xf8>)
 8003ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003ba4:	4b18      	ldr	r3, [pc, #96]	; (8003c08 <SystemInit+0xec>)
 8003ba6:	4a1c      	ldr	r2, [pc, #112]	; (8003c18 <SystemInit+0xfc>)
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003baa:	4b17      	ldr	r3, [pc, #92]	; (8003c08 <SystemInit+0xec>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003bb0:	4b15      	ldr	r3, [pc, #84]	; (8003c08 <SystemInit+0xec>)
 8003bb2:	4a19      	ldr	r2, [pc, #100]	; (8003c18 <SystemInit+0xfc>)
 8003bb4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003bb6:	4b14      	ldr	r3, [pc, #80]	; (8003c08 <SystemInit+0xec>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003bbc:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <SystemInit+0xec>)
 8003bbe:	4a16      	ldr	r2, [pc, #88]	; (8003c18 <SystemInit+0xfc>)
 8003bc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003bc2:	4b11      	ldr	r3, [pc, #68]	; (8003c08 <SystemInit+0xec>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <SystemInit+0xec>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a0e      	ldr	r2, [pc, #56]	; (8003c08 <SystemInit+0xec>)
 8003bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bd2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <SystemInit+0xec>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003bda:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <SystemInit+0x100>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <SystemInit+0x104>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003be6:	d202      	bcs.n	8003bee <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003be8:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <SystemInit+0x108>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003bee:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <SystemInit+0x10c>)
 8003bf0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003bf4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003bf6:	bf00      	nop
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	e000ed00 	.word	0xe000ed00
 8003c04:	52002000 	.word	0x52002000
 8003c08:	58024400 	.word	0x58024400
 8003c0c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003c10:	02020200 	.word	0x02020200
 8003c14:	01ff0000 	.word	0x01ff0000
 8003c18:	01010280 	.word	0x01010280
 8003c1c:	5c001000 	.word	0x5c001000
 8003c20:	ffff0000 	.word	0xffff0000
 8003c24:	51008108 	.word	0x51008108
 8003c28:	52004000 	.word	0x52004000

08003c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003c30:	f7ff ff74 	bl	8003b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c34:	480c      	ldr	r0, [pc, #48]	; (8003c68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c36:	490d      	ldr	r1, [pc, #52]	; (8003c6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c38:	4a0d      	ldr	r2, [pc, #52]	; (8003c70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c3c:	e002      	b.n	8003c44 <LoopCopyDataInit>

08003c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c42:	3304      	adds	r3, #4

08003c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c48:	d3f9      	bcc.n	8003c3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c4c:	4c0a      	ldr	r4, [pc, #40]	; (8003c78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c50:	e001      	b.n	8003c56 <LoopFillZerobss>

08003c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c54:	3204      	adds	r2, #4

08003c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c58:	d3fb      	bcc.n	8003c52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c5a:	f009 ff4b 	bl	800daf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c5e:	f7fc fd15 	bl	800068c <main>
  bx  lr
 8003c62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c64:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003c68:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003c6c:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8003c70:	0800e664 	.word	0x0800e664
  ldr r2, =_sbss
 8003c74:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8003c78:	24001290 	.word	0x24001290

08003c7c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c7c:	e7fe      	b.n	8003c7c <ADC3_IRQHandler>
	...

08003c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c86:	2003      	movs	r0, #3
 8003c88:	f001 fa26 	bl	80050d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c8c:	f004 fd70 	bl	8008770 <HAL_RCC_GetSysClockFreq>
 8003c90:	4602      	mov	r2, r0
 8003c92:	4b15      	ldr	r3, [pc, #84]	; (8003ce8 <HAL_Init+0x68>)
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	4913      	ldr	r1, [pc, #76]	; (8003cec <HAL_Init+0x6c>)
 8003c9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003caa:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <HAL_Init+0x68>)
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	4a0e      	ldr	r2, [pc, #56]	; (8003cec <HAL_Init+0x6c>)
 8003cb4:	5cd3      	ldrb	r3, [r2, r3]
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc0:	4a0b      	ldr	r2, [pc, #44]	; (8003cf0 <HAL_Init+0x70>)
 8003cc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cc4:	4a0b      	ldr	r2, [pc, #44]	; (8003cf4 <HAL_Init+0x74>)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cca:	2000      	movs	r0, #0
 8003ccc:	f000 f814 	bl	8003cf8 <HAL_InitTick>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e002      	b.n	8003ce0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003cda:	f7fe fe33 	bl	8002944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	58024400 	.word	0x58024400
 8003cec:	0800e5e8 	.word	0x0800e5e8
 8003cf0:	24000004 	.word	0x24000004
 8003cf4:	24000000 	.word	0x24000000

08003cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003d00:	4b15      	ldr	r3, [pc, #84]	; (8003d58 <HAL_InitTick+0x60>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e021      	b.n	8003d50 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003d0c:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <HAL_InitTick+0x64>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <HAL_InitTick+0x60>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	4619      	mov	r1, r3
 8003d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d22:	4618      	mov	r0, r3
 8003d24:	f001 f9fd 	bl	8005122 <HAL_SYSTICK_Config>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e00e      	b.n	8003d50 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b0f      	cmp	r3, #15
 8003d36:	d80a      	bhi.n	8003d4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d38:	2200      	movs	r2, #0
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d40:	f001 f9d5 	bl	80050ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d44:	4a06      	ldr	r2, [pc, #24]	; (8003d60 <HAL_InitTick+0x68>)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e000      	b.n	8003d50 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	2400000c 	.word	0x2400000c
 8003d5c:	24000000 	.word	0x24000000
 8003d60:	24000008 	.word	0x24000008

08003d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <HAL_IncTick+0x20>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <HAL_IncTick+0x24>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4413      	add	r3, r2
 8003d74:	4a04      	ldr	r2, [pc, #16]	; (8003d88 <HAL_IncTick+0x24>)
 8003d76:	6013      	str	r3, [r2, #0]
}
 8003d78:	bf00      	nop
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	2400000c 	.word	0x2400000c
 8003d88:	24001144 	.word	0x24001144

08003d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d90:	4b03      	ldr	r3, [pc, #12]	; (8003da0 <HAL_GetTick+0x14>)
 8003d92:	681b      	ldr	r3, [r3, #0]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	24001144 	.word	0x24001144

08003da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dac:	f7ff ffee 	bl	8003d8c <HAL_GetTick>
 8003db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbc:	d005      	beq.n	8003dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <HAL_Delay+0x44>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003dca:	bf00      	nop
 8003dcc:	f7ff ffde 	bl	8003d8c <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d8f7      	bhi.n	8003dcc <HAL_Delay+0x28>
  {
  }
}
 8003ddc:	bf00      	nop
 8003dde:	bf00      	nop
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	2400000c 	.word	0x2400000c

08003dec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003df0:	4b03      	ldr	r3, [pc, #12]	; (8003e00 <HAL_GetREVID+0x14>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	0c1b      	lsrs	r3, r3, #16
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	5c001000 	.word	0x5c001000

08003e04 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003e0c:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003e14:	4904      	ldr	r1, [pc, #16]	; (8003e28 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	604b      	str	r3, [r1, #4]
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	58000400 	.word	0x58000400

08003e2c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003e36:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	401a      	ands	r2, r3
 8003e40:	4904      	ldr	r1, [pc, #16]	; (8003e54 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	604b      	str	r3, [r1, #4]
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	58000400 	.word	0x58000400

08003e58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	609a      	str	r2, [r3, #8]
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	609a      	str	r2, [r3, #8]
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	3360      	adds	r3, #96	; 0x60
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	430b      	orrs	r3, r1
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003ef4:	bf00      	nop
 8003ef6:	371c      	adds	r7, #28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f003 031f 	and.w	r3, r3, #31
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f20:	431a      	orrs	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	611a      	str	r2, [r3, #16]
}
 8003f26:	bf00      	nop
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b087      	sub	sp, #28
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	3360      	adds	r3, #96	; 0x60
 8003f42:	461a      	mov	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	601a      	str	r2, [r3, #0]
  }
}
 8003f5c:	bf00      	nop
 8003f5e:	371c      	adds	r7, #28
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	3330      	adds	r3, #48	; 0x30
 8003f78:	461a      	mov	r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	0a1b      	lsrs	r3, r3, #8
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	f003 030c 	and.w	r3, r3, #12
 8003f84:	4413      	add	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f003 031f 	and.w	r3, r3, #31
 8003f92:	211f      	movs	r1, #31
 8003f94:	fa01 f303 	lsl.w	r3, r1, r3
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	401a      	ands	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	0e9b      	lsrs	r3, r3, #26
 8003fa0:	f003 011f 	and.w	r1, r3, #31
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f003 031f 	and.w	r3, r3, #31
 8003faa:	fa01 f303 	lsl.w	r3, r1, r3
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003fb4:	bf00      	nop
 8003fb6:	371c      	adds	r7, #28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	3314      	adds	r3, #20
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	0e5b      	lsrs	r3, r3, #25
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	4413      	add	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	0d1b      	lsrs	r3, r3, #20
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	2107      	movs	r1, #7
 8003fee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	401a      	ands	r2, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	0d1b      	lsrs	r3, r3, #20
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	fa01 f303 	lsl.w	r3, r1, r3
 8004004:	431a      	orrs	r2, r3
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800400a:	bf00      	nop
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004030:	43db      	mvns	r3, r3
 8004032:	401a      	ands	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f003 0318 	and.w	r3, r3, #24
 800403a:	4908      	ldr	r1, [pc, #32]	; (800405c <LL_ADC_SetChannelSingleDiff+0x44>)
 800403c:	40d9      	lsrs	r1, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	400b      	ands	r3, r1
 8004042:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004046:	431a      	orrs	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800404e:	bf00      	nop
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	000fffff 	.word	0x000fffff

08004060 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	4b04      	ldr	r3, [pc, #16]	; (8004080 <LL_ADC_DisableDeepPowerDown+0x20>)
 800406e:	4013      	ands	r3, r2
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6093      	str	r3, [r2, #8]
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	5fffffc0 	.word	0x5fffffc0

08004084 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004098:	d101      	bne.n	800409e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <LL_ADC_EnableInternalRegulator+0x24>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	6fffffc0 	.word	0x6fffffc0

080040d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040e8:	d101      	bne.n	80040ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <LL_ADC_IsEnabled+0x18>
 8004110:	2301      	movs	r3, #1
 8004112:	e000      	b.n	8004116 <LL_ADC_IsEnabled+0x1a>
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b04      	cmp	r3, #4
 8004134:	d101      	bne.n	800413a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b08      	cmp	r3, #8
 800415a:	d101      	bne.n	8004160 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800415c:	2301      	movs	r3, #1
 800415e:	e000      	b.n	8004162 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
	...

08004170 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004170:	b590      	push	{r4, r7, lr}
 8004172:	b089      	sub	sp, #36	; 0x24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800417c:	2300      	movs	r3, #0
 800417e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e18f      	b.n	80044aa <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004194:	2b00      	cmp	r3, #0
 8004196:	d109      	bne.n	80041ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7fe fbed 	bl	8002978 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff ff67 	bl	8004084 <LL_ADC_IsDeepPowerDownEnabled>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d004      	beq.n	80041c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff ff4d 	bl	8004060 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7ff ff82 	bl	80040d4 <LL_ADC_IsInternalRegulatorEnabled>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d114      	bne.n	8004200 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff ff66 	bl	80040ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041e0:	4b87      	ldr	r3, [pc, #540]	; (8004400 <HAL_ADC_Init+0x290>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	099b      	lsrs	r3, r3, #6
 80041e6:	4a87      	ldr	r2, [pc, #540]	; (8004404 <HAL_ADC_Init+0x294>)
 80041e8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ec:	099b      	lsrs	r3, r3, #6
 80041ee:	3301      	adds	r3, #1
 80041f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80041f2:	e002      	b.n	80041fa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1f9      	bne.n	80041f4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff ff65 	bl	80040d4 <LL_ADC_IsInternalRegulatorEnabled>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10d      	bne.n	800422c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004214:	f043 0210 	orr.w	r2, r3, #16
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004220:	f043 0201 	orr.w	r2, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff ff76 	bl	8004122 <LL_ADC_REG_IsConversionOngoing>
 8004236:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2b00      	cmp	r3, #0
 8004242:	f040 8129 	bne.w	8004498 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b00      	cmp	r3, #0
 800424a:	f040 8125 	bne.w	8004498 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004252:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004256:	f043 0202 	orr.w	r2, r3, #2
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff ff4a 	bl	80040fc <LL_ADC_IsEnabled>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d136      	bne.n	80042dc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a65      	ldr	r2, [pc, #404]	; (8004408 <HAL_ADC_Init+0x298>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d004      	beq.n	8004282 <HAL_ADC_Init+0x112>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a63      	ldr	r2, [pc, #396]	; (800440c <HAL_ADC_Init+0x29c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d10e      	bne.n	80042a0 <HAL_ADC_Init+0x130>
 8004282:	4861      	ldr	r0, [pc, #388]	; (8004408 <HAL_ADC_Init+0x298>)
 8004284:	f7ff ff3a 	bl	80040fc <LL_ADC_IsEnabled>
 8004288:	4604      	mov	r4, r0
 800428a:	4860      	ldr	r0, [pc, #384]	; (800440c <HAL_ADC_Init+0x29c>)
 800428c:	f7ff ff36 	bl	80040fc <LL_ADC_IsEnabled>
 8004290:	4603      	mov	r3, r0
 8004292:	4323      	orrs	r3, r4
 8004294:	2b00      	cmp	r3, #0
 8004296:	bf0c      	ite	eq
 8004298:	2301      	moveq	r3, #1
 800429a:	2300      	movne	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	e008      	b.n	80042b2 <HAL_ADC_Init+0x142>
 80042a0:	485b      	ldr	r0, [pc, #364]	; (8004410 <HAL_ADC_Init+0x2a0>)
 80042a2:	f7ff ff2b 	bl	80040fc <LL_ADC_IsEnabled>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	bf0c      	ite	eq
 80042ac:	2301      	moveq	r3, #1
 80042ae:	2300      	movne	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d012      	beq.n	80042dc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a53      	ldr	r2, [pc, #332]	; (8004408 <HAL_ADC_Init+0x298>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d004      	beq.n	80042ca <HAL_ADC_Init+0x15a>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a51      	ldr	r2, [pc, #324]	; (800440c <HAL_ADC_Init+0x29c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d101      	bne.n	80042ce <HAL_ADC_Init+0x15e>
 80042ca:	4a52      	ldr	r2, [pc, #328]	; (8004414 <HAL_ADC_Init+0x2a4>)
 80042cc:	e000      	b.n	80042d0 <HAL_ADC_Init+0x160>
 80042ce:	4a52      	ldr	r2, [pc, #328]	; (8004418 <HAL_ADC_Init+0x2a8>)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	4619      	mov	r1, r3
 80042d6:	4610      	mov	r0, r2
 80042d8:	f7ff fdbe 	bl	8003e58 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80042dc:	f7ff fd86 	bl	8003dec <HAL_GetREVID>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d914      	bls.n	8004314 <HAL_ADC_Init+0x1a4>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	2b10      	cmp	r3, #16
 80042f0:	d110      	bne.n	8004314 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	7d5b      	ldrb	r3, [r3, #21]
 80042f6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80042fc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004302:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	7f1b      	ldrb	r3, [r3, #28]
 8004308:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800430a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800430c:	f043 030c 	orr.w	r3, r3, #12
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	e00d      	b.n	8004330 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	7d5b      	ldrb	r3, [r3, #21]
 8004318:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800431e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004324:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	7f1b      	ldrb	r3, [r3, #28]
 800432a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800432c:	4313      	orrs	r3, r2
 800432e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	7f1b      	ldrb	r3, [r3, #28]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d106      	bne.n	8004346 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	3b01      	subs	r3, #1
 800433e:	045b      	lsls	r3, r3, #17
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	4313      	orrs	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	2b00      	cmp	r3, #0
 800434c:	d009      	beq.n	8004362 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	4313      	orrs	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	4b2c      	ldr	r3, [pc, #176]	; (800441c <HAL_ADC_Init+0x2ac>)
 800436a:	4013      	ands	r3, r2
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6812      	ldr	r2, [r2, #0]
 8004370:	69b9      	ldr	r1, [r7, #24]
 8004372:	430b      	orrs	r3, r1
 8004374:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff fed1 	bl	8004122 <LL_ADC_REG_IsConversionOngoing>
 8004380:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff fede 	bl	8004148 <LL_ADC_INJ_IsConversionOngoing>
 800438c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d15f      	bne.n	8004454 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d15c      	bne.n	8004454 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	7d1b      	ldrb	r3, [r3, #20]
 800439e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80043a4:	4313      	orrs	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	4b1c      	ldr	r3, [pc, #112]	; (8004420 <HAL_ADC_Init+0x2b0>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6812      	ldr	r2, [r2, #0]
 80043b6:	69b9      	ldr	r1, [r7, #24]
 80043b8:	430b      	orrs	r3, r1
 80043ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d130      	bne.n	8004428 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	4b14      	ldr	r3, [pc, #80]	; (8004424 <HAL_ADC_Init+0x2b4>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043da:	3a01      	subs	r2, #1
 80043dc:	0411      	lsls	r1, r2, #16
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043e2:	4311      	orrs	r1, r2
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80043e8:	4311      	orrs	r1, r2
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80043ee:	430a      	orrs	r2, r1
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	611a      	str	r2, [r3, #16]
 80043fc:	e01c      	b.n	8004438 <HAL_ADC_Init+0x2c8>
 80043fe:	bf00      	nop
 8004400:	24000000 	.word	0x24000000
 8004404:	053e2d63 	.word	0x053e2d63
 8004408:	40022000 	.word	0x40022000
 800440c:	40022100 	.word	0x40022100
 8004410:	58026000 	.word	0x58026000
 8004414:	40022300 	.word	0x40022300
 8004418:	58026300 	.word	0x58026300
 800441c:	fff0c003 	.word	0xfff0c003
 8004420:	ffffbffc 	.word	0xffffbffc
 8004424:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691a      	ldr	r2, [r3, #16]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0201 	bic.w	r2, r2, #1
 8004436:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fb80 	bl	8004b54 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d10c      	bne.n	8004476 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	f023 010f 	bic.w	r1, r3, #15
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	1e5a      	subs	r2, r3, #1
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	631a      	str	r2, [r3, #48]	; 0x30
 8004474:	e007      	b.n	8004486 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 020f 	bic.w	r2, r2, #15
 8004484:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448a:	f023 0303 	bic.w	r3, r3, #3
 800448e:	f043 0201 	orr.w	r2, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	655a      	str	r2, [r3, #84]	; 0x54
 8004496:	e007      	b.n	80044a8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449c:	f043 0210 	orr.w	r2, r3, #16
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80044a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3724      	adds	r7, #36	; 0x24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd90      	pop	{r4, r7, pc}
 80044b2:	bf00      	nop

080044b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80044b4:	b590      	push	{r4, r7, lr}
 80044b6:	b0a1      	sub	sp, #132	; 0x84
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044be:	2300      	movs	r3, #0
 80044c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	4a9d      	ldr	r2, [pc, #628]	; (8004744 <HAL_ADC_ConfigChannel+0x290>)
 80044ce:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <HAL_ADC_ConfigChannel+0x2a>
 80044da:	2302      	movs	r3, #2
 80044dc:	e321      	b.n	8004b22 <HAL_ADC_ConfigChannel+0x66e>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff fe19 	bl	8004122 <LL_ADC_REG_IsConversionOngoing>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f040 8306 	bne.w	8004b04 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004500:	2b00      	cmp	r3, #0
 8004502:	d108      	bne.n	8004516 <HAL_ADC_ConfigChannel+0x62>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	0e9b      	lsrs	r3, r3, #26
 800450a:	f003 031f 	and.w	r3, r3, #31
 800450e:	2201      	movs	r2, #1
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	e016      	b.n	8004544 <HAL_ADC_ConfigChannel+0x90>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800451e:	fa93 f3a3 	rbit	r3, r3
 8004522:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004524:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004526:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004528:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800452e:	2320      	movs	r3, #32
 8004530:	e003      	b.n	800453a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004532:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004534:	fab3 f383 	clz	r3, r3
 8004538:	b2db      	uxtb	r3, r3
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	2201      	movs	r2, #1
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6812      	ldr	r2, [r2, #0]
 8004548:	69d1      	ldr	r1, [r2, #28]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6812      	ldr	r2, [r2, #0]
 800454e:	430b      	orrs	r3, r1
 8004550:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6859      	ldr	r1, [r3, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	f7ff fd02 	bl	8003f68 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff fdda 	bl	8004122 <LL_ADC_REG_IsConversionOngoing>
 800456e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff fde7 	bl	8004148 <LL_ADC_INJ_IsConversionOngoing>
 800457a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800457c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800457e:	2b00      	cmp	r3, #0
 8004580:	f040 80b3 	bne.w	80046ea <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004586:	2b00      	cmp	r3, #0
 8004588:	f040 80af 	bne.w	80046ea <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	6819      	ldr	r1, [r3, #0]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	461a      	mov	r2, r3
 800459a:	f7ff fd11 	bl	8003fc0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800459e:	4b6a      	ldr	r3, [pc, #424]	; (8004748 <HAL_ADC_ConfigChannel+0x294>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80045a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045aa:	d10b      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x110>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	695a      	ldr	r2, [r3, #20]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	089b      	lsrs	r3, r3, #2
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	e01d      	b.n	8004600 <HAL_ADC_ConfigChannel+0x14c>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10b      	bne.n	80045ea <HAL_ADC_ConfigChannel+0x136>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	695a      	ldr	r2, [r3, #20]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	089b      	lsrs	r3, r3, #2
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	e00a      	b.n	8004600 <HAL_ADC_ConfigChannel+0x14c>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	695a      	ldr	r2, [r3, #20]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	089b      	lsrs	r3, r3, #2
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2b04      	cmp	r3, #4
 8004608:	d027      	beq.n	800465a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	6919      	ldr	r1, [r3, #16]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004618:	f7ff fc52 	bl	8003ec0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6818      	ldr	r0, [r3, #0]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	6919      	ldr	r1, [r3, #16]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	7e5b      	ldrb	r3, [r3, #25]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d102      	bne.n	8004632 <HAL_ADC_ConfigChannel+0x17e>
 800462c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004630:	e000      	b.n	8004634 <HAL_ADC_ConfigChannel+0x180>
 8004632:	2300      	movs	r3, #0
 8004634:	461a      	mov	r2, r3
 8004636:	f7ff fc7c 	bl	8003f32 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6919      	ldr	r1, [r3, #16]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	7e1b      	ldrb	r3, [r3, #24]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d102      	bne.n	8004650 <HAL_ADC_ConfigChannel+0x19c>
 800464a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800464e:	e000      	b.n	8004652 <HAL_ADC_ConfigChannel+0x19e>
 8004650:	2300      	movs	r3, #0
 8004652:	461a      	mov	r2, r3
 8004654:	f7ff fc54 	bl	8003f00 <LL_ADC_SetDataRightShift>
 8004658:	e047      	b.n	80046ea <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004660:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	069b      	lsls	r3, r3, #26
 800466a:	429a      	cmp	r2, r3
 800466c:	d107      	bne.n	800467e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800467c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004684:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	069b      	lsls	r3, r3, #26
 800468e:	429a      	cmp	r2, r3
 8004690:	d107      	bne.n	80046a2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046a0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	069b      	lsls	r3, r3, #26
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d107      	bne.n	80046c6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046c4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	069b      	lsls	r3, r3, #26
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d107      	bne.n	80046ea <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046e8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff fd04 	bl	80040fc <LL_ADC_IsEnabled>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f040 820d 	bne.w	8004b16 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6818      	ldr	r0, [r3, #0]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	6819      	ldr	r1, [r3, #0]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	461a      	mov	r2, r3
 800470a:	f7ff fc85 	bl	8004018 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	4a0c      	ldr	r2, [pc, #48]	; (8004744 <HAL_ADC_ConfigChannel+0x290>)
 8004714:	4293      	cmp	r3, r2
 8004716:	f040 8133 	bne.w	8004980 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004726:	2b00      	cmp	r3, #0
 8004728:	d110      	bne.n	800474c <HAL_ADC_ConfigChannel+0x298>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	0e9b      	lsrs	r3, r3, #26
 8004730:	3301      	adds	r3, #1
 8004732:	f003 031f 	and.w	r3, r3, #31
 8004736:	2b09      	cmp	r3, #9
 8004738:	bf94      	ite	ls
 800473a:	2301      	movls	r3, #1
 800473c:	2300      	movhi	r3, #0
 800473e:	b2db      	uxtb	r3, r3
 8004740:	e01e      	b.n	8004780 <HAL_ADC_ConfigChannel+0x2cc>
 8004742:	bf00      	nop
 8004744:	47ff0000 	.word	0x47ff0000
 8004748:	5c001000 	.word	0x5c001000
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004752:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004754:	fa93 f3a3 	rbit	r3, r3
 8004758:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800475a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800475c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800475e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004764:	2320      	movs	r3, #32
 8004766:	e003      	b.n	8004770 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800476a:	fab3 f383 	clz	r3, r3
 800476e:	b2db      	uxtb	r3, r3
 8004770:	3301      	adds	r3, #1
 8004772:	f003 031f 	and.w	r3, r3, #31
 8004776:	2b09      	cmp	r3, #9
 8004778:	bf94      	ite	ls
 800477a:	2301      	movls	r3, #1
 800477c:	2300      	movhi	r3, #0
 800477e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004780:	2b00      	cmp	r3, #0
 8004782:	d079      	beq.n	8004878 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800478c:	2b00      	cmp	r3, #0
 800478e:	d107      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x2ec>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	0e9b      	lsrs	r3, r3, #26
 8004796:	3301      	adds	r3, #1
 8004798:	069b      	lsls	r3, r3, #26
 800479a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800479e:	e015      	b.n	80047cc <HAL_ADC_ConfigChannel+0x318>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a8:	fa93 f3a3 	rbit	r3, r3
 80047ac:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80047ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80047b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80047b8:	2320      	movs	r3, #32
 80047ba:	e003      	b.n	80047c4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80047bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047be:	fab3 f383 	clz	r3, r3
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	3301      	adds	r3, #1
 80047c6:	069b      	lsls	r3, r3, #26
 80047c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d109      	bne.n	80047ec <HAL_ADC_ConfigChannel+0x338>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	0e9b      	lsrs	r3, r3, #26
 80047de:	3301      	adds	r3, #1
 80047e0:	f003 031f 	and.w	r3, r3, #31
 80047e4:	2101      	movs	r1, #1
 80047e6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ea:	e017      	b.n	800481c <HAL_ADC_ConfigChannel+0x368>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f4:	fa93 f3a3 	rbit	r3, r3
 80047f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80047fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80047fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004804:	2320      	movs	r3, #32
 8004806:	e003      	b.n	8004810 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800480a:	fab3 f383 	clz	r3, r3
 800480e:	b2db      	uxtb	r3, r3
 8004810:	3301      	adds	r3, #1
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	2101      	movs	r1, #1
 8004818:	fa01 f303 	lsl.w	r3, r1, r3
 800481c:	ea42 0103 	orr.w	r1, r2, r3
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10a      	bne.n	8004842 <HAL_ADC_ConfigChannel+0x38e>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	0e9b      	lsrs	r3, r3, #26
 8004832:	3301      	adds	r3, #1
 8004834:	f003 021f 	and.w	r2, r3, #31
 8004838:	4613      	mov	r3, r2
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	4413      	add	r3, r2
 800483e:	051b      	lsls	r3, r3, #20
 8004840:	e018      	b.n	8004874 <HAL_ADC_ConfigChannel+0x3c0>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484a:	fa93 f3a3 	rbit	r3, r3
 800484e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800485a:	2320      	movs	r3, #32
 800485c:	e003      	b.n	8004866 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004860:	fab3 f383 	clz	r3, r3
 8004864:	b2db      	uxtb	r3, r3
 8004866:	3301      	adds	r3, #1
 8004868:	f003 021f 	and.w	r2, r3, #31
 800486c:	4613      	mov	r3, r2
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	4413      	add	r3, r2
 8004872:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004874:	430b      	orrs	r3, r1
 8004876:	e07e      	b.n	8004976 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004880:	2b00      	cmp	r3, #0
 8004882:	d107      	bne.n	8004894 <HAL_ADC_ConfigChannel+0x3e0>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	0e9b      	lsrs	r3, r3, #26
 800488a:	3301      	adds	r3, #1
 800488c:	069b      	lsls	r3, r3, #26
 800488e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004892:	e015      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x40c>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489c:	fa93 f3a3 	rbit	r3, r3
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80048a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80048ac:	2320      	movs	r3, #32
 80048ae:	e003      	b.n	80048b8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80048b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b2:	fab3 f383 	clz	r3, r3
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	3301      	adds	r3, #1
 80048ba:	069b      	lsls	r3, r3, #26
 80048bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d109      	bne.n	80048e0 <HAL_ADC_ConfigChannel+0x42c>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	0e9b      	lsrs	r3, r3, #26
 80048d2:	3301      	adds	r3, #1
 80048d4:	f003 031f 	and.w	r3, r3, #31
 80048d8:	2101      	movs	r1, #1
 80048da:	fa01 f303 	lsl.w	r3, r1, r3
 80048de:	e017      	b.n	8004910 <HAL_ADC_ConfigChannel+0x45c>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	fa93 f3a3 	rbit	r3, r3
 80048ec:	61bb      	str	r3, [r7, #24]
  return result;
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80048f8:	2320      	movs	r3, #32
 80048fa:	e003      	b.n	8004904 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	fab3 f383 	clz	r3, r3
 8004902:	b2db      	uxtb	r3, r3
 8004904:	3301      	adds	r3, #1
 8004906:	f003 031f 	and.w	r3, r3, #31
 800490a:	2101      	movs	r1, #1
 800490c:	fa01 f303 	lsl.w	r3, r1, r3
 8004910:	ea42 0103 	orr.w	r1, r2, r3
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10d      	bne.n	800493c <HAL_ADC_ConfigChannel+0x488>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	0e9b      	lsrs	r3, r3, #26
 8004926:	3301      	adds	r3, #1
 8004928:	f003 021f 	and.w	r2, r3, #31
 800492c:	4613      	mov	r3, r2
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	4413      	add	r3, r2
 8004932:	3b1e      	subs	r3, #30
 8004934:	051b      	lsls	r3, r3, #20
 8004936:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800493a:	e01b      	b.n	8004974 <HAL_ADC_ConfigChannel+0x4c0>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	fa93 f3a3 	rbit	r3, r3
 8004948:	60fb      	str	r3, [r7, #12]
  return result;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004954:	2320      	movs	r3, #32
 8004956:	e003      	b.n	8004960 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	fab3 f383 	clz	r3, r3
 800495e:	b2db      	uxtb	r3, r3
 8004960:	3301      	adds	r3, #1
 8004962:	f003 021f 	and.w	r2, r3, #31
 8004966:	4613      	mov	r3, r2
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	4413      	add	r3, r2
 800496c:	3b1e      	subs	r3, #30
 800496e:	051b      	lsls	r3, r3, #20
 8004970:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004974:	430b      	orrs	r3, r1
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	6892      	ldr	r2, [r2, #8]
 800497a:	4619      	mov	r1, r3
 800497c:	f7ff fb20 	bl	8003fc0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	f280 80c6 	bge.w	8004b16 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a67      	ldr	r2, [pc, #412]	; (8004b2c <HAL_ADC_ConfigChannel+0x678>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d004      	beq.n	800499e <HAL_ADC_ConfigChannel+0x4ea>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a65      	ldr	r2, [pc, #404]	; (8004b30 <HAL_ADC_ConfigChannel+0x67c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d101      	bne.n	80049a2 <HAL_ADC_ConfigChannel+0x4ee>
 800499e:	4b65      	ldr	r3, [pc, #404]	; (8004b34 <HAL_ADC_ConfigChannel+0x680>)
 80049a0:	e000      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x4f0>
 80049a2:	4b65      	ldr	r3, [pc, #404]	; (8004b38 <HAL_ADC_ConfigChannel+0x684>)
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff fa7d 	bl	8003ea4 <LL_ADC_GetCommonPathInternalCh>
 80049aa:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a5e      	ldr	r2, [pc, #376]	; (8004b2c <HAL_ADC_ConfigChannel+0x678>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d004      	beq.n	80049c0 <HAL_ADC_ConfigChannel+0x50c>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a5d      	ldr	r2, [pc, #372]	; (8004b30 <HAL_ADC_ConfigChannel+0x67c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d10e      	bne.n	80049de <HAL_ADC_ConfigChannel+0x52a>
 80049c0:	485a      	ldr	r0, [pc, #360]	; (8004b2c <HAL_ADC_ConfigChannel+0x678>)
 80049c2:	f7ff fb9b 	bl	80040fc <LL_ADC_IsEnabled>
 80049c6:	4604      	mov	r4, r0
 80049c8:	4859      	ldr	r0, [pc, #356]	; (8004b30 <HAL_ADC_ConfigChannel+0x67c>)
 80049ca:	f7ff fb97 	bl	80040fc <LL_ADC_IsEnabled>
 80049ce:	4603      	mov	r3, r0
 80049d0:	4323      	orrs	r3, r4
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	bf0c      	ite	eq
 80049d6:	2301      	moveq	r3, #1
 80049d8:	2300      	movne	r3, #0
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	e008      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x53c>
 80049de:	4857      	ldr	r0, [pc, #348]	; (8004b3c <HAL_ADC_ConfigChannel+0x688>)
 80049e0:	f7ff fb8c 	bl	80040fc <LL_ADC_IsEnabled>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	bf0c      	ite	eq
 80049ea:	2301      	moveq	r3, #1
 80049ec:	2300      	movne	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d07d      	beq.n	8004af0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a51      	ldr	r2, [pc, #324]	; (8004b40 <HAL_ADC_ConfigChannel+0x68c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d130      	bne.n	8004a60 <HAL_ADC_ConfigChannel+0x5ac>
 80049fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d12b      	bne.n	8004a60 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a4b      	ldr	r2, [pc, #300]	; (8004b3c <HAL_ADC_ConfigChannel+0x688>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	f040 8081 	bne.w	8004b16 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a44      	ldr	r2, [pc, #272]	; (8004b2c <HAL_ADC_ConfigChannel+0x678>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d004      	beq.n	8004a28 <HAL_ADC_ConfigChannel+0x574>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a43      	ldr	r2, [pc, #268]	; (8004b30 <HAL_ADC_ConfigChannel+0x67c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d101      	bne.n	8004a2c <HAL_ADC_ConfigChannel+0x578>
 8004a28:	4a42      	ldr	r2, [pc, #264]	; (8004b34 <HAL_ADC_ConfigChannel+0x680>)
 8004a2a:	e000      	b.n	8004a2e <HAL_ADC_ConfigChannel+0x57a>
 8004a2c:	4a42      	ldr	r2, [pc, #264]	; (8004b38 <HAL_ADC_ConfigChannel+0x684>)
 8004a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a34:	4619      	mov	r1, r3
 8004a36:	4610      	mov	r0, r2
 8004a38:	f7ff fa21 	bl	8003e7e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a3c:	4b41      	ldr	r3, [pc, #260]	; (8004b44 <HAL_ADC_ConfigChannel+0x690>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	099b      	lsrs	r3, r3, #6
 8004a42:	4a41      	ldr	r2, [pc, #260]	; (8004b48 <HAL_ADC_ConfigChannel+0x694>)
 8004a44:	fba2 2303 	umull	r2, r3, r2, r3
 8004a48:	099b      	lsrs	r3, r3, #6
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004a50:	e002      	b.n	8004a58 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f9      	bne.n	8004a52 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a5e:	e05a      	b.n	8004b16 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a39      	ldr	r2, [pc, #228]	; (8004b4c <HAL_ADC_ConfigChannel+0x698>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d11e      	bne.n	8004aa8 <HAL_ADC_ConfigChannel+0x5f4>
 8004a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d119      	bne.n	8004aa8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a30      	ldr	r2, [pc, #192]	; (8004b3c <HAL_ADC_ConfigChannel+0x688>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d14b      	bne.n	8004b16 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a2a      	ldr	r2, [pc, #168]	; (8004b2c <HAL_ADC_ConfigChannel+0x678>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d004      	beq.n	8004a92 <HAL_ADC_ConfigChannel+0x5de>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a28      	ldr	r2, [pc, #160]	; (8004b30 <HAL_ADC_ConfigChannel+0x67c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d101      	bne.n	8004a96 <HAL_ADC_ConfigChannel+0x5e2>
 8004a92:	4a28      	ldr	r2, [pc, #160]	; (8004b34 <HAL_ADC_ConfigChannel+0x680>)
 8004a94:	e000      	b.n	8004a98 <HAL_ADC_ConfigChannel+0x5e4>
 8004a96:	4a28      	ldr	r2, [pc, #160]	; (8004b38 <HAL_ADC_ConfigChannel+0x684>)
 8004a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	f7ff f9ec 	bl	8003e7e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004aa6:	e036      	b.n	8004b16 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a28      	ldr	r2, [pc, #160]	; (8004b50 <HAL_ADC_ConfigChannel+0x69c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d131      	bne.n	8004b16 <HAL_ADC_ConfigChannel+0x662>
 8004ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d12c      	bne.n	8004b16 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a1e      	ldr	r2, [pc, #120]	; (8004b3c <HAL_ADC_ConfigChannel+0x688>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d127      	bne.n	8004b16 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a18      	ldr	r2, [pc, #96]	; (8004b2c <HAL_ADC_ConfigChannel+0x678>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d004      	beq.n	8004ada <HAL_ADC_ConfigChannel+0x626>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a16      	ldr	r2, [pc, #88]	; (8004b30 <HAL_ADC_ConfigChannel+0x67c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d101      	bne.n	8004ade <HAL_ADC_ConfigChannel+0x62a>
 8004ada:	4a16      	ldr	r2, [pc, #88]	; (8004b34 <HAL_ADC_ConfigChannel+0x680>)
 8004adc:	e000      	b.n	8004ae0 <HAL_ADC_ConfigChannel+0x62c>
 8004ade:	4a16      	ldr	r2, [pc, #88]	; (8004b38 <HAL_ADC_ConfigChannel+0x684>)
 8004ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4610      	mov	r0, r2
 8004aea:	f7ff f9c8 	bl	8003e7e <LL_ADC_SetCommonPathInternalCh>
 8004aee:	e012      	b.n	8004b16 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af4:	f043 0220 	orr.w	r2, r3, #32
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004b02:	e008      	b.n	8004b16 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b08:	f043 0220 	orr.w	r2, r3, #32
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004b1e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3784      	adds	r7, #132	; 0x84
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd90      	pop	{r4, r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40022000 	.word	0x40022000
 8004b30:	40022100 	.word	0x40022100
 8004b34:	40022300 	.word	0x40022300
 8004b38:	58026300 	.word	0x58026300
 8004b3c:	58026000 	.word	0x58026000
 8004b40:	cb840000 	.word	0xcb840000
 8004b44:	24000000 	.word	0x24000000
 8004b48:	053e2d63 	.word	0x053e2d63
 8004b4c:	c7520000 	.word	0xc7520000
 8004b50:	cfb80000 	.word	0xcfb80000

08004b54 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a7a      	ldr	r2, [pc, #488]	; (8004d4c <ADC_ConfigureBoostMode+0x1f8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d004      	beq.n	8004b70 <ADC_ConfigureBoostMode+0x1c>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a79      	ldr	r2, [pc, #484]	; (8004d50 <ADC_ConfigureBoostMode+0x1fc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d109      	bne.n	8004b84 <ADC_ConfigureBoostMode+0x30>
 8004b70:	4b78      	ldr	r3, [pc, #480]	; (8004d54 <ADC_ConfigureBoostMode+0x200>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bf14      	ite	ne
 8004b7c:	2301      	movne	r3, #1
 8004b7e:	2300      	moveq	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	e008      	b.n	8004b96 <ADC_ConfigureBoostMode+0x42>
 8004b84:	4b74      	ldr	r3, [pc, #464]	; (8004d58 <ADC_ConfigureBoostMode+0x204>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	bf14      	ite	ne
 8004b90:	2301      	movne	r3, #1
 8004b92:	2300      	moveq	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d01c      	beq.n	8004bd4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004b9a:	f003 ff63 	bl	8008a64 <HAL_RCC_GetHCLKFreq>
 8004b9e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ba8:	d010      	beq.n	8004bcc <ADC_ConfigureBoostMode+0x78>
 8004baa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bae:	d873      	bhi.n	8004c98 <ADC_ConfigureBoostMode+0x144>
 8004bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb4:	d002      	beq.n	8004bbc <ADC_ConfigureBoostMode+0x68>
 8004bb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bba:	d16d      	bne.n	8004c98 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	0c1b      	lsrs	r3, r3, #16
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc8:	60fb      	str	r3, [r7, #12]
        break;
 8004bca:	e068      	b.n	8004c9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	089b      	lsrs	r3, r3, #2
 8004bd0:	60fb      	str	r3, [r7, #12]
        break;
 8004bd2:	e064      	b.n	8004c9e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004bd4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004bd8:	f04f 0100 	mov.w	r1, #0
 8004bdc:	f005 f9a8 	bl	8009f30 <HAL_RCCEx_GetPeriphCLKFreq>
 8004be0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004bea:	d051      	beq.n	8004c90 <ADC_ConfigureBoostMode+0x13c>
 8004bec:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004bf0:	d854      	bhi.n	8004c9c <ADC_ConfigureBoostMode+0x148>
 8004bf2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004bf6:	d047      	beq.n	8004c88 <ADC_ConfigureBoostMode+0x134>
 8004bf8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004bfc:	d84e      	bhi.n	8004c9c <ADC_ConfigureBoostMode+0x148>
 8004bfe:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004c02:	d03d      	beq.n	8004c80 <ADC_ConfigureBoostMode+0x12c>
 8004c04:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004c08:	d848      	bhi.n	8004c9c <ADC_ConfigureBoostMode+0x148>
 8004c0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c0e:	d033      	beq.n	8004c78 <ADC_ConfigureBoostMode+0x124>
 8004c10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c14:	d842      	bhi.n	8004c9c <ADC_ConfigureBoostMode+0x148>
 8004c16:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004c1a:	d029      	beq.n	8004c70 <ADC_ConfigureBoostMode+0x11c>
 8004c1c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004c20:	d83c      	bhi.n	8004c9c <ADC_ConfigureBoostMode+0x148>
 8004c22:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004c26:	d01a      	beq.n	8004c5e <ADC_ConfigureBoostMode+0x10a>
 8004c28:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004c2c:	d836      	bhi.n	8004c9c <ADC_ConfigureBoostMode+0x148>
 8004c2e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004c32:	d014      	beq.n	8004c5e <ADC_ConfigureBoostMode+0x10a>
 8004c34:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004c38:	d830      	bhi.n	8004c9c <ADC_ConfigureBoostMode+0x148>
 8004c3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c3e:	d00e      	beq.n	8004c5e <ADC_ConfigureBoostMode+0x10a>
 8004c40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c44:	d82a      	bhi.n	8004c9c <ADC_ConfigureBoostMode+0x148>
 8004c46:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c4a:	d008      	beq.n	8004c5e <ADC_ConfigureBoostMode+0x10a>
 8004c4c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c50:	d824      	bhi.n	8004c9c <ADC_ConfigureBoostMode+0x148>
 8004c52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c56:	d002      	beq.n	8004c5e <ADC_ConfigureBoostMode+0x10a>
 8004c58:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c5c:	d11e      	bne.n	8004c9c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	0c9b      	lsrs	r3, r3, #18
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6c:	60fb      	str	r3, [r7, #12]
        break;
 8004c6e:	e016      	b.n	8004c9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	091b      	lsrs	r3, r3, #4
 8004c74:	60fb      	str	r3, [r7, #12]
        break;
 8004c76:	e012      	b.n	8004c9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	095b      	lsrs	r3, r3, #5
 8004c7c:	60fb      	str	r3, [r7, #12]
        break;
 8004c7e:	e00e      	b.n	8004c9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	099b      	lsrs	r3, r3, #6
 8004c84:	60fb      	str	r3, [r7, #12]
        break;
 8004c86:	e00a      	b.n	8004c9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	09db      	lsrs	r3, r3, #7
 8004c8c:	60fb      	str	r3, [r7, #12]
        break;
 8004c8e:	e006      	b.n	8004c9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	0a1b      	lsrs	r3, r3, #8
 8004c94:	60fb      	str	r3, [r7, #12]
        break;
 8004c96:	e002      	b.n	8004c9e <ADC_ConfigureBoostMode+0x14a>
        break;
 8004c98:	bf00      	nop
 8004c9a:	e000      	b.n	8004c9e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004c9c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004c9e:	f7ff f8a5 	bl	8003dec <HAL_GetREVID>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d815      	bhi.n	8004cd8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4a2b      	ldr	r2, [pc, #172]	; (8004d5c <ADC_ConfigureBoostMode+0x208>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d908      	bls.n	8004cc6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689a      	ldr	r2, [r3, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cc2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004cc4:	e03e      	b.n	8004d44 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cd4:	609a      	str	r2, [r3, #8]
}
 8004cd6:	e035      	b.n	8004d44 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	085b      	lsrs	r3, r3, #1
 8004cdc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	4a1f      	ldr	r2, [pc, #124]	; (8004d60 <ADC_ConfigureBoostMode+0x20c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d808      	bhi.n	8004cf8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004cf4:	609a      	str	r2, [r3, #8]
}
 8004cf6:	e025      	b.n	8004d44 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4a1a      	ldr	r2, [pc, #104]	; (8004d64 <ADC_ConfigureBoostMode+0x210>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d80a      	bhi.n	8004d16 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d12:	609a      	str	r2, [r3, #8]
}
 8004d14:	e016      	b.n	8004d44 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	4a13      	ldr	r2, [pc, #76]	; (8004d68 <ADC_ConfigureBoostMode+0x214>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d80a      	bhi.n	8004d34 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d30:	609a      	str	r2, [r3, #8]
}
 8004d32:	e007      	b.n	8004d44 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004d42:	609a      	str	r2, [r3, #8]
}
 8004d44:	bf00      	nop
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40022000 	.word	0x40022000
 8004d50:	40022100 	.word	0x40022100
 8004d54:	40022300 	.word	0x40022300
 8004d58:	58026300 	.word	0x58026300
 8004d5c:	01312d00 	.word	0x01312d00
 8004d60:	005f5e10 	.word	0x005f5e10
 8004d64:	00bebc20 	.word	0x00bebc20
 8004d68:	017d7840 	.word	0x017d7840

08004d6c <LL_ADC_IsEnabled>:
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <LL_ADC_IsEnabled+0x18>
 8004d80:	2301      	movs	r3, #1
 8004d82:	e000      	b.n	8004d86 <LL_ADC_IsEnabled+0x1a>
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <LL_ADC_REG_IsConversionOngoing>:
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d101      	bne.n	8004daa <LL_ADC_REG_IsConversionOngoing+0x18>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004db8:	b590      	push	{r4, r7, lr}
 8004dba:	b09f      	sub	sp, #124	; 0x7c
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d101      	bne.n	8004dd6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	e0be      	b.n	8004f54 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004dde:	2300      	movs	r3, #0
 8004de0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004de2:	2300      	movs	r3, #0
 8004de4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a5c      	ldr	r2, [pc, #368]	; (8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d102      	bne.n	8004df6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004df0:	4b5b      	ldr	r3, [pc, #364]	; (8004f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004df2:	60bb      	str	r3, [r7, #8]
 8004df4:	e001      	b.n	8004dfa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004df6:	2300      	movs	r3, #0
 8004df8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10b      	bne.n	8004e18 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e04:	f043 0220 	orr.w	r2, r3, #32
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e09d      	b.n	8004f54 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff ffb9 	bl	8004d92 <LL_ADC_REG_IsConversionOngoing>
 8004e20:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff ffb3 	bl	8004d92 <LL_ADC_REG_IsConversionOngoing>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d17f      	bne.n	8004f32 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004e32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d17c      	bne.n	8004f32 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a47      	ldr	r2, [pc, #284]	; (8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d004      	beq.n	8004e4c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a46      	ldr	r2, [pc, #280]	; (8004f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d101      	bne.n	8004e50 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004e4c:	4b45      	ldr	r3, [pc, #276]	; (8004f64 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e4e:	e000      	b.n	8004e52 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004e50:	4b45      	ldr	r3, [pc, #276]	; (8004f68 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e52:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d039      	beq.n	8004ed0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e6c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a3a      	ldr	r2, [pc, #232]	; (8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d004      	beq.n	8004e82 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a38      	ldr	r2, [pc, #224]	; (8004f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d10e      	bne.n	8004ea0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004e82:	4836      	ldr	r0, [pc, #216]	; (8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e84:	f7ff ff72 	bl	8004d6c <LL_ADC_IsEnabled>
 8004e88:	4604      	mov	r4, r0
 8004e8a:	4835      	ldr	r0, [pc, #212]	; (8004f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e8c:	f7ff ff6e 	bl	8004d6c <LL_ADC_IsEnabled>
 8004e90:	4603      	mov	r3, r0
 8004e92:	4323      	orrs	r3, r4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	bf0c      	ite	eq
 8004e98:	2301      	moveq	r3, #1
 8004e9a:	2300      	movne	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	e008      	b.n	8004eb2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004ea0:	4832      	ldr	r0, [pc, #200]	; (8004f6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004ea2:	f7ff ff63 	bl	8004d6c <LL_ADC_IsEnabled>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bf0c      	ite	eq
 8004eac:	2301      	moveq	r3, #1
 8004eae:	2300      	movne	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d047      	beq.n	8004f46 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	4b2d      	ldr	r3, [pc, #180]	; (8004f70 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	6811      	ldr	r1, [r2, #0]
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	6892      	ldr	r2, [r2, #8]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ecc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ece:	e03a      	b.n	8004f46 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eda:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a1e      	ldr	r2, [pc, #120]	; (8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d004      	beq.n	8004ef0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a1d      	ldr	r2, [pc, #116]	; (8004f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d10e      	bne.n	8004f0e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004ef0:	481a      	ldr	r0, [pc, #104]	; (8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004ef2:	f7ff ff3b 	bl	8004d6c <LL_ADC_IsEnabled>
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	4819      	ldr	r0, [pc, #100]	; (8004f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004efa:	f7ff ff37 	bl	8004d6c <LL_ADC_IsEnabled>
 8004efe:	4603      	mov	r3, r0
 8004f00:	4323      	orrs	r3, r4
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	bf0c      	ite	eq
 8004f06:	2301      	moveq	r3, #1
 8004f08:	2300      	movne	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	e008      	b.n	8004f20 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004f0e:	4817      	ldr	r0, [pc, #92]	; (8004f6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004f10:	f7ff ff2c 	bl	8004d6c <LL_ADC_IsEnabled>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	bf0c      	ite	eq
 8004f1a:	2301      	moveq	r3, #1
 8004f1c:	2300      	movne	r3, #0
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d010      	beq.n	8004f46 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	4b11      	ldr	r3, [pc, #68]	; (8004f70 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f2e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f30:	e009      	b.n	8004f46 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f36:	f043 0220 	orr.w	r2, r3, #32
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004f44:	e000      	b.n	8004f48 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f46:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004f50:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	377c      	adds	r7, #124	; 0x7c
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd90      	pop	{r4, r7, pc}
 8004f5c:	40022000 	.word	0x40022000
 8004f60:	40022100 	.word	0x40022100
 8004f64:	40022300 	.word	0x40022300
 8004f68:	58026300 	.word	0x58026300
 8004f6c:	58026000 	.word	0x58026000
 8004f70:	fffff0e0 	.word	0xfffff0e0

08004f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f84:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <__NVIC_SetPriorityGrouping+0x40>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f90:	4013      	ands	r3, r2
 8004f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004f9c:	4b06      	ldr	r3, [pc, #24]	; (8004fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fa2:	4a04      	ldr	r2, [pc, #16]	; (8004fb4 <__NVIC_SetPriorityGrouping+0x40>)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	60d3      	str	r3, [r2, #12]
}
 8004fa8:	bf00      	nop
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	e000ed00 	.word	0xe000ed00
 8004fb8:	05fa0000 	.word	0x05fa0000

08004fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fc0:	4b04      	ldr	r3, [pc, #16]	; (8004fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	0a1b      	lsrs	r3, r3, #8
 8004fc6:	f003 0307 	and.w	r3, r3, #7
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	e000ed00 	.word	0xe000ed00

08004fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	6039      	str	r1, [r7, #0]
 8004fe2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004fe4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	db0a      	blt.n	8005002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	490c      	ldr	r1, [pc, #48]	; (8005024 <__NVIC_SetPriority+0x4c>)
 8004ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ff6:	0112      	lsls	r2, r2, #4
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005000:	e00a      	b.n	8005018 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	b2da      	uxtb	r2, r3
 8005006:	4908      	ldr	r1, [pc, #32]	; (8005028 <__NVIC_SetPriority+0x50>)
 8005008:	88fb      	ldrh	r3, [r7, #6]
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	3b04      	subs	r3, #4
 8005010:	0112      	lsls	r2, r2, #4
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	440b      	add	r3, r1
 8005016:	761a      	strb	r2, [r3, #24]
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	e000e100 	.word	0xe000e100
 8005028:	e000ed00 	.word	0xe000ed00

0800502c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800502c:	b480      	push	{r7}
 800502e:	b089      	sub	sp, #36	; 0x24
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f1c3 0307 	rsb	r3, r3, #7
 8005046:	2b04      	cmp	r3, #4
 8005048:	bf28      	it	cs
 800504a:	2304      	movcs	r3, #4
 800504c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	3304      	adds	r3, #4
 8005052:	2b06      	cmp	r3, #6
 8005054:	d902      	bls.n	800505c <NVIC_EncodePriority+0x30>
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	3b03      	subs	r3, #3
 800505a:	e000      	b.n	800505e <NVIC_EncodePriority+0x32>
 800505c:	2300      	movs	r3, #0
 800505e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005060:	f04f 32ff 	mov.w	r2, #4294967295
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	fa02 f303 	lsl.w	r3, r2, r3
 800506a:	43da      	mvns	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	401a      	ands	r2, r3
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005074:	f04f 31ff 	mov.w	r1, #4294967295
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	fa01 f303 	lsl.w	r3, r1, r3
 800507e:	43d9      	mvns	r1, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005084:	4313      	orrs	r3, r2
         );
}
 8005086:	4618      	mov	r0, r3
 8005088:	3724      	adds	r7, #36	; 0x24
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
	...

08005094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3b01      	subs	r3, #1
 80050a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050a4:	d301      	bcc.n	80050aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050a6:	2301      	movs	r3, #1
 80050a8:	e00f      	b.n	80050ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050aa:	4a0a      	ldr	r2, [pc, #40]	; (80050d4 <SysTick_Config+0x40>)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050b2:	210f      	movs	r1, #15
 80050b4:	f04f 30ff 	mov.w	r0, #4294967295
 80050b8:	f7ff ff8e 	bl	8004fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050bc:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <SysTick_Config+0x40>)
 80050be:	2200      	movs	r2, #0
 80050c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050c2:	4b04      	ldr	r3, [pc, #16]	; (80050d4 <SysTick_Config+0x40>)
 80050c4:	2207      	movs	r2, #7
 80050c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	e000e010 	.word	0xe000e010

080050d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7ff ff47 	bl	8004f74 <__NVIC_SetPriorityGrouping>
}
 80050e6:	bf00      	nop
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b086      	sub	sp, #24
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	4603      	mov	r3, r0
 80050f6:	60b9      	str	r1, [r7, #8]
 80050f8:	607a      	str	r2, [r7, #4]
 80050fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80050fc:	f7ff ff5e 	bl	8004fbc <__NVIC_GetPriorityGrouping>
 8005100:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	6978      	ldr	r0, [r7, #20]
 8005108:	f7ff ff90 	bl	800502c <NVIC_EncodePriority>
 800510c:	4602      	mov	r2, r0
 800510e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005112:	4611      	mov	r1, r2
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff ff5f 	bl	8004fd8 <__NVIC_SetPriority>
}
 800511a:	bf00      	nop
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b082      	sub	sp, #8
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff ffb2 	bl	8005094 <SysTick_Config>
 8005130:	4603      	mov	r3, r0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e0cf      	b.n	80052ee <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005154:	2b00      	cmp	r3, #0
 8005156:	d106      	bne.n	8005166 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2223      	movs	r2, #35	; 0x23
 800515c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7fd fd0b 	bl	8002b7c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005166:	4b64      	ldr	r3, [pc, #400]	; (80052f8 <HAL_ETH_Init+0x1bc>)
 8005168:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800516c:	4a62      	ldr	r2, [pc, #392]	; (80052f8 <HAL_ETH_Init+0x1bc>)
 800516e:	f043 0302 	orr.w	r3, r3, #2
 8005172:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005176:	4b60      	ldr	r3, [pc, #384]	; (80052f8 <HAL_ETH_Init+0x1bc>)
 8005178:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	60bb      	str	r3, [r7, #8]
 8005182:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	7a1b      	ldrb	r3, [r3, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d103      	bne.n	8005194 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800518c:	2000      	movs	r0, #0
 800518e:	f7fe fe39 	bl	8003e04 <HAL_SYSCFG_ETHInterfaceSelect>
 8005192:	e003      	b.n	800519c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005194:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005198:	f7fe fe34 	bl	8003e04 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800519c:	4b57      	ldr	r3, [pc, #348]	; (80052fc <HAL_ETH_Init+0x1c0>)
 800519e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	f043 0301 	orr.w	r3, r3, #1
 80051b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051b8:	f7fe fde8 	bl	8003d8c <HAL_GetTick>
 80051bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80051be:	e011      	b.n	80051e4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80051c0:	f7fe fde4 	bl	8003d8c <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80051ce:	d909      	bls.n	80051e4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2204      	movs	r2, #4
 80051d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	22e0      	movs	r2, #224	; 0xe0
 80051dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e084      	b.n	80052ee <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1e4      	bne.n	80051c0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f886 	bl	8005308 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80051fc:	f003 fc32 	bl	8008a64 <HAL_RCC_GetHCLKFreq>
 8005200:	4603      	mov	r3, r0
 8005202:	4a3f      	ldr	r2, [pc, #252]	; (8005300 <HAL_ETH_Init+0x1c4>)
 8005204:	fba2 2303 	umull	r2, r3, r2, r3
 8005208:	0c9a      	lsrs	r2, r3, #18
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3a01      	subs	r2, #1
 8005210:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fa71 	bl	80056fc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005222:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005226:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6812      	ldr	r2, [r2, #0]
 800522e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005232:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005236:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d009      	beq.n	800525a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	22e0      	movs	r2, #224	; 0xe0
 8005252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e049      	b.n	80052ee <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005262:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005266:	4b27      	ldr	r3, [pc, #156]	; (8005304 <HAL_ETH_Init+0x1c8>)
 8005268:	4013      	ands	r3, r2
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	6952      	ldr	r2, [r2, #20]
 800526e:	0051      	lsls	r1, r2, #1
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	430b      	orrs	r3, r1
 8005276:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800527a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fad9 	bl	8005836 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fb1f 	bl	80058c8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	3305      	adds	r3, #5
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	021a      	lsls	r2, r3, #8
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	3304      	adds	r3, #4
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	4619      	mov	r1, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	3303      	adds	r3, #3
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	061a      	lsls	r2, r3, #24
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	3302      	adds	r3, #2
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	041b      	lsls	r3, r3, #16
 80052bc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	3301      	adds	r3, #1
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80052d6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2210      	movs	r2, #16
 80052e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	58024400 	.word	0x58024400
 80052fc:	58000400 	.word	0x58000400
 8005300:	431bde83 	.word	0x431bde83
 8005304:	ffff8001 	.word	0xffff8001

08005308 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005318:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005320:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005322:	f003 fb9f 	bl	8008a64 <HAL_RCC_GetHCLKFreq>
 8005326:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4a1e      	ldr	r2, [pc, #120]	; (80053a4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d908      	bls.n	8005342 <HAL_ETH_SetMDIOClockRange+0x3a>
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4a1d      	ldr	r2, [pc, #116]	; (80053a8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d804      	bhi.n	8005342 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	e027      	b.n	8005392 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	4a18      	ldr	r2, [pc, #96]	; (80053a8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d908      	bls.n	800535c <HAL_ETH_SetMDIOClockRange+0x54>
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	4a17      	ldr	r2, [pc, #92]	; (80053ac <HAL_ETH_SetMDIOClockRange+0xa4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d204      	bcs.n	800535c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	e01a      	b.n	8005392 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4a13      	ldr	r2, [pc, #76]	; (80053ac <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d303      	bcc.n	800536c <HAL_ETH_SetMDIOClockRange+0x64>
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4a12      	ldr	r2, [pc, #72]	; (80053b0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d911      	bls.n	8005390 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4a10      	ldr	r2, [pc, #64]	; (80053b0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d908      	bls.n	8005386 <HAL_ETH_SetMDIOClockRange+0x7e>
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4a0f      	ldr	r2, [pc, #60]	; (80053b4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d804      	bhi.n	8005386 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005382:	60fb      	str	r3, [r7, #12]
 8005384:	e005      	b.n	8005392 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	e000      	b.n	8005392 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005390:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800539c:	bf00      	nop
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	01312cff 	.word	0x01312cff
 80053a8:	02160ebf 	.word	0x02160ebf
 80053ac:	03938700 	.word	0x03938700
 80053b0:	05f5e0ff 	.word	0x05f5e0ff
 80053b4:	08f0d17f 	.word	0x08f0d17f

080053b8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80053ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	791b      	ldrb	r3, [r3, #4]
 80053d0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80053d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	7b1b      	ldrb	r3, [r3, #12]
 80053d8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80053da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	7b5b      	ldrb	r3, [r3, #13]
 80053e0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80053e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	7b9b      	ldrb	r3, [r3, #14]
 80053e8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80053ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	7bdb      	ldrb	r3, [r3, #15]
 80053f0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80053f2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	7c12      	ldrb	r2, [r2, #16]
 80053f8:	2a00      	cmp	r2, #0
 80053fa:	d102      	bne.n	8005402 <ETH_SetMACConfig+0x4a>
 80053fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005400:	e000      	b.n	8005404 <ETH_SetMACConfig+0x4c>
 8005402:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005404:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	7c52      	ldrb	r2, [r2, #17]
 800540a:	2a00      	cmp	r2, #0
 800540c:	d102      	bne.n	8005414 <ETH_SetMACConfig+0x5c>
 800540e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005412:	e000      	b.n	8005416 <ETH_SetMACConfig+0x5e>
 8005414:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005416:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	7c9b      	ldrb	r3, [r3, #18]
 800541c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800541e:	431a      	orrs	r2, r3
               macconf->Speed |
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005424:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800542a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	7f1b      	ldrb	r3, [r3, #28]
 8005430:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005432:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	7f5b      	ldrb	r3, [r3, #29]
 8005438:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800543a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	7f92      	ldrb	r2, [r2, #30]
 8005440:	2a00      	cmp	r2, #0
 8005442:	d102      	bne.n	800544a <ETH_SetMACConfig+0x92>
 8005444:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005448:	e000      	b.n	800544c <ETH_SetMACConfig+0x94>
 800544a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800544c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	7fdb      	ldrb	r3, [r3, #31]
 8005452:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005454:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	f892 2020 	ldrb.w	r2, [r2, #32]
 800545c:	2a00      	cmp	r2, #0
 800545e:	d102      	bne.n	8005466 <ETH_SetMACConfig+0xae>
 8005460:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005464:	e000      	b.n	8005468 <ETH_SetMACConfig+0xb0>
 8005466:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005468:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800546e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005476:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005478:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	4b56      	ldr	r3, [pc, #344]	; (80055e4 <ETH_SetMACConfig+0x22c>)
 800548a:	4013      	ands	r3, r2
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6812      	ldr	r2, [r2, #0]
 8005490:	68f9      	ldr	r1, [r7, #12]
 8005492:	430b      	orrs	r3, r1
 8005494:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054a2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80054a4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054ac:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80054ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80054b6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80054b8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80054c0:	2a00      	cmp	r2, #0
 80054c2:	d102      	bne.n	80054ca <ETH_SetMACConfig+0x112>
 80054c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80054c8:	e000      	b.n	80054cc <ETH_SetMACConfig+0x114>
 80054ca:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80054cc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	4b42      	ldr	r3, [pc, #264]	; (80055e8 <ETH_SetMACConfig+0x230>)
 80054de:	4013      	ands	r3, r2
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6812      	ldr	r2, [r2, #0]
 80054e4:	68f9      	ldr	r1, [r7, #12]
 80054e6:	430b      	orrs	r3, r1
 80054e8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054f0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	4b3a      	ldr	r3, [pc, #232]	; (80055ec <ETH_SetMACConfig+0x234>)
 8005502:	4013      	ands	r3, r2
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6812      	ldr	r2, [r2, #0]
 8005508:	68f9      	ldr	r1, [r7, #12]
 800550a:	430b      	orrs	r3, r1
 800550c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005514:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800551a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005522:	2a00      	cmp	r2, #0
 8005524:	d101      	bne.n	800552a <ETH_SetMACConfig+0x172>
 8005526:	2280      	movs	r2, #128	; 0x80
 8005528:	e000      	b.n	800552c <ETH_SetMACConfig+0x174>
 800552a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800552c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005532:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800553e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005542:	4013      	ands	r3, r2
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6812      	ldr	r2, [r2, #0]
 8005548:	68f9      	ldr	r1, [r7, #12]
 800554a:	430b      	orrs	r3, r1
 800554c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005554:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800555c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800556a:	f023 0103 	bic.w	r1, r3, #3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	430a      	orrs	r2, r1
 8005576:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005582:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	430a      	orrs	r2, r1
 8005590:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800559e:	2a00      	cmp	r2, #0
 80055a0:	d101      	bne.n	80055a6 <ETH_SetMACConfig+0x1ee>
 80055a2:	2240      	movs	r2, #64	; 0x40
 80055a4:	e000      	b.n	80055a8 <ETH_SetMACConfig+0x1f0>
 80055a6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80055a8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80055b0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80055b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80055ba:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80055bc:	4313      	orrs	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80055c8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80055d8:	bf00      	nop
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	00048083 	.word	0x00048083
 80055e8:	c0f88000 	.word	0xc0f88000
 80055ec:	fffffef0 	.word	0xfffffef0

080055f0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	4b38      	ldr	r3, [pc, #224]	; (80056e8 <ETH_SetDMAConfig+0xf8>)
 8005606:	4013      	ands	r3, r2
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	6811      	ldr	r1, [r2, #0]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6812      	ldr	r2, [r2, #0]
 8005610:	430b      	orrs	r3, r1
 8005612:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005616:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	791b      	ldrb	r3, [r3, #4]
 800561c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005622:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	7b1b      	ldrb	r3, [r3, #12]
 8005628:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	4b2c      	ldr	r3, [pc, #176]	; (80056ec <ETH_SetDMAConfig+0xfc>)
 800563a:	4013      	ands	r3, r2
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6812      	ldr	r2, [r2, #0]
 8005640:	68f9      	ldr	r1, [r7, #12]
 8005642:	430b      	orrs	r3, r1
 8005644:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005648:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	7b5b      	ldrb	r3, [r3, #13]
 800564e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005660:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005664:	4b22      	ldr	r3, [pc, #136]	; (80056f0 <ETH_SetDMAConfig+0x100>)
 8005666:	4013      	ands	r3, r2
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6812      	ldr	r2, [r2, #0]
 800566c:	68f9      	ldr	r1, [r7, #12]
 800566e:	430b      	orrs	r3, r1
 8005670:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005674:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	7d1b      	ldrb	r3, [r3, #20]
 8005680:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005682:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	7f5b      	ldrb	r3, [r3, #29]
 8005688:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005696:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800569a:	4b16      	ldr	r3, [pc, #88]	; (80056f4 <ETH_SetDMAConfig+0x104>)
 800569c:	4013      	ands	r3, r2
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	6812      	ldr	r2, [r2, #0]
 80056a2:	68f9      	ldr	r1, [r7, #12]
 80056a4:	430b      	orrs	r3, r1
 80056a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056aa:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	7f1b      	ldrb	r3, [r3, #28]
 80056b2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80056c8:	4b0b      	ldr	r3, [pc, #44]	; (80056f8 <ETH_SetDMAConfig+0x108>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	68f9      	ldr	r1, [r7, #12]
 80056d2:	430b      	orrs	r3, r1
 80056d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056d8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80056dc:	bf00      	nop
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	ffff87fd 	.word	0xffff87fd
 80056ec:	ffff2ffe 	.word	0xffff2ffe
 80056f0:	fffec000 	.word	0xfffec000
 80056f4:	ffc0efef 	.word	0xffc0efef
 80056f8:	7fc0ffff 	.word	0x7fc0ffff

080056fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b0a4      	sub	sp, #144	; 0x90
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005704:	2301      	movs	r3, #1
 8005706:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800570a:	2300      	movs	r3, #0
 800570c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800570e:	2300      	movs	r3, #0
 8005710:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005714:	2300      	movs	r3, #0
 8005716:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800571a:	2301      	movs	r3, #1
 800571c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005720:	2301      	movs	r3, #1
 8005722:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005726:	2301      	movs	r3, #1
 8005728:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800572c:	2300      	movs	r3, #0
 800572e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005732:	2301      	movs	r3, #1
 8005734:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800573c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800573e:	2300      	movs	r3, #0
 8005740:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005744:	2300      	movs	r3, #0
 8005746:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005748:	2300      	movs	r3, #0
 800574a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800574e:	2300      	movs	r3, #0
 8005750:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005754:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005758:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800575a:	2300      	movs	r3, #0
 800575c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005760:	2300      	movs	r3, #0
 8005762:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005764:	2301      	movs	r3, #1
 8005766:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800576a:	2300      	movs	r3, #0
 800576c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005770:	2300      	movs	r3, #0
 8005772:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005776:	2300      	movs	r3, #0
 8005778:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800577a:	2300      	movs	r3, #0
 800577c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800577e:	2300      	movs	r3, #0
 8005780:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005782:	2300      	movs	r3, #0
 8005784:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005788:	2300      	movs	r3, #0
 800578a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800578e:	2301      	movs	r3, #1
 8005790:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005794:	2320      	movs	r3, #32
 8005796:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800579a:	2301      	movs	r3, #1
 800579c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80057a0:	2300      	movs	r3, #0
 80057a2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80057a6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80057aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80057ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057b0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80057b2:	2300      	movs	r3, #0
 80057b4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80057b8:	2302      	movs	r3, #2
 80057ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80057be:	2300      	movs	r3, #0
 80057c0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80057c4:	2300      	movs	r3, #0
 80057c6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80057ca:	2300      	movs	r3, #0
 80057cc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80057d0:	2301      	movs	r3, #1
 80057d2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80057d6:	2300      	movs	r3, #0
 80057d8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80057da:	2301      	movs	r3, #1
 80057dc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80057e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057e4:	4619      	mov	r1, r3
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff fde6 	bl	80053b8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80057ec:	2301      	movs	r3, #1
 80057ee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80057f0:	2301      	movs	r3, #1
 80057f2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80057f4:	2300      	movs	r3, #0
 80057f6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80057f8:	2300      	movs	r3, #0
 80057fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80057fe:	2300      	movs	r3, #0
 8005800:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005802:	2300      	movs	r3, #0
 8005804:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005806:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800580a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800580c:	2300      	movs	r3, #0
 800580e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005810:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005814:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005816:	2300      	movs	r3, #0
 8005818:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800581c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005820:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005822:	f107 0308 	add.w	r3, r7, #8
 8005826:	4619      	mov	r1, r3
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff fee1 	bl	80055f0 <ETH_SetDMAConfig>
}
 800582e:	bf00      	nop
 8005830:	3790      	adds	r7, #144	; 0x90
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005836:	b480      	push	{r7}
 8005838:	b085      	sub	sp, #20
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800583e:	2300      	movs	r3, #0
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	e01d      	b.n	8005880 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68d9      	ldr	r1, [r3, #12]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4613      	mov	r3, r2
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	4413      	add	r3, r2
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	440b      	add	r3, r1
 8005854:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2200      	movs	r2, #0
 8005860:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2200      	movs	r2, #0
 8005866:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2200      	movs	r2, #0
 800586c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800586e:	68b9      	ldr	r1, [r7, #8]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	3206      	adds	r2, #6
 8005876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	3301      	adds	r3, #1
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2b03      	cmp	r3, #3
 8005884:	d9de      	bls.n	8005844 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005894:	461a      	mov	r2, r3
 8005896:	2303      	movs	r3, #3
 8005898:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68da      	ldr	r2, [r3, #12]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80058bc:	bf00      	nop
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	e023      	b.n	800591e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6919      	ldr	r1, [r3, #16]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4613      	mov	r3, r2
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	4413      	add	r3, r2
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	440b      	add	r3, r1
 80058e6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2200      	movs	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2200      	movs	r2, #0
 80058f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2200      	movs	r2, #0
 80058f8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2200      	movs	r2, #0
 80058fe:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2200      	movs	r2, #0
 8005904:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2200      	movs	r2, #0
 800590a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800590c:	68b9      	ldr	r1, [r7, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	3212      	adds	r2, #18
 8005914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3301      	adds	r3, #1
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b03      	cmp	r3, #3
 8005922:	d9d8      	bls.n	80058d6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800594a:	461a      	mov	r2, r3
 800594c:	2303      	movs	r3, #3
 800594e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691a      	ldr	r2, [r3, #16]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800595e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005972:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005976:	bf00      	nop
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
	...

08005984 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b098      	sub	sp, #96	; 0x60
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800598c:	4a84      	ldr	r2, [pc, #528]	; (8005ba0 <HAL_FDCAN_Init+0x21c>)
 800598e:	f107 030c 	add.w	r3, r7, #12
 8005992:	4611      	mov	r1, r2
 8005994:	224c      	movs	r2, #76	; 0x4c
 8005996:	4618      	mov	r0, r3
 8005998:	f008 f8d2 	bl	800db40 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e1c6      	b.n	8005d34 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a7e      	ldr	r2, [pc, #504]	; (8005ba4 <HAL_FDCAN_Init+0x220>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d106      	bne.n	80059be <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80059b8:	461a      	mov	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d106      	bne.n	80059d8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7fd fa02 	bl	8002ddc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0210 	bic.w	r2, r2, #16
 80059e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059e8:	f7fe f9d0 	bl	8003d8c <HAL_GetTick>
 80059ec:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80059ee:	e014      	b.n	8005a1a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80059f0:	f7fe f9cc 	bl	8003d8c <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b0a      	cmp	r3, #10
 80059fc:	d90d      	bls.n	8005a1a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a04:	f043 0201 	orr.w	r2, r3, #1
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2203      	movs	r2, #3
 8005a12:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e18c      	b.n	8005d34 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	f003 0308 	and.w	r3, r3, #8
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d0e3      	beq.n	80059f0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699a      	ldr	r2, [r3, #24]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0201 	orr.w	r2, r2, #1
 8005a36:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a38:	f7fe f9a8 	bl	8003d8c <HAL_GetTick>
 8005a3c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005a3e:	e014      	b.n	8005a6a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005a40:	f7fe f9a4 	bl	8003d8c <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b0a      	cmp	r3, #10
 8005a4c:	d90d      	bls.n	8005a6a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a54:	f043 0201 	orr.w	r2, r3, #1
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2203      	movs	r2, #3
 8005a62:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e164      	b.n	8005d34 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d0e3      	beq.n	8005a40 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	699a      	ldr	r2, [r3, #24]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0202 	orr.w	r2, r2, #2
 8005a86:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	7c1b      	ldrb	r3, [r3, #16]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d108      	bne.n	8005aa2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699a      	ldr	r2, [r3, #24]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a9e:	619a      	str	r2, [r3, #24]
 8005aa0:	e007      	b.n	8005ab2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	699a      	ldr	r2, [r3, #24]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ab0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	7c5b      	ldrb	r3, [r3, #17]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d108      	bne.n	8005acc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699a      	ldr	r2, [r3, #24]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ac8:	619a      	str	r2, [r3, #24]
 8005aca:	e007      	b.n	8005adc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ada:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	7c9b      	ldrb	r3, [r3, #18]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d108      	bne.n	8005af6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005af2:	619a      	str	r2, [r3, #24]
 8005af4:	e007      	b.n	8005b06 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	699a      	ldr	r2, [r3, #24]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b04:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699a      	ldr	r2, [r3, #24]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005b2a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691a      	ldr	r2, [r3, #16]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0210 	bic.w	r2, r2, #16
 8005b3a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d108      	bne.n	8005b56 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0204 	orr.w	r2, r2, #4
 8005b52:	619a      	str	r2, [r3, #24]
 8005b54:	e030      	b.n	8005bb8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d02c      	beq.n	8005bb8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d020      	beq.n	8005ba8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699a      	ldr	r2, [r3, #24]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b74:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f042 0210 	orr.w	r2, r2, #16
 8005b84:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	2b03      	cmp	r3, #3
 8005b8c:	d114      	bne.n	8005bb8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	699a      	ldr	r2, [r3, #24]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0220 	orr.w	r2, r2, #32
 8005b9c:	619a      	str	r2, [r3, #24]
 8005b9e:	e00b      	b.n	8005bb8 <HAL_FDCAN_Init+0x234>
 8005ba0:	0800e4e4 	.word	0x0800e4e4
 8005ba4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0220 	orr.w	r2, r2, #32
 8005bb6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005bc8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005bd0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005be0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005be2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bec:	d115      	bne.n	8005c1a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005bfc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c02:	3b01      	subs	r3, #1
 8005c04:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005c06:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005c16:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005c18:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c40:	4413      	add	r3, r2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d011      	beq.n	8005c6a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005c4e:	f023 0107 	bic.w	r1, r3, #7
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	3360      	adds	r3, #96	; 0x60
 8005c5a:	443b      	add	r3, r7
 8005c5c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d011      	beq.n	8005c96 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005c7a:	f023 0107 	bic.w	r1, r3, #7
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	3360      	adds	r3, #96	; 0x60
 8005c86:	443b      	add	r3, r7
 8005c88:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d012      	beq.n	8005cc4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005ca6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	3360      	adds	r3, #96	; 0x60
 8005cb2:	443b      	add	r3, r7
 8005cb4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005cb8:	011a      	lsls	r2, r3, #4
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d012      	beq.n	8005cf2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005cd4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	3360      	adds	r3, #96	; 0x60
 8005ce0:	443b      	add	r3, r7
 8005ce2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005ce6:	021a      	lsls	r2, r3, #8
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a11      	ldr	r2, [pc, #68]	; (8005d3c <HAL_FDCAN_Init+0x3b8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d107      	bne.n	8005d0c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f022 0203 	bic.w	r2, r2, #3
 8005d0a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f80b 	bl	8005d40 <FDCAN_CalcultateRamBlockAddresses>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005d30:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3760      	adds	r7, #96	; 0x60
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	4000a000 	.word	0x4000a000

08005d40 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005d56:	4ba7      	ldr	r3, [pc, #668]	; (8005ff4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d58:	4013      	ands	r3, r2
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	0091      	lsls	r1, r2, #2
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6812      	ldr	r2, [r2, #0]
 8005d62:	430b      	orrs	r3, r1
 8005d64:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d70:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	041a      	lsls	r2, r3, #16
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d96:	4b97      	ldr	r3, [pc, #604]	; (8005ff4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d98:	4013      	ands	r3, r2
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	0091      	lsls	r1, r2, #2
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6812      	ldr	r2, [r2, #0]
 8005da2:	430b      	orrs	r3, r1
 8005da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db8:	041a      	lsls	r2, r3, #16
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	4413      	add	r3, r2
 8005dce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005dd8:	4b86      	ldr	r3, [pc, #536]	; (8005ff4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005dda:	4013      	ands	r3, r2
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	0091      	lsls	r1, r2, #2
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6812      	ldr	r2, [r2, #0]
 8005de4:	430b      	orrs	r3, r1
 8005de6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005df2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	041a      	lsls	r2, r3, #16
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005e0e:	fb02 f303 	mul.w	r3, r2, r3
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	4413      	add	r3, r2
 8005e16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005e20:	4b74      	ldr	r3, [pc, #464]	; (8005ff4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e22:	4013      	ands	r3, r2
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	0091      	lsls	r1, r2, #2
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6812      	ldr	r2, [r2, #0]
 8005e2c:	430b      	orrs	r3, r1
 8005e2e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e3a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e42:	041a      	lsls	r2, r3, #16
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005e56:	fb02 f303 	mul.w	r3, r2, r3
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005e68:	4b62      	ldr	r3, [pc, #392]	; (8005ff4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	0091      	lsls	r1, r2, #2
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	430b      	orrs	r3, r1
 8005e76:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005e82:	fb02 f303 	mul.w	r3, r2, r3
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	4413      	add	r3, r2
 8005e8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005e94:	4b57      	ldr	r3, [pc, #348]	; (8005ff4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e96:	4013      	ands	r3, r2
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	0091      	lsls	r1, r2, #2
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	6812      	ldr	r2, [r2, #0]
 8005ea0:	430b      	orrs	r3, r1
 8005ea2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005eae:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb6:	041a      	lsls	r2, r3, #16
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	4413      	add	r3, r2
 8005ecc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005ed6:	4b47      	ldr	r3, [pc, #284]	; (8005ff4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ed8:	4013      	ands	r3, r2
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	0091      	lsls	r1, r2, #2
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	6812      	ldr	r2, [r2, #0]
 8005ee2:	430b      	orrs	r3, r1
 8005ee4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005ef0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef8:	041a      	lsls	r2, r3, #16
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005f0c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f14:	061a      	lsls	r2, r3, #24
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f24:	4b34      	ldr	r3, [pc, #208]	; (8005ff8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005f26:	4413      	add	r3, r2
 8005f28:	009a      	lsls	r2, r3, #2
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	441a      	add	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	441a      	add	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	6879      	ldr	r1, [r7, #4]
 8005f58:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005f5a:	fb01 f303 	mul.w	r3, r1, r3
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	441a      	add	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005f72:	fb01 f303 	mul.w	r3, r1, r3
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	441a      	add	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f86:	6879      	ldr	r1, [r7, #4]
 8005f88:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005f8a:	fb01 f303 	mul.w	r3, r1, r3
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	441a      	add	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa2:	00db      	lsls	r3, r3, #3
 8005fa4:	441a      	add	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb6:	6879      	ldr	r1, [r7, #4]
 8005fb8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005fba:	fb01 f303 	mul.w	r3, r1, r3
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	441a      	add	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd2:	6879      	ldr	r1, [r7, #4]
 8005fd4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005fd6:	fb01 f303 	mul.w	r3, r1, r3
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	441a      	add	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fea:	4a04      	ldr	r2, [pc, #16]	; (8005ffc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d915      	bls.n	800601c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005ff0:	e006      	b.n	8006000 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005ff2:	bf00      	nop
 8005ff4:	ffff0003 	.word	0xffff0003
 8005ff8:	10002b00 	.word	0x10002b00
 8005ffc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006006:	f043 0220 	orr.w	r2, r3, #32
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2203      	movs	r2, #3
 8006014:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e010      	b.n	800603e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	e005      	b.n	8006030 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3304      	adds	r3, #4
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	429a      	cmp	r2, r3
 800603a:	d3f3      	bcc.n	8006024 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop

0800604c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800604c:	b480      	push	{r7}
 800604e:	b089      	sub	sp, #36	; 0x24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006056:	2300      	movs	r3, #0
 8006058:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800605a:	4b89      	ldr	r3, [pc, #548]	; (8006280 <HAL_GPIO_Init+0x234>)
 800605c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800605e:	e194      	b.n	800638a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	2101      	movs	r1, #1
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	fa01 f303 	lsl.w	r3, r1, r3
 800606c:	4013      	ands	r3, r2
 800606e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 8186 	beq.w	8006384 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f003 0303 	and.w	r3, r3, #3
 8006080:	2b01      	cmp	r3, #1
 8006082:	d005      	beq.n	8006090 <HAL_GPIO_Init+0x44>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f003 0303 	and.w	r3, r3, #3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d130      	bne.n	80060f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	005b      	lsls	r3, r3, #1
 800609a:	2203      	movs	r2, #3
 800609c:	fa02 f303 	lsl.w	r3, r2, r3
 80060a0:	43db      	mvns	r3, r3
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	4013      	ands	r3, r2
 80060a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	fa02 f303 	lsl.w	r3, r2, r3
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060c6:	2201      	movs	r2, #1
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	fa02 f303 	lsl.w	r3, r2, r3
 80060ce:	43db      	mvns	r3, r3
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	4013      	ands	r3, r2
 80060d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	091b      	lsrs	r3, r3, #4
 80060dc:	f003 0201 	and.w	r2, r3, #1
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	fa02 f303 	lsl.w	r3, r2, r3
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f003 0303 	and.w	r3, r3, #3
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	d017      	beq.n	800612e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	2203      	movs	r2, #3
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	43db      	mvns	r3, r3
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	4013      	ands	r3, r2
 8006114:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	689a      	ldr	r2, [r3, #8]
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	fa02 f303 	lsl.w	r3, r2, r3
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	4313      	orrs	r3, r2
 8006126:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d123      	bne.n	8006182 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	08da      	lsrs	r2, r3, #3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	3208      	adds	r2, #8
 8006142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f003 0307 	and.w	r3, r3, #7
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	220f      	movs	r2, #15
 8006152:	fa02 f303 	lsl.w	r3, r2, r3
 8006156:	43db      	mvns	r3, r3
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	4013      	ands	r3, r2
 800615c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	691a      	ldr	r2, [r3, #16]
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	fa02 f303 	lsl.w	r3, r2, r3
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	4313      	orrs	r3, r2
 8006172:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	08da      	lsrs	r2, r3, #3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3208      	adds	r2, #8
 800617c:	69b9      	ldr	r1, [r7, #24]
 800617e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	2203      	movs	r2, #3
 800618e:	fa02 f303 	lsl.w	r3, r2, r3
 8006192:	43db      	mvns	r3, r3
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	4013      	ands	r3, r2
 8006198:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f003 0203 	and.w	r2, r3, #3
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	fa02 f303 	lsl.w	r3, r2, r3
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 80e0 	beq.w	8006384 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061c4:	4b2f      	ldr	r3, [pc, #188]	; (8006284 <HAL_GPIO_Init+0x238>)
 80061c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061ca:	4a2e      	ldr	r2, [pc, #184]	; (8006284 <HAL_GPIO_Init+0x238>)
 80061cc:	f043 0302 	orr.w	r3, r3, #2
 80061d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80061d4:	4b2b      	ldr	r3, [pc, #172]	; (8006284 <HAL_GPIO_Init+0x238>)
 80061d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061e2:	4a29      	ldr	r2, [pc, #164]	; (8006288 <HAL_GPIO_Init+0x23c>)
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	089b      	lsrs	r3, r3, #2
 80061e8:	3302      	adds	r3, #2
 80061ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	f003 0303 	and.w	r3, r3, #3
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	220f      	movs	r2, #15
 80061fa:	fa02 f303 	lsl.w	r3, r2, r3
 80061fe:	43db      	mvns	r3, r3
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	4013      	ands	r3, r2
 8006204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a20      	ldr	r2, [pc, #128]	; (800628c <HAL_GPIO_Init+0x240>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d052      	beq.n	80062b4 <HAL_GPIO_Init+0x268>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a1f      	ldr	r2, [pc, #124]	; (8006290 <HAL_GPIO_Init+0x244>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d031      	beq.n	800627a <HAL_GPIO_Init+0x22e>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a1e      	ldr	r2, [pc, #120]	; (8006294 <HAL_GPIO_Init+0x248>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d02b      	beq.n	8006276 <HAL_GPIO_Init+0x22a>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a1d      	ldr	r2, [pc, #116]	; (8006298 <HAL_GPIO_Init+0x24c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d025      	beq.n	8006272 <HAL_GPIO_Init+0x226>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a1c      	ldr	r2, [pc, #112]	; (800629c <HAL_GPIO_Init+0x250>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d01f      	beq.n	800626e <HAL_GPIO_Init+0x222>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a1b      	ldr	r2, [pc, #108]	; (80062a0 <HAL_GPIO_Init+0x254>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d019      	beq.n	800626a <HAL_GPIO_Init+0x21e>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a1a      	ldr	r2, [pc, #104]	; (80062a4 <HAL_GPIO_Init+0x258>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d013      	beq.n	8006266 <HAL_GPIO_Init+0x21a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a19      	ldr	r2, [pc, #100]	; (80062a8 <HAL_GPIO_Init+0x25c>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d00d      	beq.n	8006262 <HAL_GPIO_Init+0x216>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a18      	ldr	r2, [pc, #96]	; (80062ac <HAL_GPIO_Init+0x260>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d007      	beq.n	800625e <HAL_GPIO_Init+0x212>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a17      	ldr	r2, [pc, #92]	; (80062b0 <HAL_GPIO_Init+0x264>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d101      	bne.n	800625a <HAL_GPIO_Init+0x20e>
 8006256:	2309      	movs	r3, #9
 8006258:	e02d      	b.n	80062b6 <HAL_GPIO_Init+0x26a>
 800625a:	230a      	movs	r3, #10
 800625c:	e02b      	b.n	80062b6 <HAL_GPIO_Init+0x26a>
 800625e:	2308      	movs	r3, #8
 8006260:	e029      	b.n	80062b6 <HAL_GPIO_Init+0x26a>
 8006262:	2307      	movs	r3, #7
 8006264:	e027      	b.n	80062b6 <HAL_GPIO_Init+0x26a>
 8006266:	2306      	movs	r3, #6
 8006268:	e025      	b.n	80062b6 <HAL_GPIO_Init+0x26a>
 800626a:	2305      	movs	r3, #5
 800626c:	e023      	b.n	80062b6 <HAL_GPIO_Init+0x26a>
 800626e:	2304      	movs	r3, #4
 8006270:	e021      	b.n	80062b6 <HAL_GPIO_Init+0x26a>
 8006272:	2303      	movs	r3, #3
 8006274:	e01f      	b.n	80062b6 <HAL_GPIO_Init+0x26a>
 8006276:	2302      	movs	r3, #2
 8006278:	e01d      	b.n	80062b6 <HAL_GPIO_Init+0x26a>
 800627a:	2301      	movs	r3, #1
 800627c:	e01b      	b.n	80062b6 <HAL_GPIO_Init+0x26a>
 800627e:	bf00      	nop
 8006280:	58000080 	.word	0x58000080
 8006284:	58024400 	.word	0x58024400
 8006288:	58000400 	.word	0x58000400
 800628c:	58020000 	.word	0x58020000
 8006290:	58020400 	.word	0x58020400
 8006294:	58020800 	.word	0x58020800
 8006298:	58020c00 	.word	0x58020c00
 800629c:	58021000 	.word	0x58021000
 80062a0:	58021400 	.word	0x58021400
 80062a4:	58021800 	.word	0x58021800
 80062a8:	58021c00 	.word	0x58021c00
 80062ac:	58022000 	.word	0x58022000
 80062b0:	58022400 	.word	0x58022400
 80062b4:	2300      	movs	r3, #0
 80062b6:	69fa      	ldr	r2, [r7, #28]
 80062b8:	f002 0203 	and.w	r2, r2, #3
 80062bc:	0092      	lsls	r2, r2, #2
 80062be:	4093      	lsls	r3, r2
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062c6:	4938      	ldr	r1, [pc, #224]	; (80063a8 <HAL_GPIO_Init+0x35c>)
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	089b      	lsrs	r3, r3, #2
 80062cc:	3302      	adds	r3, #2
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	43db      	mvns	r3, r3
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	4013      	ands	r3, r2
 80062e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80062fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	43db      	mvns	r3, r3
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	4013      	ands	r3, r2
 8006312:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	4313      	orrs	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	43db      	mvns	r3, r3
 800633a:	69ba      	ldr	r2, [r7, #24]
 800633c:	4013      	ands	r3, r2
 800633e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	43db      	mvns	r3, r3
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	4013      	ands	r3, r2
 8006368:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	4313      	orrs	r3, r2
 800637c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	3301      	adds	r3, #1
 8006388:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	fa22 f303 	lsr.w	r3, r2, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	f47f ae63 	bne.w	8006060 <HAL_GPIO_Init+0x14>
  }
}
 800639a:	bf00      	nop
 800639c:	bf00      	nop
 800639e:	3724      	adds	r7, #36	; 0x24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	58000400 	.word	0x58000400

080063ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	460b      	mov	r3, r1
 80063b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	691a      	ldr	r2, [r3, #16]
 80063bc:	887b      	ldrh	r3, [r7, #2]
 80063be:	4013      	ands	r3, r2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d002      	beq.n	80063ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80063c4:	2301      	movs	r3, #1
 80063c6:	73fb      	strb	r3, [r7, #15]
 80063c8:	e001      	b.n	80063ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063ca:	2300      	movs	r3, #0
 80063cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	460b      	mov	r3, r1
 80063e6:	807b      	strh	r3, [r7, #2]
 80063e8:	4613      	mov	r3, r2
 80063ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063ec:	787b      	ldrb	r3, [r7, #1]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063f2:	887a      	ldrh	r2, [r7, #2]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80063f8:	e003      	b.n	8006402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063fa:	887b      	ldrh	r3, [r7, #2]
 80063fc:	041a      	lsls	r2, r3, #16
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	619a      	str	r2, [r3, #24]
}
 8006402:	bf00      	nop
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
	...

08006410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e07f      	b.n	8006522 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d106      	bne.n	800643c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7fc fda0 	bl	8002f7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2224      	movs	r2, #36	; 0x24
 8006440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 0201 	bic.w	r2, r2, #1
 8006452:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006460:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006470:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d107      	bne.n	800648a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689a      	ldr	r2, [r3, #8]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006486:	609a      	str	r2, [r3, #8]
 8006488:	e006      	b.n	8006498 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006496:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	2b02      	cmp	r3, #2
 800649e:	d104      	bne.n	80064aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6859      	ldr	r1, [r3, #4]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	4b1d      	ldr	r3, [pc, #116]	; (800652c <HAL_I2C_Init+0x11c>)
 80064b6:	430b      	orrs	r3, r1
 80064b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68da      	ldr	r2, [r3, #12]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691a      	ldr	r2, [r3, #16]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	69d9      	ldr	r1, [r3, #28]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a1a      	ldr	r2, [r3, #32]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f042 0201 	orr.w	r2, r2, #1
 8006502:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2220      	movs	r2, #32
 800650e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	02008000 	.word	0x02008000

08006530 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af02      	add	r7, sp, #8
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	607a      	str	r2, [r7, #4]
 800653a:	461a      	mov	r2, r3
 800653c:	460b      	mov	r3, r1
 800653e:	817b      	strh	r3, [r7, #10]
 8006540:	4613      	mov	r3, r2
 8006542:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b20      	cmp	r3, #32
 800654e:	f040 80da 	bne.w	8006706 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_I2C_Master_Transmit+0x30>
 800655c:	2302      	movs	r3, #2
 800655e:	e0d3      	b.n	8006708 <HAL_I2C_Master_Transmit+0x1d8>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006568:	f7fd fc10 	bl	8003d8c <HAL_GetTick>
 800656c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	2319      	movs	r3, #25
 8006574:	2201      	movs	r2, #1
 8006576:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 faee 	bl	8006b5c <I2C_WaitOnFlagUntilTimeout>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e0be      	b.n	8006708 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2221      	movs	r2, #33	; 0x21
 800658e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2210      	movs	r2, #16
 8006596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	893a      	ldrh	r2, [r7, #8]
 80065aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2bff      	cmp	r3, #255	; 0xff
 80065ba:	d90e      	bls.n	80065da <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	22ff      	movs	r2, #255	; 0xff
 80065c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	8979      	ldrh	r1, [r7, #10]
 80065ca:	4b51      	ldr	r3, [pc, #324]	; (8006710 <HAL_I2C_Master_Transmit+0x1e0>)
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 fcfe 	bl	8006fd4 <I2C_TransferConfig>
 80065d8:	e06c      	b.n	80066b4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065de:	b29a      	uxth	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	8979      	ldrh	r1, [r7, #10]
 80065ec:	4b48      	ldr	r3, [pc, #288]	; (8006710 <HAL_I2C_Master_Transmit+0x1e0>)
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 fced 	bl	8006fd4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80065fa:	e05b      	b.n	80066b4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	6a39      	ldr	r1, [r7, #32]
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f000 fafa 	bl	8006bfa <I2C_WaitOnTXISFlagUntilTimeout>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e07b      	b.n	8006708 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006614:	781a      	ldrb	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662a:	b29b      	uxth	r3, r3
 800662c:	3b01      	subs	r3, #1
 800662e:	b29a      	uxth	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006638:	3b01      	subs	r3, #1
 800663a:	b29a      	uxth	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006644:	b29b      	uxth	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d034      	beq.n	80066b4 <HAL_I2C_Master_Transmit+0x184>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664e:	2b00      	cmp	r3, #0
 8006650:	d130      	bne.n	80066b4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	2200      	movs	r2, #0
 800665a:	2180      	movs	r1, #128	; 0x80
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 fa7d 	bl	8006b5c <I2C_WaitOnFlagUntilTimeout>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e04d      	b.n	8006708 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006670:	b29b      	uxth	r3, r3
 8006672:	2bff      	cmp	r3, #255	; 0xff
 8006674:	d90e      	bls.n	8006694 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	22ff      	movs	r2, #255	; 0xff
 800667a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006680:	b2da      	uxtb	r2, r3
 8006682:	8979      	ldrh	r1, [r7, #10]
 8006684:	2300      	movs	r3, #0
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f000 fca1 	bl	8006fd4 <I2C_TransferConfig>
 8006692:	e00f      	b.n	80066b4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006698:	b29a      	uxth	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	8979      	ldrh	r1, [r7, #10]
 80066a6:	2300      	movs	r3, #0
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 fc90 	bl	8006fd4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d19e      	bne.n	80065fc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	6a39      	ldr	r1, [r7, #32]
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 fae0 	bl	8006c88 <I2C_WaitOnSTOPFlagUntilTimeout>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e01a      	b.n	8006708 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2220      	movs	r2, #32
 80066d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6859      	ldr	r1, [r3, #4]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <HAL_I2C_Master_Transmit+0x1e4>)
 80066e6:	400b      	ands	r3, r1
 80066e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2220      	movs	r2, #32
 80066ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006702:	2300      	movs	r3, #0
 8006704:	e000      	b.n	8006708 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006706:	2302      	movs	r3, #2
  }
}
 8006708:	4618      	mov	r0, r3
 800670a:	3718      	adds	r7, #24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	80002000 	.word	0x80002000
 8006714:	fe00e800 	.word	0xfe00e800

08006718 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af02      	add	r7, sp, #8
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	607a      	str	r2, [r7, #4]
 8006722:	461a      	mov	r2, r3
 8006724:	460b      	mov	r3, r1
 8006726:	817b      	strh	r3, [r7, #10]
 8006728:	4613      	mov	r3, r2
 800672a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b20      	cmp	r3, #32
 8006736:	f040 80db 	bne.w	80068f0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006740:	2b01      	cmp	r3, #1
 8006742:	d101      	bne.n	8006748 <HAL_I2C_Master_Receive+0x30>
 8006744:	2302      	movs	r3, #2
 8006746:	e0d4      	b.n	80068f2 <HAL_I2C_Master_Receive+0x1da>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006750:	f7fd fb1c 	bl	8003d8c <HAL_GetTick>
 8006754:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	2319      	movs	r3, #25
 800675c:	2201      	movs	r2, #1
 800675e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f000 f9fa 	bl	8006b5c <I2C_WaitOnFlagUntilTimeout>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e0bf      	b.n	80068f2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2222      	movs	r2, #34	; 0x22
 8006776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2210      	movs	r2, #16
 800677e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	893a      	ldrh	r2, [r7, #8]
 8006792:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679e:	b29b      	uxth	r3, r3
 80067a0:	2bff      	cmp	r3, #255	; 0xff
 80067a2:	d90e      	bls.n	80067c2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	22ff      	movs	r2, #255	; 0xff
 80067a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	8979      	ldrh	r1, [r7, #10]
 80067b2:	4b52      	ldr	r3, [pc, #328]	; (80068fc <HAL_I2C_Master_Receive+0x1e4>)
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 fc0a 	bl	8006fd4 <I2C_TransferConfig>
 80067c0:	e06d      	b.n	800689e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	8979      	ldrh	r1, [r7, #10]
 80067d4:	4b49      	ldr	r3, [pc, #292]	; (80068fc <HAL_I2C_Master_Receive+0x1e4>)
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 fbf9 	bl	8006fd4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80067e2:	e05c      	b.n	800689e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	6a39      	ldr	r1, [r7, #32]
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 fa91 	bl	8006d10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e07c      	b.n	80068f2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	b2d2      	uxtb	r2, r2
 8006804:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006814:	3b01      	subs	r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006820:	b29b      	uxth	r3, r3
 8006822:	3b01      	subs	r3, #1
 8006824:	b29a      	uxth	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682e:	b29b      	uxth	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	d034      	beq.n	800689e <HAL_I2C_Master_Receive+0x186>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006838:	2b00      	cmp	r3, #0
 800683a:	d130      	bne.n	800689e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	2200      	movs	r2, #0
 8006844:	2180      	movs	r1, #128	; 0x80
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f000 f988 	bl	8006b5c <I2C_WaitOnFlagUntilTimeout>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e04d      	b.n	80068f2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685a:	b29b      	uxth	r3, r3
 800685c:	2bff      	cmp	r3, #255	; 0xff
 800685e:	d90e      	bls.n	800687e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	22ff      	movs	r2, #255	; 0xff
 8006864:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686a:	b2da      	uxtb	r2, r3
 800686c:	8979      	ldrh	r1, [r7, #10]
 800686e:	2300      	movs	r3, #0
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 fbac 	bl	8006fd4 <I2C_TransferConfig>
 800687c:	e00f      	b.n	800689e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006882:	b29a      	uxth	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800688c:	b2da      	uxtb	r2, r3
 800688e:	8979      	ldrh	r1, [r7, #10]
 8006890:	2300      	movs	r3, #0
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 fb9b 	bl	8006fd4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d19d      	bne.n	80067e4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	6a39      	ldr	r1, [r7, #32]
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 f9eb 	bl	8006c88 <I2C_WaitOnSTOPFlagUntilTimeout>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e01a      	b.n	80068f2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2220      	movs	r2, #32
 80068c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6859      	ldr	r1, [r3, #4]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	4b0c      	ldr	r3, [pc, #48]	; (8006900 <HAL_I2C_Master_Receive+0x1e8>)
 80068d0:	400b      	ands	r3, r1
 80068d2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	e000      	b.n	80068f2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80068f0:	2302      	movs	r3, #2
  }
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3718      	adds	r7, #24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	80002400 	.word	0x80002400
 8006900:	fe00e800 	.word	0xfe00e800

08006904 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b08a      	sub	sp, #40	; 0x28
 8006908:	af02      	add	r7, sp, #8
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	607a      	str	r2, [r7, #4]
 800690e:	603b      	str	r3, [r7, #0]
 8006910:	460b      	mov	r3, r1
 8006912:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006914:	2300      	movs	r3, #0
 8006916:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b20      	cmp	r3, #32
 8006922:	f040 80ef 	bne.w	8006b04 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006934:	d101      	bne.n	800693a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8006936:	2302      	movs	r3, #2
 8006938:	e0e5      	b.n	8006b06 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006940:	2b01      	cmp	r3, #1
 8006942:	d101      	bne.n	8006948 <HAL_I2C_IsDeviceReady+0x44>
 8006944:	2302      	movs	r3, #2
 8006946:	e0de      	b.n	8006b06 <HAL_I2C_IsDeviceReady+0x202>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2224      	movs	r2, #36	; 0x24
 8006954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d105      	bne.n	8006972 <HAL_I2C_IsDeviceReady+0x6e>
 8006966:	897b      	ldrh	r3, [r7, #10]
 8006968:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800696c:	4b68      	ldr	r3, [pc, #416]	; (8006b10 <HAL_I2C_IsDeviceReady+0x20c>)
 800696e:	4313      	orrs	r3, r2
 8006970:	e004      	b.n	800697c <HAL_I2C_IsDeviceReady+0x78>
 8006972:	897b      	ldrh	r3, [r7, #10]
 8006974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006978:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	6812      	ldr	r2, [r2, #0]
 8006980:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006982:	f7fd fa03 	bl	8003d8c <HAL_GetTick>
 8006986:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	f003 0320 	and.w	r3, r3, #32
 8006992:	2b20      	cmp	r3, #32
 8006994:	bf0c      	ite	eq
 8006996:	2301      	moveq	r3, #1
 8006998:	2300      	movne	r3, #0
 800699a:	b2db      	uxtb	r3, r3
 800699c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f003 0310 	and.w	r3, r3, #16
 80069a8:	2b10      	cmp	r3, #16
 80069aa:	bf0c      	ite	eq
 80069ac:	2301      	moveq	r3, #1
 80069ae:	2300      	movne	r3, #0
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80069b4:	e034      	b.n	8006a20 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069bc:	d01a      	beq.n	80069f4 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80069be:	f7fd f9e5 	bl	8003d8c <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d302      	bcc.n	80069d4 <HAL_I2C_IsDeviceReady+0xd0>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10f      	bne.n	80069f4 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2220      	movs	r2, #32
 80069d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e0:	f043 0220 	orr.w	r2, r3, #32
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e088      	b.n	8006b06 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	f003 0320 	and.w	r3, r3, #32
 80069fe:	2b20      	cmp	r3, #32
 8006a00:	bf0c      	ite	eq
 8006a02:	2301      	moveq	r3, #1
 8006a04:	2300      	movne	r3, #0
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	f003 0310 	and.w	r3, r3, #16
 8006a14:	2b10      	cmp	r3, #16
 8006a16:	bf0c      	ite	eq
 8006a18:	2301      	moveq	r3, #1
 8006a1a:	2300      	movne	r3, #0
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006a20:	7ffb      	ldrb	r3, [r7, #31]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d102      	bne.n	8006a2c <HAL_I2C_IsDeviceReady+0x128>
 8006a26:	7fbb      	ldrb	r3, [r7, #30]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d0c4      	beq.n	80069b6 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	f003 0310 	and.w	r3, r3, #16
 8006a36:	2b10      	cmp	r3, #16
 8006a38:	d01a      	beq.n	8006a70 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2200      	movs	r2, #0
 8006a42:	2120      	movs	r1, #32
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 f889 	bl	8006b5c <I2C_WaitOnFlagUntilTimeout>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e058      	b.n	8006b06 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	e04a      	b.n	8006b06 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2200      	movs	r2, #0
 8006a78:	2120      	movs	r1, #32
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 f86e 	bl	8006b5c <I2C_WaitOnFlagUntilTimeout>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e03d      	b.n	8006b06 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2210      	movs	r2, #16
 8006a90:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2220      	movs	r2, #32
 8006a98:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d118      	bne.n	8006ad4 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ab0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	2120      	movs	r1, #32
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 f84d 	bl	8006b5c <I2C_WaitOnFlagUntilTimeout>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d001      	beq.n	8006acc <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e01c      	b.n	8006b06 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	f63f af3d 	bhi.w	800695e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af0:	f043 0220 	orr.w	r2, r3, #32
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e000      	b.n	8006b06 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8006b04:	2302      	movs	r3, #2
  }
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3720      	adds	r7, #32
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	02002000 	.word	0x02002000

08006b14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d103      	bne.n	8006b32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d007      	beq.n	8006b50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	699a      	ldr	r2, [r3, #24]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f042 0201 	orr.w	r2, r2, #1
 8006b4e:	619a      	str	r2, [r3, #24]
  }
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	603b      	str	r3, [r7, #0]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b6c:	e031      	b.n	8006bd2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b74:	d02d      	beq.n	8006bd2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b76:	f7fd f909 	bl	8003d8c <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d302      	bcc.n	8006b8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d122      	bne.n	8006bd2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	699a      	ldr	r2, [r3, #24]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	4013      	ands	r3, r2
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	bf0c      	ite	eq
 8006b9c:	2301      	moveq	r3, #1
 8006b9e:	2300      	movne	r3, #0
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	79fb      	ldrb	r3, [r7, #7]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d113      	bne.n	8006bd2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bae:	f043 0220 	orr.w	r2, r3, #32
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e00f      	b.n	8006bf2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	699a      	ldr	r2, [r3, #24]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	bf0c      	ite	eq
 8006be2:	2301      	moveq	r3, #1
 8006be4:	2300      	movne	r3, #0
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	461a      	mov	r2, r3
 8006bea:	79fb      	ldrb	r3, [r7, #7]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d0be      	beq.n	8006b6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c06:	e033      	b.n	8006c70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	68b9      	ldr	r1, [r7, #8]
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 f901 	bl	8006e14 <I2C_IsErrorOccurred>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e031      	b.n	8006c80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c22:	d025      	beq.n	8006c70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c24:	f7fd f8b2 	bl	8003d8c <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d302      	bcc.n	8006c3a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d11a      	bne.n	8006c70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d013      	beq.n	8006c70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4c:	f043 0220 	orr.w	r2, r3, #32
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2220      	movs	r2, #32
 8006c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e007      	b.n	8006c80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d1c4      	bne.n	8006c08 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c94:	e02f      	b.n	8006cf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	68b9      	ldr	r1, [r7, #8]
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 f8ba 	bl	8006e14 <I2C_IsErrorOccurred>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e02d      	b.n	8006d06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006caa:	f7fd f86f 	bl	8003d8c <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d302      	bcc.n	8006cc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d11a      	bne.n	8006cf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	f003 0320 	and.w	r3, r3, #32
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	d013      	beq.n	8006cf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd2:	f043 0220 	orr.w	r2, r3, #32
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e007      	b.n	8006d06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	f003 0320 	and.w	r3, r3, #32
 8006d00:	2b20      	cmp	r3, #32
 8006d02:	d1c8      	bne.n	8006c96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
	...

08006d10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d1c:	e06b      	b.n	8006df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	68b9      	ldr	r1, [r7, #8]
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f000 f876 	bl	8006e14 <I2C_IsErrorOccurred>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d001      	beq.n	8006d32 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e069      	b.n	8006e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	f003 0320 	and.w	r3, r3, #32
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d138      	bne.n	8006db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	f003 0304 	and.w	r3, r3, #4
 8006d4a:	2b04      	cmp	r3, #4
 8006d4c:	d105      	bne.n	8006d5a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	e055      	b.n	8006e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	f003 0310 	and.w	r3, r3, #16
 8006d64:	2b10      	cmp	r3, #16
 8006d66:	d107      	bne.n	8006d78 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2210      	movs	r2, #16
 8006d6e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2204      	movs	r2, #4
 8006d74:	645a      	str	r2, [r3, #68]	; 0x44
 8006d76:	e002      	b.n	8006d7e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2220      	movs	r2, #32
 8006d84:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6859      	ldr	r1, [r3, #4]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	4b1f      	ldr	r3, [pc, #124]	; (8006e10 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8006d92:	400b      	ands	r3, r1
 8006d94:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e029      	b.n	8006e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006db2:	f7fc ffeb 	bl	8003d8c <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d302      	bcc.n	8006dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d116      	bne.n	8006df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	f003 0304 	and.w	r3, r3, #4
 8006dd2:	2b04      	cmp	r3, #4
 8006dd4:	d00f      	beq.n	8006df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dda:	f043 0220 	orr.w	r2, r3, #32
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2220      	movs	r2, #32
 8006de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e007      	b.n	8006e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	f003 0304 	and.w	r3, r3, #4
 8006e00:	2b04      	cmp	r3, #4
 8006e02:	d18c      	bne.n	8006d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	fe00e800 	.word	0xfe00e800

08006e14 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b08a      	sub	sp, #40	; 0x28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e20:	2300      	movs	r3, #0
 8006e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	f003 0310 	and.w	r3, r3, #16
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d068      	beq.n	8006f12 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2210      	movs	r2, #16
 8006e46:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e48:	e049      	b.n	8006ede <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e50:	d045      	beq.n	8006ede <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006e52:	f7fc ff9b 	bl	8003d8c <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d302      	bcc.n	8006e68 <I2C_IsErrorOccurred+0x54>
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d13a      	bne.n	8006ede <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e72:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e7a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e8a:	d121      	bne.n	8006ed0 <I2C_IsErrorOccurred+0xbc>
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e92:	d01d      	beq.n	8006ed0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006e94:	7cfb      	ldrb	r3, [r7, #19]
 8006e96:	2b20      	cmp	r3, #32
 8006e98:	d01a      	beq.n	8006ed0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ea8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006eaa:	f7fc ff6f 	bl	8003d8c <HAL_GetTick>
 8006eae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006eb0:	e00e      	b.n	8006ed0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006eb2:	f7fc ff6b 	bl	8003d8c <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	2b19      	cmp	r3, #25
 8006ebe:	d907      	bls.n	8006ed0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	f043 0320 	orr.w	r3, r3, #32
 8006ec6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006ece:	e006      	b.n	8006ede <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	f003 0320 	and.w	r3, r3, #32
 8006eda:	2b20      	cmp	r3, #32
 8006edc:	d1e9      	bne.n	8006eb2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	f003 0320 	and.w	r3, r3, #32
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	d003      	beq.n	8006ef4 <I2C_IsErrorOccurred+0xe0>
 8006eec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d0aa      	beq.n	8006e4a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d103      	bne.n	8006f04 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2220      	movs	r2, #32
 8006f02:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	f043 0304 	orr.w	r3, r3, #4
 8006f0a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00b      	beq.n	8006f3c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	f043 0301 	orr.w	r3, r3, #1
 8006f2a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00b      	beq.n	8006f5e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	f043 0308 	orr.w	r3, r3, #8
 8006f4c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00b      	beq.n	8006f80 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	f043 0302 	orr.w	r3, r3, #2
 8006f6e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d01c      	beq.n	8006fc2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f7ff fdc3 	bl	8006b14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	6859      	ldr	r1, [r3, #4]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	4b0d      	ldr	r3, [pc, #52]	; (8006fd0 <I2C_IsErrorOccurred+0x1bc>)
 8006f9a:	400b      	ands	r3, r1
 8006f9c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2220      	movs	r2, #32
 8006fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006fc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3728      	adds	r7, #40	; 0x28
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	fe00e800 	.word	0xfe00e800

08006fd4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	607b      	str	r3, [r7, #4]
 8006fde:	460b      	mov	r3, r1
 8006fe0:	817b      	strh	r3, [r7, #10]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fe6:	897b      	ldrh	r3, [r7, #10]
 8006fe8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006fec:	7a7b      	ldrb	r3, [r7, #9]
 8006fee:	041b      	lsls	r3, r3, #16
 8006ff0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ff4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007002:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685a      	ldr	r2, [r3, #4]
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	0d5b      	lsrs	r3, r3, #21
 800700e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007012:	4b08      	ldr	r3, [pc, #32]	; (8007034 <I2C_TransferConfig+0x60>)
 8007014:	430b      	orrs	r3, r1
 8007016:	43db      	mvns	r3, r3
 8007018:	ea02 0103 	and.w	r1, r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	430a      	orrs	r2, r1
 8007024:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007026:	bf00      	nop
 8007028:	371c      	adds	r7, #28
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	03ff63ff 	.word	0x03ff63ff

08007038 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b20      	cmp	r3, #32
 800704c:	d138      	bne.n	80070c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007054:	2b01      	cmp	r3, #1
 8007056:	d101      	bne.n	800705c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007058:	2302      	movs	r3, #2
 800705a:	e032      	b.n	80070c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2224      	movs	r2, #36	; 0x24
 8007068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f022 0201 	bic.w	r2, r2, #1
 800707a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800708a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6819      	ldr	r1, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f042 0201 	orr.w	r2, r2, #1
 80070aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	e000      	b.n	80070c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80070c0:	2302      	movs	r3, #2
  }
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr

080070ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b085      	sub	sp, #20
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
 80070d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b20      	cmp	r3, #32
 80070e2:	d139      	bne.n	8007158 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d101      	bne.n	80070f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80070ee:	2302      	movs	r3, #2
 80070f0:	e033      	b.n	800715a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2224      	movs	r2, #36	; 0x24
 80070fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f022 0201 	bic.w	r2, r2, #1
 8007110:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007120:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	021b      	lsls	r3, r3, #8
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	4313      	orrs	r3, r2
 800712a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f042 0201 	orr.w	r2, r2, #1
 8007142:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2220      	movs	r2, #32
 8007148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007154:	2300      	movs	r3, #0
 8007156:	e000      	b.n	800715a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007158:	2302      	movs	r3, #2
  }
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
	...

08007168 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e0bf      	b.n	80072fa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d106      	bne.n	8007194 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7fb ff5e 	bl	8003050 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	699a      	ldr	r2, [r3, #24]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80071aa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6999      	ldr	r1, [r3, #24]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80071c0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	430a      	orrs	r2, r1
 80071ce:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6899      	ldr	r1, [r3, #8]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	4b4a      	ldr	r3, [pc, #296]	; (8007304 <HAL_LTDC_Init+0x19c>)
 80071dc:	400b      	ands	r3, r1
 80071de:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	041b      	lsls	r3, r3, #16
 80071e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6899      	ldr	r1, [r3, #8]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	699a      	ldr	r2, [r3, #24]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	431a      	orrs	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68d9      	ldr	r1, [r3, #12]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	4b3e      	ldr	r3, [pc, #248]	; (8007304 <HAL_LTDC_Init+0x19c>)
 800720a:	400b      	ands	r3, r1
 800720c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	041b      	lsls	r3, r3, #16
 8007214:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68d9      	ldr	r1, [r3, #12]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a1a      	ldr	r2, [r3, #32]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	431a      	orrs	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	430a      	orrs	r2, r1
 800722a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6919      	ldr	r1, [r3, #16]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	4b33      	ldr	r3, [pc, #204]	; (8007304 <HAL_LTDC_Init+0x19c>)
 8007238:	400b      	ands	r3, r1
 800723a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007240:	041b      	lsls	r3, r3, #16
 8007242:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6919      	ldr	r1, [r3, #16]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	431a      	orrs	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	430a      	orrs	r2, r1
 8007258:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6959      	ldr	r1, [r3, #20]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	4b27      	ldr	r3, [pc, #156]	; (8007304 <HAL_LTDC_Init+0x19c>)
 8007266:	400b      	ands	r3, r1
 8007268:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726e:	041b      	lsls	r3, r3, #16
 8007270:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6959      	ldr	r1, [r3, #20]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	431a      	orrs	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800728e:	021b      	lsls	r3, r3, #8
 8007290:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007298:	041b      	lsls	r3, r3, #16
 800729a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80072aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80072be:	431a      	orrs	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f042 0206 	orr.w	r2, r2, #6
 80072d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	699a      	ldr	r2, [r3, #24]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f042 0201 	orr.w	r2, r2, #1
 80072e6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	f000f800 	.word	0xf000f800

08007308 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007308:	b5b0      	push	{r4, r5, r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800731a:	2b01      	cmp	r3, #1
 800731c:	d101      	bne.n	8007322 <HAL_LTDC_ConfigLayer+0x1a>
 800731e:	2302      	movs	r3, #2
 8007320:	e02c      	b.n	800737c <HAL_LTDC_ConfigLayer+0x74>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2202      	movs	r2, #2
 800732e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2134      	movs	r1, #52	; 0x34
 8007338:	fb01 f303 	mul.w	r3, r1, r3
 800733c:	4413      	add	r3, r2
 800733e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	4614      	mov	r4, r2
 8007346:	461d      	mov	r5, r3
 8007348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800734a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800734c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800734e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	68b9      	ldr	r1, [r7, #8]
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 f811 	bl	8007384 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2201      	movs	r2, #1
 8007368:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bdb0      	pop	{r4, r5, r7, pc}

08007384 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007384:	b480      	push	{r7}
 8007386:	b089      	sub	sp, #36	; 0x24
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	0c1b      	lsrs	r3, r3, #16
 800739c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073a0:	4413      	add	r3, r2
 80073a2:	041b      	lsls	r3, r3, #16
 80073a4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	01db      	lsls	r3, r3, #7
 80073b0:	4413      	add	r3, r2
 80073b2:	3384      	adds	r3, #132	; 0x84
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	6812      	ldr	r2, [r2, #0]
 80073ba:	4611      	mov	r1, r2
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	01d2      	lsls	r2, r2, #7
 80073c0:	440a      	add	r2, r1
 80073c2:	3284      	adds	r2, #132	; 0x84
 80073c4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80073c8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	0c1b      	lsrs	r3, r3, #16
 80073d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80073da:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80073dc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4619      	mov	r1, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	01db      	lsls	r3, r3, #7
 80073e8:	440b      	add	r3, r1
 80073ea:	3384      	adds	r3, #132	; 0x84
 80073ec:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80073f2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	68da      	ldr	r2, [r3, #12]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007402:	4413      	add	r3, r2
 8007404:	041b      	lsls	r3, r3, #16
 8007406:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	461a      	mov	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	01db      	lsls	r3, r3, #7
 8007412:	4413      	add	r3, r2
 8007414:	3384      	adds	r3, #132	; 0x84
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	6812      	ldr	r2, [r2, #0]
 800741c:	4611      	mov	r1, r2
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	01d2      	lsls	r2, r2, #7
 8007422:	440a      	add	r2, r1
 8007424:	3284      	adds	r2, #132	; 0x84
 8007426:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800742a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800743a:	4413      	add	r3, r2
 800743c:	1c5a      	adds	r2, r3, #1
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4619      	mov	r1, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	01db      	lsls	r3, r3, #7
 8007448:	440b      	add	r3, r1
 800744a:	3384      	adds	r3, #132	; 0x84
 800744c:	4619      	mov	r1, r3
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	4313      	orrs	r3, r2
 8007452:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	461a      	mov	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	01db      	lsls	r3, r3, #7
 800745e:	4413      	add	r3, r2
 8007460:	3384      	adds	r3, #132	; 0x84
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	6812      	ldr	r2, [r2, #0]
 8007468:	4611      	mov	r1, r2
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	01d2      	lsls	r2, r2, #7
 800746e:	440a      	add	r2, r1
 8007470:	3284      	adds	r2, #132	; 0x84
 8007472:	f023 0307 	bic.w	r3, r3, #7
 8007476:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	461a      	mov	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	01db      	lsls	r3, r3, #7
 8007482:	4413      	add	r3, r2
 8007484:	3384      	adds	r3, #132	; 0x84
 8007486:	461a      	mov	r2, r3
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007494:	021b      	lsls	r3, r3, #8
 8007496:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800749e:	041b      	lsls	r3, r3, #16
 80074a0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	061b      	lsls	r3, r3, #24
 80074a8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	01db      	lsls	r3, r3, #7
 80074b4:	4413      	add	r3, r2
 80074b6:	3384      	adds	r3, #132	; 0x84
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	01db      	lsls	r3, r3, #7
 80074c4:	4413      	add	r3, r2
 80074c6:	3384      	adds	r3, #132	; 0x84
 80074c8:	461a      	mov	r2, r3
 80074ca:	2300      	movs	r3, #0
 80074cc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80074d4:	461a      	mov	r2, r3
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	431a      	orrs	r2, r3
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	431a      	orrs	r2, r3
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4619      	mov	r1, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	01db      	lsls	r3, r3, #7
 80074e8:	440b      	add	r3, r1
 80074ea:	3384      	adds	r3, #132	; 0x84
 80074ec:	4619      	mov	r1, r3
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	461a      	mov	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	01db      	lsls	r3, r3, #7
 80074fe:	4413      	add	r3, r2
 8007500:	3384      	adds	r3, #132	; 0x84
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	6812      	ldr	r2, [r2, #0]
 8007508:	4611      	mov	r1, r2
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	01d2      	lsls	r2, r2, #7
 800750e:	440a      	add	r2, r1
 8007510:	3284      	adds	r2, #132	; 0x84
 8007512:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007516:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	461a      	mov	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	01db      	lsls	r3, r3, #7
 8007522:	4413      	add	r3, r2
 8007524:	3384      	adds	r3, #132	; 0x84
 8007526:	461a      	mov	r2, r3
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	461a      	mov	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	01db      	lsls	r3, r3, #7
 8007538:	4413      	add	r3, r2
 800753a:	3384      	adds	r3, #132	; 0x84
 800753c:	69da      	ldr	r2, [r3, #28]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4619      	mov	r1, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	01db      	lsls	r3, r3, #7
 8007548:	440b      	add	r3, r1
 800754a:	3384      	adds	r3, #132	; 0x84
 800754c:	4619      	mov	r1, r3
 800754e:	4b58      	ldr	r3, [pc, #352]	; (80076b0 <LTDC_SetConfig+0x32c>)
 8007550:	4013      	ands	r3, r2
 8007552:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	69da      	ldr	r2, [r3, #28]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	68f9      	ldr	r1, [r7, #12]
 800755e:	6809      	ldr	r1, [r1, #0]
 8007560:	4608      	mov	r0, r1
 8007562:	6879      	ldr	r1, [r7, #4]
 8007564:	01c9      	lsls	r1, r1, #7
 8007566:	4401      	add	r1, r0
 8007568:	3184      	adds	r1, #132	; 0x84
 800756a:	4313      	orrs	r3, r2
 800756c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	461a      	mov	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	01db      	lsls	r3, r3, #7
 8007578:	4413      	add	r3, r2
 800757a:	3384      	adds	r3, #132	; 0x84
 800757c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	461a      	mov	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	01db      	lsls	r3, r3, #7
 8007588:	4413      	add	r3, r2
 800758a:	3384      	adds	r3, #132	; 0x84
 800758c:	461a      	mov	r2, r3
 800758e:	2300      	movs	r3, #0
 8007590:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	461a      	mov	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	01db      	lsls	r3, r3, #7
 800759c:	4413      	add	r3, r2
 800759e:	3384      	adds	r3, #132	; 0x84
 80075a0:	461a      	mov	r2, r3
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d102      	bne.n	80075b6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80075b0:	2304      	movs	r3, #4
 80075b2:	61fb      	str	r3, [r7, #28]
 80075b4:	e01b      	b.n	80075ee <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d102      	bne.n	80075c4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80075be:	2303      	movs	r3, #3
 80075c0:	61fb      	str	r3, [r7, #28]
 80075c2:	e014      	b.n	80075ee <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	2b04      	cmp	r3, #4
 80075ca:	d00b      	beq.n	80075e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d007      	beq.n	80075e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80075d8:	2b03      	cmp	r3, #3
 80075da:	d003      	beq.n	80075e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80075e0:	2b07      	cmp	r3, #7
 80075e2:	d102      	bne.n	80075ea <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80075e4:	2302      	movs	r3, #2
 80075e6:	61fb      	str	r3, [r7, #28]
 80075e8:	e001      	b.n	80075ee <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80075ea:	2301      	movs	r3, #1
 80075ec:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	01db      	lsls	r3, r3, #7
 80075f8:	4413      	add	r3, r2
 80075fa:	3384      	adds	r3, #132	; 0x84
 80075fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	6812      	ldr	r2, [r2, #0]
 8007602:	4611      	mov	r1, r2
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	01d2      	lsls	r2, r2, #7
 8007608:	440a      	add	r2, r1
 800760a:	3284      	adds	r2, #132	; 0x84
 800760c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007610:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007616:	69fa      	ldr	r2, [r7, #28]
 8007618:	fb02 f303 	mul.w	r3, r2, r3
 800761c:	041a      	lsls	r2, r3, #16
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	6859      	ldr	r1, [r3, #4]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	1acb      	subs	r3, r1, r3
 8007628:	69f9      	ldr	r1, [r7, #28]
 800762a:	fb01 f303 	mul.w	r3, r1, r3
 800762e:	3307      	adds	r3, #7
 8007630:	68f9      	ldr	r1, [r7, #12]
 8007632:	6809      	ldr	r1, [r1, #0]
 8007634:	4608      	mov	r0, r1
 8007636:	6879      	ldr	r1, [r7, #4]
 8007638:	01c9      	lsls	r1, r1, #7
 800763a:	4401      	add	r1, r0
 800763c:	3184      	adds	r1, #132	; 0x84
 800763e:	4313      	orrs	r3, r2
 8007640:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	01db      	lsls	r3, r3, #7
 800764c:	4413      	add	r3, r2
 800764e:	3384      	adds	r3, #132	; 0x84
 8007650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4619      	mov	r1, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	01db      	lsls	r3, r3, #7
 800765c:	440b      	add	r3, r1
 800765e:	3384      	adds	r3, #132	; 0x84
 8007660:	4619      	mov	r1, r3
 8007662:	4b14      	ldr	r3, [pc, #80]	; (80076b4 <LTDC_SetConfig+0x330>)
 8007664:	4013      	ands	r3, r2
 8007666:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	01db      	lsls	r3, r3, #7
 8007672:	4413      	add	r3, r2
 8007674:	3384      	adds	r3, #132	; 0x84
 8007676:	461a      	mov	r2, r3
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	461a      	mov	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	01db      	lsls	r3, r3, #7
 8007688:	4413      	add	r3, r2
 800768a:	3384      	adds	r3, #132	; 0x84
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	6812      	ldr	r2, [r2, #0]
 8007692:	4611      	mov	r1, r2
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	01d2      	lsls	r2, r2, #7
 8007698:	440a      	add	r2, r1
 800769a:	3284      	adds	r2, #132	; 0x84
 800769c:	f043 0301 	orr.w	r3, r3, #1
 80076a0:	6013      	str	r3, [r2, #0]
}
 80076a2:	bf00      	nop
 80076a4:	3724      	adds	r7, #36	; 0x24
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	fffff8f8 	.word	0xfffff8f8
 80076b4:	fffff800 	.word	0xfffff800

080076b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80076b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ba:	b08f      	sub	sp, #60	; 0x3c
 80076bc:	af0a      	add	r7, sp, #40	; 0x28
 80076be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e116      	b.n	80078f8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d106      	bne.n	80076ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7fb ffd3 	bl	8003690 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2203      	movs	r2, #3
 80076ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d102      	bne.n	8007704 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4618      	mov	r0, r3
 800770a:	f005 ff15 	bl	800d538 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	603b      	str	r3, [r7, #0]
 8007714:	687e      	ldr	r6, [r7, #4]
 8007716:	466d      	mov	r5, sp
 8007718:	f106 0410 	add.w	r4, r6, #16
 800771c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800771e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007724:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007728:	e885 0003 	stmia.w	r5, {r0, r1}
 800772c:	1d33      	adds	r3, r6, #4
 800772e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007730:	6838      	ldr	r0, [r7, #0]
 8007732:	f005 fe93 	bl	800d45c <USB_CoreInit>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d005      	beq.n	8007748 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2202      	movs	r2, #2
 8007740:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e0d7      	b.n	80078f8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2100      	movs	r1, #0
 800774e:	4618      	mov	r0, r3
 8007750:	f005 ff03 	bl	800d55a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007754:	2300      	movs	r3, #0
 8007756:	73fb      	strb	r3, [r7, #15]
 8007758:	e04a      	b.n	80077f0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800775a:	7bfa      	ldrb	r2, [r7, #15]
 800775c:	6879      	ldr	r1, [r7, #4]
 800775e:	4613      	mov	r3, r2
 8007760:	00db      	lsls	r3, r3, #3
 8007762:	4413      	add	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	440b      	add	r3, r1
 8007768:	333d      	adds	r3, #61	; 0x3d
 800776a:	2201      	movs	r2, #1
 800776c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800776e:	7bfa      	ldrb	r2, [r7, #15]
 8007770:	6879      	ldr	r1, [r7, #4]
 8007772:	4613      	mov	r3, r2
 8007774:	00db      	lsls	r3, r3, #3
 8007776:	4413      	add	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	440b      	add	r3, r1
 800777c:	333c      	adds	r3, #60	; 0x3c
 800777e:	7bfa      	ldrb	r2, [r7, #15]
 8007780:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007782:	7bfa      	ldrb	r2, [r7, #15]
 8007784:	7bfb      	ldrb	r3, [r7, #15]
 8007786:	b298      	uxth	r0, r3
 8007788:	6879      	ldr	r1, [r7, #4]
 800778a:	4613      	mov	r3, r2
 800778c:	00db      	lsls	r3, r3, #3
 800778e:	4413      	add	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	440b      	add	r3, r1
 8007794:	3356      	adds	r3, #86	; 0x56
 8007796:	4602      	mov	r2, r0
 8007798:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800779a:	7bfa      	ldrb	r2, [r7, #15]
 800779c:	6879      	ldr	r1, [r7, #4]
 800779e:	4613      	mov	r3, r2
 80077a0:	00db      	lsls	r3, r3, #3
 80077a2:	4413      	add	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	440b      	add	r3, r1
 80077a8:	3340      	adds	r3, #64	; 0x40
 80077aa:	2200      	movs	r2, #0
 80077ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80077ae:	7bfa      	ldrb	r2, [r7, #15]
 80077b0:	6879      	ldr	r1, [r7, #4]
 80077b2:	4613      	mov	r3, r2
 80077b4:	00db      	lsls	r3, r3, #3
 80077b6:	4413      	add	r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	440b      	add	r3, r1
 80077bc:	3344      	adds	r3, #68	; 0x44
 80077be:	2200      	movs	r2, #0
 80077c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80077c2:	7bfa      	ldrb	r2, [r7, #15]
 80077c4:	6879      	ldr	r1, [r7, #4]
 80077c6:	4613      	mov	r3, r2
 80077c8:	00db      	lsls	r3, r3, #3
 80077ca:	4413      	add	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	440b      	add	r3, r1
 80077d0:	3348      	adds	r3, #72	; 0x48
 80077d2:	2200      	movs	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80077d6:	7bfa      	ldrb	r2, [r7, #15]
 80077d8:	6879      	ldr	r1, [r7, #4]
 80077da:	4613      	mov	r3, r2
 80077dc:	00db      	lsls	r3, r3, #3
 80077de:	4413      	add	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	440b      	add	r3, r1
 80077e4:	334c      	adds	r3, #76	; 0x4c
 80077e6:	2200      	movs	r2, #0
 80077e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
 80077ec:	3301      	adds	r3, #1
 80077ee:	73fb      	strb	r3, [r7, #15]
 80077f0:	7bfa      	ldrb	r2, [r7, #15]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d3af      	bcc.n	800775a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077fa:	2300      	movs	r3, #0
 80077fc:	73fb      	strb	r3, [r7, #15]
 80077fe:	e044      	b.n	800788a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007800:	7bfa      	ldrb	r2, [r7, #15]
 8007802:	6879      	ldr	r1, [r7, #4]
 8007804:	4613      	mov	r3, r2
 8007806:	00db      	lsls	r3, r3, #3
 8007808:	4413      	add	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	440b      	add	r3, r1
 800780e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007812:	2200      	movs	r2, #0
 8007814:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007816:	7bfa      	ldrb	r2, [r7, #15]
 8007818:	6879      	ldr	r1, [r7, #4]
 800781a:	4613      	mov	r3, r2
 800781c:	00db      	lsls	r3, r3, #3
 800781e:	4413      	add	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	440b      	add	r3, r1
 8007824:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007828:	7bfa      	ldrb	r2, [r7, #15]
 800782a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800782c:	7bfa      	ldrb	r2, [r7, #15]
 800782e:	6879      	ldr	r1, [r7, #4]
 8007830:	4613      	mov	r3, r2
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	4413      	add	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	440b      	add	r3, r1
 800783a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800783e:	2200      	movs	r2, #0
 8007840:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007842:	7bfa      	ldrb	r2, [r7, #15]
 8007844:	6879      	ldr	r1, [r7, #4]
 8007846:	4613      	mov	r3, r2
 8007848:	00db      	lsls	r3, r3, #3
 800784a:	4413      	add	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	440b      	add	r3, r1
 8007850:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8007854:	2200      	movs	r2, #0
 8007856:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007858:	7bfa      	ldrb	r2, [r7, #15]
 800785a:	6879      	ldr	r1, [r7, #4]
 800785c:	4613      	mov	r3, r2
 800785e:	00db      	lsls	r3, r3, #3
 8007860:	4413      	add	r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	440b      	add	r3, r1
 8007866:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800786a:	2200      	movs	r2, #0
 800786c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800786e:	7bfa      	ldrb	r2, [r7, #15]
 8007870:	6879      	ldr	r1, [r7, #4]
 8007872:	4613      	mov	r3, r2
 8007874:	00db      	lsls	r3, r3, #3
 8007876:	4413      	add	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	440b      	add	r3, r1
 800787c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007880:	2200      	movs	r2, #0
 8007882:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	3301      	adds	r3, #1
 8007888:	73fb      	strb	r3, [r7, #15]
 800788a:	7bfa      	ldrb	r2, [r7, #15]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	429a      	cmp	r2, r3
 8007892:	d3b5      	bcc.n	8007800 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	603b      	str	r3, [r7, #0]
 800789a:	687e      	ldr	r6, [r7, #4]
 800789c:	466d      	mov	r5, sp
 800789e:	f106 0410 	add.w	r4, r6, #16
 80078a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80078ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80078b2:	1d33      	adds	r3, r6, #4
 80078b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078b6:	6838      	ldr	r0, [r7, #0]
 80078b8:	f005 fe9c 	bl	800d5f4 <USB_DevInit>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d005      	beq.n	80078ce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2202      	movs	r2, #2
 80078c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e014      	b.n	80078f8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d102      	bne.n	80078ec <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f80a 	bl	8007900 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f006 f85a 	bl	800d9aa <USB_DevDisconnect>

  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3714      	adds	r7, #20
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007900 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800792e:	4b05      	ldr	r3, [pc, #20]	; (8007944 <HAL_PCDEx_ActivateLPM+0x44>)
 8007930:	4313      	orrs	r3, r2
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3714      	adds	r7, #20
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr
 8007944:	10000003 	.word	0x10000003

08007948 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007950:	4b19      	ldr	r3, [pc, #100]	; (80079b8 <HAL_PWREx_ConfigSupply+0x70>)
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	f003 0304 	and.w	r3, r3, #4
 8007958:	2b04      	cmp	r3, #4
 800795a:	d00a      	beq.n	8007972 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800795c:	4b16      	ldr	r3, [pc, #88]	; (80079b8 <HAL_PWREx_ConfigSupply+0x70>)
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	f003 0307 	and.w	r3, r3, #7
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	429a      	cmp	r2, r3
 8007968:	d001      	beq.n	800796e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e01f      	b.n	80079ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	e01d      	b.n	80079ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007972:	4b11      	ldr	r3, [pc, #68]	; (80079b8 <HAL_PWREx_ConfigSupply+0x70>)
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	f023 0207 	bic.w	r2, r3, #7
 800797a:	490f      	ldr	r1, [pc, #60]	; (80079b8 <HAL_PWREx_ConfigSupply+0x70>)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4313      	orrs	r3, r2
 8007980:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007982:	f7fc fa03 	bl	8003d8c <HAL_GetTick>
 8007986:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007988:	e009      	b.n	800799e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800798a:	f7fc f9ff 	bl	8003d8c <HAL_GetTick>
 800798e:	4602      	mov	r2, r0
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007998:	d901      	bls.n	800799e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e007      	b.n	80079ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800799e:	4b06      	ldr	r3, [pc, #24]	; (80079b8 <HAL_PWREx_ConfigSupply+0x70>)
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079aa:	d1ee      	bne.n	800798a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	58024800 	.word	0x58024800

080079bc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80079bc:	b480      	push	{r7}
 80079be:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80079c0:	4b05      	ldr	r3, [pc, #20]	; (80079d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	4a04      	ldr	r2, [pc, #16]	; (80079d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80079c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079ca:	60d3      	str	r3, [r2, #12]
}
 80079cc:	bf00      	nop
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	58024800 	.word	0x58024800

080079dc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af02      	add	r7, sp, #8
 80079e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80079e4:	f7fc f9d2 	bl	8003d8c <HAL_GetTick>
 80079e8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e05f      	b.n	8007ab4 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d107      	bne.n	8007a10 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7fb fc13 	bl	800322c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007a06:	f241 3188 	movw	r1, #5000	; 0x1388
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f85a 	bl	8007ac4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	021a      	lsls	r2, r3, #8
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	430a      	orrs	r2, r1
 8007a28:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	2120      	movs	r1, #32
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f852 	bl	8007ae0 <QSPI_WaitFlagStateUntilTimeout>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007a40:	7afb      	ldrb	r3, [r7, #11]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d135      	bne.n	8007ab2 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	4b1b      	ldr	r3, [pc, #108]	; (8007abc <HAL_QSPI_Init+0xe0>)
 8007a4e:	4013      	ands	r3, r2
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	6852      	ldr	r2, [r2, #4]
 8007a54:	0611      	lsls	r1, r2, #24
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	68d2      	ldr	r2, [r2, #12]
 8007a5a:	4311      	orrs	r1, r2
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	69d2      	ldr	r2, [r2, #28]
 8007a60:	4311      	orrs	r1, r2
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	6a12      	ldr	r2, [r2, #32]
 8007a66:	4311      	orrs	r1, r2
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	6812      	ldr	r2, [r2, #0]
 8007a6c:	430b      	orrs	r3, r1
 8007a6e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	4b12      	ldr	r3, [pc, #72]	; (8007ac0 <HAL_QSPI_Init+0xe4>)
 8007a78:	4013      	ands	r3, r2
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	6912      	ldr	r2, [r2, #16]
 8007a7e:	0411      	lsls	r1, r2, #16
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	6952      	ldr	r2, [r2, #20]
 8007a84:	4311      	orrs	r1, r2
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	6992      	ldr	r2, [r2, #24]
 8007a8a:	4311      	orrs	r1, r2
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	6812      	ldr	r2, [r2, #0]
 8007a90:	430b      	orrs	r3, r1
 8007a92:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f042 0201 	orr.w	r2, r2, #1
 8007aa2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8007ab2:	7afb      	ldrb	r3, [r7, #11]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	00ffff2f 	.word	0x00ffff2f
 8007ac0:	ffe0f8fe 	.word	0xffe0f8fe

08007ac4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	683a      	ldr	r2, [r7, #0]
 8007ad2:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	603b      	str	r3, [r7, #0]
 8007aec:	4613      	mov	r3, r2
 8007aee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007af0:	e01a      	b.n	8007b28 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af8:	d016      	beq.n	8007b28 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007afa:	f7fc f947 	bl	8003d8c <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d302      	bcc.n	8007b10 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10b      	bne.n	8007b28 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2204      	movs	r2, #4
 8007b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b1c:	f043 0201 	orr.w	r2, r3, #1
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e00e      	b.n	8007b46 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	689a      	ldr	r2, [r3, #8]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	4013      	ands	r3, r2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	bf14      	ite	ne
 8007b36:	2301      	movne	r3, #1
 8007b38:	2300      	moveq	r3, #0
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	79fb      	ldrb	r3, [r7, #7]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d1d6      	bne.n	8007af2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
	...

08007b50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b08c      	sub	sp, #48	; 0x30
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d102      	bne.n	8007b64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	f000 bc48 	b.w	80083f4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 8088 	beq.w	8007c82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b72:	4b99      	ldr	r3, [pc, #612]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b7c:	4b96      	ldr	r3, [pc, #600]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b80:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b84:	2b10      	cmp	r3, #16
 8007b86:	d007      	beq.n	8007b98 <HAL_RCC_OscConfig+0x48>
 8007b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8a:	2b18      	cmp	r3, #24
 8007b8c:	d111      	bne.n	8007bb2 <HAL_RCC_OscConfig+0x62>
 8007b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b90:	f003 0303 	and.w	r3, r3, #3
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d10c      	bne.n	8007bb2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b98:	4b8f      	ldr	r3, [pc, #572]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d06d      	beq.n	8007c80 <HAL_RCC_OscConfig+0x130>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d169      	bne.n	8007c80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	f000 bc21 	b.w	80083f4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bba:	d106      	bne.n	8007bca <HAL_RCC_OscConfig+0x7a>
 8007bbc:	4b86      	ldr	r3, [pc, #536]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a85      	ldr	r2, [pc, #532]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	e02e      	b.n	8007c28 <HAL_RCC_OscConfig+0xd8>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10c      	bne.n	8007bec <HAL_RCC_OscConfig+0x9c>
 8007bd2:	4b81      	ldr	r3, [pc, #516]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a80      	ldr	r2, [pc, #512]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bdc:	6013      	str	r3, [r2, #0]
 8007bde:	4b7e      	ldr	r3, [pc, #504]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a7d      	ldr	r2, [pc, #500]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	e01d      	b.n	8007c28 <HAL_RCC_OscConfig+0xd8>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bf4:	d10c      	bne.n	8007c10 <HAL_RCC_OscConfig+0xc0>
 8007bf6:	4b78      	ldr	r3, [pc, #480]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a77      	ldr	r2, [pc, #476]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c00:	6013      	str	r3, [r2, #0]
 8007c02:	4b75      	ldr	r3, [pc, #468]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a74      	ldr	r2, [pc, #464]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c0c:	6013      	str	r3, [r2, #0]
 8007c0e:	e00b      	b.n	8007c28 <HAL_RCC_OscConfig+0xd8>
 8007c10:	4b71      	ldr	r3, [pc, #452]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a70      	ldr	r2, [pc, #448]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c1a:	6013      	str	r3, [r2, #0]
 8007c1c:	4b6e      	ldr	r3, [pc, #440]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a6d      	ldr	r2, [pc, #436]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d013      	beq.n	8007c58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c30:	f7fc f8ac 	bl	8003d8c <HAL_GetTick>
 8007c34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c36:	e008      	b.n	8007c4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c38:	f7fc f8a8 	bl	8003d8c <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	2b64      	cmp	r3, #100	; 0x64
 8007c44:	d901      	bls.n	8007c4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e3d4      	b.n	80083f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c4a:	4b63      	ldr	r3, [pc, #396]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d0f0      	beq.n	8007c38 <HAL_RCC_OscConfig+0xe8>
 8007c56:	e014      	b.n	8007c82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c58:	f7fc f898 	bl	8003d8c <HAL_GetTick>
 8007c5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007c5e:	e008      	b.n	8007c72 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c60:	f7fc f894 	bl	8003d8c <HAL_GetTick>
 8007c64:	4602      	mov	r2, r0
 8007c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	2b64      	cmp	r3, #100	; 0x64
 8007c6c:	d901      	bls.n	8007c72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	e3c0      	b.n	80083f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007c72:	4b59      	ldr	r3, [pc, #356]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1f0      	bne.n	8007c60 <HAL_RCC_OscConfig+0x110>
 8007c7e:	e000      	b.n	8007c82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0302 	and.w	r3, r3, #2
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 80ca 	beq.w	8007e24 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c90:	4b51      	ldr	r3, [pc, #324]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c98:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c9a:	4b4f      	ldr	r3, [pc, #316]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d007      	beq.n	8007cb6 <HAL_RCC_OscConfig+0x166>
 8007ca6:	6a3b      	ldr	r3, [r7, #32]
 8007ca8:	2b18      	cmp	r3, #24
 8007caa:	d156      	bne.n	8007d5a <HAL_RCC_OscConfig+0x20a>
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	f003 0303 	and.w	r3, r3, #3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d151      	bne.n	8007d5a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007cb6:	4b48      	ldr	r3, [pc, #288]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0304 	and.w	r3, r3, #4
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d005      	beq.n	8007cce <HAL_RCC_OscConfig+0x17e>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e392      	b.n	80083f4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007cce:	4b42      	ldr	r3, [pc, #264]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f023 0219 	bic.w	r2, r3, #25
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	493f      	ldr	r1, [pc, #252]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ce0:	f7fc f854 	bl	8003d8c <HAL_GetTick>
 8007ce4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ce6:	e008      	b.n	8007cfa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ce8:	f7fc f850 	bl	8003d8c <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d901      	bls.n	8007cfa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e37c      	b.n	80083f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007cfa:	4b37      	ldr	r3, [pc, #220]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 0304 	and.w	r3, r3, #4
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d0f0      	beq.n	8007ce8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d06:	f7fc f871 	bl	8003dec <HAL_GetREVID>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d817      	bhi.n	8007d44 <HAL_RCC_OscConfig+0x1f4>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	2b40      	cmp	r3, #64	; 0x40
 8007d1a:	d108      	bne.n	8007d2e <HAL_RCC_OscConfig+0x1de>
 8007d1c:	4b2e      	ldr	r3, [pc, #184]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007d24:	4a2c      	ldr	r2, [pc, #176]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d2a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d2c:	e07a      	b.n	8007e24 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d2e:	4b2a      	ldr	r3, [pc, #168]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	031b      	lsls	r3, r3, #12
 8007d3c:	4926      	ldr	r1, [pc, #152]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d42:	e06f      	b.n	8007e24 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d44:	4b24      	ldr	r3, [pc, #144]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	061b      	lsls	r3, r3, #24
 8007d52:	4921      	ldr	r1, [pc, #132]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d58:	e064      	b.n	8007e24 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d047      	beq.n	8007df2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007d62:	4b1d      	ldr	r3, [pc, #116]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f023 0219 	bic.w	r2, r3, #25
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	491a      	ldr	r1, [pc, #104]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007d70:	4313      	orrs	r3, r2
 8007d72:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d74:	f7fc f80a 	bl	8003d8c <HAL_GetTick>
 8007d78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d7a:	e008      	b.n	8007d8e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d7c:	f7fc f806 	bl	8003d8c <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d901      	bls.n	8007d8e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e332      	b.n	80083f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d8e:	4b12      	ldr	r3, [pc, #72]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0304 	and.w	r3, r3, #4
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d0f0      	beq.n	8007d7c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d9a:	f7fc f827 	bl	8003dec <HAL_GetREVID>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	f241 0203 	movw	r2, #4099	; 0x1003
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d819      	bhi.n	8007ddc <HAL_RCC_OscConfig+0x28c>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	2b40      	cmp	r3, #64	; 0x40
 8007dae:	d108      	bne.n	8007dc2 <HAL_RCC_OscConfig+0x272>
 8007db0:	4b09      	ldr	r3, [pc, #36]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007db8:	4a07      	ldr	r2, [pc, #28]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dbe:	6053      	str	r3, [r2, #4]
 8007dc0:	e030      	b.n	8007e24 <HAL_RCC_OscConfig+0x2d4>
 8007dc2:	4b05      	ldr	r3, [pc, #20]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	031b      	lsls	r3, r3, #12
 8007dd0:	4901      	ldr	r1, [pc, #4]	; (8007dd8 <HAL_RCC_OscConfig+0x288>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	604b      	str	r3, [r1, #4]
 8007dd6:	e025      	b.n	8007e24 <HAL_RCC_OscConfig+0x2d4>
 8007dd8:	58024400 	.word	0x58024400
 8007ddc:	4b9a      	ldr	r3, [pc, #616]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	061b      	lsls	r3, r3, #24
 8007dea:	4997      	ldr	r1, [pc, #604]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	604b      	str	r3, [r1, #4]
 8007df0:	e018      	b.n	8007e24 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007df2:	4b95      	ldr	r3, [pc, #596]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a94      	ldr	r2, [pc, #592]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007df8:	f023 0301 	bic.w	r3, r3, #1
 8007dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dfe:	f7fb ffc5 	bl	8003d8c <HAL_GetTick>
 8007e02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007e04:	e008      	b.n	8007e18 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e06:	f7fb ffc1 	bl	8003d8c <HAL_GetTick>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d901      	bls.n	8007e18 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e2ed      	b.n	80083f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007e18:	4b8b      	ldr	r3, [pc, #556]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0304 	and.w	r3, r3, #4
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1f0      	bne.n	8007e06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0310 	and.w	r3, r3, #16
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f000 80a9 	beq.w	8007f84 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e32:	4b85      	ldr	r3, [pc, #532]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e3a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e3c:	4b82      	ldr	r3, [pc, #520]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e40:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	d007      	beq.n	8007e58 <HAL_RCC_OscConfig+0x308>
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	2b18      	cmp	r3, #24
 8007e4c:	d13a      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x374>
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f003 0303 	and.w	r3, r3, #3
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d135      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e58:	4b7b      	ldr	r3, [pc, #492]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d005      	beq.n	8007e70 <HAL_RCC_OscConfig+0x320>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	2b80      	cmp	r3, #128	; 0x80
 8007e6a:	d001      	beq.n	8007e70 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e2c1      	b.n	80083f4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e70:	f7fb ffbc 	bl	8003dec <HAL_GetREVID>
 8007e74:	4603      	mov	r3, r0
 8007e76:	f241 0203 	movw	r2, #4099	; 0x1003
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d817      	bhi.n	8007eae <HAL_RCC_OscConfig+0x35e>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	2b20      	cmp	r3, #32
 8007e84:	d108      	bne.n	8007e98 <HAL_RCC_OscConfig+0x348>
 8007e86:	4b70      	ldr	r3, [pc, #448]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007e8e:	4a6e      	ldr	r2, [pc, #440]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007e90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e94:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e96:	e075      	b.n	8007f84 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e98:	4b6b      	ldr	r3, [pc, #428]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a1b      	ldr	r3, [r3, #32]
 8007ea4:	069b      	lsls	r3, r3, #26
 8007ea6:	4968      	ldr	r1, [pc, #416]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007eac:	e06a      	b.n	8007f84 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007eae:	4b66      	ldr	r3, [pc, #408]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	061b      	lsls	r3, r3, #24
 8007ebc:	4962      	ldr	r1, [pc, #392]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ec2:	e05f      	b.n	8007f84 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	69db      	ldr	r3, [r3, #28]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d042      	beq.n	8007f52 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007ecc:	4b5e      	ldr	r3, [pc, #376]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a5d      	ldr	r2, [pc, #372]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed8:	f7fb ff58 	bl	8003d8c <HAL_GetTick>
 8007edc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ede:	e008      	b.n	8007ef2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007ee0:	f7fb ff54 	bl	8003d8c <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d901      	bls.n	8007ef2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e280      	b.n	80083f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ef2:	4b55      	ldr	r3, [pc, #340]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d0f0      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007efe:	f7fb ff75 	bl	8003dec <HAL_GetREVID>
 8007f02:	4603      	mov	r3, r0
 8007f04:	f241 0203 	movw	r2, #4099	; 0x1003
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d817      	bhi.n	8007f3c <HAL_RCC_OscConfig+0x3ec>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a1b      	ldr	r3, [r3, #32]
 8007f10:	2b20      	cmp	r3, #32
 8007f12:	d108      	bne.n	8007f26 <HAL_RCC_OscConfig+0x3d6>
 8007f14:	4b4c      	ldr	r3, [pc, #304]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007f1c:	4a4a      	ldr	r2, [pc, #296]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007f1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f22:	6053      	str	r3, [r2, #4]
 8007f24:	e02e      	b.n	8007f84 <HAL_RCC_OscConfig+0x434>
 8007f26:	4b48      	ldr	r3, [pc, #288]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	069b      	lsls	r3, r3, #26
 8007f34:	4944      	ldr	r1, [pc, #272]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	604b      	str	r3, [r1, #4]
 8007f3a:	e023      	b.n	8007f84 <HAL_RCC_OscConfig+0x434>
 8007f3c:	4b42      	ldr	r3, [pc, #264]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a1b      	ldr	r3, [r3, #32]
 8007f48:	061b      	lsls	r3, r3, #24
 8007f4a:	493f      	ldr	r1, [pc, #252]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	60cb      	str	r3, [r1, #12]
 8007f50:	e018      	b.n	8007f84 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007f52:	4b3d      	ldr	r3, [pc, #244]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a3c      	ldr	r2, [pc, #240]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007f58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f5e:	f7fb ff15 	bl	8003d8c <HAL_GetTick>
 8007f62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007f64:	e008      	b.n	8007f78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007f66:	f7fb ff11 	bl	8003d8c <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d901      	bls.n	8007f78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e23d      	b.n	80083f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007f78:	4b33      	ldr	r3, [pc, #204]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d1f0      	bne.n	8007f66 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0308 	and.w	r3, r3, #8
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d036      	beq.n	8007ffe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d019      	beq.n	8007fcc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f98:	4b2b      	ldr	r3, [pc, #172]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f9c:	4a2a      	ldr	r2, [pc, #168]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007f9e:	f043 0301 	orr.w	r3, r3, #1
 8007fa2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fa4:	f7fb fef2 	bl	8003d8c <HAL_GetTick>
 8007fa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007faa:	e008      	b.n	8007fbe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007fac:	f7fb feee 	bl	8003d8c <HAL_GetTick>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d901      	bls.n	8007fbe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e21a      	b.n	80083f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007fbe:	4b22      	ldr	r3, [pc, #136]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fc2:	f003 0302 	and.w	r3, r3, #2
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d0f0      	beq.n	8007fac <HAL_RCC_OscConfig+0x45c>
 8007fca:	e018      	b.n	8007ffe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007fcc:	4b1e      	ldr	r3, [pc, #120]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fd0:	4a1d      	ldr	r2, [pc, #116]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007fd2:	f023 0301 	bic.w	r3, r3, #1
 8007fd6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fd8:	f7fb fed8 	bl	8003d8c <HAL_GetTick>
 8007fdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007fde:	e008      	b.n	8007ff2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007fe0:	f7fb fed4 	bl	8003d8c <HAL_GetTick>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d901      	bls.n	8007ff2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e200      	b.n	80083f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ff2:	4b15      	ldr	r3, [pc, #84]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8007ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ff6:	f003 0302 	and.w	r3, r3, #2
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1f0      	bne.n	8007fe0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 0320 	and.w	r3, r3, #32
 8008006:	2b00      	cmp	r3, #0
 8008008:	d039      	beq.n	800807e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d01c      	beq.n	800804c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008012:	4b0d      	ldr	r3, [pc, #52]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a0c      	ldr	r2, [pc, #48]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 8008018:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800801c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800801e:	f7fb feb5 	bl	8003d8c <HAL_GetTick>
 8008022:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008024:	e008      	b.n	8008038 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008026:	f7fb feb1 	bl	8003d8c <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	2b02      	cmp	r3, #2
 8008032:	d901      	bls.n	8008038 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e1dd      	b.n	80083f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008038:	4b03      	ldr	r3, [pc, #12]	; (8008048 <HAL_RCC_OscConfig+0x4f8>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0f0      	beq.n	8008026 <HAL_RCC_OscConfig+0x4d6>
 8008044:	e01b      	b.n	800807e <HAL_RCC_OscConfig+0x52e>
 8008046:	bf00      	nop
 8008048:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800804c:	4b9b      	ldr	r3, [pc, #620]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a9a      	ldr	r2, [pc, #616]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 8008052:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008056:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008058:	f7fb fe98 	bl	8003d8c <HAL_GetTick>
 800805c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800805e:	e008      	b.n	8008072 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008060:	f7fb fe94 	bl	8003d8c <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	2b02      	cmp	r3, #2
 800806c:	d901      	bls.n	8008072 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e1c0      	b.n	80083f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008072:	4b92      	ldr	r3, [pc, #584]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1f0      	bne.n	8008060 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0304 	and.w	r3, r3, #4
 8008086:	2b00      	cmp	r3, #0
 8008088:	f000 8081 	beq.w	800818e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800808c:	4b8c      	ldr	r3, [pc, #560]	; (80082c0 <HAL_RCC_OscConfig+0x770>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a8b      	ldr	r2, [pc, #556]	; (80082c0 <HAL_RCC_OscConfig+0x770>)
 8008092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008096:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008098:	f7fb fe78 	bl	8003d8c <HAL_GetTick>
 800809c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800809e:	e008      	b.n	80080b2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080a0:	f7fb fe74 	bl	8003d8c <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	2b64      	cmp	r3, #100	; 0x64
 80080ac:	d901      	bls.n	80080b2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e1a0      	b.n	80083f4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080b2:	4b83      	ldr	r3, [pc, #524]	; (80082c0 <HAL_RCC_OscConfig+0x770>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d0f0      	beq.n	80080a0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d106      	bne.n	80080d4 <HAL_RCC_OscConfig+0x584>
 80080c6:	4b7d      	ldr	r3, [pc, #500]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 80080c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ca:	4a7c      	ldr	r2, [pc, #496]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 80080cc:	f043 0301 	orr.w	r3, r3, #1
 80080d0:	6713      	str	r3, [r2, #112]	; 0x70
 80080d2:	e02d      	b.n	8008130 <HAL_RCC_OscConfig+0x5e0>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d10c      	bne.n	80080f6 <HAL_RCC_OscConfig+0x5a6>
 80080dc:	4b77      	ldr	r3, [pc, #476]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 80080de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e0:	4a76      	ldr	r2, [pc, #472]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 80080e2:	f023 0301 	bic.w	r3, r3, #1
 80080e6:	6713      	str	r3, [r2, #112]	; 0x70
 80080e8:	4b74      	ldr	r3, [pc, #464]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 80080ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ec:	4a73      	ldr	r2, [pc, #460]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 80080ee:	f023 0304 	bic.w	r3, r3, #4
 80080f2:	6713      	str	r3, [r2, #112]	; 0x70
 80080f4:	e01c      	b.n	8008130 <HAL_RCC_OscConfig+0x5e0>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	2b05      	cmp	r3, #5
 80080fc:	d10c      	bne.n	8008118 <HAL_RCC_OscConfig+0x5c8>
 80080fe:	4b6f      	ldr	r3, [pc, #444]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 8008100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008102:	4a6e      	ldr	r2, [pc, #440]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 8008104:	f043 0304 	orr.w	r3, r3, #4
 8008108:	6713      	str	r3, [r2, #112]	; 0x70
 800810a:	4b6c      	ldr	r3, [pc, #432]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 800810c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800810e:	4a6b      	ldr	r2, [pc, #428]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 8008110:	f043 0301 	orr.w	r3, r3, #1
 8008114:	6713      	str	r3, [r2, #112]	; 0x70
 8008116:	e00b      	b.n	8008130 <HAL_RCC_OscConfig+0x5e0>
 8008118:	4b68      	ldr	r3, [pc, #416]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 800811a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800811c:	4a67      	ldr	r2, [pc, #412]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 800811e:	f023 0301 	bic.w	r3, r3, #1
 8008122:	6713      	str	r3, [r2, #112]	; 0x70
 8008124:	4b65      	ldr	r3, [pc, #404]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 8008126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008128:	4a64      	ldr	r2, [pc, #400]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 800812a:	f023 0304 	bic.w	r3, r3, #4
 800812e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d015      	beq.n	8008164 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008138:	f7fb fe28 	bl	8003d8c <HAL_GetTick>
 800813c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800813e:	e00a      	b.n	8008156 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008140:	f7fb fe24 	bl	8003d8c <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	f241 3288 	movw	r2, #5000	; 0x1388
 800814e:	4293      	cmp	r3, r2
 8008150:	d901      	bls.n	8008156 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e14e      	b.n	80083f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008156:	4b59      	ldr	r3, [pc, #356]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 8008158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800815a:	f003 0302 	and.w	r3, r3, #2
 800815e:	2b00      	cmp	r3, #0
 8008160:	d0ee      	beq.n	8008140 <HAL_RCC_OscConfig+0x5f0>
 8008162:	e014      	b.n	800818e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008164:	f7fb fe12 	bl	8003d8c <HAL_GetTick>
 8008168:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800816a:	e00a      	b.n	8008182 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800816c:	f7fb fe0e 	bl	8003d8c <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	f241 3288 	movw	r2, #5000	; 0x1388
 800817a:	4293      	cmp	r3, r2
 800817c:	d901      	bls.n	8008182 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e138      	b.n	80083f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008182:	4b4e      	ldr	r3, [pc, #312]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 8008184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008186:	f003 0302 	and.w	r3, r3, #2
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1ee      	bne.n	800816c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 812d 	beq.w	80083f2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008198:	4b48      	ldr	r3, [pc, #288]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081a0:	2b18      	cmp	r3, #24
 80081a2:	f000 80bd 	beq.w	8008320 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	f040 809e 	bne.w	80082ec <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081b0:	4b42      	ldr	r3, [pc, #264]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a41      	ldr	r2, [pc, #260]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 80081b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081bc:	f7fb fde6 	bl	8003d8c <HAL_GetTick>
 80081c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081c2:	e008      	b.n	80081d6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081c4:	f7fb fde2 	bl	8003d8c <HAL_GetTick>
 80081c8:	4602      	mov	r2, r0
 80081ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d901      	bls.n	80081d6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80081d2:	2303      	movs	r3, #3
 80081d4:	e10e      	b.n	80083f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081d6:	4b39      	ldr	r3, [pc, #228]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1f0      	bne.n	80081c4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081e2:	4b36      	ldr	r3, [pc, #216]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 80081e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081e6:	4b37      	ldr	r3, [pc, #220]	; (80082c4 <HAL_RCC_OscConfig+0x774>)
 80081e8:	4013      	ands	r3, r2
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80081f2:	0112      	lsls	r2, r2, #4
 80081f4:	430a      	orrs	r2, r1
 80081f6:	4931      	ldr	r1, [pc, #196]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	628b      	str	r3, [r1, #40]	; 0x28
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008200:	3b01      	subs	r3, #1
 8008202:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800820a:	3b01      	subs	r3, #1
 800820c:	025b      	lsls	r3, r3, #9
 800820e:	b29b      	uxth	r3, r3
 8008210:	431a      	orrs	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008216:	3b01      	subs	r3, #1
 8008218:	041b      	lsls	r3, r3, #16
 800821a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800821e:	431a      	orrs	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008224:	3b01      	subs	r3, #1
 8008226:	061b      	lsls	r3, r3, #24
 8008228:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800822c:	4923      	ldr	r1, [pc, #140]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 800822e:	4313      	orrs	r3, r2
 8008230:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008232:	4b22      	ldr	r3, [pc, #136]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 8008234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008236:	4a21      	ldr	r2, [pc, #132]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 8008238:	f023 0301 	bic.w	r3, r3, #1
 800823c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800823e:	4b1f      	ldr	r3, [pc, #124]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 8008240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008242:	4b21      	ldr	r3, [pc, #132]	; (80082c8 <HAL_RCC_OscConfig+0x778>)
 8008244:	4013      	ands	r3, r2
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800824a:	00d2      	lsls	r2, r2, #3
 800824c:	491b      	ldr	r1, [pc, #108]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 800824e:	4313      	orrs	r3, r2
 8008250:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008252:	4b1a      	ldr	r3, [pc, #104]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 8008254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008256:	f023 020c 	bic.w	r2, r3, #12
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825e:	4917      	ldr	r1, [pc, #92]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 8008260:	4313      	orrs	r3, r2
 8008262:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008264:	4b15      	ldr	r3, [pc, #84]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 8008266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008268:	f023 0202 	bic.w	r2, r3, #2
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008270:	4912      	ldr	r1, [pc, #72]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 8008272:	4313      	orrs	r3, r2
 8008274:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008276:	4b11      	ldr	r3, [pc, #68]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 8008278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827a:	4a10      	ldr	r2, [pc, #64]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 800827c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008280:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008282:	4b0e      	ldr	r3, [pc, #56]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 8008284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008286:	4a0d      	ldr	r2, [pc, #52]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 8008288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800828c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800828e:	4b0b      	ldr	r3, [pc, #44]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 8008290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008292:	4a0a      	ldr	r2, [pc, #40]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 8008294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008298:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800829a:	4b08      	ldr	r3, [pc, #32]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 800829c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829e:	4a07      	ldr	r2, [pc, #28]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 80082a0:	f043 0301 	orr.w	r3, r3, #1
 80082a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082a6:	4b05      	ldr	r3, [pc, #20]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a04      	ldr	r2, [pc, #16]	; (80082bc <HAL_RCC_OscConfig+0x76c>)
 80082ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082b2:	f7fb fd6b 	bl	8003d8c <HAL_GetTick>
 80082b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80082b8:	e011      	b.n	80082de <HAL_RCC_OscConfig+0x78e>
 80082ba:	bf00      	nop
 80082bc:	58024400 	.word	0x58024400
 80082c0:	58024800 	.word	0x58024800
 80082c4:	fffffc0c 	.word	0xfffffc0c
 80082c8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082cc:	f7fb fd5e 	bl	8003d8c <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d901      	bls.n	80082de <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80082da:	2303      	movs	r3, #3
 80082dc:	e08a      	b.n	80083f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80082de:	4b47      	ldr	r3, [pc, #284]	; (80083fc <HAL_RCC_OscConfig+0x8ac>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d0f0      	beq.n	80082cc <HAL_RCC_OscConfig+0x77c>
 80082ea:	e082      	b.n	80083f2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082ec:	4b43      	ldr	r3, [pc, #268]	; (80083fc <HAL_RCC_OscConfig+0x8ac>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a42      	ldr	r2, [pc, #264]	; (80083fc <HAL_RCC_OscConfig+0x8ac>)
 80082f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082f8:	f7fb fd48 	bl	8003d8c <HAL_GetTick>
 80082fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082fe:	e008      	b.n	8008312 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008300:	f7fb fd44 	bl	8003d8c <HAL_GetTick>
 8008304:	4602      	mov	r2, r0
 8008306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	2b02      	cmp	r3, #2
 800830c:	d901      	bls.n	8008312 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e070      	b.n	80083f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008312:	4b3a      	ldr	r3, [pc, #232]	; (80083fc <HAL_RCC_OscConfig+0x8ac>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1f0      	bne.n	8008300 <HAL_RCC_OscConfig+0x7b0>
 800831e:	e068      	b.n	80083f2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008320:	4b36      	ldr	r3, [pc, #216]	; (80083fc <HAL_RCC_OscConfig+0x8ac>)
 8008322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008324:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008326:	4b35      	ldr	r3, [pc, #212]	; (80083fc <HAL_RCC_OscConfig+0x8ac>)
 8008328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800832a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008330:	2b01      	cmp	r3, #1
 8008332:	d031      	beq.n	8008398 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	f003 0203 	and.w	r2, r3, #3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800833e:	429a      	cmp	r2, r3
 8008340:	d12a      	bne.n	8008398 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	091b      	lsrs	r3, r3, #4
 8008346:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800834e:	429a      	cmp	r2, r3
 8008350:	d122      	bne.n	8008398 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800835e:	429a      	cmp	r2, r3
 8008360:	d11a      	bne.n	8008398 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	0a5b      	lsrs	r3, r3, #9
 8008366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800836e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008370:	429a      	cmp	r2, r3
 8008372:	d111      	bne.n	8008398 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	0c1b      	lsrs	r3, r3, #16
 8008378:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008380:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008382:	429a      	cmp	r2, r3
 8008384:	d108      	bne.n	8008398 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	0e1b      	lsrs	r3, r3, #24
 800838a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008392:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008394:	429a      	cmp	r2, r3
 8008396:	d001      	beq.n	800839c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e02b      	b.n	80083f4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800839c:	4b17      	ldr	r3, [pc, #92]	; (80083fc <HAL_RCC_OscConfig+0x8ac>)
 800839e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a0:	08db      	lsrs	r3, r3, #3
 80083a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083a6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ac:	693a      	ldr	r2, [r7, #16]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d01f      	beq.n	80083f2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80083b2:	4b12      	ldr	r3, [pc, #72]	; (80083fc <HAL_RCC_OscConfig+0x8ac>)
 80083b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b6:	4a11      	ldr	r2, [pc, #68]	; (80083fc <HAL_RCC_OscConfig+0x8ac>)
 80083b8:	f023 0301 	bic.w	r3, r3, #1
 80083bc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80083be:	f7fb fce5 	bl	8003d8c <HAL_GetTick>
 80083c2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80083c4:	bf00      	nop
 80083c6:	f7fb fce1 	bl	8003d8c <HAL_GetTick>
 80083ca:	4602      	mov	r2, r0
 80083cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d0f9      	beq.n	80083c6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80083d2:	4b0a      	ldr	r3, [pc, #40]	; (80083fc <HAL_RCC_OscConfig+0x8ac>)
 80083d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083d6:	4b0a      	ldr	r3, [pc, #40]	; (8008400 <HAL_RCC_OscConfig+0x8b0>)
 80083d8:	4013      	ands	r3, r2
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80083de:	00d2      	lsls	r2, r2, #3
 80083e0:	4906      	ldr	r1, [pc, #24]	; (80083fc <HAL_RCC_OscConfig+0x8ac>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80083e6:	4b05      	ldr	r3, [pc, #20]	; (80083fc <HAL_RCC_OscConfig+0x8ac>)
 80083e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ea:	4a04      	ldr	r2, [pc, #16]	; (80083fc <HAL_RCC_OscConfig+0x8ac>)
 80083ec:	f043 0301 	orr.w	r3, r3, #1
 80083f0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3730      	adds	r7, #48	; 0x30
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	58024400 	.word	0x58024400
 8008400:	ffff0007 	.word	0xffff0007

08008404 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b086      	sub	sp, #24
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d101      	bne.n	8008418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e19c      	b.n	8008752 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008418:	4b8a      	ldr	r3, [pc, #552]	; (8008644 <HAL_RCC_ClockConfig+0x240>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 030f 	and.w	r3, r3, #15
 8008420:	683a      	ldr	r2, [r7, #0]
 8008422:	429a      	cmp	r2, r3
 8008424:	d910      	bls.n	8008448 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008426:	4b87      	ldr	r3, [pc, #540]	; (8008644 <HAL_RCC_ClockConfig+0x240>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f023 020f 	bic.w	r2, r3, #15
 800842e:	4985      	ldr	r1, [pc, #532]	; (8008644 <HAL_RCC_ClockConfig+0x240>)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	4313      	orrs	r3, r2
 8008434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008436:	4b83      	ldr	r3, [pc, #524]	; (8008644 <HAL_RCC_ClockConfig+0x240>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 030f 	and.w	r3, r3, #15
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	429a      	cmp	r2, r3
 8008442:	d001      	beq.n	8008448 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e184      	b.n	8008752 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 0304 	and.w	r3, r3, #4
 8008450:	2b00      	cmp	r3, #0
 8008452:	d010      	beq.n	8008476 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	691a      	ldr	r2, [r3, #16]
 8008458:	4b7b      	ldr	r3, [pc, #492]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008460:	429a      	cmp	r2, r3
 8008462:	d908      	bls.n	8008476 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008464:	4b78      	ldr	r3, [pc, #480]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	4975      	ldr	r1, [pc, #468]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 8008472:	4313      	orrs	r3, r2
 8008474:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 0308 	and.w	r3, r3, #8
 800847e:	2b00      	cmp	r3, #0
 8008480:	d010      	beq.n	80084a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	695a      	ldr	r2, [r3, #20]
 8008486:	4b70      	ldr	r3, [pc, #448]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 8008488:	69db      	ldr	r3, [r3, #28]
 800848a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800848e:	429a      	cmp	r2, r3
 8008490:	d908      	bls.n	80084a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008492:	4b6d      	ldr	r3, [pc, #436]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	496a      	ldr	r1, [pc, #424]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 80084a0:	4313      	orrs	r3, r2
 80084a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0310 	and.w	r3, r3, #16
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d010      	beq.n	80084d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	699a      	ldr	r2, [r3, #24]
 80084b4:	4b64      	ldr	r3, [pc, #400]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 80084b6:	69db      	ldr	r3, [r3, #28]
 80084b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084bc:	429a      	cmp	r2, r3
 80084be:	d908      	bls.n	80084d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80084c0:	4b61      	ldr	r3, [pc, #388]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 80084c2:	69db      	ldr	r3, [r3, #28]
 80084c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	495e      	ldr	r1, [pc, #376]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 80084ce:	4313      	orrs	r3, r2
 80084d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 0320 	and.w	r3, r3, #32
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d010      	beq.n	8008500 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	69da      	ldr	r2, [r3, #28]
 80084e2:	4b59      	ldr	r3, [pc, #356]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 80084e4:	6a1b      	ldr	r3, [r3, #32]
 80084e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d908      	bls.n	8008500 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80084ee:	4b56      	ldr	r3, [pc, #344]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 80084f0:	6a1b      	ldr	r3, [r3, #32]
 80084f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	4953      	ldr	r1, [pc, #332]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 80084fc:	4313      	orrs	r3, r2
 80084fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0302 	and.w	r3, r3, #2
 8008508:	2b00      	cmp	r3, #0
 800850a:	d010      	beq.n	800852e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68da      	ldr	r2, [r3, #12]
 8008510:	4b4d      	ldr	r3, [pc, #308]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 8008512:	699b      	ldr	r3, [r3, #24]
 8008514:	f003 030f 	and.w	r3, r3, #15
 8008518:	429a      	cmp	r2, r3
 800851a:	d908      	bls.n	800852e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800851c:	4b4a      	ldr	r3, [pc, #296]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 800851e:	699b      	ldr	r3, [r3, #24]
 8008520:	f023 020f 	bic.w	r2, r3, #15
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	4947      	ldr	r1, [pc, #284]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 800852a:	4313      	orrs	r3, r2
 800852c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b00      	cmp	r3, #0
 8008538:	d055      	beq.n	80085e6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800853a:	4b43      	ldr	r3, [pc, #268]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 800853c:	699b      	ldr	r3, [r3, #24]
 800853e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	4940      	ldr	r1, [pc, #256]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 8008548:	4313      	orrs	r3, r2
 800854a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	2b02      	cmp	r3, #2
 8008552:	d107      	bne.n	8008564 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008554:	4b3c      	ldr	r3, [pc, #240]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800855c:	2b00      	cmp	r3, #0
 800855e:	d121      	bne.n	80085a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e0f6      	b.n	8008752 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	2b03      	cmp	r3, #3
 800856a:	d107      	bne.n	800857c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800856c:	4b36      	ldr	r3, [pc, #216]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008574:	2b00      	cmp	r3, #0
 8008576:	d115      	bne.n	80085a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e0ea      	b.n	8008752 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d107      	bne.n	8008594 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008584:	4b30      	ldr	r3, [pc, #192]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800858c:	2b00      	cmp	r3, #0
 800858e:	d109      	bne.n	80085a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e0de      	b.n	8008752 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008594:	4b2c      	ldr	r3, [pc, #176]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f003 0304 	and.w	r3, r3, #4
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e0d6      	b.n	8008752 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80085a4:	4b28      	ldr	r3, [pc, #160]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	f023 0207 	bic.w	r2, r3, #7
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	4925      	ldr	r1, [pc, #148]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 80085b2:	4313      	orrs	r3, r2
 80085b4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085b6:	f7fb fbe9 	bl	8003d8c <HAL_GetTick>
 80085ba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085bc:	e00a      	b.n	80085d4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085be:	f7fb fbe5 	bl	8003d8c <HAL_GetTick>
 80085c2:	4602      	mov	r2, r0
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d901      	bls.n	80085d4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e0be      	b.n	8008752 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085d4:	4b1c      	ldr	r3, [pc, #112]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	00db      	lsls	r3, r3, #3
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d1eb      	bne.n	80085be <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0302 	and.w	r3, r3, #2
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d010      	beq.n	8008614 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	68da      	ldr	r2, [r3, #12]
 80085f6:	4b14      	ldr	r3, [pc, #80]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	f003 030f 	and.w	r3, r3, #15
 80085fe:	429a      	cmp	r2, r3
 8008600:	d208      	bcs.n	8008614 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008602:	4b11      	ldr	r3, [pc, #68]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	f023 020f 	bic.w	r2, r3, #15
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	490e      	ldr	r1, [pc, #56]	; (8008648 <HAL_RCC_ClockConfig+0x244>)
 8008610:	4313      	orrs	r3, r2
 8008612:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008614:	4b0b      	ldr	r3, [pc, #44]	; (8008644 <HAL_RCC_ClockConfig+0x240>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 030f 	and.w	r3, r3, #15
 800861c:	683a      	ldr	r2, [r7, #0]
 800861e:	429a      	cmp	r2, r3
 8008620:	d214      	bcs.n	800864c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008622:	4b08      	ldr	r3, [pc, #32]	; (8008644 <HAL_RCC_ClockConfig+0x240>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f023 020f 	bic.w	r2, r3, #15
 800862a:	4906      	ldr	r1, [pc, #24]	; (8008644 <HAL_RCC_ClockConfig+0x240>)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	4313      	orrs	r3, r2
 8008630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008632:	4b04      	ldr	r3, [pc, #16]	; (8008644 <HAL_RCC_ClockConfig+0x240>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 030f 	and.w	r3, r3, #15
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	429a      	cmp	r2, r3
 800863e:	d005      	beq.n	800864c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	e086      	b.n	8008752 <HAL_RCC_ClockConfig+0x34e>
 8008644:	52002000 	.word	0x52002000
 8008648:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 0304 	and.w	r3, r3, #4
 8008654:	2b00      	cmp	r3, #0
 8008656:	d010      	beq.n	800867a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	691a      	ldr	r2, [r3, #16]
 800865c:	4b3f      	ldr	r3, [pc, #252]	; (800875c <HAL_RCC_ClockConfig+0x358>)
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008664:	429a      	cmp	r2, r3
 8008666:	d208      	bcs.n	800867a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008668:	4b3c      	ldr	r3, [pc, #240]	; (800875c <HAL_RCC_ClockConfig+0x358>)
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	4939      	ldr	r1, [pc, #228]	; (800875c <HAL_RCC_ClockConfig+0x358>)
 8008676:	4313      	orrs	r3, r2
 8008678:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 0308 	and.w	r3, r3, #8
 8008682:	2b00      	cmp	r3, #0
 8008684:	d010      	beq.n	80086a8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	695a      	ldr	r2, [r3, #20]
 800868a:	4b34      	ldr	r3, [pc, #208]	; (800875c <HAL_RCC_ClockConfig+0x358>)
 800868c:	69db      	ldr	r3, [r3, #28]
 800868e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008692:	429a      	cmp	r2, r3
 8008694:	d208      	bcs.n	80086a8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008696:	4b31      	ldr	r3, [pc, #196]	; (800875c <HAL_RCC_ClockConfig+0x358>)
 8008698:	69db      	ldr	r3, [r3, #28]
 800869a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	492e      	ldr	r1, [pc, #184]	; (800875c <HAL_RCC_ClockConfig+0x358>)
 80086a4:	4313      	orrs	r3, r2
 80086a6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 0310 	and.w	r3, r3, #16
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d010      	beq.n	80086d6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	699a      	ldr	r2, [r3, #24]
 80086b8:	4b28      	ldr	r3, [pc, #160]	; (800875c <HAL_RCC_ClockConfig+0x358>)
 80086ba:	69db      	ldr	r3, [r3, #28]
 80086bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d208      	bcs.n	80086d6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80086c4:	4b25      	ldr	r3, [pc, #148]	; (800875c <HAL_RCC_ClockConfig+0x358>)
 80086c6:	69db      	ldr	r3, [r3, #28]
 80086c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	4922      	ldr	r1, [pc, #136]	; (800875c <HAL_RCC_ClockConfig+0x358>)
 80086d2:	4313      	orrs	r3, r2
 80086d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 0320 	and.w	r3, r3, #32
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d010      	beq.n	8008704 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	69da      	ldr	r2, [r3, #28]
 80086e6:	4b1d      	ldr	r3, [pc, #116]	; (800875c <HAL_RCC_ClockConfig+0x358>)
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d208      	bcs.n	8008704 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80086f2:	4b1a      	ldr	r3, [pc, #104]	; (800875c <HAL_RCC_ClockConfig+0x358>)
 80086f4:	6a1b      	ldr	r3, [r3, #32]
 80086f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	69db      	ldr	r3, [r3, #28]
 80086fe:	4917      	ldr	r1, [pc, #92]	; (800875c <HAL_RCC_ClockConfig+0x358>)
 8008700:	4313      	orrs	r3, r2
 8008702:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008704:	f000 f834 	bl	8008770 <HAL_RCC_GetSysClockFreq>
 8008708:	4602      	mov	r2, r0
 800870a:	4b14      	ldr	r3, [pc, #80]	; (800875c <HAL_RCC_ClockConfig+0x358>)
 800870c:	699b      	ldr	r3, [r3, #24]
 800870e:	0a1b      	lsrs	r3, r3, #8
 8008710:	f003 030f 	and.w	r3, r3, #15
 8008714:	4912      	ldr	r1, [pc, #72]	; (8008760 <HAL_RCC_ClockConfig+0x35c>)
 8008716:	5ccb      	ldrb	r3, [r1, r3]
 8008718:	f003 031f 	and.w	r3, r3, #31
 800871c:	fa22 f303 	lsr.w	r3, r2, r3
 8008720:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008722:	4b0e      	ldr	r3, [pc, #56]	; (800875c <HAL_RCC_ClockConfig+0x358>)
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	f003 030f 	and.w	r3, r3, #15
 800872a:	4a0d      	ldr	r2, [pc, #52]	; (8008760 <HAL_RCC_ClockConfig+0x35c>)
 800872c:	5cd3      	ldrb	r3, [r2, r3]
 800872e:	f003 031f 	and.w	r3, r3, #31
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	fa22 f303 	lsr.w	r3, r2, r3
 8008738:	4a0a      	ldr	r2, [pc, #40]	; (8008764 <HAL_RCC_ClockConfig+0x360>)
 800873a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800873c:	4a0a      	ldr	r2, [pc, #40]	; (8008768 <HAL_RCC_ClockConfig+0x364>)
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008742:	4b0a      	ldr	r3, [pc, #40]	; (800876c <HAL_RCC_ClockConfig+0x368>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4618      	mov	r0, r3
 8008748:	f7fb fad6 	bl	8003cf8 <HAL_InitTick>
 800874c:	4603      	mov	r3, r0
 800874e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008750:	7bfb      	ldrb	r3, [r7, #15]
}
 8008752:	4618      	mov	r0, r3
 8008754:	3718      	adds	r7, #24
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	58024400 	.word	0x58024400
 8008760:	0800e5e8 	.word	0x0800e5e8
 8008764:	24000004 	.word	0x24000004
 8008768:	24000000 	.word	0x24000000
 800876c:	24000008 	.word	0x24000008

08008770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008770:	b480      	push	{r7}
 8008772:	b089      	sub	sp, #36	; 0x24
 8008774:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008776:	4bb3      	ldr	r3, [pc, #716]	; (8008a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800877e:	2b18      	cmp	r3, #24
 8008780:	f200 8155 	bhi.w	8008a2e <HAL_RCC_GetSysClockFreq+0x2be>
 8008784:	a201      	add	r2, pc, #4	; (adr r2, 800878c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878a:	bf00      	nop
 800878c:	080087f1 	.word	0x080087f1
 8008790:	08008a2f 	.word	0x08008a2f
 8008794:	08008a2f 	.word	0x08008a2f
 8008798:	08008a2f 	.word	0x08008a2f
 800879c:	08008a2f 	.word	0x08008a2f
 80087a0:	08008a2f 	.word	0x08008a2f
 80087a4:	08008a2f 	.word	0x08008a2f
 80087a8:	08008a2f 	.word	0x08008a2f
 80087ac:	08008817 	.word	0x08008817
 80087b0:	08008a2f 	.word	0x08008a2f
 80087b4:	08008a2f 	.word	0x08008a2f
 80087b8:	08008a2f 	.word	0x08008a2f
 80087bc:	08008a2f 	.word	0x08008a2f
 80087c0:	08008a2f 	.word	0x08008a2f
 80087c4:	08008a2f 	.word	0x08008a2f
 80087c8:	08008a2f 	.word	0x08008a2f
 80087cc:	0800881d 	.word	0x0800881d
 80087d0:	08008a2f 	.word	0x08008a2f
 80087d4:	08008a2f 	.word	0x08008a2f
 80087d8:	08008a2f 	.word	0x08008a2f
 80087dc:	08008a2f 	.word	0x08008a2f
 80087e0:	08008a2f 	.word	0x08008a2f
 80087e4:	08008a2f 	.word	0x08008a2f
 80087e8:	08008a2f 	.word	0x08008a2f
 80087ec:	08008823 	.word	0x08008823
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087f0:	4b94      	ldr	r3, [pc, #592]	; (8008a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0320 	and.w	r3, r3, #32
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d009      	beq.n	8008810 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087fc:	4b91      	ldr	r3, [pc, #580]	; (8008a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	08db      	lsrs	r3, r3, #3
 8008802:	f003 0303 	and.w	r3, r3, #3
 8008806:	4a90      	ldr	r2, [pc, #576]	; (8008a48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008808:	fa22 f303 	lsr.w	r3, r2, r3
 800880c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800880e:	e111      	b.n	8008a34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008810:	4b8d      	ldr	r3, [pc, #564]	; (8008a48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008812:	61bb      	str	r3, [r7, #24]
      break;
 8008814:	e10e      	b.n	8008a34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008816:	4b8d      	ldr	r3, [pc, #564]	; (8008a4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008818:	61bb      	str	r3, [r7, #24]
      break;
 800881a:	e10b      	b.n	8008a34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800881c:	4b8c      	ldr	r3, [pc, #560]	; (8008a50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800881e:	61bb      	str	r3, [r7, #24]
      break;
 8008820:	e108      	b.n	8008a34 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008822:	4b88      	ldr	r3, [pc, #544]	; (8008a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008826:	f003 0303 	and.w	r3, r3, #3
 800882a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800882c:	4b85      	ldr	r3, [pc, #532]	; (8008a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800882e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008830:	091b      	lsrs	r3, r3, #4
 8008832:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008836:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008838:	4b82      	ldr	r3, [pc, #520]	; (8008a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800883a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883c:	f003 0301 	and.w	r3, r3, #1
 8008840:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008842:	4b80      	ldr	r3, [pc, #512]	; (8008a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008846:	08db      	lsrs	r3, r3, #3
 8008848:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	fb02 f303 	mul.w	r3, r2, r3
 8008852:	ee07 3a90 	vmov	s15, r3
 8008856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800885a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	2b00      	cmp	r3, #0
 8008862:	f000 80e1 	beq.w	8008a28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	2b02      	cmp	r3, #2
 800886a:	f000 8083 	beq.w	8008974 <HAL_RCC_GetSysClockFreq+0x204>
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2b02      	cmp	r3, #2
 8008872:	f200 80a1 	bhi.w	80089b8 <HAL_RCC_GetSysClockFreq+0x248>
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d003      	beq.n	8008884 <HAL_RCC_GetSysClockFreq+0x114>
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d056      	beq.n	8008930 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008882:	e099      	b.n	80089b8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008884:	4b6f      	ldr	r3, [pc, #444]	; (8008a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 0320 	and.w	r3, r3, #32
 800888c:	2b00      	cmp	r3, #0
 800888e:	d02d      	beq.n	80088ec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008890:	4b6c      	ldr	r3, [pc, #432]	; (8008a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	08db      	lsrs	r3, r3, #3
 8008896:	f003 0303 	and.w	r3, r3, #3
 800889a:	4a6b      	ldr	r2, [pc, #428]	; (8008a48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800889c:	fa22 f303 	lsr.w	r3, r2, r3
 80088a0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	ee07 3a90 	vmov	s15, r3
 80088a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	ee07 3a90 	vmov	s15, r3
 80088b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ba:	4b62      	ldr	r3, [pc, #392]	; (8008a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088c2:	ee07 3a90 	vmov	s15, r3
 80088c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80088ce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008a54 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088e6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80088ea:	e087      	b.n	80089fc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	ee07 3a90 	vmov	s15, r3
 80088f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088f6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008a58 <HAL_RCC_GetSysClockFreq+0x2e8>
 80088fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088fe:	4b51      	ldr	r3, [pc, #324]	; (8008a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008906:	ee07 3a90 	vmov	s15, r3
 800890a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800890e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008912:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008a54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800891a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800891e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800892a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800892e:	e065      	b.n	80089fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	ee07 3a90 	vmov	s15, r3
 8008936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800893a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008a5c <HAL_RCC_GetSysClockFreq+0x2ec>
 800893e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008942:	4b40      	ldr	r3, [pc, #256]	; (8008a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800894a:	ee07 3a90 	vmov	s15, r3
 800894e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008952:	ed97 6a02 	vldr	s12, [r7, #8]
 8008956:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008a54 <HAL_RCC_GetSysClockFreq+0x2e4>
 800895a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800895e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800896a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800896e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008972:	e043      	b.n	80089fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	ee07 3a90 	vmov	s15, r3
 800897a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800897e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008a60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008986:	4b2f      	ldr	r3, [pc, #188]	; (8008a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800898e:	ee07 3a90 	vmov	s15, r3
 8008992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008996:	ed97 6a02 	vldr	s12, [r7, #8]
 800899a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008a54 <HAL_RCC_GetSysClockFreq+0x2e4>
 800899e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80089b6:	e021      	b.n	80089fc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	ee07 3a90 	vmov	s15, r3
 80089be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008a5c <HAL_RCC_GetSysClockFreq+0x2ec>
 80089c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ca:	4b1e      	ldr	r3, [pc, #120]	; (8008a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d2:	ee07 3a90 	vmov	s15, r3
 80089d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089da:	ed97 6a02 	vldr	s12, [r7, #8]
 80089de:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008a54 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80089fa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80089fc:	4b11      	ldr	r3, [pc, #68]	; (8008a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a00:	0a5b      	lsrs	r3, r3, #9
 8008a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a06:	3301      	adds	r3, #1
 8008a08:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	ee07 3a90 	vmov	s15, r3
 8008a10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008a14:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a20:	ee17 3a90 	vmov	r3, s15
 8008a24:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008a26:	e005      	b.n	8008a34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	61bb      	str	r3, [r7, #24]
      break;
 8008a2c:	e002      	b.n	8008a34 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008a2e:	4b07      	ldr	r3, [pc, #28]	; (8008a4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008a30:	61bb      	str	r3, [r7, #24]
      break;
 8008a32:	bf00      	nop
  }

  return sysclockfreq;
 8008a34:	69bb      	ldr	r3, [r7, #24]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3724      	adds	r7, #36	; 0x24
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	58024400 	.word	0x58024400
 8008a48:	03d09000 	.word	0x03d09000
 8008a4c:	003d0900 	.word	0x003d0900
 8008a50:	017d7840 	.word	0x017d7840
 8008a54:	46000000 	.word	0x46000000
 8008a58:	4c742400 	.word	0x4c742400
 8008a5c:	4a742400 	.word	0x4a742400
 8008a60:	4bbebc20 	.word	0x4bbebc20

08008a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008a6a:	f7ff fe81 	bl	8008770 <HAL_RCC_GetSysClockFreq>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	4b10      	ldr	r3, [pc, #64]	; (8008ab4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	0a1b      	lsrs	r3, r3, #8
 8008a76:	f003 030f 	and.w	r3, r3, #15
 8008a7a:	490f      	ldr	r1, [pc, #60]	; (8008ab8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008a7c:	5ccb      	ldrb	r3, [r1, r3]
 8008a7e:	f003 031f 	and.w	r3, r3, #31
 8008a82:	fa22 f303 	lsr.w	r3, r2, r3
 8008a86:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a88:	4b0a      	ldr	r3, [pc, #40]	; (8008ab4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	f003 030f 	and.w	r3, r3, #15
 8008a90:	4a09      	ldr	r2, [pc, #36]	; (8008ab8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008a92:	5cd3      	ldrb	r3, [r2, r3]
 8008a94:	f003 031f 	and.w	r3, r3, #31
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a9e:	4a07      	ldr	r2, [pc, #28]	; (8008abc <HAL_RCC_GetHCLKFreq+0x58>)
 8008aa0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008aa2:	4a07      	ldr	r2, [pc, #28]	; (8008ac0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008aa8:	4b04      	ldr	r3, [pc, #16]	; (8008abc <HAL_RCC_GetHCLKFreq+0x58>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	58024400 	.word	0x58024400
 8008ab8:	0800e5e8 	.word	0x0800e5e8
 8008abc:	24000004 	.word	0x24000004
 8008ac0:	24000000 	.word	0x24000000

08008ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008ac8:	f7ff ffcc 	bl	8008a64 <HAL_RCC_GetHCLKFreq>
 8008acc:	4602      	mov	r2, r0
 8008ace:	4b06      	ldr	r3, [pc, #24]	; (8008ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ad0:	69db      	ldr	r3, [r3, #28]
 8008ad2:	091b      	lsrs	r3, r3, #4
 8008ad4:	f003 0307 	and.w	r3, r3, #7
 8008ad8:	4904      	ldr	r1, [pc, #16]	; (8008aec <HAL_RCC_GetPCLK1Freq+0x28>)
 8008ada:	5ccb      	ldrb	r3, [r1, r3]
 8008adc:	f003 031f 	and.w	r3, r3, #31
 8008ae0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	58024400 	.word	0x58024400
 8008aec:	0800e5e8 	.word	0x0800e5e8

08008af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008af4:	f7ff ffb6 	bl	8008a64 <HAL_RCC_GetHCLKFreq>
 8008af8:	4602      	mov	r2, r0
 8008afa:	4b06      	ldr	r3, [pc, #24]	; (8008b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008afc:	69db      	ldr	r3, [r3, #28]
 8008afe:	0a1b      	lsrs	r3, r3, #8
 8008b00:	f003 0307 	and.w	r3, r3, #7
 8008b04:	4904      	ldr	r1, [pc, #16]	; (8008b18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008b06:	5ccb      	ldrb	r3, [r1, r3]
 8008b08:	f003 031f 	and.w	r3, r3, #31
 8008b0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	58024400 	.word	0x58024400
 8008b18:	0800e5e8 	.word	0x0800e5e8

08008b1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b20:	b0ca      	sub	sp, #296	; 0x128
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008b28:	2300      	movs	r3, #0
 8008b2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008b2e:	2300      	movs	r3, #0
 8008b30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008b40:	2500      	movs	r5, #0
 8008b42:	ea54 0305 	orrs.w	r3, r4, r5
 8008b46:	d049      	beq.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b52:	d02f      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008b54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b58:	d828      	bhi.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008b5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b5e:	d01a      	beq.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008b60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b64:	d822      	bhi.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d003      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b6e:	d007      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008b70:	e01c      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b72:	4bb8      	ldr	r3, [pc, #736]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b76:	4ab7      	ldr	r2, [pc, #732]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b7e:	e01a      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b84:	3308      	adds	r3, #8
 8008b86:	2102      	movs	r1, #2
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f002 fb61 	bl	800b250 <RCCEx_PLL2_Config>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b94:	e00f      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b9a:	3328      	adds	r3, #40	; 0x28
 8008b9c:	2102      	movs	r1, #2
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f002 fc08 	bl	800b3b4 <RCCEx_PLL3_Config>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008baa:	e004      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008bb2:	e000      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10a      	bne.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008bbe:	4ba5      	ldr	r3, [pc, #660]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bc2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bcc:	4aa1      	ldr	r2, [pc, #644]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bce:	430b      	orrs	r3, r1
 8008bd0:	6513      	str	r3, [r2, #80]	; 0x50
 8008bd2:	e003      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008be8:	f04f 0900 	mov.w	r9, #0
 8008bec:	ea58 0309 	orrs.w	r3, r8, r9
 8008bf0:	d047      	beq.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bf8:	2b04      	cmp	r3, #4
 8008bfa:	d82a      	bhi.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008bfc:	a201      	add	r2, pc, #4	; (adr r2, 8008c04 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c02:	bf00      	nop
 8008c04:	08008c19 	.word	0x08008c19
 8008c08:	08008c27 	.word	0x08008c27
 8008c0c:	08008c3d 	.word	0x08008c3d
 8008c10:	08008c5b 	.word	0x08008c5b
 8008c14:	08008c5b 	.word	0x08008c5b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c18:	4b8e      	ldr	r3, [pc, #568]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1c:	4a8d      	ldr	r2, [pc, #564]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c24:	e01a      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c2a:	3308      	adds	r3, #8
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f002 fb0e 	bl	800b250 <RCCEx_PLL2_Config>
 8008c34:	4603      	mov	r3, r0
 8008c36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c3a:	e00f      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c40:	3328      	adds	r3, #40	; 0x28
 8008c42:	2100      	movs	r1, #0
 8008c44:	4618      	mov	r0, r3
 8008c46:	f002 fbb5 	bl	800b3b4 <RCCEx_PLL3_Config>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c50:	e004      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c58:	e000      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10a      	bne.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c64:	4b7b      	ldr	r3, [pc, #492]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c68:	f023 0107 	bic.w	r1, r3, #7
 8008c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c72:	4a78      	ldr	r2, [pc, #480]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c74:	430b      	orrs	r3, r1
 8008c76:	6513      	str	r3, [r2, #80]	; 0x50
 8008c78:	e003      	b.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8008c8e:	f04f 0b00 	mov.w	fp, #0
 8008c92:	ea5a 030b 	orrs.w	r3, sl, fp
 8008c96:	d04c      	beq.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ca2:	d030      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ca8:	d829      	bhi.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008caa:	2bc0      	cmp	r3, #192	; 0xc0
 8008cac:	d02d      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008cae:	2bc0      	cmp	r3, #192	; 0xc0
 8008cb0:	d825      	bhi.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008cb2:	2b80      	cmp	r3, #128	; 0x80
 8008cb4:	d018      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008cb6:	2b80      	cmp	r3, #128	; 0x80
 8008cb8:	d821      	bhi.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d002      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008cbe:	2b40      	cmp	r3, #64	; 0x40
 8008cc0:	d007      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008cc2:	e01c      	b.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cc4:	4b63      	ldr	r3, [pc, #396]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc8:	4a62      	ldr	r2, [pc, #392]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008cd0:	e01c      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cd6:	3308      	adds	r3, #8
 8008cd8:	2100      	movs	r1, #0
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f002 fab8 	bl	800b250 <RCCEx_PLL2_Config>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008ce6:	e011      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cec:	3328      	adds	r3, #40	; 0x28
 8008cee:	2100      	movs	r1, #0
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f002 fb5f 	bl	800b3b4 <RCCEx_PLL3_Config>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008cfc:	e006      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d04:	e002      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008d06:	bf00      	nop
 8008d08:	e000      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008d0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10a      	bne.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008d14:	4b4f      	ldr	r3, [pc, #316]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d18:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d22:	4a4c      	ldr	r2, [pc, #304]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d24:	430b      	orrs	r3, r1
 8008d26:	6513      	str	r3, [r2, #80]	; 0x50
 8008d28:	e003      	b.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008d3e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008d42:	2300      	movs	r3, #0
 8008d44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008d48:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	d053      	beq.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008d5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d5e:	d035      	beq.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008d60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d64:	d82e      	bhi.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008d66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d6a:	d031      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008d6c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d70:	d828      	bhi.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008d72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d76:	d01a      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d7c:	d822      	bhi.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008d82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d86:	d007      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008d88:	e01c      	b.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d8a:	4b32      	ldr	r3, [pc, #200]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8e:	4a31      	ldr	r2, [pc, #196]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d96:	e01c      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d9c:	3308      	adds	r3, #8
 8008d9e:	2100      	movs	r1, #0
 8008da0:	4618      	mov	r0, r3
 8008da2:	f002 fa55 	bl	800b250 <RCCEx_PLL2_Config>
 8008da6:	4603      	mov	r3, r0
 8008da8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008dac:	e011      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008db2:	3328      	adds	r3, #40	; 0x28
 8008db4:	2100      	movs	r1, #0
 8008db6:	4618      	mov	r0, r3
 8008db8:	f002 fafc 	bl	800b3b4 <RCCEx_PLL3_Config>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008dc2:	e006      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008dca:	e002      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008dcc:	bf00      	nop
 8008dce:	e000      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10b      	bne.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008dda:	4b1e      	ldr	r3, [pc, #120]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dde:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008de6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008dea:	4a1a      	ldr	r2, [pc, #104]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008dec:	430b      	orrs	r3, r1
 8008dee:	6593      	str	r3, [r2, #88]	; 0x58
 8008df0:	e003      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008df2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008df6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e02:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008e06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008e10:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008e14:	460b      	mov	r3, r1
 8008e16:	4313      	orrs	r3, r2
 8008e18:	d056      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008e22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e26:	d038      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008e28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e2c:	d831      	bhi.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008e2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e32:	d034      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008e34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e38:	d82b      	bhi.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008e3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e3e:	d01d      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008e40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e44:	d825      	bhi.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d006      	beq.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008e4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e4e:	d00a      	beq.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008e50:	e01f      	b.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008e52:	bf00      	nop
 8008e54:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e58:	4ba2      	ldr	r3, [pc, #648]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5c:	4aa1      	ldr	r2, [pc, #644]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e64:	e01c      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e6a:	3308      	adds	r3, #8
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f002 f9ee 	bl	800b250 <RCCEx_PLL2_Config>
 8008e74:	4603      	mov	r3, r0
 8008e76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008e7a:	e011      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e80:	3328      	adds	r3, #40	; 0x28
 8008e82:	2100      	movs	r1, #0
 8008e84:	4618      	mov	r0, r3
 8008e86:	f002 fa95 	bl	800b3b4 <RCCEx_PLL3_Config>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e90:	e006      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e98:	e002      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008e9a:	bf00      	nop
 8008e9c:	e000      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10b      	bne.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008ea8:	4b8e      	ldr	r3, [pc, #568]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eac:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008eb8:	4a8a      	ldr	r2, [pc, #552]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008eba:	430b      	orrs	r3, r1
 8008ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8008ebe:	e003      	b.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ec4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008ed4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008ede:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	d03a      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eee:	2b30      	cmp	r3, #48	; 0x30
 8008ef0:	d01f      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008ef2:	2b30      	cmp	r3, #48	; 0x30
 8008ef4:	d819      	bhi.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008ef6:	2b20      	cmp	r3, #32
 8008ef8:	d00c      	beq.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008efa:	2b20      	cmp	r3, #32
 8008efc:	d815      	bhi.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d019      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008f02:	2b10      	cmp	r3, #16
 8008f04:	d111      	bne.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f06:	4b77      	ldr	r3, [pc, #476]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0a:	4a76      	ldr	r2, [pc, #472]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008f12:	e011      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f18:	3308      	adds	r3, #8
 8008f1a:	2102      	movs	r1, #2
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f002 f997 	bl	800b250 <RCCEx_PLL2_Config>
 8008f22:	4603      	mov	r3, r0
 8008f24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008f28:	e006      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f30:	e002      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008f32:	bf00      	nop
 8008f34:	e000      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d10a      	bne.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008f40:	4b68      	ldr	r3, [pc, #416]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f44:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f4e:	4a65      	ldr	r2, [pc, #404]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f50:	430b      	orrs	r3, r1
 8008f52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f54:	e003      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f66:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008f6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008f74:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008f78:	460b      	mov	r3, r1
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	d051      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f88:	d035      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008f8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f8e:	d82e      	bhi.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008f90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f94:	d031      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008f96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f9a:	d828      	bhi.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fa0:	d01a      	beq.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fa6:	d822      	bhi.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d003      	beq.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fb0:	d007      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008fb2:	e01c      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fb4:	4b4b      	ldr	r3, [pc, #300]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb8:	4a4a      	ldr	r2, [pc, #296]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008fc0:	e01c      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fc6:	3308      	adds	r3, #8
 8008fc8:	2100      	movs	r1, #0
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f002 f940 	bl	800b250 <RCCEx_PLL2_Config>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008fd6:	e011      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fdc:	3328      	adds	r3, #40	; 0x28
 8008fde:	2100      	movs	r1, #0
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f002 f9e7 	bl	800b3b4 <RCCEx_PLL3_Config>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008fec:	e006      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ff4:	e002      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008ff6:	bf00      	nop
 8008ff8:	e000      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008ffa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10a      	bne.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009004:	4b37      	ldr	r3, [pc, #220]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009008:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800900c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009012:	4a34      	ldr	r2, [pc, #208]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009014:	430b      	orrs	r3, r1
 8009016:	6513      	str	r3, [r2, #80]	; 0x50
 8009018:	e003      	b.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800901a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800901e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800902e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009032:	2300      	movs	r3, #0
 8009034:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009038:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800903c:	460b      	mov	r3, r1
 800903e:	4313      	orrs	r3, r2
 8009040:	d056      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800904c:	d033      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800904e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009052:	d82c      	bhi.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009054:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009058:	d02f      	beq.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800905a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800905e:	d826      	bhi.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009060:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009064:	d02b      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009066:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800906a:	d820      	bhi.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800906c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009070:	d012      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009072:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009076:	d81a      	bhi.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009078:	2b00      	cmp	r3, #0
 800907a:	d022      	beq.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800907c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009080:	d115      	bne.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009086:	3308      	adds	r3, #8
 8009088:	2101      	movs	r1, #1
 800908a:	4618      	mov	r0, r3
 800908c:	f002 f8e0 	bl	800b250 <RCCEx_PLL2_Config>
 8009090:	4603      	mov	r3, r0
 8009092:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009096:	e015      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800909c:	3328      	adds	r3, #40	; 0x28
 800909e:	2101      	movs	r1, #1
 80090a0:	4618      	mov	r0, r3
 80090a2:	f002 f987 	bl	800b3b4 <RCCEx_PLL3_Config>
 80090a6:	4603      	mov	r3, r0
 80090a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80090ac:	e00a      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80090b4:	e006      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80090b6:	bf00      	nop
 80090b8:	e004      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80090ba:	bf00      	nop
 80090bc:	e002      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80090be:	bf00      	nop
 80090c0:	e000      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80090c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d10d      	bne.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80090cc:	4b05      	ldr	r3, [pc, #20]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090d0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80090d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090da:	4a02      	ldr	r2, [pc, #8]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090dc:	430b      	orrs	r3, r1
 80090de:	6513      	str	r3, [r2, #80]	; 0x50
 80090e0:	e006      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80090e2:	bf00      	nop
 80090e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80090f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80090fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009100:	2300      	movs	r3, #0
 8009102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009106:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800910a:	460b      	mov	r3, r1
 800910c:	4313      	orrs	r3, r2
 800910e:	d055      	beq.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009114:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009118:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800911c:	d033      	beq.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800911e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009122:	d82c      	bhi.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009128:	d02f      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800912a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800912e:	d826      	bhi.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009130:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009134:	d02b      	beq.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009136:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800913a:	d820      	bhi.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800913c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009140:	d012      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009142:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009146:	d81a      	bhi.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009148:	2b00      	cmp	r3, #0
 800914a:	d022      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800914c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009150:	d115      	bne.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009156:	3308      	adds	r3, #8
 8009158:	2101      	movs	r1, #1
 800915a:	4618      	mov	r0, r3
 800915c:	f002 f878 	bl	800b250 <RCCEx_PLL2_Config>
 8009160:	4603      	mov	r3, r0
 8009162:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009166:	e015      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800916c:	3328      	adds	r3, #40	; 0x28
 800916e:	2101      	movs	r1, #1
 8009170:	4618      	mov	r0, r3
 8009172:	f002 f91f 	bl	800b3b4 <RCCEx_PLL3_Config>
 8009176:	4603      	mov	r3, r0
 8009178:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800917c:	e00a      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009184:	e006      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009186:	bf00      	nop
 8009188:	e004      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800918a:	bf00      	nop
 800918c:	e002      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800918e:	bf00      	nop
 8009190:	e000      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009192:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009194:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10b      	bne.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800919c:	4ba3      	ldr	r3, [pc, #652]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800919e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091a0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80091a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80091ac:	4a9f      	ldr	r2, [pc, #636]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091ae:	430b      	orrs	r3, r1
 80091b0:	6593      	str	r3, [r2, #88]	; 0x58
 80091b2:	e003      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80091bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80091c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80091cc:	2300      	movs	r3, #0
 80091ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80091d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80091d6:	460b      	mov	r3, r1
 80091d8:	4313      	orrs	r3, r2
 80091da:	d037      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80091dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091e6:	d00e      	beq.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80091e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091ec:	d816      	bhi.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d018      	beq.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80091f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091f6:	d111      	bne.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091f8:	4b8c      	ldr	r3, [pc, #560]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fc:	4a8b      	ldr	r2, [pc, #556]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009202:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009204:	e00f      	b.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800920a:	3308      	adds	r3, #8
 800920c:	2101      	movs	r1, #1
 800920e:	4618      	mov	r0, r3
 8009210:	f002 f81e 	bl	800b250 <RCCEx_PLL2_Config>
 8009214:	4603      	mov	r3, r0
 8009216:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800921a:	e004      	b.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009222:	e000      	b.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10a      	bne.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800922e:	4b7f      	ldr	r3, [pc, #508]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009232:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800923a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800923c:	4a7b      	ldr	r2, [pc, #492]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800923e:	430b      	orrs	r3, r1
 8009240:	6513      	str	r3, [r2, #80]	; 0x50
 8009242:	e003      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009244:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009248:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800924c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009258:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800925c:	2300      	movs	r3, #0
 800925e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009262:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009266:	460b      	mov	r3, r1
 8009268:	4313      	orrs	r3, r2
 800926a:	d039      	beq.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800926c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009272:	2b03      	cmp	r3, #3
 8009274:	d81c      	bhi.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009276:	a201      	add	r2, pc, #4	; (adr r2, 800927c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927c:	080092b9 	.word	0x080092b9
 8009280:	0800928d 	.word	0x0800928d
 8009284:	0800929b 	.word	0x0800929b
 8009288:	080092b9 	.word	0x080092b9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800928c:	4b67      	ldr	r3, [pc, #412]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800928e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009290:	4a66      	ldr	r2, [pc, #408]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009296:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009298:	e00f      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800929a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800929e:	3308      	adds	r3, #8
 80092a0:	2102      	movs	r1, #2
 80092a2:	4618      	mov	r0, r3
 80092a4:	f001 ffd4 	bl	800b250 <RCCEx_PLL2_Config>
 80092a8:	4603      	mov	r3, r0
 80092aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80092ae:	e004      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80092b6:	e000      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80092b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d10a      	bne.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80092c2:	4b5a      	ldr	r3, [pc, #360]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092c6:	f023 0103 	bic.w	r1, r3, #3
 80092ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092d0:	4a56      	ldr	r2, [pc, #344]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092d2:	430b      	orrs	r3, r1
 80092d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80092d6:	e003      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80092ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092f0:	2300      	movs	r3, #0
 80092f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80092f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80092fa:	460b      	mov	r3, r1
 80092fc:	4313      	orrs	r3, r2
 80092fe:	f000 809f 	beq.w	8009440 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009302:	4b4b      	ldr	r3, [pc, #300]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a4a      	ldr	r2, [pc, #296]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800930c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800930e:	f7fa fd3d 	bl	8003d8c <HAL_GetTick>
 8009312:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009316:	e00b      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009318:	f7fa fd38 	bl	8003d8c <HAL_GetTick>
 800931c:	4602      	mov	r2, r0
 800931e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	2b64      	cmp	r3, #100	; 0x64
 8009326:	d903      	bls.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009328:	2303      	movs	r3, #3
 800932a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800932e:	e005      	b.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009330:	4b3f      	ldr	r3, [pc, #252]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009338:	2b00      	cmp	r3, #0
 800933a:	d0ed      	beq.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800933c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009340:	2b00      	cmp	r3, #0
 8009342:	d179      	bne.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009344:	4b39      	ldr	r3, [pc, #228]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009346:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009348:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800934c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009350:	4053      	eors	r3, r2
 8009352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009356:	2b00      	cmp	r3, #0
 8009358:	d015      	beq.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800935a:	4b34      	ldr	r3, [pc, #208]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800935c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800935e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009362:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009366:	4b31      	ldr	r3, [pc, #196]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800936a:	4a30      	ldr	r2, [pc, #192]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800936c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009370:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009372:	4b2e      	ldr	r3, [pc, #184]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009376:	4a2d      	ldr	r2, [pc, #180]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800937c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800937e:	4a2b      	ldr	r2, [pc, #172]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009380:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009384:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800938a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800938e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009392:	d118      	bne.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009394:	f7fa fcfa 	bl	8003d8c <HAL_GetTick>
 8009398:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800939c:	e00d      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800939e:	f7fa fcf5 	bl	8003d8c <HAL_GetTick>
 80093a2:	4602      	mov	r2, r0
 80093a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80093a8:	1ad2      	subs	r2, r2, r3
 80093aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d903      	bls.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80093b2:	2303      	movs	r3, #3
 80093b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80093b8:	e005      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093ba:	4b1c      	ldr	r3, [pc, #112]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093be:	f003 0302 	and.w	r3, r3, #2
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d0eb      	beq.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80093c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d129      	bne.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80093d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093de:	d10e      	bne.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80093e0:	4b12      	ldr	r3, [pc, #72]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80093e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80093f0:	091a      	lsrs	r2, r3, #4
 80093f2:	4b10      	ldr	r3, [pc, #64]	; (8009434 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80093f4:	4013      	ands	r3, r2
 80093f6:	4a0d      	ldr	r2, [pc, #52]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093f8:	430b      	orrs	r3, r1
 80093fa:	6113      	str	r3, [r2, #16]
 80093fc:	e005      	b.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80093fe:	4b0b      	ldr	r3, [pc, #44]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	4a0a      	ldr	r2, [pc, #40]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009404:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009408:	6113      	str	r3, [r2, #16]
 800940a:	4b08      	ldr	r3, [pc, #32]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800940c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800940e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009412:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800941a:	4a04      	ldr	r2, [pc, #16]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800941c:	430b      	orrs	r3, r1
 800941e:	6713      	str	r3, [r2, #112]	; 0x70
 8009420:	e00e      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009426:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800942a:	e009      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800942c:	58024400 	.word	0x58024400
 8009430:	58024800 	.word	0x58024800
 8009434:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009438:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800943c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009448:	f002 0301 	and.w	r3, r2, #1
 800944c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009450:	2300      	movs	r3, #0
 8009452:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009456:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800945a:	460b      	mov	r3, r1
 800945c:	4313      	orrs	r3, r2
 800945e:	f000 8089 	beq.w	8009574 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009468:	2b28      	cmp	r3, #40	; 0x28
 800946a:	d86b      	bhi.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800946c:	a201      	add	r2, pc, #4	; (adr r2, 8009474 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800946e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009472:	bf00      	nop
 8009474:	0800954d 	.word	0x0800954d
 8009478:	08009545 	.word	0x08009545
 800947c:	08009545 	.word	0x08009545
 8009480:	08009545 	.word	0x08009545
 8009484:	08009545 	.word	0x08009545
 8009488:	08009545 	.word	0x08009545
 800948c:	08009545 	.word	0x08009545
 8009490:	08009545 	.word	0x08009545
 8009494:	08009519 	.word	0x08009519
 8009498:	08009545 	.word	0x08009545
 800949c:	08009545 	.word	0x08009545
 80094a0:	08009545 	.word	0x08009545
 80094a4:	08009545 	.word	0x08009545
 80094a8:	08009545 	.word	0x08009545
 80094ac:	08009545 	.word	0x08009545
 80094b0:	08009545 	.word	0x08009545
 80094b4:	0800952f 	.word	0x0800952f
 80094b8:	08009545 	.word	0x08009545
 80094bc:	08009545 	.word	0x08009545
 80094c0:	08009545 	.word	0x08009545
 80094c4:	08009545 	.word	0x08009545
 80094c8:	08009545 	.word	0x08009545
 80094cc:	08009545 	.word	0x08009545
 80094d0:	08009545 	.word	0x08009545
 80094d4:	0800954d 	.word	0x0800954d
 80094d8:	08009545 	.word	0x08009545
 80094dc:	08009545 	.word	0x08009545
 80094e0:	08009545 	.word	0x08009545
 80094e4:	08009545 	.word	0x08009545
 80094e8:	08009545 	.word	0x08009545
 80094ec:	08009545 	.word	0x08009545
 80094f0:	08009545 	.word	0x08009545
 80094f4:	0800954d 	.word	0x0800954d
 80094f8:	08009545 	.word	0x08009545
 80094fc:	08009545 	.word	0x08009545
 8009500:	08009545 	.word	0x08009545
 8009504:	08009545 	.word	0x08009545
 8009508:	08009545 	.word	0x08009545
 800950c:	08009545 	.word	0x08009545
 8009510:	08009545 	.word	0x08009545
 8009514:	0800954d 	.word	0x0800954d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800951c:	3308      	adds	r3, #8
 800951e:	2101      	movs	r1, #1
 8009520:	4618      	mov	r0, r3
 8009522:	f001 fe95 	bl	800b250 <RCCEx_PLL2_Config>
 8009526:	4603      	mov	r3, r0
 8009528:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800952c:	e00f      	b.n	800954e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800952e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009532:	3328      	adds	r3, #40	; 0x28
 8009534:	2101      	movs	r1, #1
 8009536:	4618      	mov	r0, r3
 8009538:	f001 ff3c 	bl	800b3b4 <RCCEx_PLL3_Config>
 800953c:	4603      	mov	r3, r0
 800953e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009542:	e004      	b.n	800954e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800954a:	e000      	b.n	800954e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800954c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800954e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009552:	2b00      	cmp	r3, #0
 8009554:	d10a      	bne.n	800956c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009556:	4bbf      	ldr	r3, [pc, #764]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800955a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800955e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009562:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009564:	4abb      	ldr	r2, [pc, #748]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009566:	430b      	orrs	r3, r1
 8009568:	6553      	str	r3, [r2, #84]	; 0x54
 800956a:	e003      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800956c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009570:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957c:	f002 0302 	and.w	r3, r2, #2
 8009580:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009584:	2300      	movs	r3, #0
 8009586:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800958a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800958e:	460b      	mov	r3, r1
 8009590:	4313      	orrs	r3, r2
 8009592:	d041      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800959a:	2b05      	cmp	r3, #5
 800959c:	d824      	bhi.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800959e:	a201      	add	r2, pc, #4	; (adr r2, 80095a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80095a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a4:	080095f1 	.word	0x080095f1
 80095a8:	080095bd 	.word	0x080095bd
 80095ac:	080095d3 	.word	0x080095d3
 80095b0:	080095f1 	.word	0x080095f1
 80095b4:	080095f1 	.word	0x080095f1
 80095b8:	080095f1 	.word	0x080095f1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095c0:	3308      	adds	r3, #8
 80095c2:	2101      	movs	r1, #1
 80095c4:	4618      	mov	r0, r3
 80095c6:	f001 fe43 	bl	800b250 <RCCEx_PLL2_Config>
 80095ca:	4603      	mov	r3, r0
 80095cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80095d0:	e00f      	b.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095d6:	3328      	adds	r3, #40	; 0x28
 80095d8:	2101      	movs	r1, #1
 80095da:	4618      	mov	r0, r3
 80095dc:	f001 feea 	bl	800b3b4 <RCCEx_PLL3_Config>
 80095e0:	4603      	mov	r3, r0
 80095e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80095e6:	e004      	b.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095ee:	e000      	b.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80095f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d10a      	bne.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80095fa:	4b96      	ldr	r3, [pc, #600]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095fe:	f023 0107 	bic.w	r1, r3, #7
 8009602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009608:	4a92      	ldr	r2, [pc, #584]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800960a:	430b      	orrs	r3, r1
 800960c:	6553      	str	r3, [r2, #84]	; 0x54
 800960e:	e003      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009610:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009614:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800961c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009620:	f002 0304 	and.w	r3, r2, #4
 8009624:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009628:	2300      	movs	r3, #0
 800962a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800962e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009632:	460b      	mov	r3, r1
 8009634:	4313      	orrs	r3, r2
 8009636:	d044      	beq.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800963c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009640:	2b05      	cmp	r3, #5
 8009642:	d825      	bhi.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009644:	a201      	add	r2, pc, #4	; (adr r2, 800964c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964a:	bf00      	nop
 800964c:	08009699 	.word	0x08009699
 8009650:	08009665 	.word	0x08009665
 8009654:	0800967b 	.word	0x0800967b
 8009658:	08009699 	.word	0x08009699
 800965c:	08009699 	.word	0x08009699
 8009660:	08009699 	.word	0x08009699
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009668:	3308      	adds	r3, #8
 800966a:	2101      	movs	r1, #1
 800966c:	4618      	mov	r0, r3
 800966e:	f001 fdef 	bl	800b250 <RCCEx_PLL2_Config>
 8009672:	4603      	mov	r3, r0
 8009674:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009678:	e00f      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800967a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800967e:	3328      	adds	r3, #40	; 0x28
 8009680:	2101      	movs	r1, #1
 8009682:	4618      	mov	r0, r3
 8009684:	f001 fe96 	bl	800b3b4 <RCCEx_PLL3_Config>
 8009688:	4603      	mov	r3, r0
 800968a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800968e:	e004      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009696:	e000      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800969a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10b      	bne.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80096a2:	4b6c      	ldr	r3, [pc, #432]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80096a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096a6:	f023 0107 	bic.w	r1, r3, #7
 80096aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096b2:	4a68      	ldr	r2, [pc, #416]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80096b4:	430b      	orrs	r3, r1
 80096b6:	6593      	str	r3, [r2, #88]	; 0x58
 80096b8:	e003      	b.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80096c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ca:	f002 0320 	and.w	r3, r2, #32
 80096ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80096d2:	2300      	movs	r3, #0
 80096d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80096d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80096dc:	460b      	mov	r3, r1
 80096de:	4313      	orrs	r3, r2
 80096e0:	d055      	beq.n	800978e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80096e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096ee:	d033      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80096f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096f4:	d82c      	bhi.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80096f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096fa:	d02f      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80096fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009700:	d826      	bhi.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009702:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009706:	d02b      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009708:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800970c:	d820      	bhi.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800970e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009712:	d012      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009718:	d81a      	bhi.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800971a:	2b00      	cmp	r3, #0
 800971c:	d022      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800971e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009722:	d115      	bne.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009728:	3308      	adds	r3, #8
 800972a:	2100      	movs	r1, #0
 800972c:	4618      	mov	r0, r3
 800972e:	f001 fd8f 	bl	800b250 <RCCEx_PLL2_Config>
 8009732:	4603      	mov	r3, r0
 8009734:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009738:	e015      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800973a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800973e:	3328      	adds	r3, #40	; 0x28
 8009740:	2102      	movs	r1, #2
 8009742:	4618      	mov	r0, r3
 8009744:	f001 fe36 	bl	800b3b4 <RCCEx_PLL3_Config>
 8009748:	4603      	mov	r3, r0
 800974a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800974e:	e00a      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009756:	e006      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009758:	bf00      	nop
 800975a:	e004      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800975c:	bf00      	nop
 800975e:	e002      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009760:	bf00      	nop
 8009762:	e000      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009764:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009766:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800976a:	2b00      	cmp	r3, #0
 800976c:	d10b      	bne.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800976e:	4b39      	ldr	r3, [pc, #228]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009772:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800977a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800977e:	4a35      	ldr	r2, [pc, #212]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009780:	430b      	orrs	r3, r1
 8009782:	6553      	str	r3, [r2, #84]	; 0x54
 8009784:	e003      	b.n	800978e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009786:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800978a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800978e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800979a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800979e:	2300      	movs	r3, #0
 80097a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80097a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80097a8:	460b      	mov	r3, r1
 80097aa:	4313      	orrs	r3, r2
 80097ac:	d058      	beq.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80097ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80097ba:	d033      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80097bc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80097c0:	d82c      	bhi.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80097c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097c6:	d02f      	beq.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80097c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097cc:	d826      	bhi.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80097ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80097d2:	d02b      	beq.n	800982c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80097d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80097d8:	d820      	bhi.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80097da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097de:	d012      	beq.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80097e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097e4:	d81a      	bhi.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d022      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80097ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097ee:	d115      	bne.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097f4:	3308      	adds	r3, #8
 80097f6:	2100      	movs	r1, #0
 80097f8:	4618      	mov	r0, r3
 80097fa:	f001 fd29 	bl	800b250 <RCCEx_PLL2_Config>
 80097fe:	4603      	mov	r3, r0
 8009800:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009804:	e015      	b.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800980a:	3328      	adds	r3, #40	; 0x28
 800980c:	2102      	movs	r1, #2
 800980e:	4618      	mov	r0, r3
 8009810:	f001 fdd0 	bl	800b3b4 <RCCEx_PLL3_Config>
 8009814:	4603      	mov	r3, r0
 8009816:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800981a:	e00a      	b.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009822:	e006      	b.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009824:	bf00      	nop
 8009826:	e004      	b.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009828:	bf00      	nop
 800982a:	e002      	b.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800982c:	bf00      	nop
 800982e:	e000      	b.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009832:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009836:	2b00      	cmp	r3, #0
 8009838:	d10e      	bne.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800983a:	4b06      	ldr	r3, [pc, #24]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800983c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800983e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009846:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800984a:	4a02      	ldr	r2, [pc, #8]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800984c:	430b      	orrs	r3, r1
 800984e:	6593      	str	r3, [r2, #88]	; 0x58
 8009850:	e006      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009852:	bf00      	nop
 8009854:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009858:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800985c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009868:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800986c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009870:	2300      	movs	r3, #0
 8009872:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009876:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800987a:	460b      	mov	r3, r1
 800987c:	4313      	orrs	r3, r2
 800987e:	d055      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009884:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009888:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800988c:	d033      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800988e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009892:	d82c      	bhi.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009898:	d02f      	beq.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800989a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800989e:	d826      	bhi.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80098a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80098a4:	d02b      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80098a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80098aa:	d820      	bhi.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80098ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098b0:	d012      	beq.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80098b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098b6:	d81a      	bhi.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d022      	beq.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80098bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098c0:	d115      	bne.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098c6:	3308      	adds	r3, #8
 80098c8:	2100      	movs	r1, #0
 80098ca:	4618      	mov	r0, r3
 80098cc:	f001 fcc0 	bl	800b250 <RCCEx_PLL2_Config>
 80098d0:	4603      	mov	r3, r0
 80098d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80098d6:	e015      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098dc:	3328      	adds	r3, #40	; 0x28
 80098de:	2102      	movs	r1, #2
 80098e0:	4618      	mov	r0, r3
 80098e2:	f001 fd67 	bl	800b3b4 <RCCEx_PLL3_Config>
 80098e6:	4603      	mov	r3, r0
 80098e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80098ec:	e00a      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098f4:	e006      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80098f6:	bf00      	nop
 80098f8:	e004      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80098fa:	bf00      	nop
 80098fc:	e002      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80098fe:	bf00      	nop
 8009900:	e000      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009902:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009904:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10b      	bne.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800990c:	4ba1      	ldr	r3, [pc, #644]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800990e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009910:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009918:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800991c:	4a9d      	ldr	r2, [pc, #628]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800991e:	430b      	orrs	r3, r1
 8009920:	6593      	str	r3, [r2, #88]	; 0x58
 8009922:	e003      	b.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009924:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009928:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800992c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009934:	f002 0308 	and.w	r3, r2, #8
 8009938:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800993c:	2300      	movs	r3, #0
 800993e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009942:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009946:	460b      	mov	r3, r1
 8009948:	4313      	orrs	r3, r2
 800994a:	d01e      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800994c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009958:	d10c      	bne.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800995a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800995e:	3328      	adds	r3, #40	; 0x28
 8009960:	2102      	movs	r1, #2
 8009962:	4618      	mov	r0, r3
 8009964:	f001 fd26 	bl	800b3b4 <RCCEx_PLL3_Config>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d002      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009974:	4b87      	ldr	r3, [pc, #540]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009978:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800997c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009984:	4a83      	ldr	r2, [pc, #524]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009986:	430b      	orrs	r3, r1
 8009988:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800998a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800998e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009992:	f002 0310 	and.w	r3, r2, #16
 8009996:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800999a:	2300      	movs	r3, #0
 800999c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80099a0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80099a4:	460b      	mov	r3, r1
 80099a6:	4313      	orrs	r3, r2
 80099a8:	d01e      	beq.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80099aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80099b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099b6:	d10c      	bne.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80099b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099bc:	3328      	adds	r3, #40	; 0x28
 80099be:	2102      	movs	r1, #2
 80099c0:	4618      	mov	r0, r3
 80099c2:	f001 fcf7 	bl	800b3b4 <RCCEx_PLL3_Config>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d002      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80099d2:	4b70      	ldr	r3, [pc, #448]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80099da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80099e2:	4a6c      	ldr	r2, [pc, #432]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099e4:	430b      	orrs	r3, r1
 80099e6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80099e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80099f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099f8:	2300      	movs	r3, #0
 80099fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80099fe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009a02:	460b      	mov	r3, r1
 8009a04:	4313      	orrs	r3, r2
 8009a06:	d03e      	beq.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a14:	d022      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009a16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a1a:	d81b      	bhi.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d003      	beq.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a24:	d00b      	beq.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009a26:	e015      	b.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a2c:	3308      	adds	r3, #8
 8009a2e:	2100      	movs	r1, #0
 8009a30:	4618      	mov	r0, r3
 8009a32:	f001 fc0d 	bl	800b250 <RCCEx_PLL2_Config>
 8009a36:	4603      	mov	r3, r0
 8009a38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009a3c:	e00f      	b.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a42:	3328      	adds	r3, #40	; 0x28
 8009a44:	2102      	movs	r1, #2
 8009a46:	4618      	mov	r0, r3
 8009a48:	f001 fcb4 	bl	800b3b4 <RCCEx_PLL3_Config>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009a52:	e004      	b.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a5a:	e000      	b.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d10b      	bne.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009a66:	4b4b      	ldr	r3, [pc, #300]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a6a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a76:	4a47      	ldr	r2, [pc, #284]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a78:	430b      	orrs	r3, r1
 8009a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8009a7c:	e003      	b.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009a92:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a94:	2300      	movs	r3, #0
 8009a96:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a98:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	d03b      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aaa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009aae:	d01f      	beq.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009ab0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ab4:	d818      	bhi.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009aba:	d003      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009abc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ac0:	d007      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009ac2:	e011      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ac4:	4b33      	ldr	r3, [pc, #204]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac8:	4a32      	ldr	r2, [pc, #200]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ace:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009ad0:	e00f      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ad6:	3328      	adds	r3, #40	; 0x28
 8009ad8:	2101      	movs	r1, #1
 8009ada:	4618      	mov	r0, r3
 8009adc:	f001 fc6a 	bl	800b3b4 <RCCEx_PLL3_Config>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009ae6:	e004      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009aee:	e000      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009af2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10b      	bne.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009afa:	4b26      	ldr	r3, [pc, #152]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009afe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b0a:	4a22      	ldr	r2, [pc, #136]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b0c:	430b      	orrs	r3, r1
 8009b0e:	6553      	str	r3, [r2, #84]	; 0x54
 8009b10:	e003      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b22:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009b26:	673b      	str	r3, [r7, #112]	; 0x70
 8009b28:	2300      	movs	r3, #0
 8009b2a:	677b      	str	r3, [r7, #116]	; 0x74
 8009b2c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009b30:	460b      	mov	r3, r1
 8009b32:	4313      	orrs	r3, r2
 8009b34:	d034      	beq.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d003      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b44:	d007      	beq.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009b46:	e011      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b48:	4b12      	ldr	r3, [pc, #72]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4c:	4a11      	ldr	r2, [pc, #68]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009b54:	e00e      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b5a:	3308      	adds	r3, #8
 8009b5c:	2102      	movs	r1, #2
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f001 fb76 	bl	800b250 <RCCEx_PLL2_Config>
 8009b64:	4603      	mov	r3, r0
 8009b66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009b6a:	e003      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10d      	bne.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009b7c:	4b05      	ldr	r3, [pc, #20]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b8a:	4a02      	ldr	r2, [pc, #8]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b8c:	430b      	orrs	r3, r1
 8009b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b90:	e006      	b.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009b92:	bf00      	nop
 8009b94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009bac:	66bb      	str	r3, [r7, #104]	; 0x68
 8009bae:	2300      	movs	r3, #0
 8009bb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bb2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	d00c      	beq.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bc0:	3328      	adds	r3, #40	; 0x28
 8009bc2:	2102      	movs	r1, #2
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f001 fbf5 	bl	800b3b4 <RCCEx_PLL3_Config>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d002      	beq.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bde:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009be2:	663b      	str	r3, [r7, #96]	; 0x60
 8009be4:	2300      	movs	r3, #0
 8009be6:	667b      	str	r3, [r7, #100]	; 0x64
 8009be8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009bec:	460b      	mov	r3, r1
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	d038      	beq.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bfe:	d018      	beq.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009c00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c04:	d811      	bhi.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c0a:	d014      	beq.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c10:	d80b      	bhi.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d011      	beq.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c1a:	d106      	bne.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c1c:	4bc3      	ldr	r3, [pc, #780]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c20:	4ac2      	ldr	r2, [pc, #776]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009c28:	e008      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c30:	e004      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009c32:	bf00      	nop
 8009c34:	e002      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009c36:	bf00      	nop
 8009c38:	e000      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009c3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d10b      	bne.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009c44:	4bb9      	ldr	r3, [pc, #740]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c48:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c54:	4ab5      	ldr	r2, [pc, #724]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c56:	430b      	orrs	r3, r1
 8009c58:	6553      	str	r3, [r2, #84]	; 0x54
 8009c5a:	e003      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009c70:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c72:	2300      	movs	r3, #0
 8009c74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c76:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	d009      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c80:	4baa      	ldr	r3, [pc, #680]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c84:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c8e:	4aa7      	ldr	r2, [pc, #668]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c90:	430b      	orrs	r3, r1
 8009c92:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009ca0:	653b      	str	r3, [r7, #80]	; 0x50
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	657b      	str	r3, [r7, #84]	; 0x54
 8009ca6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009caa:	460b      	mov	r3, r1
 8009cac:	4313      	orrs	r3, r2
 8009cae:	d00a      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009cb0:	4b9e      	ldr	r3, [pc, #632]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cbc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009cc0:	4a9a      	ldr	r2, [pc, #616]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cc2:	430b      	orrs	r3, r1
 8009cc4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cce:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009cd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cd8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009cdc:	460b      	mov	r3, r1
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	d009      	beq.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009ce2:	4b92      	ldr	r3, [pc, #584]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ce6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cf0:	4a8e      	ldr	r2, [pc, #568]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cf2:	430b      	orrs	r3, r1
 8009cf4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfe:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009d02:	643b      	str	r3, [r7, #64]	; 0x40
 8009d04:	2300      	movs	r3, #0
 8009d06:	647b      	str	r3, [r7, #68]	; 0x44
 8009d08:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	d00e      	beq.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009d12:	4b86      	ldr	r3, [pc, #536]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	4a85      	ldr	r2, [pc, #532]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d1c:	6113      	str	r3, [r2, #16]
 8009d1e:	4b83      	ldr	r3, [pc, #524]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d20:	6919      	ldr	r1, [r3, #16]
 8009d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d26:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009d2a:	4a80      	ldr	r2, [pc, #512]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d2c:	430b      	orrs	r3, r1
 8009d2e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d38:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009d3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d3e:	2300      	movs	r3, #0
 8009d40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d42:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009d46:	460b      	mov	r3, r1
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	d009      	beq.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009d4c:	4b77      	ldr	r3, [pc, #476]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d50:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d5a:	4a74      	ldr	r2, [pc, #464]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d5c:	430b      	orrs	r3, r1
 8009d5e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d68:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009d6c:	633b      	str	r3, [r7, #48]	; 0x30
 8009d6e:	2300      	movs	r3, #0
 8009d70:	637b      	str	r3, [r7, #52]	; 0x34
 8009d72:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009d76:	460b      	mov	r3, r1
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	d00a      	beq.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009d7c:	4b6b      	ldr	r3, [pc, #428]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d80:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d8c:	4a67      	ldr	r2, [pc, #412]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d8e:	430b      	orrs	r3, r1
 8009d90:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	62b9      	str	r1, [r7, #40]	; 0x28
 8009d9e:	f003 0301 	and.w	r3, r3, #1
 8009da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009da4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009da8:	460b      	mov	r3, r1
 8009daa:	4313      	orrs	r3, r2
 8009dac:	d011      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009db2:	3308      	adds	r3, #8
 8009db4:	2100      	movs	r1, #0
 8009db6:	4618      	mov	r0, r3
 8009db8:	f001 fa4a 	bl	800b250 <RCCEx_PLL2_Config>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d003      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dda:	2100      	movs	r1, #0
 8009ddc:	6239      	str	r1, [r7, #32]
 8009dde:	f003 0302 	and.w	r3, r3, #2
 8009de2:	627b      	str	r3, [r7, #36]	; 0x24
 8009de4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009de8:	460b      	mov	r3, r1
 8009dea:	4313      	orrs	r3, r2
 8009dec:	d011      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009df2:	3308      	adds	r3, #8
 8009df4:	2101      	movs	r1, #1
 8009df6:	4618      	mov	r0, r3
 8009df8:	f001 fa2a 	bl	800b250 <RCCEx_PLL2_Config>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009e02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d003      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	61b9      	str	r1, [r7, #24]
 8009e1e:	f003 0304 	and.w	r3, r3, #4
 8009e22:	61fb      	str	r3, [r7, #28]
 8009e24:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009e28:	460b      	mov	r3, r1
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	d011      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e32:	3308      	adds	r3, #8
 8009e34:	2102      	movs	r1, #2
 8009e36:	4618      	mov	r0, r3
 8009e38:	f001 fa0a 	bl	800b250 <RCCEx_PLL2_Config>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009e42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d003      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	6139      	str	r1, [r7, #16]
 8009e5e:	f003 0308 	and.w	r3, r3, #8
 8009e62:	617b      	str	r3, [r7, #20]
 8009e64:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	d011      	beq.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e72:	3328      	adds	r3, #40	; 0x28
 8009e74:	2100      	movs	r1, #0
 8009e76:	4618      	mov	r0, r3
 8009e78:	f001 fa9c 	bl	800b3b4 <RCCEx_PLL3_Config>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8009e82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d003      	beq.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	f003 0310 	and.w	r3, r3, #16
 8009ea2:	60fb      	str	r3, [r7, #12]
 8009ea4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	d011      	beq.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eb2:	3328      	adds	r3, #40	; 0x28
 8009eb4:	2101      	movs	r1, #1
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f001 fa7c 	bl	800b3b4 <RCCEx_PLL3_Config>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d003      	beq.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ece:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eda:	2100      	movs	r1, #0
 8009edc:	6039      	str	r1, [r7, #0]
 8009ede:	f003 0320 	and.w	r3, r3, #32
 8009ee2:	607b      	str	r3, [r7, #4]
 8009ee4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009ee8:	460b      	mov	r3, r1
 8009eea:	4313      	orrs	r3, r2
 8009eec:	d011      	beq.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ef2:	3328      	adds	r3, #40	; 0x28
 8009ef4:	2102      	movs	r1, #2
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f001 fa5c 	bl	800b3b4 <RCCEx_PLL3_Config>
 8009efc:	4603      	mov	r3, r0
 8009efe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009f02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d003      	beq.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009f12:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d101      	bne.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	e000      	b.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009f26:	46bd      	mov	sp, r7
 8009f28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f2c:	58024400 	.word	0x58024400

08009f30 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b090      	sub	sp, #64	; 0x40
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009f3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f3e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009f42:	430b      	orrs	r3, r1
 8009f44:	f040 8094 	bne.w	800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009f48:	4b9e      	ldr	r3, [pc, #632]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f4c:	f003 0307 	and.w	r3, r3, #7
 8009f50:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f54:	2b04      	cmp	r3, #4
 8009f56:	f200 8087 	bhi.w	800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009f5a:	a201      	add	r2, pc, #4	; (adr r2, 8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f60:	08009f75 	.word	0x08009f75
 8009f64:	08009f9d 	.word	0x08009f9d
 8009f68:	08009fc5 	.word	0x08009fc5
 8009f6c:	0800a061 	.word	0x0800a061
 8009f70:	08009fed 	.word	0x08009fed
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f74:	4b93      	ldr	r3, [pc, #588]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f80:	d108      	bne.n	8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f86:	4618      	mov	r0, r3
 8009f88:	f001 f810 	bl	800afac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f90:	f000 bd45 	b.w	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f94:	2300      	movs	r3, #0
 8009f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f98:	f000 bd41 	b.w	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f9c:	4b89      	ldr	r3, [pc, #548]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009fa8:	d108      	bne.n	8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009faa:	f107 0318 	add.w	r3, r7, #24
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f000 fd54 	bl	800aa5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fb8:	f000 bd31 	b.w	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fc0:	f000 bd2d 	b.w	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009fc4:	4b7f      	ldr	r3, [pc, #508]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fd0:	d108      	bne.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fd2:	f107 030c 	add.w	r3, r7, #12
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f000 fe94 	bl	800ad04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fe0:	f000 bd1d 	b.w	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fe8:	f000 bd19 	b.w	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009fec:	4b75      	ldr	r3, [pc, #468]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ff0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ff4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ff6:	4b73      	ldr	r3, [pc, #460]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f003 0304 	and.w	r3, r3, #4
 8009ffe:	2b04      	cmp	r3, #4
 800a000:	d10c      	bne.n	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a004:	2b00      	cmp	r3, #0
 800a006:	d109      	bne.n	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a008:	4b6e      	ldr	r3, [pc, #440]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	08db      	lsrs	r3, r3, #3
 800a00e:	f003 0303 	and.w	r3, r3, #3
 800a012:	4a6d      	ldr	r2, [pc, #436]	; (800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a014:	fa22 f303 	lsr.w	r3, r2, r3
 800a018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a01a:	e01f      	b.n	800a05c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a01c:	4b69      	ldr	r3, [pc, #420]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a028:	d106      	bne.n	800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a02c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a030:	d102      	bne.n	800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a032:	4b66      	ldr	r3, [pc, #408]	; (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a034:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a036:	e011      	b.n	800a05c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a038:	4b62      	ldr	r3, [pc, #392]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a044:	d106      	bne.n	800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a04c:	d102      	bne.n	800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a04e:	4b60      	ldr	r3, [pc, #384]	; (800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a050:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a052:	e003      	b.n	800a05c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a054:	2300      	movs	r3, #0
 800a056:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a058:	f000 bce1 	b.w	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a05c:	f000 bcdf 	b.w	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a060:	4b5c      	ldr	r3, [pc, #368]	; (800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a064:	f000 bcdb 	b.w	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a068:	2300      	movs	r3, #0
 800a06a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a06c:	f000 bcd7 	b.w	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a070:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a074:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a078:	430b      	orrs	r3, r1
 800a07a:	f040 80ad 	bne.w	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a07e:	4b51      	ldr	r3, [pc, #324]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a082:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a086:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a08e:	d056      	beq.n	800a13e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a096:	f200 8090 	bhi.w	800a1ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	2bc0      	cmp	r3, #192	; 0xc0
 800a09e:	f000 8088 	beq.w	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a4:	2bc0      	cmp	r3, #192	; 0xc0
 800a0a6:	f200 8088 	bhi.w	800a1ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ac:	2b80      	cmp	r3, #128	; 0x80
 800a0ae:	d032      	beq.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b2:	2b80      	cmp	r3, #128	; 0x80
 800a0b4:	f200 8081 	bhi.w	800a1ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d003      	beq.n	800a0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c0:	2b40      	cmp	r3, #64	; 0x40
 800a0c2:	d014      	beq.n	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a0c4:	e079      	b.n	800a1ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a0c6:	4b3f      	ldr	r3, [pc, #252]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0d2:	d108      	bne.n	800a0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f000 ff67 	bl	800afac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0e2:	f000 bc9c 	b.w	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0ea:	f000 bc98 	b.w	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0ee:	4b35      	ldr	r3, [pc, #212]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0fa:	d108      	bne.n	800a10e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0fc:	f107 0318 	add.w	r3, r7, #24
 800a100:	4618      	mov	r0, r3
 800a102:	f000 fcab 	bl	800aa5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a10a:	f000 bc88 	b.w	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a10e:	2300      	movs	r3, #0
 800a110:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a112:	f000 bc84 	b.w	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a116:	4b2b      	ldr	r3, [pc, #172]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a11e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a122:	d108      	bne.n	800a136 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a124:	f107 030c 	add.w	r3, r7, #12
 800a128:	4618      	mov	r0, r3
 800a12a:	f000 fdeb 	bl	800ad04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a132:	f000 bc74 	b.w	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a136:	2300      	movs	r3, #0
 800a138:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a13a:	f000 bc70 	b.w	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a13e:	4b21      	ldr	r3, [pc, #132]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a142:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a146:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a148:	4b1e      	ldr	r3, [pc, #120]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f003 0304 	and.w	r3, r3, #4
 800a150:	2b04      	cmp	r3, #4
 800a152:	d10c      	bne.n	800a16e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a156:	2b00      	cmp	r3, #0
 800a158:	d109      	bne.n	800a16e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a15a:	4b1a      	ldr	r3, [pc, #104]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	08db      	lsrs	r3, r3, #3
 800a160:	f003 0303 	and.w	r3, r3, #3
 800a164:	4a18      	ldr	r2, [pc, #96]	; (800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a166:	fa22 f303 	lsr.w	r3, r2, r3
 800a16a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a16c:	e01f      	b.n	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a16e:	4b15      	ldr	r3, [pc, #84]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a17a:	d106      	bne.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a17c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a17e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a182:	d102      	bne.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a184:	4b11      	ldr	r3, [pc, #68]	; (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a186:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a188:	e011      	b.n	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a18a:	4b0e      	ldr	r3, [pc, #56]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a192:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a196:	d106      	bne.n	800a1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a19a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a19e:	d102      	bne.n	800a1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a1a0:	4b0b      	ldr	r3, [pc, #44]	; (800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1a4:	e003      	b.n	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a1aa:	f000 bc38 	b.w	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a1ae:	f000 bc36 	b.w	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a1b2:	4b08      	ldr	r3, [pc, #32]	; (800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1b6:	f000 bc32 	b.w	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1be:	f000 bc2e 	b.w	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a1c2:	bf00      	nop
 800a1c4:	58024400 	.word	0x58024400
 800a1c8:	03d09000 	.word	0x03d09000
 800a1cc:	003d0900 	.word	0x003d0900
 800a1d0:	017d7840 	.word	0x017d7840
 800a1d4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a1d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1dc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a1e0:	430b      	orrs	r3, r1
 800a1e2:	f040 809c 	bne.w	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a1e6:	4b9e      	ldr	r3, [pc, #632]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1ea:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a1ee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a1f6:	d054      	beq.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a1fe:	f200 808b 	bhi.w	800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a204:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a208:	f000 8083 	beq.w	800a312 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a212:	f200 8081 	bhi.w	800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a21c:	d02f      	beq.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a220:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a224:	d878      	bhi.n	800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d004      	beq.n	800a236 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a232:	d012      	beq.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a234:	e070      	b.n	800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a236:	4b8a      	ldr	r3, [pc, #552]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a23e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a242:	d107      	bne.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a248:	4618      	mov	r0, r3
 800a24a:	f000 feaf 	bl	800afac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a250:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a252:	e3e4      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a254:	2300      	movs	r3, #0
 800a256:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a258:	e3e1      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a25a:	4b81      	ldr	r3, [pc, #516]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a262:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a266:	d107      	bne.n	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a268:	f107 0318 	add.w	r3, r7, #24
 800a26c:	4618      	mov	r0, r3
 800a26e:	f000 fbf5 	bl	800aa5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a276:	e3d2      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a278:	2300      	movs	r3, #0
 800a27a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a27c:	e3cf      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a27e:	4b78      	ldr	r3, [pc, #480]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a28a:	d107      	bne.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a28c:	f107 030c 	add.w	r3, r7, #12
 800a290:	4618      	mov	r0, r3
 800a292:	f000 fd37 	bl	800ad04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a29a:	e3c0      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a29c:	2300      	movs	r3, #0
 800a29e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2a0:	e3bd      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a2a2:	4b6f      	ldr	r3, [pc, #444]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a2aa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a2ac:	4b6c      	ldr	r3, [pc, #432]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 0304 	and.w	r3, r3, #4
 800a2b4:	2b04      	cmp	r3, #4
 800a2b6:	d10c      	bne.n	800a2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a2b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d109      	bne.n	800a2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2be:	4b68      	ldr	r3, [pc, #416]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	08db      	lsrs	r3, r3, #3
 800a2c4:	f003 0303 	and.w	r3, r3, #3
 800a2c8:	4a66      	ldr	r2, [pc, #408]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a2ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2d0:	e01e      	b.n	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a2d2:	4b63      	ldr	r3, [pc, #396]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2de:	d106      	bne.n	800a2ee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a2e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2e6:	d102      	bne.n	800a2ee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a2e8:	4b5f      	ldr	r3, [pc, #380]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2ec:	e010      	b.n	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a2ee:	4b5c      	ldr	r3, [pc, #368]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2fa:	d106      	bne.n	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a302:	d102      	bne.n	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a304:	4b59      	ldr	r3, [pc, #356]	; (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a306:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a308:	e002      	b.n	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a30a:	2300      	movs	r3, #0
 800a30c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a30e:	e386      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a310:	e385      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a312:	4b57      	ldr	r3, [pc, #348]	; (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a314:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a316:	e382      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a318:	2300      	movs	r3, #0
 800a31a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a31c:	e37f      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a31e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a322:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a326:	430b      	orrs	r3, r1
 800a328:	f040 80a7 	bne.w	800a47a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a32c:	4b4c      	ldr	r3, [pc, #304]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a32e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a330:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a334:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a338:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a33c:	d055      	beq.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a340:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a344:	f200 8096 	bhi.w	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a34e:	f000 8084 	beq.w	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a354:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a358:	f200 808c 	bhi.w	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a362:	d030      	beq.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a366:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a36a:	f200 8083 	bhi.w	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a370:	2b00      	cmp	r3, #0
 800a372:	d004      	beq.n	800a37e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a376:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a37a:	d012      	beq.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a37c:	e07a      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a37e:	4b38      	ldr	r3, [pc, #224]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a386:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a38a:	d107      	bne.n	800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a38c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a390:	4618      	mov	r0, r3
 800a392:	f000 fe0b 	bl	800afac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a398:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a39a:	e340      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a39c:	2300      	movs	r3, #0
 800a39e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3a0:	e33d      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3a2:	4b2f      	ldr	r3, [pc, #188]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3ae:	d107      	bne.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3b0:	f107 0318 	add.w	r3, r7, #24
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f000 fb51 	bl	800aa5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3be:	e32e      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3c4:	e32b      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a3c6:	4b26      	ldr	r3, [pc, #152]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3d2:	d107      	bne.n	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3d4:	f107 030c 	add.w	r3, r7, #12
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f000 fc93 	bl	800ad04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3e2:	e31c      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3e8:	e319      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a3ea:	4b1d      	ldr	r3, [pc, #116]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a3f2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a3f4:	4b1a      	ldr	r3, [pc, #104]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f003 0304 	and.w	r3, r3, #4
 800a3fc:	2b04      	cmp	r3, #4
 800a3fe:	d10c      	bne.n	800a41a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a402:	2b00      	cmp	r3, #0
 800a404:	d109      	bne.n	800a41a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a406:	4b16      	ldr	r3, [pc, #88]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	08db      	lsrs	r3, r3, #3
 800a40c:	f003 0303 	and.w	r3, r3, #3
 800a410:	4a14      	ldr	r2, [pc, #80]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a412:	fa22 f303 	lsr.w	r3, r2, r3
 800a416:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a418:	e01e      	b.n	800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a41a:	4b11      	ldr	r3, [pc, #68]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a426:	d106      	bne.n	800a436 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a42a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a42e:	d102      	bne.n	800a436 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a430:	4b0d      	ldr	r3, [pc, #52]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a432:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a434:	e010      	b.n	800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a436:	4b0a      	ldr	r3, [pc, #40]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a43e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a442:	d106      	bne.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a446:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a44a:	d102      	bne.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a44c:	4b07      	ldr	r3, [pc, #28]	; (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a44e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a450:	e002      	b.n	800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a452:	2300      	movs	r3, #0
 800a454:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a456:	e2e2      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a458:	e2e1      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a45a:	4b05      	ldr	r3, [pc, #20]	; (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a45c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a45e:	e2de      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a460:	58024400 	.word	0x58024400
 800a464:	03d09000 	.word	0x03d09000
 800a468:	003d0900 	.word	0x003d0900
 800a46c:	017d7840 	.word	0x017d7840
 800a470:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a474:	2300      	movs	r3, #0
 800a476:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a478:	e2d1      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a47a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a47e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a482:	430b      	orrs	r3, r1
 800a484:	f040 809c 	bne.w	800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a488:	4b93      	ldr	r3, [pc, #588]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a48a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a48c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a490:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a498:	d054      	beq.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4a0:	f200 808b 	bhi.w	800a5ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a4aa:	f000 8083 	beq.w	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a4b4:	f200 8081 	bhi.w	800a5ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4be:	d02f      	beq.n	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4c6:	d878      	bhi.n	800a5ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d004      	beq.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4d4:	d012      	beq.n	800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a4d6:	e070      	b.n	800a5ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4d8:	4b7f      	ldr	r3, [pc, #508]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4e4:	d107      	bne.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f000 fd5e 	bl	800afac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4f4:	e293      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4fa:	e290      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4fc:	4b76      	ldr	r3, [pc, #472]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a504:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a508:	d107      	bne.n	800a51a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a50a:	f107 0318 	add.w	r3, r7, #24
 800a50e:	4618      	mov	r0, r3
 800a510:	f000 faa4 	bl	800aa5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a518:	e281      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a51a:	2300      	movs	r3, #0
 800a51c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a51e:	e27e      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a520:	4b6d      	ldr	r3, [pc, #436]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a52c:	d107      	bne.n	800a53e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a52e:	f107 030c 	add.w	r3, r7, #12
 800a532:	4618      	mov	r0, r3
 800a534:	f000 fbe6 	bl	800ad04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a53c:	e26f      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a53e:	2300      	movs	r3, #0
 800a540:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a542:	e26c      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a544:	4b64      	ldr	r3, [pc, #400]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a548:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a54c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a54e:	4b62      	ldr	r3, [pc, #392]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 0304 	and.w	r3, r3, #4
 800a556:	2b04      	cmp	r3, #4
 800a558:	d10c      	bne.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d109      	bne.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a560:	4b5d      	ldr	r3, [pc, #372]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	08db      	lsrs	r3, r3, #3
 800a566:	f003 0303 	and.w	r3, r3, #3
 800a56a:	4a5c      	ldr	r2, [pc, #368]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a56c:	fa22 f303 	lsr.w	r3, r2, r3
 800a570:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a572:	e01e      	b.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a574:	4b58      	ldr	r3, [pc, #352]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a57c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a580:	d106      	bne.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a584:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a588:	d102      	bne.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a58a:	4b55      	ldr	r3, [pc, #340]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a58c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a58e:	e010      	b.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a590:	4b51      	ldr	r3, [pc, #324]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a59c:	d106      	bne.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5a4:	d102      	bne.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a5a6:	4b4f      	ldr	r3, [pc, #316]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5aa:	e002      	b.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a5b0:	e235      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5b2:	e234      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a5b4:	4b4c      	ldr	r3, [pc, #304]	; (800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5b8:	e231      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5be:	e22e      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a5c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5c4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a5c8:	430b      	orrs	r3, r1
 800a5ca:	f040 808f 	bne.w	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a5ce:	4b42      	ldr	r3, [pc, #264]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a5d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5d2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a5d6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800a5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a5de:	d06b      	beq.n	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a5e6:	d874      	bhi.n	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a5ee:	d056      	beq.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a5f6:	d86c      	bhi.n	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a5fe:	d03b      	beq.n	800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a602:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a606:	d864      	bhi.n	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a60e:	d021      	beq.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a612:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a616:	d85c      	bhi.n	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d004      	beq.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a624:	d004      	beq.n	800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a626:	e054      	b.n	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a628:	f7fe fa4c 	bl	8008ac4 <HAL_RCC_GetPCLK1Freq>
 800a62c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a62e:	e1f6      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a630:	4b29      	ldr	r3, [pc, #164]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a638:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a63c:	d107      	bne.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a63e:	f107 0318 	add.w	r3, r7, #24
 800a642:	4618      	mov	r0, r3
 800a644:	f000 fa0a 	bl	800aa5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a64c:	e1e7      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a64e:	2300      	movs	r3, #0
 800a650:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a652:	e1e4      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a654:	4b20      	ldr	r3, [pc, #128]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a65c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a660:	d107      	bne.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a662:	f107 030c 	add.w	r3, r7, #12
 800a666:	4618      	mov	r0, r3
 800a668:	f000 fb4c 	bl	800ad04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a670:	e1d5      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a672:	2300      	movs	r3, #0
 800a674:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a676:	e1d2      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a678:	4b17      	ldr	r3, [pc, #92]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 0304 	and.w	r3, r3, #4
 800a680:	2b04      	cmp	r3, #4
 800a682:	d109      	bne.n	800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a684:	4b14      	ldr	r3, [pc, #80]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	08db      	lsrs	r3, r3, #3
 800a68a:	f003 0303 	and.w	r3, r3, #3
 800a68e:	4a13      	ldr	r2, [pc, #76]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a690:	fa22 f303 	lsr.w	r3, r2, r3
 800a694:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a696:	e1c2      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a698:	2300      	movs	r3, #0
 800a69a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a69c:	e1bf      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a69e:	4b0e      	ldr	r3, [pc, #56]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6aa:	d102      	bne.n	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a6ac:	4b0c      	ldr	r3, [pc, #48]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6b0:	e1b5      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6b6:	e1b2      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a6b8:	4b07      	ldr	r3, [pc, #28]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6c4:	d102      	bne.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a6c6:	4b07      	ldr	r3, [pc, #28]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6ca:	e1a8      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6d0:	e1a5      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6d6:	e1a2      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a6d8:	58024400 	.word	0x58024400
 800a6dc:	03d09000 	.word	0x03d09000
 800a6e0:	003d0900 	.word	0x003d0900
 800a6e4:	017d7840 	.word	0x017d7840
 800a6e8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a6ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6f0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a6f4:	430b      	orrs	r3, r1
 800a6f6:	d173      	bne.n	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a6f8:	4b9c      	ldr	r3, [pc, #624]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a700:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a704:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a708:	d02f      	beq.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a710:	d863      	bhi.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a714:	2b00      	cmp	r3, #0
 800a716:	d004      	beq.n	800a722 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a71a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a71e:	d012      	beq.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a720:	e05b      	b.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a722:	4b92      	ldr	r3, [pc, #584]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a72a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a72e:	d107      	bne.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a730:	f107 0318 	add.w	r3, r7, #24
 800a734:	4618      	mov	r0, r3
 800a736:	f000 f991 	bl	800aa5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a73e:	e16e      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a740:	2300      	movs	r3, #0
 800a742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a744:	e16b      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a746:	4b89      	ldr	r3, [pc, #548]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a74e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a752:	d107      	bne.n	800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a754:	f107 030c 	add.w	r3, r7, #12
 800a758:	4618      	mov	r0, r3
 800a75a:	f000 fad3 	bl	800ad04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a762:	e15c      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a764:	2300      	movs	r3, #0
 800a766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a768:	e159      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a76a:	4b80      	ldr	r3, [pc, #512]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a76c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a76e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a772:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a774:	4b7d      	ldr	r3, [pc, #500]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f003 0304 	and.w	r3, r3, #4
 800a77c:	2b04      	cmp	r3, #4
 800a77e:	d10c      	bne.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a782:	2b00      	cmp	r3, #0
 800a784:	d109      	bne.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a786:	4b79      	ldr	r3, [pc, #484]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	08db      	lsrs	r3, r3, #3
 800a78c:	f003 0303 	and.w	r3, r3, #3
 800a790:	4a77      	ldr	r2, [pc, #476]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a792:	fa22 f303 	lsr.w	r3, r2, r3
 800a796:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a798:	e01e      	b.n	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a79a:	4b74      	ldr	r3, [pc, #464]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7a6:	d106      	bne.n	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a7a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7ae:	d102      	bne.n	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a7b0:	4b70      	ldr	r3, [pc, #448]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7b4:	e010      	b.n	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7b6:	4b6d      	ldr	r3, [pc, #436]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7c2:	d106      	bne.n	800a7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a7c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7ca:	d102      	bne.n	800a7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a7cc:	4b6a      	ldr	r3, [pc, #424]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7d0:	e002      	b.n	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a7d6:	e122      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a7d8:	e121      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7de:	e11e      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a7e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7e4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a7e8:	430b      	orrs	r3, r1
 800a7ea:	d133      	bne.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a7ec:	4b5f      	ldr	r3, [pc, #380]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7f4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d004      	beq.n	800a806 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a802:	d012      	beq.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a804:	e023      	b.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a806:	4b59      	ldr	r3, [pc, #356]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a80e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a812:	d107      	bne.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a818:	4618      	mov	r0, r3
 800a81a:	f000 fbc7 	bl	800afac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a820:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a822:	e0fc      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a824:	2300      	movs	r3, #0
 800a826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a828:	e0f9      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a82a:	4b50      	ldr	r3, [pc, #320]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a832:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a836:	d107      	bne.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a838:	f107 0318 	add.w	r3, r7, #24
 800a83c:	4618      	mov	r0, r3
 800a83e:	f000 f90d 	bl	800aa5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a842:	6a3b      	ldr	r3, [r7, #32]
 800a844:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a846:	e0ea      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a848:	2300      	movs	r3, #0
 800a84a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a84c:	e0e7      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a84e:	2300      	movs	r3, #0
 800a850:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a852:	e0e4      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a854:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a858:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a85c:	430b      	orrs	r3, r1
 800a85e:	f040 808d 	bne.w	800a97c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a862:	4b42      	ldr	r3, [pc, #264]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a866:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a86a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a86e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a872:	d06b      	beq.n	800a94c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a876:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a87a:	d874      	bhi.n	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a882:	d056      	beq.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a88a:	d86c      	bhi.n	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a88e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a892:	d03b      	beq.n	800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a896:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a89a:	d864      	bhi.n	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8a2:	d021      	beq.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8aa:	d85c      	bhi.n	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d004      	beq.n	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8b8:	d004      	beq.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a8ba:	e054      	b.n	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a8bc:	f000 f8b8 	bl	800aa30 <HAL_RCCEx_GetD3PCLK1Freq>
 800a8c0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a8c2:	e0ac      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8c4:	4b29      	ldr	r3, [pc, #164]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8d0:	d107      	bne.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8d2:	f107 0318 	add.w	r3, r7, #24
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f000 f8c0 	bl	800aa5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8e0:	e09d      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8e6:	e09a      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8e8:	4b20      	ldr	r3, [pc, #128]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8f4:	d107      	bne.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8f6:	f107 030c 	add.w	r3, r7, #12
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f000 fa02 	bl	800ad04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a904:	e08b      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a906:	2300      	movs	r3, #0
 800a908:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a90a:	e088      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a90c:	4b17      	ldr	r3, [pc, #92]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 0304 	and.w	r3, r3, #4
 800a914:	2b04      	cmp	r3, #4
 800a916:	d109      	bne.n	800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a918:	4b14      	ldr	r3, [pc, #80]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	08db      	lsrs	r3, r3, #3
 800a91e:	f003 0303 	and.w	r3, r3, #3
 800a922:	4a13      	ldr	r2, [pc, #76]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a924:	fa22 f303 	lsr.w	r3, r2, r3
 800a928:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a92a:	e078      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a92c:	2300      	movs	r3, #0
 800a92e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a930:	e075      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a932:	4b0e      	ldr	r3, [pc, #56]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a93a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a93e:	d102      	bne.n	800a946 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a940:	4b0c      	ldr	r3, [pc, #48]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a942:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a944:	e06b      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a946:	2300      	movs	r3, #0
 800a948:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a94a:	e068      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a94c:	4b07      	ldr	r3, [pc, #28]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a954:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a958:	d102      	bne.n	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a95a:	4b07      	ldr	r3, [pc, #28]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a95c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a95e:	e05e      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a960:	2300      	movs	r3, #0
 800a962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a964:	e05b      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a966:	2300      	movs	r3, #0
 800a968:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a96a:	e058      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a96c:	58024400 	.word	0x58024400
 800a970:	03d09000 	.word	0x03d09000
 800a974:	003d0900 	.word	0x003d0900
 800a978:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a97c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a980:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a984:	430b      	orrs	r3, r1
 800a986:	d148      	bne.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a988:	4b27      	ldr	r3, [pc, #156]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a98a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a98c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a990:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a998:	d02a      	beq.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9a0:	d838      	bhi.n	800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d004      	beq.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9ae:	d00d      	beq.n	800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a9b0:	e030      	b.n	800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a9b2:	4b1d      	ldr	r3, [pc, #116]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a9be:	d102      	bne.n	800a9c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a9c0:	4b1a      	ldr	r3, [pc, #104]	; (800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9c4:	e02b      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9ca:	e028      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9cc:	4b16      	ldr	r3, [pc, #88]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9d8:	d107      	bne.n	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f000 fae4 	bl	800afac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9e8:	e019      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9ee:	e016      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9f0:	4b0d      	ldr	r3, [pc, #52]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9fc:	d107      	bne.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9fe:	f107 0318 	add.w	r3, r7, #24
 800aa02:	4618      	mov	r0, r3
 800aa04:	f000 f82a 	bl	800aa5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa08:	69fb      	ldr	r3, [r7, #28]
 800aa0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa0c:	e007      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa12:	e004      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aa14:	2300      	movs	r3, #0
 800aa16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa18:	e001      	b.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800aa1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3740      	adds	r7, #64	; 0x40
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	58024400 	.word	0x58024400
 800aa2c:	017d7840 	.word	0x017d7840

0800aa30 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aa34:	f7fe f816 	bl	8008a64 <HAL_RCC_GetHCLKFreq>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	4b06      	ldr	r3, [pc, #24]	; (800aa54 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aa3c:	6a1b      	ldr	r3, [r3, #32]
 800aa3e:	091b      	lsrs	r3, r3, #4
 800aa40:	f003 0307 	and.w	r3, r3, #7
 800aa44:	4904      	ldr	r1, [pc, #16]	; (800aa58 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aa46:	5ccb      	ldrb	r3, [r1, r3]
 800aa48:	f003 031f 	and.w	r3, r3, #31
 800aa4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	58024400 	.word	0x58024400
 800aa58:	0800e5e8 	.word	0x0800e5e8

0800aa5c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b089      	sub	sp, #36	; 0x24
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa64:	4ba1      	ldr	r3, [pc, #644]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa68:	f003 0303 	and.w	r3, r3, #3
 800aa6c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800aa6e:	4b9f      	ldr	r3, [pc, #636]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa72:	0b1b      	lsrs	r3, r3, #12
 800aa74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa78:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aa7a:	4b9c      	ldr	r3, [pc, #624]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa7e:	091b      	lsrs	r3, r3, #4
 800aa80:	f003 0301 	and.w	r3, r3, #1
 800aa84:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800aa86:	4b99      	ldr	r3, [pc, #612]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa8a:	08db      	lsrs	r3, r3, #3
 800aa8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa90:	693a      	ldr	r2, [r7, #16]
 800aa92:	fb02 f303 	mul.w	r3, r2, r3
 800aa96:	ee07 3a90 	vmov	s15, r3
 800aa9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f000 8111 	beq.w	800accc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aaaa:	69bb      	ldr	r3, [r7, #24]
 800aaac:	2b02      	cmp	r3, #2
 800aaae:	f000 8083 	beq.w	800abb8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	2b02      	cmp	r3, #2
 800aab6:	f200 80a1 	bhi.w	800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d003      	beq.n	800aac8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d056      	beq.n	800ab74 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aac6:	e099      	b.n	800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aac8:	4b88      	ldr	r3, [pc, #544]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f003 0320 	and.w	r3, r3, #32
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d02d      	beq.n	800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aad4:	4b85      	ldr	r3, [pc, #532]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	08db      	lsrs	r3, r3, #3
 800aada:	f003 0303 	and.w	r3, r3, #3
 800aade:	4a84      	ldr	r2, [pc, #528]	; (800acf0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aae0:	fa22 f303 	lsr.w	r3, r2, r3
 800aae4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	ee07 3a90 	vmov	s15, r3
 800aaec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	ee07 3a90 	vmov	s15, r3
 800aaf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aafa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aafe:	4b7b      	ldr	r3, [pc, #492]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab06:	ee07 3a90 	vmov	s15, r3
 800ab0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab12:	eddf 5a78 	vldr	s11, [pc, #480]	; 800acf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ab2e:	e087      	b.n	800ac40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	ee07 3a90 	vmov	s15, r3
 800ab36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800acf8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ab3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab42:	4b6a      	ldr	r3, [pc, #424]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab4a:	ee07 3a90 	vmov	s15, r3
 800ab4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab56:	eddf 5a67 	vldr	s11, [pc, #412]	; 800acf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab72:	e065      	b.n	800ac40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	ee07 3a90 	vmov	s15, r3
 800ab7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800acfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab86:	4b59      	ldr	r3, [pc, #356]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab8e:	ee07 3a90 	vmov	s15, r3
 800ab92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800acf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abb6:	e043      	b.n	800ac40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	ee07 3a90 	vmov	s15, r3
 800abbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ad00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800abc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abca:	4b48      	ldr	r3, [pc, #288]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abd2:	ee07 3a90 	vmov	s15, r3
 800abd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abda:	ed97 6a03 	vldr	s12, [r7, #12]
 800abde:	eddf 5a45 	vldr	s11, [pc, #276]	; 800acf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abfa:	e021      	b.n	800ac40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	ee07 3a90 	vmov	s15, r3
 800ac02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800acfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ac0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac0e:	4b37      	ldr	r3, [pc, #220]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac16:	ee07 3a90 	vmov	s15, r3
 800ac1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac22:	eddf 5a34 	vldr	s11, [pc, #208]	; 800acf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac3e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ac40:	4b2a      	ldr	r3, [pc, #168]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac44:	0a5b      	lsrs	r3, r3, #9
 800ac46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac4a:	ee07 3a90 	vmov	s15, r3
 800ac4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac66:	ee17 2a90 	vmov	r2, s15
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ac6e:	4b1f      	ldr	r3, [pc, #124]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac72:	0c1b      	lsrs	r3, r3, #16
 800ac74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac78:	ee07 3a90 	vmov	s15, r3
 800ac7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac84:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac88:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac94:	ee17 2a90 	vmov	r2, s15
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ac9c:	4b13      	ldr	r3, [pc, #76]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca0:	0e1b      	lsrs	r3, r3, #24
 800aca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aca6:	ee07 3a90 	vmov	s15, r3
 800acaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800acb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800acba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acc2:	ee17 2a90 	vmov	r2, s15
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800acca:	e008      	b.n	800acde <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	609a      	str	r2, [r3, #8]
}
 800acde:	bf00      	nop
 800ace0:	3724      	adds	r7, #36	; 0x24
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	58024400 	.word	0x58024400
 800acf0:	03d09000 	.word	0x03d09000
 800acf4:	46000000 	.word	0x46000000
 800acf8:	4c742400 	.word	0x4c742400
 800acfc:	4a742400 	.word	0x4a742400
 800ad00:	4bbebc20 	.word	0x4bbebc20

0800ad04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b089      	sub	sp, #36	; 0x24
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad0c:	4ba1      	ldr	r3, [pc, #644]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad10:	f003 0303 	and.w	r3, r3, #3
 800ad14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ad16:	4b9f      	ldr	r3, [pc, #636]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad1a:	0d1b      	lsrs	r3, r3, #20
 800ad1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ad22:	4b9c      	ldr	r3, [pc, #624]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad26:	0a1b      	lsrs	r3, r3, #8
 800ad28:	f003 0301 	and.w	r3, r3, #1
 800ad2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ad2e:	4b99      	ldr	r3, [pc, #612]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad32:	08db      	lsrs	r3, r3, #3
 800ad34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad38:	693a      	ldr	r2, [r7, #16]
 800ad3a:	fb02 f303 	mul.w	r3, r2, r3
 800ad3e:	ee07 3a90 	vmov	s15, r3
 800ad42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f000 8111 	beq.w	800af74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	2b02      	cmp	r3, #2
 800ad56:	f000 8083 	beq.w	800ae60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ad5a:	69bb      	ldr	r3, [r7, #24]
 800ad5c:	2b02      	cmp	r3, #2
 800ad5e:	f200 80a1 	bhi.w	800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d003      	beq.n	800ad70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ad68:	69bb      	ldr	r3, [r7, #24]
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d056      	beq.n	800ae1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ad6e:	e099      	b.n	800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad70:	4b88      	ldr	r3, [pc, #544]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f003 0320 	and.w	r3, r3, #32
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d02d      	beq.n	800add8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad7c:	4b85      	ldr	r3, [pc, #532]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	08db      	lsrs	r3, r3, #3
 800ad82:	f003 0303 	and.w	r3, r3, #3
 800ad86:	4a84      	ldr	r2, [pc, #528]	; (800af98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ad88:	fa22 f303 	lsr.w	r3, r2, r3
 800ad8c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	ee07 3a90 	vmov	s15, r3
 800ad94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	ee07 3a90 	vmov	s15, r3
 800ad9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ada2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ada6:	4b7b      	ldr	r3, [pc, #492]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ada8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adae:	ee07 3a90 	vmov	s15, r3
 800adb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800adba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800af9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800add2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800add6:	e087      	b.n	800aee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	ee07 3a90 	vmov	s15, r3
 800adde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ade2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800afa0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ade6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adea:	4b6a      	ldr	r3, [pc, #424]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adf2:	ee07 3a90 	vmov	s15, r3
 800adf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adfa:	ed97 6a03 	vldr	s12, [r7, #12]
 800adfe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800af9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae1a:	e065      	b.n	800aee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	ee07 3a90 	vmov	s15, r3
 800ae22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae26:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800afa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae2e:	4b59      	ldr	r3, [pc, #356]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae36:	ee07 3a90 	vmov	s15, r3
 800ae3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae42:	eddf 5a56 	vldr	s11, [pc, #344]	; 800af9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae5e:	e043      	b.n	800aee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	ee07 3a90 	vmov	s15, r3
 800ae66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae6a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800afa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ae6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae72:	4b48      	ldr	r3, [pc, #288]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae7a:	ee07 3a90 	vmov	s15, r3
 800ae7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae82:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae86:	eddf 5a45 	vldr	s11, [pc, #276]	; 800af9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aea2:	e021      	b.n	800aee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	ee07 3a90 	vmov	s15, r3
 800aeaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800afa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aeb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeb6:	4b37      	ldr	r3, [pc, #220]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aebe:	ee07 3a90 	vmov	s15, r3
 800aec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aec6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800af9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aede:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aee2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aee6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800aee8:	4b2a      	ldr	r3, [pc, #168]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeec:	0a5b      	lsrs	r3, r3, #9
 800aeee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aef2:	ee07 3a90 	vmov	s15, r3
 800aef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aefa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aefe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af02:	edd7 6a07 	vldr	s13, [r7, #28]
 800af06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af0e:	ee17 2a90 	vmov	r2, s15
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800af16:	4b1f      	ldr	r3, [pc, #124]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af1a:	0c1b      	lsrs	r3, r3, #16
 800af1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af20:	ee07 3a90 	vmov	s15, r3
 800af24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af30:	edd7 6a07 	vldr	s13, [r7, #28]
 800af34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af3c:	ee17 2a90 	vmov	r2, s15
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800af44:	4b13      	ldr	r3, [pc, #76]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af48:	0e1b      	lsrs	r3, r3, #24
 800af4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af4e:	ee07 3a90 	vmov	s15, r3
 800af52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800af62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af6a:	ee17 2a90 	vmov	r2, s15
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800af72:	e008      	b.n	800af86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2200      	movs	r2, #0
 800af7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	609a      	str	r2, [r3, #8]
}
 800af86:	bf00      	nop
 800af88:	3724      	adds	r7, #36	; 0x24
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop
 800af94:	58024400 	.word	0x58024400
 800af98:	03d09000 	.word	0x03d09000
 800af9c:	46000000 	.word	0x46000000
 800afa0:	4c742400 	.word	0x4c742400
 800afa4:	4a742400 	.word	0x4a742400
 800afa8:	4bbebc20 	.word	0x4bbebc20

0800afac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800afac:	b480      	push	{r7}
 800afae:	b089      	sub	sp, #36	; 0x24
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800afb4:	4ba0      	ldr	r3, [pc, #640]	; (800b238 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afb8:	f003 0303 	and.w	r3, r3, #3
 800afbc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800afbe:	4b9e      	ldr	r3, [pc, #632]	; (800b238 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc2:	091b      	lsrs	r3, r3, #4
 800afc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afc8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800afca:	4b9b      	ldr	r3, [pc, #620]	; (800b238 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afce:	f003 0301 	and.w	r3, r3, #1
 800afd2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800afd4:	4b98      	ldr	r3, [pc, #608]	; (800b238 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afd8:	08db      	lsrs	r3, r3, #3
 800afda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800afde:	693a      	ldr	r2, [r7, #16]
 800afe0:	fb02 f303 	mul.w	r3, r2, r3
 800afe4:	ee07 3a90 	vmov	s15, r3
 800afe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	f000 8111 	beq.w	800b21a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	2b02      	cmp	r3, #2
 800affc:	f000 8083 	beq.w	800b106 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	2b02      	cmp	r3, #2
 800b004:	f200 80a1 	bhi.w	800b14a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d003      	beq.n	800b016 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d056      	beq.n	800b0c2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b014:	e099      	b.n	800b14a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b016:	4b88      	ldr	r3, [pc, #544]	; (800b238 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f003 0320 	and.w	r3, r3, #32
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d02d      	beq.n	800b07e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b022:	4b85      	ldr	r3, [pc, #532]	; (800b238 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	08db      	lsrs	r3, r3, #3
 800b028:	f003 0303 	and.w	r3, r3, #3
 800b02c:	4a83      	ldr	r2, [pc, #524]	; (800b23c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b02e:	fa22 f303 	lsr.w	r3, r2, r3
 800b032:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	ee07 3a90 	vmov	s15, r3
 800b03a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	ee07 3a90 	vmov	s15, r3
 800b044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b04c:	4b7a      	ldr	r3, [pc, #488]	; (800b238 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b04e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b054:	ee07 3a90 	vmov	s15, r3
 800b058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b05c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b060:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b240 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b064:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b068:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b06c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b070:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b074:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b078:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b07c:	e087      	b.n	800b18e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	ee07 3a90 	vmov	s15, r3
 800b084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b088:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b244 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b08c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b090:	4b69      	ldr	r3, [pc, #420]	; (800b238 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b098:	ee07 3a90 	vmov	s15, r3
 800b09c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0a4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b240 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0c0:	e065      	b.n	800b18e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	ee07 3a90 	vmov	s15, r3
 800b0c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0cc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b248 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b0d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0d4:	4b58      	ldr	r3, [pc, #352]	; (800b238 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0dc:	ee07 3a90 	vmov	s15, r3
 800b0e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0e8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b240 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b100:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b104:	e043      	b.n	800b18e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	ee07 3a90 	vmov	s15, r3
 800b10c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b110:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b24c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b114:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b118:	4b47      	ldr	r3, [pc, #284]	; (800b238 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b11c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b120:	ee07 3a90 	vmov	s15, r3
 800b124:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b128:	ed97 6a03 	vldr	s12, [r7, #12]
 800b12c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b240 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b130:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b134:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b138:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b13c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b140:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b144:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b148:	e021      	b.n	800b18e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	ee07 3a90 	vmov	s15, r3
 800b150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b154:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b244 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b158:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b15c:	4b36      	ldr	r3, [pc, #216]	; (800b238 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b15e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b164:	ee07 3a90 	vmov	s15, r3
 800b168:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b16c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b170:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b240 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b174:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b178:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b17c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b180:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b184:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b188:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b18c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b18e:	4b2a      	ldr	r3, [pc, #168]	; (800b238 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b192:	0a5b      	lsrs	r3, r3, #9
 800b194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b198:	ee07 3a90 	vmov	s15, r3
 800b19c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1b4:	ee17 2a90 	vmov	r2, s15
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b1bc:	4b1e      	ldr	r3, [pc, #120]	; (800b238 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c0:	0c1b      	lsrs	r3, r3, #16
 800b1c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1c6:	ee07 3a90 	vmov	s15, r3
 800b1ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1e2:	ee17 2a90 	vmov	r2, s15
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b1ea:	4b13      	ldr	r3, [pc, #76]	; (800b238 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ee:	0e1b      	lsrs	r3, r3, #24
 800b1f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1f4:	ee07 3a90 	vmov	s15, r3
 800b1f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b200:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b204:	edd7 6a07 	vldr	s13, [r7, #28]
 800b208:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b20c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b210:	ee17 2a90 	vmov	r2, s15
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b218:	e008      	b.n	800b22c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2200      	movs	r2, #0
 800b21e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	609a      	str	r2, [r3, #8]
}
 800b22c:	bf00      	nop
 800b22e:	3724      	adds	r7, #36	; 0x24
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr
 800b238:	58024400 	.word	0x58024400
 800b23c:	03d09000 	.word	0x03d09000
 800b240:	46000000 	.word	0x46000000
 800b244:	4c742400 	.word	0x4c742400
 800b248:	4a742400 	.word	0x4a742400
 800b24c:	4bbebc20 	.word	0x4bbebc20

0800b250 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b25a:	2300      	movs	r3, #0
 800b25c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b25e:	4b53      	ldr	r3, [pc, #332]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b262:	f003 0303 	and.w	r3, r3, #3
 800b266:	2b03      	cmp	r3, #3
 800b268:	d101      	bne.n	800b26e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b26a:	2301      	movs	r3, #1
 800b26c:	e099      	b.n	800b3a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b26e:	4b4f      	ldr	r3, [pc, #316]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a4e      	ldr	r2, [pc, #312]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b274:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b278:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b27a:	f7f8 fd87 	bl	8003d8c <HAL_GetTick>
 800b27e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b280:	e008      	b.n	800b294 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b282:	f7f8 fd83 	bl	8003d8c <HAL_GetTick>
 800b286:	4602      	mov	r2, r0
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	1ad3      	subs	r3, r2, r3
 800b28c:	2b02      	cmp	r3, #2
 800b28e:	d901      	bls.n	800b294 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b290:	2303      	movs	r3, #3
 800b292:	e086      	b.n	800b3a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b294:	4b45      	ldr	r3, [pc, #276]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d1f0      	bne.n	800b282 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b2a0:	4b42      	ldr	r3, [pc, #264]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	031b      	lsls	r3, r3, #12
 800b2ae:	493f      	ldr	r1, [pc, #252]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	628b      	str	r3, [r1, #40]	; 0x28
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	3b01      	subs	r3, #1
 800b2ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	3b01      	subs	r3, #1
 800b2c4:	025b      	lsls	r3, r3, #9
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	431a      	orrs	r2, r3
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	041b      	lsls	r3, r3, #16
 800b2d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b2d6:	431a      	orrs	r2, r3
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	3b01      	subs	r3, #1
 800b2de:	061b      	lsls	r3, r3, #24
 800b2e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b2e4:	4931      	ldr	r1, [pc, #196]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b2ea:	4b30      	ldr	r3, [pc, #192]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	695b      	ldr	r3, [r3, #20]
 800b2f6:	492d      	ldr	r1, [pc, #180]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b2fc:	4b2b      	ldr	r3, [pc, #172]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b300:	f023 0220 	bic.w	r2, r3, #32
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	699b      	ldr	r3, [r3, #24]
 800b308:	4928      	ldr	r1, [pc, #160]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b30a:	4313      	orrs	r3, r2
 800b30c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b30e:	4b27      	ldr	r3, [pc, #156]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b312:	4a26      	ldr	r2, [pc, #152]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b314:	f023 0310 	bic.w	r3, r3, #16
 800b318:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b31a:	4b24      	ldr	r3, [pc, #144]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b31c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b31e:	4b24      	ldr	r3, [pc, #144]	; (800b3b0 <RCCEx_PLL2_Config+0x160>)
 800b320:	4013      	ands	r3, r2
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	69d2      	ldr	r2, [r2, #28]
 800b326:	00d2      	lsls	r2, r2, #3
 800b328:	4920      	ldr	r1, [pc, #128]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b32a:	4313      	orrs	r3, r2
 800b32c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b32e:	4b1f      	ldr	r3, [pc, #124]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b332:	4a1e      	ldr	r2, [pc, #120]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b334:	f043 0310 	orr.w	r3, r3, #16
 800b338:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d106      	bne.n	800b34e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b340:	4b1a      	ldr	r3, [pc, #104]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b344:	4a19      	ldr	r2, [pc, #100]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b346:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b34a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b34c:	e00f      	b.n	800b36e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	2b01      	cmp	r3, #1
 800b352:	d106      	bne.n	800b362 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b354:	4b15      	ldr	r3, [pc, #84]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b358:	4a14      	ldr	r2, [pc, #80]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b35a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b35e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b360:	e005      	b.n	800b36e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b362:	4b12      	ldr	r3, [pc, #72]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b366:	4a11      	ldr	r2, [pc, #68]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b368:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b36c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b36e:	4b0f      	ldr	r3, [pc, #60]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a0e      	ldr	r2, [pc, #56]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b374:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b37a:	f7f8 fd07 	bl	8003d8c <HAL_GetTick>
 800b37e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b380:	e008      	b.n	800b394 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b382:	f7f8 fd03 	bl	8003d8c <HAL_GetTick>
 800b386:	4602      	mov	r2, r0
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	1ad3      	subs	r3, r2, r3
 800b38c:	2b02      	cmp	r3, #2
 800b38e:	d901      	bls.n	800b394 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b390:	2303      	movs	r3, #3
 800b392:	e006      	b.n	800b3a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b394:	4b05      	ldr	r3, [pc, #20]	; (800b3ac <RCCEx_PLL2_Config+0x15c>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d0f0      	beq.n	800b382 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	58024400 	.word	0x58024400
 800b3b0:	ffff0007 	.word	0xffff0007

0800b3b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b3c2:	4b53      	ldr	r3, [pc, #332]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c6:	f003 0303 	and.w	r3, r3, #3
 800b3ca:	2b03      	cmp	r3, #3
 800b3cc:	d101      	bne.n	800b3d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e099      	b.n	800b506 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b3d2:	4b4f      	ldr	r3, [pc, #316]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4a4e      	ldr	r2, [pc, #312]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b3d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3de:	f7f8 fcd5 	bl	8003d8c <HAL_GetTick>
 800b3e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b3e4:	e008      	b.n	800b3f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b3e6:	f7f8 fcd1 	bl	8003d8c <HAL_GetTick>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	1ad3      	subs	r3, r2, r3
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	d901      	bls.n	800b3f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b3f4:	2303      	movs	r3, #3
 800b3f6:	e086      	b.n	800b506 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b3f8:	4b45      	ldr	r3, [pc, #276]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b400:	2b00      	cmp	r3, #0
 800b402:	d1f0      	bne.n	800b3e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b404:	4b42      	ldr	r3, [pc, #264]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b408:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	051b      	lsls	r3, r3, #20
 800b412:	493f      	ldr	r1, [pc, #252]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b414:	4313      	orrs	r3, r2
 800b416:	628b      	str	r3, [r1, #40]	; 0x28
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	3b01      	subs	r3, #1
 800b41e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	3b01      	subs	r3, #1
 800b428:	025b      	lsls	r3, r3, #9
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	431a      	orrs	r2, r3
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	3b01      	subs	r3, #1
 800b434:	041b      	lsls	r3, r3, #16
 800b436:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b43a:	431a      	orrs	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	691b      	ldr	r3, [r3, #16]
 800b440:	3b01      	subs	r3, #1
 800b442:	061b      	lsls	r3, r3, #24
 800b444:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b448:	4931      	ldr	r1, [pc, #196]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b44a:	4313      	orrs	r3, r2
 800b44c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b44e:	4b30      	ldr	r3, [pc, #192]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b452:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	695b      	ldr	r3, [r3, #20]
 800b45a:	492d      	ldr	r1, [pc, #180]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b45c:	4313      	orrs	r3, r2
 800b45e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b460:	4b2b      	ldr	r3, [pc, #172]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b464:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	699b      	ldr	r3, [r3, #24]
 800b46c:	4928      	ldr	r1, [pc, #160]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b46e:	4313      	orrs	r3, r2
 800b470:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b472:	4b27      	ldr	r3, [pc, #156]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b476:	4a26      	ldr	r2, [pc, #152]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b47c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b47e:	4b24      	ldr	r3, [pc, #144]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b482:	4b24      	ldr	r3, [pc, #144]	; (800b514 <RCCEx_PLL3_Config+0x160>)
 800b484:	4013      	ands	r3, r2
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	69d2      	ldr	r2, [r2, #28]
 800b48a:	00d2      	lsls	r2, r2, #3
 800b48c:	4920      	ldr	r1, [pc, #128]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b48e:	4313      	orrs	r3, r2
 800b490:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b492:	4b1f      	ldr	r3, [pc, #124]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b496:	4a1e      	ldr	r2, [pc, #120]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b49c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d106      	bne.n	800b4b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b4a4:	4b1a      	ldr	r3, [pc, #104]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a8:	4a19      	ldr	r2, [pc, #100]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b4aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b4ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b4b0:	e00f      	b.n	800b4d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d106      	bne.n	800b4c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b4b8:	4b15      	ldr	r3, [pc, #84]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4bc:	4a14      	ldr	r2, [pc, #80]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b4be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b4c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b4c4:	e005      	b.n	800b4d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b4c6:	4b12      	ldr	r3, [pc, #72]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ca:	4a11      	ldr	r2, [pc, #68]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b4cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b4d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b4d2:	4b0f      	ldr	r3, [pc, #60]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a0e      	ldr	r2, [pc, #56]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b4d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4de:	f7f8 fc55 	bl	8003d8c <HAL_GetTick>
 800b4e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b4e4:	e008      	b.n	800b4f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b4e6:	f7f8 fc51 	bl	8003d8c <HAL_GetTick>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	1ad3      	subs	r3, r2, r3
 800b4f0:	2b02      	cmp	r3, #2
 800b4f2:	d901      	bls.n	800b4f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b4f4:	2303      	movs	r3, #3
 800b4f6:	e006      	b.n	800b506 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b4f8:	4b05      	ldr	r3, [pc, #20]	; (800b510 <RCCEx_PLL3_Config+0x15c>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b500:	2b00      	cmp	r3, #0
 800b502:	d0f0      	beq.n	800b4e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b504:	7bfb      	ldrb	r3, [r7, #15]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3710      	adds	r7, #16
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	58024400 	.word	0x58024400
 800b514:	ffff0007 	.word	0xffff0007

0800b518 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b520:	2301      	movs	r3, #1
 800b522:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d071      	beq.n	800b60e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b530:	b2db      	uxtb	r3, r3
 800b532:	2b00      	cmp	r3, #0
 800b534:	d106      	bne.n	800b544 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7f7 ff40 	bl	80033c4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2202      	movs	r2, #2
 800b548:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	f003 0310 	and.w	r3, r3, #16
 800b556:	2b10      	cmp	r3, #16
 800b558:	d050      	beq.n	800b5fc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	22ca      	movs	r2, #202	; 0xca
 800b560:	625a      	str	r2, [r3, #36]	; 0x24
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2253      	movs	r2, #83	; 0x53
 800b568:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f87a 	bl	800b664 <RTC_EnterInitMode>
 800b570:	4603      	mov	r3, r0
 800b572:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800b574:	7bfb      	ldrb	r3, [r7, #15]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d124      	bne.n	800b5c4 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	6899      	ldr	r1, [r3, #8]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	4b24      	ldr	r3, [pc, #144]	; (800b618 <HAL_RTC_Init+0x100>)
 800b586:	400b      	ands	r3, r1
 800b588:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	6899      	ldr	r1, [r3, #8]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	685a      	ldr	r2, [r3, #4]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	691b      	ldr	r3, [r3, #16]
 800b598:	431a      	orrs	r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	699b      	ldr	r3, [r3, #24]
 800b59e:	431a      	orrs	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	430a      	orrs	r2, r1
 800b5a6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	0419      	lsls	r1, r3, #16
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	68da      	ldr	r2, [r3, #12]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	430a      	orrs	r2, r1
 800b5b8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 f886 	bl	800b6cc <RTC_ExitInitMode>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800b5c4:	7bfb      	ldrb	r3, [r7, #15]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d113      	bne.n	800b5f2 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f022 0203 	bic.w	r2, r2, #3
 800b5d8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	69da      	ldr	r2, [r3, #28]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	695b      	ldr	r3, [r3, #20]
 800b5e8:	431a      	orrs	r2, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	430a      	orrs	r2, r1
 800b5f0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	22ff      	movs	r2, #255	; 0xff
 800b5f8:	625a      	str	r2, [r3, #36]	; 0x24
 800b5fa:	e001      	b.n	800b600 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b600:	7bfb      	ldrb	r3, [r7, #15]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d103      	bne.n	800b60e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2201      	movs	r2, #1
 800b60a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800b60e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b610:	4618      	mov	r0, r3
 800b612:	3710      	adds	r7, #16
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	ff8fffbf 	.word	0xff8fffbf

0800b61c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a0d      	ldr	r2, [pc, #52]	; (800b660 <HAL_RTC_WaitForSynchro+0x44>)
 800b62a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800b62c:	f7f8 fbae 	bl	8003d8c <HAL_GetTick>
 800b630:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b632:	e009      	b.n	800b648 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b634:	f7f8 fbaa 	bl	8003d8c <HAL_GetTick>
 800b638:	4602      	mov	r2, r0
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	1ad3      	subs	r3, r2, r3
 800b63e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b642:	d901      	bls.n	800b648 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800b644:	2303      	movs	r3, #3
 800b646:	e007      	b.n	800b658 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	f003 0320 	and.w	r3, r3, #32
 800b652:	2b00      	cmp	r3, #0
 800b654:	d0ee      	beq.n	800b634 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800b656:	2300      	movs	r3, #0
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3710      	adds	r7, #16
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	0003ff5f 	.word	0x0003ff5f

0800b664 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b66c:	2300      	movs	r3, #0
 800b66e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d120      	bne.n	800b6c0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f04f 32ff 	mov.w	r2, #4294967295
 800b686:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b688:	f7f8 fb80 	bl	8003d8c <HAL_GetTick>
 800b68c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b68e:	e00d      	b.n	800b6ac <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b690:	f7f8 fb7c 	bl	8003d8c <HAL_GetTick>
 800b694:	4602      	mov	r2, r0
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	1ad3      	subs	r3, r2, r3
 800b69a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b69e:	d905      	bls.n	800b6ac <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800b6a0:	2303      	movs	r3, #3
 800b6a2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2203      	movs	r2, #3
 800b6a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	68db      	ldr	r3, [r3, #12]
 800b6b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d102      	bne.n	800b6c0 <RTC_EnterInitMode+0x5c>
 800b6ba:	7bfb      	ldrb	r3, [r7, #15]
 800b6bc:	2b03      	cmp	r3, #3
 800b6be:	d1e7      	bne.n	800b690 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800b6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3710      	adds	r7, #16
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
	...

0800b6cc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800b6d8:	4b1a      	ldr	r3, [pc, #104]	; (800b744 <RTC_ExitInitMode+0x78>)
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	4a19      	ldr	r2, [pc, #100]	; (800b744 <RTC_ExitInitMode+0x78>)
 800b6de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6e2:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b6e4:	4b17      	ldr	r3, [pc, #92]	; (800b744 <RTC_ExitInitMode+0x78>)
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	f003 0320 	and.w	r3, r3, #32
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d10c      	bne.n	800b70a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f7ff ff93 	bl	800b61c <HAL_RTC_WaitForSynchro>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d01e      	beq.n	800b73a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2203      	movs	r2, #3
 800b700:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b704:	2303      	movs	r3, #3
 800b706:	73fb      	strb	r3, [r7, #15]
 800b708:	e017      	b.n	800b73a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b70a:	4b0e      	ldr	r3, [pc, #56]	; (800b744 <RTC_ExitInitMode+0x78>)
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	4a0d      	ldr	r2, [pc, #52]	; (800b744 <RTC_ExitInitMode+0x78>)
 800b710:	f023 0320 	bic.w	r3, r3, #32
 800b714:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f7ff ff80 	bl	800b61c <HAL_RTC_WaitForSynchro>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d005      	beq.n	800b72e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2203      	movs	r2, #3
 800b726:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b72a:	2303      	movs	r3, #3
 800b72c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b72e:	4b05      	ldr	r3, [pc, #20]	; (800b744 <RTC_ExitInitMode+0x78>)
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	4a04      	ldr	r2, [pc, #16]	; (800b744 <RTC_ExitInitMode+0x78>)
 800b734:	f043 0320 	orr.w	r3, r3, #32
 800b738:	6093      	str	r3, [r2, #8]
  }

  return status;
 800b73a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3710      	adds	r7, #16
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	58004000 	.word	0x58004000

0800b748 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b08a      	sub	sp, #40	; 0x28
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d101      	bne.n	800b75a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800b756:	2301      	movs	r3, #1
 800b758:	e28e      	b.n	800bc78 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800b75a:	f7f8 fb47 	bl	8003dec <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b764:	2b01      	cmp	r3, #1
 800b766:	d113      	bne.n	800b790 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4a96      	ldr	r2, [pc, #600]	; (800b9c8 <HAL_SAI_Init+0x280>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d004      	beq.n	800b77c <HAL_SAI_Init+0x34>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a95      	ldr	r2, [pc, #596]	; (800b9cc <HAL_SAI_Init+0x284>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d107      	bne.n	800b78c <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800b780:	2b01      	cmp	r3, #1
 800b782:	d103      	bne.n	800b78c <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d001      	beq.n	800b790 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800b78c:	2301      	movs	r3, #1
 800b78e:	e273      	b.n	800bc78 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a8c      	ldr	r2, [pc, #560]	; (800b9c8 <HAL_SAI_Init+0x280>)
 800b796:	4293      	cmp	r3, r2
 800b798:	d004      	beq.n	800b7a4 <HAL_SAI_Init+0x5c>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a8c      	ldr	r2, [pc, #560]	; (800b9d0 <HAL_SAI_Init+0x288>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d102      	bne.n	800b7aa <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800b7a4:	4b8b      	ldr	r3, [pc, #556]	; (800b9d4 <HAL_SAI_Init+0x28c>)
 800b7a6:	61bb      	str	r3, [r7, #24]
 800b7a8:	e028      	b.n	800b7fc <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4a8a      	ldr	r2, [pc, #552]	; (800b9d8 <HAL_SAI_Init+0x290>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d004      	beq.n	800b7be <HAL_SAI_Init+0x76>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4a88      	ldr	r2, [pc, #544]	; (800b9dc <HAL_SAI_Init+0x294>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d102      	bne.n	800b7c4 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800b7be:	4b88      	ldr	r3, [pc, #544]	; (800b9e0 <HAL_SAI_Init+0x298>)
 800b7c0:	61bb      	str	r3, [r7, #24]
 800b7c2:	e01b      	b.n	800b7fc <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a86      	ldr	r2, [pc, #536]	; (800b9e4 <HAL_SAI_Init+0x29c>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d004      	beq.n	800b7d8 <HAL_SAI_Init+0x90>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a85      	ldr	r2, [pc, #532]	; (800b9e8 <HAL_SAI_Init+0x2a0>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d102      	bne.n	800b7de <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800b7d8:	4b84      	ldr	r3, [pc, #528]	; (800b9ec <HAL_SAI_Init+0x2a4>)
 800b7da:	61bb      	str	r3, [r7, #24]
 800b7dc:	e00e      	b.n	800b7fc <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4a7a      	ldr	r2, [pc, #488]	; (800b9cc <HAL_SAI_Init+0x284>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d004      	beq.n	800b7f2 <HAL_SAI_Init+0xaa>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a80      	ldr	r2, [pc, #512]	; (800b9f0 <HAL_SAI_Init+0x2a8>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d102      	bne.n	800b7f8 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800b7f2:	4b80      	ldr	r3, [pc, #512]	; (800b9f4 <HAL_SAI_Init+0x2ac>)
 800b7f4:	61bb      	str	r3, [r7, #24]
 800b7f6:	e001      	b.n	800b7fc <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	e23d      	b.n	800bc78 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800b802:	b2db      	uxtb	r3, r3
 800b804:	2b00      	cmp	r3, #0
 800b806:	d106      	bne.n	800b816 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2200      	movs	r2, #0
 800b80c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f7f8 f87f 	bl	8003914 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 fa40 	bl	800bc9c <SAI_Disable>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d001      	beq.n	800b826 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800b822:	2301      	movs	r3, #1
 800b824:	e228      	b.n	800bc78 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2202      	movs	r2, #2
 800b82a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	2b02      	cmp	r3, #2
 800b834:	d00c      	beq.n	800b850 <HAL_SAI_Init+0x108>
 800b836:	2b02      	cmp	r3, #2
 800b838:	d80d      	bhi.n	800b856 <HAL_SAI_Init+0x10e>
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d002      	beq.n	800b844 <HAL_SAI_Init+0xfc>
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d003      	beq.n	800b84a <HAL_SAI_Init+0x102>
 800b842:	e008      	b.n	800b856 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800b844:	2300      	movs	r3, #0
 800b846:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b848:	e008      	b.n	800b85c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800b84a:	2310      	movs	r3, #16
 800b84c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b84e:	e005      	b.n	800b85c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800b850:	2320      	movs	r3, #32
 800b852:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b854:	e002      	b.n	800b85c <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800b856:	2300      	movs	r3, #0
 800b858:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b85a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	2b05      	cmp	r3, #5
 800b862:	d832      	bhi.n	800b8ca <HAL_SAI_Init+0x182>
 800b864:	a201      	add	r2, pc, #4	; (adr r2, 800b86c <HAL_SAI_Init+0x124>)
 800b866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b86a:	bf00      	nop
 800b86c:	0800b885 	.word	0x0800b885
 800b870:	0800b88b 	.word	0x0800b88b
 800b874:	0800b893 	.word	0x0800b893
 800b878:	0800b89b 	.word	0x0800b89b
 800b87c:	0800b8ab 	.word	0x0800b8ab
 800b880:	0800b8bb 	.word	0x0800b8bb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800b884:	2300      	movs	r3, #0
 800b886:	61fb      	str	r3, [r7, #28]
      break;
 800b888:	e022      	b.n	800b8d0 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800b88a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b88e:	61fb      	str	r3, [r7, #28]
      break;
 800b890:	e01e      	b.n	800b8d0 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b892:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b896:	61fb      	str	r3, [r7, #28]
      break;
 800b898:	e01a      	b.n	800b8d0 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b89a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b89e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a2:	f043 0301 	orr.w	r3, r3, #1
 800b8a6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b8a8:	e012      	b.n	800b8d0 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b8aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b8ae:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b2:	f043 0302 	orr.w	r3, r3, #2
 800b8b6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b8b8:	e00a      	b.n	800b8d0 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b8ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b8be:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800b8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c2:	f043 0303 	orr.w	r3, r3, #3
 800b8c6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b8c8:	e002      	b.n	800b8d0 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	61fb      	str	r3, [r7, #28]
      break;
 800b8ce:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800b8d0:	69bb      	ldr	r3, [r7, #24]
 800b8d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8d4:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6a1b      	ldr	r3, [r3, #32]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	f000 80c5 	beq.w	800ba6a <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a37      	ldr	r2, [pc, #220]	; (800b9c8 <HAL_SAI_Init+0x280>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d004      	beq.n	800b8f8 <HAL_SAI_Init+0x1b0>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4a37      	ldr	r2, [pc, #220]	; (800b9d0 <HAL_SAI_Init+0x288>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d106      	bne.n	800b906 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800b8f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b8fc:	f04f 0100 	mov.w	r1, #0
 800b900:	f7fe fb16 	bl	8009f30 <HAL_RCCEx_GetPeriphCLKFreq>
 800b904:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a33      	ldr	r2, [pc, #204]	; (800b9d8 <HAL_SAI_Init+0x290>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d004      	beq.n	800b91a <HAL_SAI_Init+0x1d2>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	4a31      	ldr	r2, [pc, #196]	; (800b9dc <HAL_SAI_Init+0x294>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d106      	bne.n	800b928 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800b91a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b91e:	f04f 0100 	mov.w	r1, #0
 800b922:	f7fe fb05 	bl	8009f30 <HAL_RCCEx_GetPeriphCLKFreq>
 800b926:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a2d      	ldr	r2, [pc, #180]	; (800b9e4 <HAL_SAI_Init+0x29c>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d004      	beq.n	800b93c <HAL_SAI_Init+0x1f4>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a2c      	ldr	r2, [pc, #176]	; (800b9e8 <HAL_SAI_Init+0x2a0>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d106      	bne.n	800b94a <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800b93c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b940:	f04f 0100 	mov.w	r1, #0
 800b944:	f7fe faf4 	bl	8009f30 <HAL_RCCEx_GetPeriphCLKFreq>
 800b948:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4a1f      	ldr	r2, [pc, #124]	; (800b9cc <HAL_SAI_Init+0x284>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d106      	bne.n	800b962 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800b954:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b958:	f04f 0100 	mov.w	r1, #0
 800b95c:	f7fe fae8 	bl	8009f30 <HAL_RCCEx_GetPeriphCLKFreq>
 800b960:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a22      	ldr	r2, [pc, #136]	; (800b9f0 <HAL_SAI_Init+0x2a8>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d106      	bne.n	800b97a <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800b96c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b970:	f04f 0100 	mov.w	r1, #0
 800b974:	f7fe fadc 	bl	8009f30 <HAL_RCCEx_GetPeriphCLKFreq>
 800b978:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	699b      	ldr	r3, [r3, #24]
 800b97e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b982:	d139      	bne.n	800b9f8 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b988:	2b04      	cmp	r3, #4
 800b98a:	d102      	bne.n	800b992 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800b98c:	2340      	movs	r3, #64	; 0x40
 800b98e:	60fb      	str	r3, [r7, #12]
 800b990:	e00a      	b.n	800b9a8 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b996:	2b08      	cmp	r3, #8
 800b998:	d103      	bne.n	800b9a2 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800b99a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b99e:	60fb      	str	r3, [r7, #12]
 800b9a0:	e002      	b.n	800b9a8 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9a6:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800b9a8:	697a      	ldr	r2, [r7, #20]
 800b9aa:	4613      	mov	r3, r2
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	4413      	add	r3, r2
 800b9b0:	005b      	lsls	r3, r3, #1
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6a1b      	ldr	r3, [r3, #32]
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	fb02 f303 	mul.w	r3, r2, r3
 800b9be:	fbb1 f3f3 	udiv	r3, r1, r3
 800b9c2:	613b      	str	r3, [r7, #16]
 800b9c4:	e030      	b.n	800ba28 <HAL_SAI_Init+0x2e0>
 800b9c6:	bf00      	nop
 800b9c8:	40015804 	.word	0x40015804
 800b9cc:	58005404 	.word	0x58005404
 800b9d0:	40015824 	.word	0x40015824
 800b9d4:	40015800 	.word	0x40015800
 800b9d8:	40015c04 	.word	0x40015c04
 800b9dc:	40015c24 	.word	0x40015c24
 800b9e0:	40015c00 	.word	0x40015c00
 800b9e4:	40016004 	.word	0x40016004
 800b9e8:	40016024 	.word	0x40016024
 800b9ec:	40016000 	.word	0x40016000
 800b9f0:	58005424 	.word	0x58005424
 800b9f4:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba00:	d101      	bne.n	800ba06 <HAL_SAI_Init+0x2be>
 800ba02:	2302      	movs	r3, #2
 800ba04:	e000      	b.n	800ba08 <HAL_SAI_Init+0x2c0>
 800ba06:	2301      	movs	r3, #1
 800ba08:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800ba0a:	697a      	ldr	r2, [r7, #20]
 800ba0c:	4613      	mov	r3, r2
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	4413      	add	r3, r2
 800ba12:	005b      	lsls	r3, r3, #1
 800ba14:	4619      	mov	r1, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a1b      	ldr	r3, [r3, #32]
 800ba1a:	68ba      	ldr	r2, [r7, #8]
 800ba1c:	fb02 f303 	mul.w	r3, r2, r3
 800ba20:	021b      	lsls	r3, r3, #8
 800ba22:	fbb1 f3f3 	udiv	r3, r1, r3
 800ba26:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	4a95      	ldr	r2, [pc, #596]	; (800bc80 <HAL_SAI_Init+0x538>)
 800ba2c:	fba2 2303 	umull	r2, r3, r2, r3
 800ba30:	08da      	lsrs	r2, r3, #3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800ba36:	6939      	ldr	r1, [r7, #16]
 800ba38:	4b91      	ldr	r3, [pc, #580]	; (800bc80 <HAL_SAI_Init+0x538>)
 800ba3a:	fba3 2301 	umull	r2, r3, r3, r1
 800ba3e:	08da      	lsrs	r2, r3, #3
 800ba40:	4613      	mov	r3, r2
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	4413      	add	r3, r2
 800ba46:	005b      	lsls	r3, r3, #1
 800ba48:	1aca      	subs	r2, r1, r3
 800ba4a:	2a08      	cmp	r2, #8
 800ba4c:	d904      	bls.n	800ba58 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba52:	1c5a      	adds	r2, r3, #1
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba5c:	2b04      	cmp	r3, #4
 800ba5e:	d104      	bne.n	800ba6a <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba64:	085a      	lsrs	r2, r3, #1
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d003      	beq.n	800ba7a <HAL_SAI_Init+0x332>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	2b02      	cmp	r3, #2
 800ba78:	d109      	bne.n	800ba8e <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d101      	bne.n	800ba86 <HAL_SAI_Init+0x33e>
 800ba82:	2300      	movs	r3, #0
 800ba84:	e001      	b.n	800ba8a <HAL_SAI_Init+0x342>
 800ba86:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba8a:	623b      	str	r3, [r7, #32]
 800ba8c:	e008      	b.n	800baa0 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d102      	bne.n	800ba9c <HAL_SAI_Init+0x354>
 800ba96:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba9a:	e000      	b.n	800ba9e <HAL_SAI_Init+0x356>
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800baa0:	f7f8 f9a4 	bl	8003dec <HAL_GetREVID>
 800baa4:	4603      	mov	r3, r0
 800baa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800baaa:	d331      	bcc.n	800bb10 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	6819      	ldr	r1, [r3, #0]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	4b73      	ldr	r3, [pc, #460]	; (800bc84 <HAL_SAI_Init+0x53c>)
 800bab8:	400b      	ands	r3, r1
 800baba:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	6819      	ldr	r1, [r3, #0]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	685a      	ldr	r2, [r3, #4]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baca:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bad0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bad6:	431a      	orrs	r2, r3
 800bad8:	6a3b      	ldr	r3, [r7, #32]
 800bada:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800bae4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	695b      	ldr	r3, [r3, #20]
 800baea:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800baf0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf6:	051b      	lsls	r3, r3, #20
 800baf8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800bafe:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	691b      	ldr	r3, [r3, #16]
 800bb04:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	430a      	orrs	r2, r1
 800bb0c:	601a      	str	r2, [r3, #0]
 800bb0e:	e02d      	b.n	800bb6c <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	6819      	ldr	r1, [r3, #0]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	4b5b      	ldr	r3, [pc, #364]	; (800bc88 <HAL_SAI_Init+0x540>)
 800bb1c:	400b      	ands	r3, r1
 800bb1e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	6819      	ldr	r1, [r3, #0]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	685a      	ldr	r2, [r3, #4]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb2e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bb34:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb3a:	431a      	orrs	r2, r3
 800bb3c:	6a3b      	ldr	r3, [r7, #32]
 800bb3e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800bb48:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	695b      	ldr	r3, [r3, #20]
 800bb4e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bb54:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5a:	051b      	lsls	r3, r3, #20
 800bb5c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800bb62:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	430a      	orrs	r2, r1
 800bb6a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	6859      	ldr	r1, [r3, #4]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681a      	ldr	r2, [r3, #0]
 800bb76:	4b45      	ldr	r3, [pc, #276]	; (800bc8c <HAL_SAI_Init+0x544>)
 800bb78:	400b      	ands	r3, r1
 800bb7a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	6859      	ldr	r1, [r3, #4]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	69da      	ldr	r2, [r3, #28]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb8a:	431a      	orrs	r2, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb90:	431a      	orrs	r2, r3
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	430a      	orrs	r2, r1
 800bb98:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	6899      	ldr	r1, [r3, #8]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	4b3a      	ldr	r3, [pc, #232]	; (800bc90 <HAL_SAI_Init+0x548>)
 800bba6:	400b      	ands	r3, r1
 800bba8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	6899      	ldr	r1, [r3, #8]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbb4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bbba:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800bbc0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800bbc6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbcc:	3b01      	subs	r3, #1
 800bbce:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800bbd0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	430a      	orrs	r2, r1
 800bbd8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	68d9      	ldr	r1, [r3, #12]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681a      	ldr	r2, [r3, #0]
 800bbe4:	f24f 0320 	movw	r3, #61472	; 0xf020
 800bbe8:	400b      	ands	r3, r1
 800bbea:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	68d9      	ldr	r1, [r3, #12]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbfa:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc00:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bc02:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc08:	3b01      	subs	r3, #1
 800bc0a:	021b      	lsls	r3, r3, #8
 800bc0c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	430a      	orrs	r2, r1
 800bc14:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a1e      	ldr	r2, [pc, #120]	; (800bc94 <HAL_SAI_Init+0x54c>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d004      	beq.n	800bc2a <HAL_SAI_Init+0x4e2>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4a1c      	ldr	r2, [pc, #112]	; (800bc98 <HAL_SAI_Init+0x550>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d119      	bne.n	800bc5e <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800bc2a:	69bb      	ldr	r3, [r7, #24]
 800bc2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc2e:	f023 0201 	bic.w	r2, r3, #1
 800bc32:	69bb      	ldr	r3, [r7, #24]
 800bc34:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d10e      	bne.n	800bc5e <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc48:	3b01      	subs	r3, #1
 800bc4a:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800bc4c:	431a      	orrs	r2, r3
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc56:	f043 0201 	orr.w	r2, r3, #1
 800bc5a:	69bb      	ldr	r3, [r7, #24]
 800bc5c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2201      	movs	r2, #1
 800bc6a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800bc76:	2300      	movs	r3, #0
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3728      	adds	r7, #40	; 0x28
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	cccccccd 	.word	0xcccccccd
 800bc84:	f005c010 	.word	0xf005c010
 800bc88:	f805c010 	.word	0xf805c010
 800bc8c:	ffff1ff0 	.word	0xffff1ff0
 800bc90:	fff88000 	.word	0xfff88000
 800bc94:	40015804 	.word	0x40015804
 800bc98:	58005404 	.word	0x58005404

0800bc9c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800bca4:	4b18      	ldr	r3, [pc, #96]	; (800bd08 <SAI_Disable+0x6c>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4a18      	ldr	r2, [pc, #96]	; (800bd0c <SAI_Disable+0x70>)
 800bcaa:	fba2 2303 	umull	r2, r3, r2, r3
 800bcae:	0b1b      	lsrs	r3, r3, #12
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800bcc6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d10a      	bne.n	800bce4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bcd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800bcde:	2303      	movs	r3, #3
 800bce0:	72fb      	strb	r3, [r7, #11]
      break;
 800bce2:	e009      	b.n	800bcf8 <SAI_Disable+0x5c>
    }
    count--;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	3b01      	subs	r3, #1
 800bce8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d1e7      	bne.n	800bcc8 <SAI_Disable+0x2c>

  return status;
 800bcf8:	7afb      	ldrb	r3, [r7, #11]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3714      	adds	r7, #20
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop
 800bd08:	24000000 	.word	0x24000000
 800bd0c:	95cbec1b 	.word	0x95cbec1b

0800bd10 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d101      	bne.n	800bd24 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800bd20:	2301      	movs	r3, #1
 800bd22:	e02b      	b.n	800bd7c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d106      	bne.n	800bd3e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2200      	movs	r2, #0
 800bd34:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f7f7 fde1 	bl	8003900 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2202      	movs	r2, #2
 800bd42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	3304      	adds	r3, #4
 800bd4e:	4619      	mov	r1, r3
 800bd50:	4610      	mov	r0, r2
 800bd52:	f001 fabd 	bl	800d2d0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6818      	ldr	r0, [r3, #0]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	461a      	mov	r2, r3
 800bd60:	6839      	ldr	r1, [r7, #0]
 800bd62:	f001 fb11 	bl	800d388 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800bd66:	4b07      	ldr	r3, [pc, #28]	; (800bd84 <HAL_SDRAM_Init+0x74>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4a06      	ldr	r2, [pc, #24]	; (800bd84 <HAL_SDRAM_Init+0x74>)
 800bd6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd70:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2201      	movs	r2, #1
 800bd76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3708      	adds	r7, #8
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	52004000 	.word	0x52004000

0800bd88 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d101      	bne.n	800bd9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bd96:	2301      	movs	r3, #1
 800bd98:	e10f      	b.n	800bfba <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	4a87      	ldr	r2, [pc, #540]	; (800bfc4 <HAL_SPI_Init+0x23c>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d00f      	beq.n	800bdca <HAL_SPI_Init+0x42>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4a86      	ldr	r2, [pc, #536]	; (800bfc8 <HAL_SPI_Init+0x240>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d00a      	beq.n	800bdca <HAL_SPI_Init+0x42>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4a84      	ldr	r2, [pc, #528]	; (800bfcc <HAL_SPI_Init+0x244>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d005      	beq.n	800bdca <HAL_SPI_Init+0x42>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	68db      	ldr	r3, [r3, #12]
 800bdc2:	2b0f      	cmp	r3, #15
 800bdc4:	d901      	bls.n	800bdca <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e0f7      	b.n	800bfba <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 f900 	bl	800bfd0 <SPI_GetPacketSize>
 800bdd0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a7b      	ldr	r2, [pc, #492]	; (800bfc4 <HAL_SPI_Init+0x23c>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d00c      	beq.n	800bdf6 <HAL_SPI_Init+0x6e>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a79      	ldr	r2, [pc, #484]	; (800bfc8 <HAL_SPI_Init+0x240>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d007      	beq.n	800bdf6 <HAL_SPI_Init+0x6e>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4a78      	ldr	r2, [pc, #480]	; (800bfcc <HAL_SPI_Init+0x244>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d002      	beq.n	800bdf6 <HAL_SPI_Init+0x6e>
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2b08      	cmp	r3, #8
 800bdf4:	d811      	bhi.n	800be1a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bdfa:	4a72      	ldr	r2, [pc, #456]	; (800bfc4 <HAL_SPI_Init+0x23c>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d009      	beq.n	800be14 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4a70      	ldr	r2, [pc, #448]	; (800bfc8 <HAL_SPI_Init+0x240>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d004      	beq.n	800be14 <HAL_SPI_Init+0x8c>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4a6f      	ldr	r2, [pc, #444]	; (800bfcc <HAL_SPI_Init+0x244>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d104      	bne.n	800be1e <HAL_SPI_Init+0x96>
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2b10      	cmp	r3, #16
 800be18:	d901      	bls.n	800be1e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800be1a:	2301      	movs	r3, #1
 800be1c:	e0cd      	b.n	800bfba <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800be24:	b2db      	uxtb	r3, r3
 800be26:	2b00      	cmp	r3, #0
 800be28:	d106      	bne.n	800be38 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2200      	movs	r2, #0
 800be2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7f7 faf8 	bl	8003428 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2202      	movs	r2, #2
 800be3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	681a      	ldr	r2, [r3, #0]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f022 0201 	bic.w	r2, r2, #1
 800be4e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	689b      	ldr	r3, [r3, #8]
 800be56:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800be5a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	699b      	ldr	r3, [r3, #24]
 800be60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be64:	d119      	bne.n	800be9a <HAL_SPI_Init+0x112>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be6e:	d103      	bne.n	800be78 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800be74:	2b00      	cmp	r3, #0
 800be76:	d008      	beq.n	800be8a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d10c      	bne.n	800be9a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800be84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be88:	d107      	bne.n	800be9a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800be98:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d00f      	beq.n	800bec6 <HAL_SPI_Init+0x13e>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	68db      	ldr	r3, [r3, #12]
 800beaa:	2b06      	cmp	r3, #6
 800beac:	d90b      	bls.n	800bec6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	430a      	orrs	r2, r1
 800bec2:	601a      	str	r2, [r3, #0]
 800bec4:	e007      	b.n	800bed6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bed4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	69da      	ldr	r2, [r3, #28]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bede:	431a      	orrs	r2, r3
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	431a      	orrs	r2, r3
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bee8:	ea42 0103 	orr.w	r1, r2, r3
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	68da      	ldr	r2, [r3, #12]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	430a      	orrs	r2, r1
 800bef6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf00:	431a      	orrs	r2, r3
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf06:	431a      	orrs	r2, r3
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	699b      	ldr	r3, [r3, #24]
 800bf0c:	431a      	orrs	r2, r3
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	691b      	ldr	r3, [r3, #16]
 800bf12:	431a      	orrs	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	695b      	ldr	r3, [r3, #20]
 800bf18:	431a      	orrs	r2, r3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a1b      	ldr	r3, [r3, #32]
 800bf1e:	431a      	orrs	r2, r3
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	431a      	orrs	r2, r3
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf2a:	431a      	orrs	r2, r3
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	431a      	orrs	r2, r3
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf36:	ea42 0103 	orr.w	r1, r2, r3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	430a      	orrs	r2, r1
 800bf44:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d113      	bne.n	800bf76 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf60:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bf74:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f022 0201 	bic.w	r2, r2, #1
 800bf84:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d00a      	beq.n	800bfa8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	68db      	ldr	r3, [r3, #12]
 800bf98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	430a      	orrs	r2, r1
 800bfa6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bfb8:	2300      	movs	r3, #0
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3710      	adds	r7, #16
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop
 800bfc4:	40013000 	.word	0x40013000
 800bfc8:	40003800 	.word	0x40003800
 800bfcc:	40003c00 	.word	0x40003c00

0800bfd0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b085      	sub	sp, #20
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfdc:	095b      	lsrs	r3, r3, #5
 800bfde:	3301      	adds	r3, #1
 800bfe0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	3307      	adds	r3, #7
 800bfee:	08db      	lsrs	r3, r3, #3
 800bff0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	fb02 f303 	mul.w	r3, r2, r3
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3714      	adds	r7, #20
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr

0800c006 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c006:	b580      	push	{r7, lr}
 800c008:	b082      	sub	sp, #8
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d101      	bne.n	800c018 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c014:	2301      	movs	r3, #1
 800c016:	e042      	b.n	800c09e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d106      	bne.n	800c030 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f7f7 fac6 	bl	80035bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2224      	movs	r2, #36	; 0x24
 800c034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	681a      	ldr	r2, [r3, #0]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f022 0201 	bic.w	r2, r2, #1
 800c046:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 f8bb 	bl	800c1c4 <UART_SetConfig>
 800c04e:	4603      	mov	r3, r0
 800c050:	2b01      	cmp	r3, #1
 800c052:	d101      	bne.n	800c058 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c054:	2301      	movs	r3, #1
 800c056:	e022      	b.n	800c09e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d002      	beq.n	800c066 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 fe17 	bl	800cc94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	685a      	ldr	r2, [r3, #4]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c074:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	689a      	ldr	r2, [r3, #8]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c084:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f042 0201 	orr.w	r2, r2, #1
 800c094:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 fe9e 	bl	800cdd8 <UART_CheckIdleState>
 800c09c:	4603      	mov	r3, r0
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3708      	adds	r7, #8
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b08a      	sub	sp, #40	; 0x28
 800c0aa:	af02      	add	r7, sp, #8
 800c0ac:	60f8      	str	r0, [r7, #12]
 800c0ae:	60b9      	str	r1, [r7, #8]
 800c0b0:	603b      	str	r3, [r7, #0]
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0bc:	2b20      	cmp	r3, #32
 800c0be:	d17b      	bne.n	800c1b8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d002      	beq.n	800c0cc <HAL_UART_Transmit+0x26>
 800c0c6:	88fb      	ldrh	r3, [r7, #6]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d101      	bne.n	800c0d0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e074      	b.n	800c1ba <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2221      	movs	r2, #33	; 0x21
 800c0dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c0e0:	f7f7 fe54 	bl	8003d8c <HAL_GetTick>
 800c0e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	88fa      	ldrh	r2, [r7, #6]
 800c0ea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	88fa      	ldrh	r2, [r7, #6]
 800c0f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0fe:	d108      	bne.n	800c112 <HAL_UART_Transmit+0x6c>
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	691b      	ldr	r3, [r3, #16]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d104      	bne.n	800c112 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c108:	2300      	movs	r3, #0
 800c10a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	61bb      	str	r3, [r7, #24]
 800c110:	e003      	b.n	800c11a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c116:	2300      	movs	r3, #0
 800c118:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c11a:	e030      	b.n	800c17e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	9300      	str	r3, [sp, #0]
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	2200      	movs	r2, #0
 800c124:	2180      	movs	r1, #128	; 0x80
 800c126:	68f8      	ldr	r0, [r7, #12]
 800c128:	f000 ff00 	bl	800cf2c <UART_WaitOnFlagUntilTimeout>
 800c12c:	4603      	mov	r3, r0
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d005      	beq.n	800c13e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2220      	movs	r2, #32
 800c136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800c13a:	2303      	movs	r3, #3
 800c13c:	e03d      	b.n	800c1ba <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c13e:	69fb      	ldr	r3, [r7, #28]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d10b      	bne.n	800c15c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	881b      	ldrh	r3, [r3, #0]
 800c148:	461a      	mov	r2, r3
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c152:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	3302      	adds	r3, #2
 800c158:	61bb      	str	r3, [r7, #24]
 800c15a:	e007      	b.n	800c16c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c15c:	69fb      	ldr	r3, [r7, #28]
 800c15e:	781a      	ldrb	r2, [r3, #0]
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c166:	69fb      	ldr	r3, [r7, #28]
 800c168:	3301      	adds	r3, #1
 800c16a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c172:	b29b      	uxth	r3, r3
 800c174:	3b01      	subs	r3, #1
 800c176:	b29a      	uxth	r2, r3
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c184:	b29b      	uxth	r3, r3
 800c186:	2b00      	cmp	r3, #0
 800c188:	d1c8      	bne.n	800c11c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	9300      	str	r3, [sp, #0]
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	2200      	movs	r2, #0
 800c192:	2140      	movs	r1, #64	; 0x40
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	f000 fec9 	bl	800cf2c <UART_WaitOnFlagUntilTimeout>
 800c19a:	4603      	mov	r3, r0
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d005      	beq.n	800c1ac <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2220      	movs	r2, #32
 800c1a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800c1a8:	2303      	movs	r3, #3
 800c1aa:	e006      	b.n	800c1ba <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	2220      	movs	r2, #32
 800c1b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	e000      	b.n	800c1ba <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c1b8:	2302      	movs	r3, #2
  }
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3720      	adds	r7, #32
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
	...

0800c1c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c1c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c1c8:	b092      	sub	sp, #72	; 0x48
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	689a      	ldr	r2, [r3, #8]
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	691b      	ldr	r3, [r3, #16]
 800c1dc:	431a      	orrs	r2, r3
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	695b      	ldr	r3, [r3, #20]
 800c1e2:	431a      	orrs	r2, r3
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	69db      	ldr	r3, [r3, #28]
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	4bbe      	ldr	r3, [pc, #760]	; (800c4ec <UART_SetConfig+0x328>)
 800c1f4:	4013      	ands	r3, r2
 800c1f6:	697a      	ldr	r2, [r7, #20]
 800c1f8:	6812      	ldr	r2, [r2, #0]
 800c1fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c1fc:	430b      	orrs	r3, r1
 800c1fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	68da      	ldr	r2, [r3, #12]
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	430a      	orrs	r2, r1
 800c214:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	699b      	ldr	r3, [r3, #24]
 800c21a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	4ab3      	ldr	r2, [pc, #716]	; (800c4f0 <UART_SetConfig+0x32c>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d004      	beq.n	800c230 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	6a1b      	ldr	r3, [r3, #32]
 800c22a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c22c:	4313      	orrs	r3, r2
 800c22e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	689a      	ldr	r2, [r3, #8]
 800c236:	4baf      	ldr	r3, [pc, #700]	; (800c4f4 <UART_SetConfig+0x330>)
 800c238:	4013      	ands	r3, r2
 800c23a:	697a      	ldr	r2, [r7, #20]
 800c23c:	6812      	ldr	r2, [r2, #0]
 800c23e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c240:	430b      	orrs	r3, r1
 800c242:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c24a:	f023 010f 	bic.w	r1, r3, #15
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	430a      	orrs	r2, r1
 800c258:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4aa6      	ldr	r2, [pc, #664]	; (800c4f8 <UART_SetConfig+0x334>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d177      	bne.n	800c354 <UART_SetConfig+0x190>
 800c264:	4ba5      	ldr	r3, [pc, #660]	; (800c4fc <UART_SetConfig+0x338>)
 800c266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c268:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c26c:	2b28      	cmp	r3, #40	; 0x28
 800c26e:	d86d      	bhi.n	800c34c <UART_SetConfig+0x188>
 800c270:	a201      	add	r2, pc, #4	; (adr r2, 800c278 <UART_SetConfig+0xb4>)
 800c272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c276:	bf00      	nop
 800c278:	0800c31d 	.word	0x0800c31d
 800c27c:	0800c34d 	.word	0x0800c34d
 800c280:	0800c34d 	.word	0x0800c34d
 800c284:	0800c34d 	.word	0x0800c34d
 800c288:	0800c34d 	.word	0x0800c34d
 800c28c:	0800c34d 	.word	0x0800c34d
 800c290:	0800c34d 	.word	0x0800c34d
 800c294:	0800c34d 	.word	0x0800c34d
 800c298:	0800c325 	.word	0x0800c325
 800c29c:	0800c34d 	.word	0x0800c34d
 800c2a0:	0800c34d 	.word	0x0800c34d
 800c2a4:	0800c34d 	.word	0x0800c34d
 800c2a8:	0800c34d 	.word	0x0800c34d
 800c2ac:	0800c34d 	.word	0x0800c34d
 800c2b0:	0800c34d 	.word	0x0800c34d
 800c2b4:	0800c34d 	.word	0x0800c34d
 800c2b8:	0800c32d 	.word	0x0800c32d
 800c2bc:	0800c34d 	.word	0x0800c34d
 800c2c0:	0800c34d 	.word	0x0800c34d
 800c2c4:	0800c34d 	.word	0x0800c34d
 800c2c8:	0800c34d 	.word	0x0800c34d
 800c2cc:	0800c34d 	.word	0x0800c34d
 800c2d0:	0800c34d 	.word	0x0800c34d
 800c2d4:	0800c34d 	.word	0x0800c34d
 800c2d8:	0800c335 	.word	0x0800c335
 800c2dc:	0800c34d 	.word	0x0800c34d
 800c2e0:	0800c34d 	.word	0x0800c34d
 800c2e4:	0800c34d 	.word	0x0800c34d
 800c2e8:	0800c34d 	.word	0x0800c34d
 800c2ec:	0800c34d 	.word	0x0800c34d
 800c2f0:	0800c34d 	.word	0x0800c34d
 800c2f4:	0800c34d 	.word	0x0800c34d
 800c2f8:	0800c33d 	.word	0x0800c33d
 800c2fc:	0800c34d 	.word	0x0800c34d
 800c300:	0800c34d 	.word	0x0800c34d
 800c304:	0800c34d 	.word	0x0800c34d
 800c308:	0800c34d 	.word	0x0800c34d
 800c30c:	0800c34d 	.word	0x0800c34d
 800c310:	0800c34d 	.word	0x0800c34d
 800c314:	0800c34d 	.word	0x0800c34d
 800c318:	0800c345 	.word	0x0800c345
 800c31c:	2301      	movs	r3, #1
 800c31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c322:	e222      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c324:	2304      	movs	r3, #4
 800c326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c32a:	e21e      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c32c:	2308      	movs	r3, #8
 800c32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c332:	e21a      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c334:	2310      	movs	r3, #16
 800c336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c33a:	e216      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c33c:	2320      	movs	r3, #32
 800c33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c342:	e212      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c344:	2340      	movs	r3, #64	; 0x40
 800c346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c34a:	e20e      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c34c:	2380      	movs	r3, #128	; 0x80
 800c34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c352:	e20a      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a69      	ldr	r2, [pc, #420]	; (800c500 <UART_SetConfig+0x33c>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d130      	bne.n	800c3c0 <UART_SetConfig+0x1fc>
 800c35e:	4b67      	ldr	r3, [pc, #412]	; (800c4fc <UART_SetConfig+0x338>)
 800c360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c362:	f003 0307 	and.w	r3, r3, #7
 800c366:	2b05      	cmp	r3, #5
 800c368:	d826      	bhi.n	800c3b8 <UART_SetConfig+0x1f4>
 800c36a:	a201      	add	r2, pc, #4	; (adr r2, 800c370 <UART_SetConfig+0x1ac>)
 800c36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c370:	0800c389 	.word	0x0800c389
 800c374:	0800c391 	.word	0x0800c391
 800c378:	0800c399 	.word	0x0800c399
 800c37c:	0800c3a1 	.word	0x0800c3a1
 800c380:	0800c3a9 	.word	0x0800c3a9
 800c384:	0800c3b1 	.word	0x0800c3b1
 800c388:	2300      	movs	r3, #0
 800c38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c38e:	e1ec      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c390:	2304      	movs	r3, #4
 800c392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c396:	e1e8      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c398:	2308      	movs	r3, #8
 800c39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c39e:	e1e4      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c3a0:	2310      	movs	r3, #16
 800c3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3a6:	e1e0      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c3a8:	2320      	movs	r3, #32
 800c3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ae:	e1dc      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c3b0:	2340      	movs	r3, #64	; 0x40
 800c3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3b6:	e1d8      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c3b8:	2380      	movs	r3, #128	; 0x80
 800c3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3be:	e1d4      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4a4f      	ldr	r2, [pc, #316]	; (800c504 <UART_SetConfig+0x340>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d130      	bne.n	800c42c <UART_SetConfig+0x268>
 800c3ca:	4b4c      	ldr	r3, [pc, #304]	; (800c4fc <UART_SetConfig+0x338>)
 800c3cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3ce:	f003 0307 	and.w	r3, r3, #7
 800c3d2:	2b05      	cmp	r3, #5
 800c3d4:	d826      	bhi.n	800c424 <UART_SetConfig+0x260>
 800c3d6:	a201      	add	r2, pc, #4	; (adr r2, 800c3dc <UART_SetConfig+0x218>)
 800c3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3dc:	0800c3f5 	.word	0x0800c3f5
 800c3e0:	0800c3fd 	.word	0x0800c3fd
 800c3e4:	0800c405 	.word	0x0800c405
 800c3e8:	0800c40d 	.word	0x0800c40d
 800c3ec:	0800c415 	.word	0x0800c415
 800c3f0:	0800c41d 	.word	0x0800c41d
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3fa:	e1b6      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c3fc:	2304      	movs	r3, #4
 800c3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c402:	e1b2      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c404:	2308      	movs	r3, #8
 800c406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c40a:	e1ae      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c40c:	2310      	movs	r3, #16
 800c40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c412:	e1aa      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c414:	2320      	movs	r3, #32
 800c416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c41a:	e1a6      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c41c:	2340      	movs	r3, #64	; 0x40
 800c41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c422:	e1a2      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c424:	2380      	movs	r3, #128	; 0x80
 800c426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c42a:	e19e      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a35      	ldr	r2, [pc, #212]	; (800c508 <UART_SetConfig+0x344>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d130      	bne.n	800c498 <UART_SetConfig+0x2d4>
 800c436:	4b31      	ldr	r3, [pc, #196]	; (800c4fc <UART_SetConfig+0x338>)
 800c438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c43a:	f003 0307 	and.w	r3, r3, #7
 800c43e:	2b05      	cmp	r3, #5
 800c440:	d826      	bhi.n	800c490 <UART_SetConfig+0x2cc>
 800c442:	a201      	add	r2, pc, #4	; (adr r2, 800c448 <UART_SetConfig+0x284>)
 800c444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c448:	0800c461 	.word	0x0800c461
 800c44c:	0800c469 	.word	0x0800c469
 800c450:	0800c471 	.word	0x0800c471
 800c454:	0800c479 	.word	0x0800c479
 800c458:	0800c481 	.word	0x0800c481
 800c45c:	0800c489 	.word	0x0800c489
 800c460:	2300      	movs	r3, #0
 800c462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c466:	e180      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c468:	2304      	movs	r3, #4
 800c46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c46e:	e17c      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c470:	2308      	movs	r3, #8
 800c472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c476:	e178      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c478:	2310      	movs	r3, #16
 800c47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c47e:	e174      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c480:	2320      	movs	r3, #32
 800c482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c486:	e170      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c488:	2340      	movs	r3, #64	; 0x40
 800c48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c48e:	e16c      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c490:	2380      	movs	r3, #128	; 0x80
 800c492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c496:	e168      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a1b      	ldr	r2, [pc, #108]	; (800c50c <UART_SetConfig+0x348>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d142      	bne.n	800c528 <UART_SetConfig+0x364>
 800c4a2:	4b16      	ldr	r3, [pc, #88]	; (800c4fc <UART_SetConfig+0x338>)
 800c4a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4a6:	f003 0307 	and.w	r3, r3, #7
 800c4aa:	2b05      	cmp	r3, #5
 800c4ac:	d838      	bhi.n	800c520 <UART_SetConfig+0x35c>
 800c4ae:	a201      	add	r2, pc, #4	; (adr r2, 800c4b4 <UART_SetConfig+0x2f0>)
 800c4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b4:	0800c4cd 	.word	0x0800c4cd
 800c4b8:	0800c4d5 	.word	0x0800c4d5
 800c4bc:	0800c4dd 	.word	0x0800c4dd
 800c4c0:	0800c4e5 	.word	0x0800c4e5
 800c4c4:	0800c511 	.word	0x0800c511
 800c4c8:	0800c519 	.word	0x0800c519
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4d2:	e14a      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c4d4:	2304      	movs	r3, #4
 800c4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4da:	e146      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c4dc:	2308      	movs	r3, #8
 800c4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4e2:	e142      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c4e4:	2310      	movs	r3, #16
 800c4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ea:	e13e      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c4ec:	cfff69f3 	.word	0xcfff69f3
 800c4f0:	58000c00 	.word	0x58000c00
 800c4f4:	11fff4ff 	.word	0x11fff4ff
 800c4f8:	40011000 	.word	0x40011000
 800c4fc:	58024400 	.word	0x58024400
 800c500:	40004400 	.word	0x40004400
 800c504:	40004800 	.word	0x40004800
 800c508:	40004c00 	.word	0x40004c00
 800c50c:	40005000 	.word	0x40005000
 800c510:	2320      	movs	r3, #32
 800c512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c516:	e128      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c518:	2340      	movs	r3, #64	; 0x40
 800c51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c51e:	e124      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c520:	2380      	movs	r3, #128	; 0x80
 800c522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c526:	e120      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4acb      	ldr	r2, [pc, #812]	; (800c85c <UART_SetConfig+0x698>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d176      	bne.n	800c620 <UART_SetConfig+0x45c>
 800c532:	4bcb      	ldr	r3, [pc, #812]	; (800c860 <UART_SetConfig+0x69c>)
 800c534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c53a:	2b28      	cmp	r3, #40	; 0x28
 800c53c:	d86c      	bhi.n	800c618 <UART_SetConfig+0x454>
 800c53e:	a201      	add	r2, pc, #4	; (adr r2, 800c544 <UART_SetConfig+0x380>)
 800c540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c544:	0800c5e9 	.word	0x0800c5e9
 800c548:	0800c619 	.word	0x0800c619
 800c54c:	0800c619 	.word	0x0800c619
 800c550:	0800c619 	.word	0x0800c619
 800c554:	0800c619 	.word	0x0800c619
 800c558:	0800c619 	.word	0x0800c619
 800c55c:	0800c619 	.word	0x0800c619
 800c560:	0800c619 	.word	0x0800c619
 800c564:	0800c5f1 	.word	0x0800c5f1
 800c568:	0800c619 	.word	0x0800c619
 800c56c:	0800c619 	.word	0x0800c619
 800c570:	0800c619 	.word	0x0800c619
 800c574:	0800c619 	.word	0x0800c619
 800c578:	0800c619 	.word	0x0800c619
 800c57c:	0800c619 	.word	0x0800c619
 800c580:	0800c619 	.word	0x0800c619
 800c584:	0800c5f9 	.word	0x0800c5f9
 800c588:	0800c619 	.word	0x0800c619
 800c58c:	0800c619 	.word	0x0800c619
 800c590:	0800c619 	.word	0x0800c619
 800c594:	0800c619 	.word	0x0800c619
 800c598:	0800c619 	.word	0x0800c619
 800c59c:	0800c619 	.word	0x0800c619
 800c5a0:	0800c619 	.word	0x0800c619
 800c5a4:	0800c601 	.word	0x0800c601
 800c5a8:	0800c619 	.word	0x0800c619
 800c5ac:	0800c619 	.word	0x0800c619
 800c5b0:	0800c619 	.word	0x0800c619
 800c5b4:	0800c619 	.word	0x0800c619
 800c5b8:	0800c619 	.word	0x0800c619
 800c5bc:	0800c619 	.word	0x0800c619
 800c5c0:	0800c619 	.word	0x0800c619
 800c5c4:	0800c609 	.word	0x0800c609
 800c5c8:	0800c619 	.word	0x0800c619
 800c5cc:	0800c619 	.word	0x0800c619
 800c5d0:	0800c619 	.word	0x0800c619
 800c5d4:	0800c619 	.word	0x0800c619
 800c5d8:	0800c619 	.word	0x0800c619
 800c5dc:	0800c619 	.word	0x0800c619
 800c5e0:	0800c619 	.word	0x0800c619
 800c5e4:	0800c611 	.word	0x0800c611
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ee:	e0bc      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c5f0:	2304      	movs	r3, #4
 800c5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5f6:	e0b8      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c5f8:	2308      	movs	r3, #8
 800c5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5fe:	e0b4      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c600:	2310      	movs	r3, #16
 800c602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c606:	e0b0      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c608:	2320      	movs	r3, #32
 800c60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c60e:	e0ac      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c610:	2340      	movs	r3, #64	; 0x40
 800c612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c616:	e0a8      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c618:	2380      	movs	r3, #128	; 0x80
 800c61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c61e:	e0a4      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4a8f      	ldr	r2, [pc, #572]	; (800c864 <UART_SetConfig+0x6a0>)
 800c626:	4293      	cmp	r3, r2
 800c628:	d130      	bne.n	800c68c <UART_SetConfig+0x4c8>
 800c62a:	4b8d      	ldr	r3, [pc, #564]	; (800c860 <UART_SetConfig+0x69c>)
 800c62c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c62e:	f003 0307 	and.w	r3, r3, #7
 800c632:	2b05      	cmp	r3, #5
 800c634:	d826      	bhi.n	800c684 <UART_SetConfig+0x4c0>
 800c636:	a201      	add	r2, pc, #4	; (adr r2, 800c63c <UART_SetConfig+0x478>)
 800c638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c63c:	0800c655 	.word	0x0800c655
 800c640:	0800c65d 	.word	0x0800c65d
 800c644:	0800c665 	.word	0x0800c665
 800c648:	0800c66d 	.word	0x0800c66d
 800c64c:	0800c675 	.word	0x0800c675
 800c650:	0800c67d 	.word	0x0800c67d
 800c654:	2300      	movs	r3, #0
 800c656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c65a:	e086      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c65c:	2304      	movs	r3, #4
 800c65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c662:	e082      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c664:	2308      	movs	r3, #8
 800c666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c66a:	e07e      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c66c:	2310      	movs	r3, #16
 800c66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c672:	e07a      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c674:	2320      	movs	r3, #32
 800c676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c67a:	e076      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c67c:	2340      	movs	r3, #64	; 0x40
 800c67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c682:	e072      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c684:	2380      	movs	r3, #128	; 0x80
 800c686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c68a:	e06e      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4a75      	ldr	r2, [pc, #468]	; (800c868 <UART_SetConfig+0x6a4>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d130      	bne.n	800c6f8 <UART_SetConfig+0x534>
 800c696:	4b72      	ldr	r3, [pc, #456]	; (800c860 <UART_SetConfig+0x69c>)
 800c698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c69a:	f003 0307 	and.w	r3, r3, #7
 800c69e:	2b05      	cmp	r3, #5
 800c6a0:	d826      	bhi.n	800c6f0 <UART_SetConfig+0x52c>
 800c6a2:	a201      	add	r2, pc, #4	; (adr r2, 800c6a8 <UART_SetConfig+0x4e4>)
 800c6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6a8:	0800c6c1 	.word	0x0800c6c1
 800c6ac:	0800c6c9 	.word	0x0800c6c9
 800c6b0:	0800c6d1 	.word	0x0800c6d1
 800c6b4:	0800c6d9 	.word	0x0800c6d9
 800c6b8:	0800c6e1 	.word	0x0800c6e1
 800c6bc:	0800c6e9 	.word	0x0800c6e9
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6c6:	e050      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c6c8:	2304      	movs	r3, #4
 800c6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6ce:	e04c      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c6d0:	2308      	movs	r3, #8
 800c6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6d6:	e048      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c6d8:	2310      	movs	r3, #16
 800c6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6de:	e044      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c6e0:	2320      	movs	r3, #32
 800c6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6e6:	e040      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c6e8:	2340      	movs	r3, #64	; 0x40
 800c6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6ee:	e03c      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c6f0:	2380      	movs	r3, #128	; 0x80
 800c6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6f6:	e038      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4a5b      	ldr	r2, [pc, #364]	; (800c86c <UART_SetConfig+0x6a8>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d130      	bne.n	800c764 <UART_SetConfig+0x5a0>
 800c702:	4b57      	ldr	r3, [pc, #348]	; (800c860 <UART_SetConfig+0x69c>)
 800c704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c706:	f003 0307 	and.w	r3, r3, #7
 800c70a:	2b05      	cmp	r3, #5
 800c70c:	d826      	bhi.n	800c75c <UART_SetConfig+0x598>
 800c70e:	a201      	add	r2, pc, #4	; (adr r2, 800c714 <UART_SetConfig+0x550>)
 800c710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c714:	0800c72d 	.word	0x0800c72d
 800c718:	0800c735 	.word	0x0800c735
 800c71c:	0800c73d 	.word	0x0800c73d
 800c720:	0800c745 	.word	0x0800c745
 800c724:	0800c74d 	.word	0x0800c74d
 800c728:	0800c755 	.word	0x0800c755
 800c72c:	2302      	movs	r3, #2
 800c72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c732:	e01a      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c734:	2304      	movs	r3, #4
 800c736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c73a:	e016      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c73c:	2308      	movs	r3, #8
 800c73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c742:	e012      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c744:	2310      	movs	r3, #16
 800c746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c74a:	e00e      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c74c:	2320      	movs	r3, #32
 800c74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c752:	e00a      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c754:	2340      	movs	r3, #64	; 0x40
 800c756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c75a:	e006      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c75c:	2380      	movs	r3, #128	; 0x80
 800c75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c762:	e002      	b.n	800c76a <UART_SetConfig+0x5a6>
 800c764:	2380      	movs	r3, #128	; 0x80
 800c766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	4a3f      	ldr	r2, [pc, #252]	; (800c86c <UART_SetConfig+0x6a8>)
 800c770:	4293      	cmp	r3, r2
 800c772:	f040 80f8 	bne.w	800c966 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c776:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c77a:	2b20      	cmp	r3, #32
 800c77c:	dc46      	bgt.n	800c80c <UART_SetConfig+0x648>
 800c77e:	2b02      	cmp	r3, #2
 800c780:	f2c0 8082 	blt.w	800c888 <UART_SetConfig+0x6c4>
 800c784:	3b02      	subs	r3, #2
 800c786:	2b1e      	cmp	r3, #30
 800c788:	d87e      	bhi.n	800c888 <UART_SetConfig+0x6c4>
 800c78a:	a201      	add	r2, pc, #4	; (adr r2, 800c790 <UART_SetConfig+0x5cc>)
 800c78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c790:	0800c813 	.word	0x0800c813
 800c794:	0800c889 	.word	0x0800c889
 800c798:	0800c81b 	.word	0x0800c81b
 800c79c:	0800c889 	.word	0x0800c889
 800c7a0:	0800c889 	.word	0x0800c889
 800c7a4:	0800c889 	.word	0x0800c889
 800c7a8:	0800c82b 	.word	0x0800c82b
 800c7ac:	0800c889 	.word	0x0800c889
 800c7b0:	0800c889 	.word	0x0800c889
 800c7b4:	0800c889 	.word	0x0800c889
 800c7b8:	0800c889 	.word	0x0800c889
 800c7bc:	0800c889 	.word	0x0800c889
 800c7c0:	0800c889 	.word	0x0800c889
 800c7c4:	0800c889 	.word	0x0800c889
 800c7c8:	0800c83b 	.word	0x0800c83b
 800c7cc:	0800c889 	.word	0x0800c889
 800c7d0:	0800c889 	.word	0x0800c889
 800c7d4:	0800c889 	.word	0x0800c889
 800c7d8:	0800c889 	.word	0x0800c889
 800c7dc:	0800c889 	.word	0x0800c889
 800c7e0:	0800c889 	.word	0x0800c889
 800c7e4:	0800c889 	.word	0x0800c889
 800c7e8:	0800c889 	.word	0x0800c889
 800c7ec:	0800c889 	.word	0x0800c889
 800c7f0:	0800c889 	.word	0x0800c889
 800c7f4:	0800c889 	.word	0x0800c889
 800c7f8:	0800c889 	.word	0x0800c889
 800c7fc:	0800c889 	.word	0x0800c889
 800c800:	0800c889 	.word	0x0800c889
 800c804:	0800c889 	.word	0x0800c889
 800c808:	0800c87b 	.word	0x0800c87b
 800c80c:	2b40      	cmp	r3, #64	; 0x40
 800c80e:	d037      	beq.n	800c880 <UART_SetConfig+0x6bc>
 800c810:	e03a      	b.n	800c888 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c812:	f7fe f90d 	bl	800aa30 <HAL_RCCEx_GetD3PCLK1Freq>
 800c816:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c818:	e03c      	b.n	800c894 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c81a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c81e:	4618      	mov	r0, r3
 800c820:	f7fe f91c 	bl	800aa5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c828:	e034      	b.n	800c894 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c82a:	f107 0318 	add.w	r3, r7, #24
 800c82e:	4618      	mov	r0, r3
 800c830:	f7fe fa68 	bl	800ad04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c838:	e02c      	b.n	800c894 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c83a:	4b09      	ldr	r3, [pc, #36]	; (800c860 <UART_SetConfig+0x69c>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f003 0320 	and.w	r3, r3, #32
 800c842:	2b00      	cmp	r3, #0
 800c844:	d016      	beq.n	800c874 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c846:	4b06      	ldr	r3, [pc, #24]	; (800c860 <UART_SetConfig+0x69c>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	08db      	lsrs	r3, r3, #3
 800c84c:	f003 0303 	and.w	r3, r3, #3
 800c850:	4a07      	ldr	r2, [pc, #28]	; (800c870 <UART_SetConfig+0x6ac>)
 800c852:	fa22 f303 	lsr.w	r3, r2, r3
 800c856:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c858:	e01c      	b.n	800c894 <UART_SetConfig+0x6d0>
 800c85a:	bf00      	nop
 800c85c:	40011400 	.word	0x40011400
 800c860:	58024400 	.word	0x58024400
 800c864:	40007800 	.word	0x40007800
 800c868:	40007c00 	.word	0x40007c00
 800c86c:	58000c00 	.word	0x58000c00
 800c870:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c874:	4b9d      	ldr	r3, [pc, #628]	; (800caec <UART_SetConfig+0x928>)
 800c876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c878:	e00c      	b.n	800c894 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c87a:	4b9d      	ldr	r3, [pc, #628]	; (800caf0 <UART_SetConfig+0x92c>)
 800c87c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c87e:	e009      	b.n	800c894 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c884:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c886:	e005      	b.n	800c894 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c888:	2300      	movs	r3, #0
 800c88a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c88c:	2301      	movs	r3, #1
 800c88e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c892:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c896:	2b00      	cmp	r3, #0
 800c898:	f000 81de 	beq.w	800cc58 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a0:	4a94      	ldr	r2, [pc, #592]	; (800caf4 <UART_SetConfig+0x930>)
 800c8a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8ae:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	685a      	ldr	r2, [r3, #4]
 800c8b4:	4613      	mov	r3, r2
 800c8b6:	005b      	lsls	r3, r3, #1
 800c8b8:	4413      	add	r3, r2
 800c8ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d305      	bcc.n	800c8cc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d903      	bls.n	800c8d4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c8d2:	e1c1      	b.n	800cc58 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	60bb      	str	r3, [r7, #8]
 800c8da:	60fa      	str	r2, [r7, #12]
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e0:	4a84      	ldr	r2, [pc, #528]	; (800caf4 <UART_SetConfig+0x930>)
 800c8e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	603b      	str	r3, [r7, #0]
 800c8ec:	607a      	str	r2, [r7, #4]
 800c8ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c8f6:	f7f3 fd4b 	bl	8000390 <__aeabi_uldivmod>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	4610      	mov	r0, r2
 800c900:	4619      	mov	r1, r3
 800c902:	f04f 0200 	mov.w	r2, #0
 800c906:	f04f 0300 	mov.w	r3, #0
 800c90a:	020b      	lsls	r3, r1, #8
 800c90c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c910:	0202      	lsls	r2, r0, #8
 800c912:	6979      	ldr	r1, [r7, #20]
 800c914:	6849      	ldr	r1, [r1, #4]
 800c916:	0849      	lsrs	r1, r1, #1
 800c918:	2000      	movs	r0, #0
 800c91a:	460c      	mov	r4, r1
 800c91c:	4605      	mov	r5, r0
 800c91e:	eb12 0804 	adds.w	r8, r2, r4
 800c922:	eb43 0905 	adc.w	r9, r3, r5
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	2200      	movs	r2, #0
 800c92c:	469a      	mov	sl, r3
 800c92e:	4693      	mov	fp, r2
 800c930:	4652      	mov	r2, sl
 800c932:	465b      	mov	r3, fp
 800c934:	4640      	mov	r0, r8
 800c936:	4649      	mov	r1, r9
 800c938:	f7f3 fd2a 	bl	8000390 <__aeabi_uldivmod>
 800c93c:	4602      	mov	r2, r0
 800c93e:	460b      	mov	r3, r1
 800c940:	4613      	mov	r3, r2
 800c942:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c946:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c94a:	d308      	bcc.n	800c95e <UART_SetConfig+0x79a>
 800c94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c952:	d204      	bcs.n	800c95e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c95a:	60da      	str	r2, [r3, #12]
 800c95c:	e17c      	b.n	800cc58 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c95e:	2301      	movs	r3, #1
 800c960:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c964:	e178      	b.n	800cc58 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	69db      	ldr	r3, [r3, #28]
 800c96a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c96e:	f040 80c5 	bne.w	800cafc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c972:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c976:	2b20      	cmp	r3, #32
 800c978:	dc48      	bgt.n	800ca0c <UART_SetConfig+0x848>
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	db7b      	blt.n	800ca76 <UART_SetConfig+0x8b2>
 800c97e:	2b20      	cmp	r3, #32
 800c980:	d879      	bhi.n	800ca76 <UART_SetConfig+0x8b2>
 800c982:	a201      	add	r2, pc, #4	; (adr r2, 800c988 <UART_SetConfig+0x7c4>)
 800c984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c988:	0800ca13 	.word	0x0800ca13
 800c98c:	0800ca1b 	.word	0x0800ca1b
 800c990:	0800ca77 	.word	0x0800ca77
 800c994:	0800ca77 	.word	0x0800ca77
 800c998:	0800ca23 	.word	0x0800ca23
 800c99c:	0800ca77 	.word	0x0800ca77
 800c9a0:	0800ca77 	.word	0x0800ca77
 800c9a4:	0800ca77 	.word	0x0800ca77
 800c9a8:	0800ca33 	.word	0x0800ca33
 800c9ac:	0800ca77 	.word	0x0800ca77
 800c9b0:	0800ca77 	.word	0x0800ca77
 800c9b4:	0800ca77 	.word	0x0800ca77
 800c9b8:	0800ca77 	.word	0x0800ca77
 800c9bc:	0800ca77 	.word	0x0800ca77
 800c9c0:	0800ca77 	.word	0x0800ca77
 800c9c4:	0800ca77 	.word	0x0800ca77
 800c9c8:	0800ca43 	.word	0x0800ca43
 800c9cc:	0800ca77 	.word	0x0800ca77
 800c9d0:	0800ca77 	.word	0x0800ca77
 800c9d4:	0800ca77 	.word	0x0800ca77
 800c9d8:	0800ca77 	.word	0x0800ca77
 800c9dc:	0800ca77 	.word	0x0800ca77
 800c9e0:	0800ca77 	.word	0x0800ca77
 800c9e4:	0800ca77 	.word	0x0800ca77
 800c9e8:	0800ca77 	.word	0x0800ca77
 800c9ec:	0800ca77 	.word	0x0800ca77
 800c9f0:	0800ca77 	.word	0x0800ca77
 800c9f4:	0800ca77 	.word	0x0800ca77
 800c9f8:	0800ca77 	.word	0x0800ca77
 800c9fc:	0800ca77 	.word	0x0800ca77
 800ca00:	0800ca77 	.word	0x0800ca77
 800ca04:	0800ca77 	.word	0x0800ca77
 800ca08:	0800ca69 	.word	0x0800ca69
 800ca0c:	2b40      	cmp	r3, #64	; 0x40
 800ca0e:	d02e      	beq.n	800ca6e <UART_SetConfig+0x8aa>
 800ca10:	e031      	b.n	800ca76 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca12:	f7fc f857 	bl	8008ac4 <HAL_RCC_GetPCLK1Freq>
 800ca16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ca18:	e033      	b.n	800ca82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca1a:	f7fc f869 	bl	8008af0 <HAL_RCC_GetPCLK2Freq>
 800ca1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ca20:	e02f      	b.n	800ca82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7fe f818 	bl	800aa5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca30:	e027      	b.n	800ca82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca32:	f107 0318 	add.w	r3, r7, #24
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7fe f964 	bl	800ad04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca40:	e01f      	b.n	800ca82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca42:	4b2d      	ldr	r3, [pc, #180]	; (800caf8 <UART_SetConfig+0x934>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f003 0320 	and.w	r3, r3, #32
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d009      	beq.n	800ca62 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca4e:	4b2a      	ldr	r3, [pc, #168]	; (800caf8 <UART_SetConfig+0x934>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	08db      	lsrs	r3, r3, #3
 800ca54:	f003 0303 	and.w	r3, r3, #3
 800ca58:	4a24      	ldr	r2, [pc, #144]	; (800caec <UART_SetConfig+0x928>)
 800ca5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ca5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ca60:	e00f      	b.n	800ca82 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ca62:	4b22      	ldr	r3, [pc, #136]	; (800caec <UART_SetConfig+0x928>)
 800ca64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca66:	e00c      	b.n	800ca82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ca68:	4b21      	ldr	r3, [pc, #132]	; (800caf0 <UART_SetConfig+0x92c>)
 800ca6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca6c:	e009      	b.n	800ca82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca74:	e005      	b.n	800ca82 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ca76:	2300      	movs	r3, #0
 800ca78:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ca80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ca82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	f000 80e7 	beq.w	800cc58 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca8e:	4a19      	ldr	r2, [pc, #100]	; (800caf4 <UART_SetConfig+0x930>)
 800ca90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca94:	461a      	mov	r2, r3
 800ca96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca98:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca9c:	005a      	lsls	r2, r3, #1
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	085b      	lsrs	r3, r3, #1
 800caa4:	441a      	add	r2, r3
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800caae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab2:	2b0f      	cmp	r3, #15
 800cab4:	d916      	bls.n	800cae4 <UART_SetConfig+0x920>
 800cab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cabc:	d212      	bcs.n	800cae4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac0:	b29b      	uxth	r3, r3
 800cac2:	f023 030f 	bic.w	r3, r3, #15
 800cac6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caca:	085b      	lsrs	r3, r3, #1
 800cacc:	b29b      	uxth	r3, r3
 800cace:	f003 0307 	and.w	r3, r3, #7
 800cad2:	b29a      	uxth	r2, r3
 800cad4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cad6:	4313      	orrs	r3, r2
 800cad8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cae0:	60da      	str	r2, [r3, #12]
 800cae2:	e0b9      	b.n	800cc58 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cae4:	2301      	movs	r3, #1
 800cae6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800caea:	e0b5      	b.n	800cc58 <UART_SetConfig+0xa94>
 800caec:	03d09000 	.word	0x03d09000
 800caf0:	003d0900 	.word	0x003d0900
 800caf4:	0800e5f8 	.word	0x0800e5f8
 800caf8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800cafc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cb00:	2b20      	cmp	r3, #32
 800cb02:	dc49      	bgt.n	800cb98 <UART_SetConfig+0x9d4>
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	db7c      	blt.n	800cc02 <UART_SetConfig+0xa3e>
 800cb08:	2b20      	cmp	r3, #32
 800cb0a:	d87a      	bhi.n	800cc02 <UART_SetConfig+0xa3e>
 800cb0c:	a201      	add	r2, pc, #4	; (adr r2, 800cb14 <UART_SetConfig+0x950>)
 800cb0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb12:	bf00      	nop
 800cb14:	0800cb9f 	.word	0x0800cb9f
 800cb18:	0800cba7 	.word	0x0800cba7
 800cb1c:	0800cc03 	.word	0x0800cc03
 800cb20:	0800cc03 	.word	0x0800cc03
 800cb24:	0800cbaf 	.word	0x0800cbaf
 800cb28:	0800cc03 	.word	0x0800cc03
 800cb2c:	0800cc03 	.word	0x0800cc03
 800cb30:	0800cc03 	.word	0x0800cc03
 800cb34:	0800cbbf 	.word	0x0800cbbf
 800cb38:	0800cc03 	.word	0x0800cc03
 800cb3c:	0800cc03 	.word	0x0800cc03
 800cb40:	0800cc03 	.word	0x0800cc03
 800cb44:	0800cc03 	.word	0x0800cc03
 800cb48:	0800cc03 	.word	0x0800cc03
 800cb4c:	0800cc03 	.word	0x0800cc03
 800cb50:	0800cc03 	.word	0x0800cc03
 800cb54:	0800cbcf 	.word	0x0800cbcf
 800cb58:	0800cc03 	.word	0x0800cc03
 800cb5c:	0800cc03 	.word	0x0800cc03
 800cb60:	0800cc03 	.word	0x0800cc03
 800cb64:	0800cc03 	.word	0x0800cc03
 800cb68:	0800cc03 	.word	0x0800cc03
 800cb6c:	0800cc03 	.word	0x0800cc03
 800cb70:	0800cc03 	.word	0x0800cc03
 800cb74:	0800cc03 	.word	0x0800cc03
 800cb78:	0800cc03 	.word	0x0800cc03
 800cb7c:	0800cc03 	.word	0x0800cc03
 800cb80:	0800cc03 	.word	0x0800cc03
 800cb84:	0800cc03 	.word	0x0800cc03
 800cb88:	0800cc03 	.word	0x0800cc03
 800cb8c:	0800cc03 	.word	0x0800cc03
 800cb90:	0800cc03 	.word	0x0800cc03
 800cb94:	0800cbf5 	.word	0x0800cbf5
 800cb98:	2b40      	cmp	r3, #64	; 0x40
 800cb9a:	d02e      	beq.n	800cbfa <UART_SetConfig+0xa36>
 800cb9c:	e031      	b.n	800cc02 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb9e:	f7fb ff91 	bl	8008ac4 <HAL_RCC_GetPCLK1Freq>
 800cba2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cba4:	e033      	b.n	800cc0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cba6:	f7fb ffa3 	bl	8008af0 <HAL_RCC_GetPCLK2Freq>
 800cbaa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cbac:	e02f      	b.n	800cc0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fd ff52 	bl	800aa5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbbc:	e027      	b.n	800cc0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbbe:	f107 0318 	add.w	r3, r7, #24
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f7fe f89e 	bl	800ad04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbcc:	e01f      	b.n	800cc0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbce:	4b2d      	ldr	r3, [pc, #180]	; (800cc84 <UART_SetConfig+0xac0>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f003 0320 	and.w	r3, r3, #32
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d009      	beq.n	800cbee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cbda:	4b2a      	ldr	r3, [pc, #168]	; (800cc84 <UART_SetConfig+0xac0>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	08db      	lsrs	r3, r3, #3
 800cbe0:	f003 0303 	and.w	r3, r3, #3
 800cbe4:	4a28      	ldr	r2, [pc, #160]	; (800cc88 <UART_SetConfig+0xac4>)
 800cbe6:	fa22 f303 	lsr.w	r3, r2, r3
 800cbea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cbec:	e00f      	b.n	800cc0e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800cbee:	4b26      	ldr	r3, [pc, #152]	; (800cc88 <UART_SetConfig+0xac4>)
 800cbf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbf2:	e00c      	b.n	800cc0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cbf4:	4b25      	ldr	r3, [pc, #148]	; (800cc8c <UART_SetConfig+0xac8>)
 800cbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbf8:	e009      	b.n	800cc0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc00:	e005      	b.n	800cc0e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cc02:	2300      	movs	r3, #0
 800cc04:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cc06:	2301      	movs	r3, #1
 800cc08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cc0c:	bf00      	nop
    }

    if (pclk != 0U)
 800cc0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d021      	beq.n	800cc58 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc18:	4a1d      	ldr	r2, [pc, #116]	; (800cc90 <UART_SetConfig+0xacc>)
 800cc1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc1e:	461a      	mov	r2, r3
 800cc20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc22:	fbb3 f2f2 	udiv	r2, r3, r2
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	085b      	lsrs	r3, r3, #1
 800cc2c:	441a      	add	r2, r3
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc36:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3a:	2b0f      	cmp	r3, #15
 800cc3c:	d909      	bls.n	800cc52 <UART_SetConfig+0xa8e>
 800cc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc44:	d205      	bcs.n	800cc52 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc48:	b29a      	uxth	r2, r3
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	60da      	str	r2, [r3, #12]
 800cc50:	e002      	b.n	800cc58 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cc52:	2301      	movs	r3, #1
 800cc54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	2201      	movs	r2, #1
 800cc64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	2200      	movs	r2, #0
 800cc72:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800cc74:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3748      	adds	r7, #72	; 0x48
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc82:	bf00      	nop
 800cc84:	58024400 	.word	0x58024400
 800cc88:	03d09000 	.word	0x03d09000
 800cc8c:	003d0900 	.word	0x003d0900
 800cc90:	0800e5f8 	.word	0x0800e5f8

0800cc94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b083      	sub	sp, #12
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cca0:	f003 0301 	and.w	r3, r3, #1
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d00a      	beq.n	800ccbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	430a      	orrs	r2, r1
 800ccbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccc2:	f003 0302 	and.w	r3, r3, #2
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d00a      	beq.n	800cce0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	430a      	orrs	r2, r1
 800ccde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cce4:	f003 0304 	and.w	r3, r3, #4
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d00a      	beq.n	800cd02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	430a      	orrs	r2, r1
 800cd00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd06:	f003 0308 	and.w	r3, r3, #8
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d00a      	beq.n	800cd24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	430a      	orrs	r2, r1
 800cd22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd28:	f003 0310 	and.w	r3, r3, #16
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d00a      	beq.n	800cd46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	689b      	ldr	r3, [r3, #8]
 800cd36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	430a      	orrs	r2, r1
 800cd44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd4a:	f003 0320 	and.w	r3, r3, #32
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d00a      	beq.n	800cd68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	689b      	ldr	r3, [r3, #8]
 800cd58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	430a      	orrs	r2, r1
 800cd66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d01a      	beq.n	800cdaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	430a      	orrs	r2, r1
 800cd88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd92:	d10a      	bne.n	800cdaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	685b      	ldr	r3, [r3, #4]
 800cd9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	430a      	orrs	r2, r1
 800cda8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d00a      	beq.n	800cdcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	430a      	orrs	r2, r1
 800cdca:	605a      	str	r2, [r3, #4]
  }
}
 800cdcc:	bf00      	nop
 800cdce:	370c      	adds	r7, #12
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr

0800cdd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b098      	sub	sp, #96	; 0x60
 800cddc:	af02      	add	r7, sp, #8
 800cdde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2200      	movs	r2, #0
 800cde4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cde8:	f7f6 ffd0 	bl	8003d8c <HAL_GetTick>
 800cdec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f003 0308 	and.w	r3, r3, #8
 800cdf8:	2b08      	cmp	r3, #8
 800cdfa:	d12f      	bne.n	800ce5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ce00:	9300      	str	r3, [sp, #0]
 800ce02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce04:	2200      	movs	r2, #0
 800ce06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 f88e 	bl	800cf2c <UART_WaitOnFlagUntilTimeout>
 800ce10:	4603      	mov	r3, r0
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d022      	beq.n	800ce5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1e:	e853 3f00 	ldrex	r3, [r3]
 800ce22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ce24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce2a:	653b      	str	r3, [r7, #80]	; 0x50
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	461a      	mov	r2, r3
 800ce32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce34:	647b      	str	r3, [r7, #68]	; 0x44
 800ce36:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce3c:	e841 2300 	strex	r3, r2, [r1]
 800ce40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d1e6      	bne.n	800ce16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2220      	movs	r2, #32
 800ce4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2200      	movs	r2, #0
 800ce54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce58:	2303      	movs	r3, #3
 800ce5a:	e063      	b.n	800cf24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f003 0304 	and.w	r3, r3, #4
 800ce66:	2b04      	cmp	r3, #4
 800ce68:	d149      	bne.n	800cefe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ce6e:	9300      	str	r3, [sp, #0]
 800ce70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce72:	2200      	movs	r2, #0
 800ce74:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f000 f857 	bl	800cf2c <UART_WaitOnFlagUntilTimeout>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d03c      	beq.n	800cefe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8c:	e853 3f00 	ldrex	r3, [r3]
 800ce90:	623b      	str	r3, [r7, #32]
   return(result);
 800ce92:	6a3b      	ldr	r3, [r7, #32]
 800ce94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ce98:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	461a      	mov	r2, r3
 800cea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cea2:	633b      	str	r3, [r7, #48]	; 0x30
 800cea4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cea6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ceaa:	e841 2300 	strex	r3, r2, [r1]
 800ceae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ceb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d1e6      	bne.n	800ce84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	3308      	adds	r3, #8
 800cebc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	e853 3f00 	ldrex	r3, [r3]
 800cec4:	60fb      	str	r3, [r7, #12]
   return(result);
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	f023 0301 	bic.w	r3, r3, #1
 800cecc:	64bb      	str	r3, [r7, #72]	; 0x48
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	3308      	adds	r3, #8
 800ced4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ced6:	61fa      	str	r2, [r7, #28]
 800ced8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceda:	69b9      	ldr	r1, [r7, #24]
 800cedc:	69fa      	ldr	r2, [r7, #28]
 800cede:	e841 2300 	strex	r3, r2, [r1]
 800cee2:	617b      	str	r3, [r7, #20]
   return(result);
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d1e5      	bne.n	800ceb6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2220      	movs	r2, #32
 800ceee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2200      	movs	r2, #0
 800cef6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cefa:	2303      	movs	r3, #3
 800cefc:	e012      	b.n	800cf24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2220      	movs	r2, #32
 800cf02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2220      	movs	r2, #32
 800cf0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2200      	movs	r2, #0
 800cf12:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2200      	movs	r2, #0
 800cf18:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cf22:	2300      	movs	r3, #0
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3758      	adds	r7, #88	; 0x58
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	603b      	str	r3, [r7, #0]
 800cf38:	4613      	mov	r3, r2
 800cf3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf3c:	e049      	b.n	800cfd2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf3e:	69bb      	ldr	r3, [r7, #24]
 800cf40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf44:	d045      	beq.n	800cfd2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf46:	f7f6 ff21 	bl	8003d8c <HAL_GetTick>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	1ad3      	subs	r3, r2, r3
 800cf50:	69ba      	ldr	r2, [r7, #24]
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d302      	bcc.n	800cf5c <UART_WaitOnFlagUntilTimeout+0x30>
 800cf56:	69bb      	ldr	r3, [r7, #24]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d101      	bne.n	800cf60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cf5c:	2303      	movs	r3, #3
 800cf5e:	e048      	b.n	800cff2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f003 0304 	and.w	r3, r3, #4
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d031      	beq.n	800cfd2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	69db      	ldr	r3, [r3, #28]
 800cf74:	f003 0308 	and.w	r3, r3, #8
 800cf78:	2b08      	cmp	r3, #8
 800cf7a:	d110      	bne.n	800cf9e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	2208      	movs	r2, #8
 800cf82:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800cf84:	68f8      	ldr	r0, [r7, #12]
 800cf86:	f000 f839 	bl	800cffc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2208      	movs	r2, #8
 800cf8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2200      	movs	r2, #0
 800cf96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	e029      	b.n	800cff2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	69db      	ldr	r3, [r3, #28]
 800cfa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cfa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cfac:	d111      	bne.n	800cfd2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cfb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f000 f81f 	bl	800cffc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2220      	movs	r2, #32
 800cfc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800cfce:	2303      	movs	r3, #3
 800cfd0:	e00f      	b.n	800cff2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	69da      	ldr	r2, [r3, #28]
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	4013      	ands	r3, r2
 800cfdc:	68ba      	ldr	r2, [r7, #8]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	bf0c      	ite	eq
 800cfe2:	2301      	moveq	r3, #1
 800cfe4:	2300      	movne	r3, #0
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	461a      	mov	r2, r3
 800cfea:	79fb      	ldrb	r3, [r7, #7]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d0a6      	beq.n	800cf3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cff0:	2300      	movs	r3, #0
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3710      	adds	r7, #16
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
	...

0800cffc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b095      	sub	sp, #84	; 0x54
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d00c:	e853 3f00 	ldrex	r3, [r3]
 800d010:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d014:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d018:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	461a      	mov	r2, r3
 800d020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d022:	643b      	str	r3, [r7, #64]	; 0x40
 800d024:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d026:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d028:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d02a:	e841 2300 	strex	r3, r2, [r1]
 800d02e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d032:	2b00      	cmp	r3, #0
 800d034:	d1e6      	bne.n	800d004 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	3308      	adds	r3, #8
 800d03c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d03e:	6a3b      	ldr	r3, [r7, #32]
 800d040:	e853 3f00 	ldrex	r3, [r3]
 800d044:	61fb      	str	r3, [r7, #28]
   return(result);
 800d046:	69fa      	ldr	r2, [r7, #28]
 800d048:	4b1e      	ldr	r3, [pc, #120]	; (800d0c4 <UART_EndRxTransfer+0xc8>)
 800d04a:	4013      	ands	r3, r2
 800d04c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	3308      	adds	r3, #8
 800d054:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d056:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d058:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d05a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d05c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d05e:	e841 2300 	strex	r3, r2, [r1]
 800d062:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d066:	2b00      	cmp	r3, #0
 800d068:	d1e5      	bne.n	800d036 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d118      	bne.n	800d0a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	e853 3f00 	ldrex	r3, [r3]
 800d07e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	f023 0310 	bic.w	r3, r3, #16
 800d086:	647b      	str	r3, [r7, #68]	; 0x44
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	461a      	mov	r2, r3
 800d08e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d090:	61bb      	str	r3, [r7, #24]
 800d092:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d094:	6979      	ldr	r1, [r7, #20]
 800d096:	69ba      	ldr	r2, [r7, #24]
 800d098:	e841 2300 	strex	r3, r2, [r1]
 800d09c:	613b      	str	r3, [r7, #16]
   return(result);
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d1e6      	bne.n	800d072 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2220      	movs	r2, #32
 800d0a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d0b8:	bf00      	nop
 800d0ba:	3754      	adds	r7, #84	; 0x54
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr
 800d0c4:	effffffe 	.word	0xeffffffe

0800d0c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b085      	sub	sp, #20
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d0d6:	2b01      	cmp	r3, #1
 800d0d8:	d101      	bne.n	800d0de <HAL_UARTEx_DisableFifoMode+0x16>
 800d0da:	2302      	movs	r3, #2
 800d0dc:	e027      	b.n	800d12e <HAL_UARTEx_DisableFifoMode+0x66>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2224      	movs	r2, #36	; 0x24
 800d0ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	681a      	ldr	r2, [r3, #0]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f022 0201 	bic.w	r2, r2, #1
 800d104:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d10c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2200      	movs	r2, #0
 800d112:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	68fa      	ldr	r2, [r7, #12]
 800d11a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2220      	movs	r2, #32
 800d120:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2200      	movs	r2, #0
 800d128:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d12c:	2300      	movs	r3, #0
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3714      	adds	r7, #20
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr

0800d13a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d13a:	b580      	push	{r7, lr}
 800d13c:	b084      	sub	sp, #16
 800d13e:	af00      	add	r7, sp, #0
 800d140:	6078      	str	r0, [r7, #4]
 800d142:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d14a:	2b01      	cmp	r3, #1
 800d14c:	d101      	bne.n	800d152 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d14e:	2302      	movs	r3, #2
 800d150:	e02d      	b.n	800d1ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2201      	movs	r2, #1
 800d156:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2224      	movs	r2, #36	; 0x24
 800d15e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	681a      	ldr	r2, [r3, #0]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f022 0201 	bic.w	r2, r2, #1
 800d178:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	683a      	ldr	r2, [r7, #0]
 800d18a:	430a      	orrs	r2, r1
 800d18c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f000 f850 	bl	800d234 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	68fa      	ldr	r2, [r7, #12]
 800d19a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2220      	movs	r2, #32
 800d1a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d1ac:	2300      	movs	r3, #0
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3710      	adds	r7, #16
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}

0800d1b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d1b6:	b580      	push	{r7, lr}
 800d1b8:	b084      	sub	sp, #16
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
 800d1be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d1c6:	2b01      	cmp	r3, #1
 800d1c8:	d101      	bne.n	800d1ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d1ca:	2302      	movs	r3, #2
 800d1cc:	e02d      	b.n	800d22a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2224      	movs	r2, #36	; 0x24
 800d1da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	681a      	ldr	r2, [r3, #0]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f022 0201 	bic.w	r2, r2, #1
 800d1f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	683a      	ldr	r2, [r7, #0]
 800d206:	430a      	orrs	r2, r1
 800d208:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 f812 	bl	800d234 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	68fa      	ldr	r2, [r7, #12]
 800d216:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2220      	movs	r2, #32
 800d21c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2200      	movs	r2, #0
 800d224:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d228:	2300      	movs	r3, #0
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
	...

0800d234 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d234:	b480      	push	{r7}
 800d236:	b085      	sub	sp, #20
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d240:	2b00      	cmp	r3, #0
 800d242:	d108      	bne.n	800d256 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2201      	movs	r2, #1
 800d248:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2201      	movs	r2, #1
 800d250:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d254:	e031      	b.n	800d2ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d256:	2310      	movs	r3, #16
 800d258:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d25a:	2310      	movs	r3, #16
 800d25c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	689b      	ldr	r3, [r3, #8]
 800d264:	0e5b      	lsrs	r3, r3, #25
 800d266:	b2db      	uxtb	r3, r3
 800d268:	f003 0307 	and.w	r3, r3, #7
 800d26c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	689b      	ldr	r3, [r3, #8]
 800d274:	0f5b      	lsrs	r3, r3, #29
 800d276:	b2db      	uxtb	r3, r3
 800d278:	f003 0307 	and.w	r3, r3, #7
 800d27c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d27e:	7bbb      	ldrb	r3, [r7, #14]
 800d280:	7b3a      	ldrb	r2, [r7, #12]
 800d282:	4911      	ldr	r1, [pc, #68]	; (800d2c8 <UARTEx_SetNbDataToProcess+0x94>)
 800d284:	5c8a      	ldrb	r2, [r1, r2]
 800d286:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d28a:	7b3a      	ldrb	r2, [r7, #12]
 800d28c:	490f      	ldr	r1, [pc, #60]	; (800d2cc <UARTEx_SetNbDataToProcess+0x98>)
 800d28e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d290:	fb93 f3f2 	sdiv	r3, r3, r2
 800d294:	b29a      	uxth	r2, r3
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d29c:	7bfb      	ldrb	r3, [r7, #15]
 800d29e:	7b7a      	ldrb	r2, [r7, #13]
 800d2a0:	4909      	ldr	r1, [pc, #36]	; (800d2c8 <UARTEx_SetNbDataToProcess+0x94>)
 800d2a2:	5c8a      	ldrb	r2, [r1, r2]
 800d2a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d2a8:	7b7a      	ldrb	r2, [r7, #13]
 800d2aa:	4908      	ldr	r1, [pc, #32]	; (800d2cc <UARTEx_SetNbDataToProcess+0x98>)
 800d2ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d2ae:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2b2:	b29a      	uxth	r2, r3
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d2ba:	bf00      	nop
 800d2bc:	3714      	adds	r7, #20
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c4:	4770      	bx	lr
 800d2c6:	bf00      	nop
 800d2c8:	0800e610 	.word	0x0800e610
 800d2cc:	0800e618 	.word	0x0800e618

0800d2d0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d121      	bne.n	800d326 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681a      	ldr	r2, [r3, #0]
 800d2e6:	4b27      	ldr	r3, [pc, #156]	; (800d384 <FMC_SDRAM_Init+0xb4>)
 800d2e8:	4013      	ands	r3, r2
 800d2ea:	683a      	ldr	r2, [r7, #0]
 800d2ec:	6851      	ldr	r1, [r2, #4]
 800d2ee:	683a      	ldr	r2, [r7, #0]
 800d2f0:	6892      	ldr	r2, [r2, #8]
 800d2f2:	4311      	orrs	r1, r2
 800d2f4:	683a      	ldr	r2, [r7, #0]
 800d2f6:	68d2      	ldr	r2, [r2, #12]
 800d2f8:	4311      	orrs	r1, r2
 800d2fa:	683a      	ldr	r2, [r7, #0]
 800d2fc:	6912      	ldr	r2, [r2, #16]
 800d2fe:	4311      	orrs	r1, r2
 800d300:	683a      	ldr	r2, [r7, #0]
 800d302:	6952      	ldr	r2, [r2, #20]
 800d304:	4311      	orrs	r1, r2
 800d306:	683a      	ldr	r2, [r7, #0]
 800d308:	6992      	ldr	r2, [r2, #24]
 800d30a:	4311      	orrs	r1, r2
 800d30c:	683a      	ldr	r2, [r7, #0]
 800d30e:	69d2      	ldr	r2, [r2, #28]
 800d310:	4311      	orrs	r1, r2
 800d312:	683a      	ldr	r2, [r7, #0]
 800d314:	6a12      	ldr	r2, [r2, #32]
 800d316:	4311      	orrs	r1, r2
 800d318:	683a      	ldr	r2, [r7, #0]
 800d31a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d31c:	430a      	orrs	r2, r1
 800d31e:	431a      	orrs	r2, r3
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	601a      	str	r2, [r3, #0]
 800d324:	e026      	b.n	800d374 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	69d9      	ldr	r1, [r3, #28]
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	6a1b      	ldr	r3, [r3, #32]
 800d336:	4319      	orrs	r1, r3
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d33c:	430b      	orrs	r3, r1
 800d33e:	431a      	orrs	r2, r3
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	685a      	ldr	r2, [r3, #4]
 800d348:	4b0e      	ldr	r3, [pc, #56]	; (800d384 <FMC_SDRAM_Init+0xb4>)
 800d34a:	4013      	ands	r3, r2
 800d34c:	683a      	ldr	r2, [r7, #0]
 800d34e:	6851      	ldr	r1, [r2, #4]
 800d350:	683a      	ldr	r2, [r7, #0]
 800d352:	6892      	ldr	r2, [r2, #8]
 800d354:	4311      	orrs	r1, r2
 800d356:	683a      	ldr	r2, [r7, #0]
 800d358:	68d2      	ldr	r2, [r2, #12]
 800d35a:	4311      	orrs	r1, r2
 800d35c:	683a      	ldr	r2, [r7, #0]
 800d35e:	6912      	ldr	r2, [r2, #16]
 800d360:	4311      	orrs	r1, r2
 800d362:	683a      	ldr	r2, [r7, #0]
 800d364:	6952      	ldr	r2, [r2, #20]
 800d366:	4311      	orrs	r1, r2
 800d368:	683a      	ldr	r2, [r7, #0]
 800d36a:	6992      	ldr	r2, [r2, #24]
 800d36c:	430a      	orrs	r2, r1
 800d36e:	431a      	orrs	r2, r3
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800d374:	2300      	movs	r3, #0
}
 800d376:	4618      	mov	r0, r3
 800d378:	370c      	adds	r7, #12
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr
 800d382:	bf00      	nop
 800d384:	ffff8000 	.word	0xffff8000

0800d388 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d388:	b480      	push	{r7}
 800d38a:	b085      	sub	sp, #20
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	60f8      	str	r0, [r7, #12]
 800d390:	60b9      	str	r1, [r7, #8]
 800d392:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d128      	bne.n	800d3ec <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	689b      	ldr	r3, [r3, #8]
 800d39e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	1e59      	subs	r1, r3, #1
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	3b01      	subs	r3, #1
 800d3ae:	011b      	lsls	r3, r3, #4
 800d3b0:	4319      	orrs	r1, r3
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	689b      	ldr	r3, [r3, #8]
 800d3b6:	3b01      	subs	r3, #1
 800d3b8:	021b      	lsls	r3, r3, #8
 800d3ba:	4319      	orrs	r1, r3
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	68db      	ldr	r3, [r3, #12]
 800d3c0:	3b01      	subs	r3, #1
 800d3c2:	031b      	lsls	r3, r3, #12
 800d3c4:	4319      	orrs	r1, r3
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	691b      	ldr	r3, [r3, #16]
 800d3ca:	3b01      	subs	r3, #1
 800d3cc:	041b      	lsls	r3, r3, #16
 800d3ce:	4319      	orrs	r1, r3
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	695b      	ldr	r3, [r3, #20]
 800d3d4:	3b01      	subs	r3, #1
 800d3d6:	051b      	lsls	r3, r3, #20
 800d3d8:	4319      	orrs	r1, r3
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	699b      	ldr	r3, [r3, #24]
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	061b      	lsls	r3, r3, #24
 800d3e2:	430b      	orrs	r3, r1
 800d3e4:	431a      	orrs	r2, r3
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	609a      	str	r2, [r3, #8]
 800d3ea:	e02d      	b.n	800d448 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	689a      	ldr	r2, [r3, #8]
 800d3f0:	4b19      	ldr	r3, [pc, #100]	; (800d458 <FMC_SDRAM_Timing_Init+0xd0>)
 800d3f2:	4013      	ands	r3, r2
 800d3f4:	68ba      	ldr	r2, [r7, #8]
 800d3f6:	68d2      	ldr	r2, [r2, #12]
 800d3f8:	3a01      	subs	r2, #1
 800d3fa:	0311      	lsls	r1, r2, #12
 800d3fc:	68ba      	ldr	r2, [r7, #8]
 800d3fe:	6952      	ldr	r2, [r2, #20]
 800d400:	3a01      	subs	r2, #1
 800d402:	0512      	lsls	r2, r2, #20
 800d404:	430a      	orrs	r2, r1
 800d406:	431a      	orrs	r2, r3
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	68db      	ldr	r3, [r3, #12]
 800d410:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	1e59      	subs	r1, r3, #1
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	3b01      	subs	r3, #1
 800d420:	011b      	lsls	r3, r3, #4
 800d422:	4319      	orrs	r1, r3
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	689b      	ldr	r3, [r3, #8]
 800d428:	3b01      	subs	r3, #1
 800d42a:	021b      	lsls	r3, r3, #8
 800d42c:	4319      	orrs	r1, r3
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	691b      	ldr	r3, [r3, #16]
 800d432:	3b01      	subs	r3, #1
 800d434:	041b      	lsls	r3, r3, #16
 800d436:	4319      	orrs	r1, r3
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	699b      	ldr	r3, [r3, #24]
 800d43c:	3b01      	subs	r3, #1
 800d43e:	061b      	lsls	r3, r3, #24
 800d440:	430b      	orrs	r3, r1
 800d442:	431a      	orrs	r2, r3
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800d448:	2300      	movs	r3, #0
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3714      	adds	r7, #20
 800d44e:	46bd      	mov	sp, r7
 800d450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d454:	4770      	bx	lr
 800d456:	bf00      	nop
 800d458:	ff0f0fff 	.word	0xff0f0fff

0800d45c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d45c:	b084      	sub	sp, #16
 800d45e:	b580      	push	{r7, lr}
 800d460:	b084      	sub	sp, #16
 800d462:	af00      	add	r7, sp, #0
 800d464:	6078      	str	r0, [r7, #4]
 800d466:	f107 001c 	add.w	r0, r7, #28
 800d46a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d470:	2b01      	cmp	r3, #1
 800d472:	d120      	bne.n	800d4b6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d478:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	68da      	ldr	r2, [r3, #12]
 800d484:	4b2a      	ldr	r3, [pc, #168]	; (800d530 <USB_CoreInit+0xd4>)
 800d486:	4013      	ands	r3, r2
 800d488:	687a      	ldr	r2, [r7, #4]
 800d48a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	68db      	ldr	r3, [r3, #12]
 800d490:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	d105      	bne.n	800d4aa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	68db      	ldr	r3, [r3, #12]
 800d4a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f000 faac 	bl	800da08 <USB_CoreReset>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	73fb      	strb	r3, [r7, #15]
 800d4b4:	e01a      	b.n	800d4ec <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	68db      	ldr	r3, [r3, #12]
 800d4ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f000 faa0 	bl	800da08 <USB_CoreReset>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d4cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d106      	bne.n	800d4e0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	639a      	str	r2, [r3, #56]	; 0x38
 800d4de:	e005      	b.n	800d4ec <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ee:	2b01      	cmp	r3, #1
 800d4f0:	d116      	bne.n	800d520 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4f6:	b29a      	uxth	r2, r3
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d500:	4b0c      	ldr	r3, [pc, #48]	; (800d534 <USB_CoreInit+0xd8>)
 800d502:	4313      	orrs	r3, r2
 800d504:	687a      	ldr	r2, [r7, #4]
 800d506:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	689b      	ldr	r3, [r3, #8]
 800d50c:	f043 0206 	orr.w	r2, r3, #6
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	689b      	ldr	r3, [r3, #8]
 800d518:	f043 0220 	orr.w	r2, r3, #32
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d520:	7bfb      	ldrb	r3, [r7, #15]
}
 800d522:	4618      	mov	r0, r3
 800d524:	3710      	adds	r7, #16
 800d526:	46bd      	mov	sp, r7
 800d528:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d52c:	b004      	add	sp, #16
 800d52e:	4770      	bx	lr
 800d530:	ffbdffbf 	.word	0xffbdffbf
 800d534:	03ee0000 	.word	0x03ee0000

0800d538 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d538:	b480      	push	{r7}
 800d53a:	b083      	sub	sp, #12
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	689b      	ldr	r3, [r3, #8]
 800d544:	f023 0201 	bic.w	r2, r3, #1
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d54c:	2300      	movs	r3, #0
}
 800d54e:	4618      	mov	r0, r3
 800d550:	370c      	adds	r7, #12
 800d552:	46bd      	mov	sp, r7
 800d554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d558:	4770      	bx	lr

0800d55a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d55a:	b580      	push	{r7, lr}
 800d55c:	b084      	sub	sp, #16
 800d55e:	af00      	add	r7, sp, #0
 800d560:	6078      	str	r0, [r7, #4]
 800d562:	460b      	mov	r3, r1
 800d564:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d566:	2300      	movs	r3, #0
 800d568:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	68db      	ldr	r3, [r3, #12]
 800d56e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d576:	78fb      	ldrb	r3, [r7, #3]
 800d578:	2b01      	cmp	r3, #1
 800d57a:	d115      	bne.n	800d5a8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d588:	2001      	movs	r0, #1
 800d58a:	f7f6 fc0b 	bl	8003da4 <HAL_Delay>
      ms++;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	3301      	adds	r3, #1
 800d592:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f000 fa29 	bl	800d9ec <USB_GetMode>
 800d59a:	4603      	mov	r3, r0
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d01e      	beq.n	800d5de <USB_SetCurrentMode+0x84>
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	2b31      	cmp	r3, #49	; 0x31
 800d5a4:	d9f0      	bls.n	800d588 <USB_SetCurrentMode+0x2e>
 800d5a6:	e01a      	b.n	800d5de <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d5a8:	78fb      	ldrb	r3, [r7, #3]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d115      	bne.n	800d5da <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	68db      	ldr	r3, [r3, #12]
 800d5b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d5ba:	2001      	movs	r0, #1
 800d5bc:	f7f6 fbf2 	bl	8003da4 <HAL_Delay>
      ms++;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 fa10 	bl	800d9ec <USB_GetMode>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d005      	beq.n	800d5de <USB_SetCurrentMode+0x84>
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2b31      	cmp	r3, #49	; 0x31
 800d5d6:	d9f0      	bls.n	800d5ba <USB_SetCurrentMode+0x60>
 800d5d8:	e001      	b.n	800d5de <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d5da:	2301      	movs	r3, #1
 800d5dc:	e005      	b.n	800d5ea <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2b32      	cmp	r3, #50	; 0x32
 800d5e2:	d101      	bne.n	800d5e8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	e000      	b.n	800d5ea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d5e8:	2300      	movs	r3, #0
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3710      	adds	r7, #16
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}
	...

0800d5f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d5f4:	b084      	sub	sp, #16
 800d5f6:	b580      	push	{r7, lr}
 800d5f8:	b086      	sub	sp, #24
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	6078      	str	r0, [r7, #4]
 800d5fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d606:	2300      	movs	r3, #0
 800d608:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d60e:	2300      	movs	r3, #0
 800d610:	613b      	str	r3, [r7, #16]
 800d612:	e009      	b.n	800d628 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	3340      	adds	r3, #64	; 0x40
 800d61a:	009b      	lsls	r3, r3, #2
 800d61c:	4413      	add	r3, r2
 800d61e:	2200      	movs	r2, #0
 800d620:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	3301      	adds	r3, #1
 800d626:	613b      	str	r3, [r7, #16]
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	2b0e      	cmp	r3, #14
 800d62c:	d9f2      	bls.n	800d614 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d62e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d630:	2b00      	cmp	r3, #0
 800d632:	d11c      	bne.n	800d66e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	68fa      	ldr	r2, [r7, #12]
 800d63e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d642:	f043 0302 	orr.w	r3, r3, #2
 800d646:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d64c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	601a      	str	r2, [r3, #0]
 800d66c:	e005      	b.n	800d67a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d672:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d680:	461a      	mov	r2, r3
 800d682:	2300      	movs	r3, #0
 800d684:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d68c:	4619      	mov	r1, r3
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d694:	461a      	mov	r2, r3
 800d696:	680b      	ldr	r3, [r1, #0]
 800d698:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d69c:	2b01      	cmp	r3, #1
 800d69e:	d10c      	bne.n	800d6ba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d104      	bne.n	800d6b0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f000 f965 	bl	800d978 <USB_SetDevSpeed>
 800d6ae:	e008      	b.n	800d6c2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d6b0:	2101      	movs	r1, #1
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 f960 	bl	800d978 <USB_SetDevSpeed>
 800d6b8:	e003      	b.n	800d6c2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d6ba:	2103      	movs	r1, #3
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 f95b 	bl	800d978 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d6c2:	2110      	movs	r1, #16
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 f8f3 	bl	800d8b0 <USB_FlushTxFifo>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d001      	beq.n	800d6d4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f000 f91f 	bl	800d918 <USB_FlushRxFifo>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d001      	beq.n	800d6e4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d702:	461a      	mov	r2, r3
 800d704:	2300      	movs	r3, #0
 800d706:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d708:	2300      	movs	r3, #0
 800d70a:	613b      	str	r3, [r7, #16]
 800d70c:	e043      	b.n	800d796 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	015a      	lsls	r2, r3, #5
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	4413      	add	r3, r2
 800d716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d720:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d724:	d118      	bne.n	800d758 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d10a      	bne.n	800d742 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	015a      	lsls	r2, r3, #5
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	4413      	add	r3, r2
 800d734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d738:	461a      	mov	r2, r3
 800d73a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d73e:	6013      	str	r3, [r2, #0]
 800d740:	e013      	b.n	800d76a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	015a      	lsls	r2, r3, #5
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	4413      	add	r3, r2
 800d74a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d74e:	461a      	mov	r2, r3
 800d750:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d754:	6013      	str	r3, [r2, #0]
 800d756:	e008      	b.n	800d76a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	015a      	lsls	r2, r3, #5
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	4413      	add	r3, r2
 800d760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d764:	461a      	mov	r2, r3
 800d766:	2300      	movs	r3, #0
 800d768:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	015a      	lsls	r2, r3, #5
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	4413      	add	r3, r2
 800d772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d776:	461a      	mov	r2, r3
 800d778:	2300      	movs	r3, #0
 800d77a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	015a      	lsls	r2, r3, #5
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	4413      	add	r3, r2
 800d784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d788:	461a      	mov	r2, r3
 800d78a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d78e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	3301      	adds	r3, #1
 800d794:	613b      	str	r3, [r7, #16]
 800d796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d798:	693a      	ldr	r2, [r7, #16]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d3b7      	bcc.n	800d70e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d79e:	2300      	movs	r3, #0
 800d7a0:	613b      	str	r3, [r7, #16]
 800d7a2:	e043      	b.n	800d82c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	015a      	lsls	r2, r3, #5
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d7b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d7ba:	d118      	bne.n	800d7ee <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10a      	bne.n	800d7d8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	015a      	lsls	r2, r3, #5
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d7d4:	6013      	str	r3, [r2, #0]
 800d7d6:	e013      	b.n	800d800 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	015a      	lsls	r2, r3, #5
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	4413      	add	r3, r2
 800d7e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7e4:	461a      	mov	r2, r3
 800d7e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d7ea:	6013      	str	r3, [r2, #0]
 800d7ec:	e008      	b.n	800d800 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	015a      	lsls	r2, r3, #5
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	4413      	add	r3, r2
 800d7f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	015a      	lsls	r2, r3, #5
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	4413      	add	r3, r2
 800d808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d80c:	461a      	mov	r2, r3
 800d80e:	2300      	movs	r3, #0
 800d810:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	015a      	lsls	r2, r3, #5
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	4413      	add	r3, r2
 800d81a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d81e:	461a      	mov	r2, r3
 800d820:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d824:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	3301      	adds	r3, #1
 800d82a:	613b      	str	r3, [r7, #16]
 800d82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82e:	693a      	ldr	r2, [r7, #16]
 800d830:	429a      	cmp	r2, r3
 800d832:	d3b7      	bcc.n	800d7a4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d83a:	691b      	ldr	r3, [r3, #16]
 800d83c:	68fa      	ldr	r2, [r7, #12]
 800d83e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d842:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d846:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2200      	movs	r2, #0
 800d84c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d854:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d105      	bne.n	800d868 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	699b      	ldr	r3, [r3, #24]
 800d860:	f043 0210 	orr.w	r2, r3, #16
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	699a      	ldr	r2, [r3, #24]
 800d86c:	4b0e      	ldr	r3, [pc, #56]	; (800d8a8 <USB_DevInit+0x2b4>)
 800d86e:	4313      	orrs	r3, r2
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d876:	2b00      	cmp	r3, #0
 800d878:	d005      	beq.n	800d886 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	699b      	ldr	r3, [r3, #24]
 800d87e:	f043 0208 	orr.w	r2, r3, #8
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d105      	bne.n	800d898 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	699a      	ldr	r2, [r3, #24]
 800d890:	4b06      	ldr	r3, [pc, #24]	; (800d8ac <USB_DevInit+0x2b8>)
 800d892:	4313      	orrs	r3, r2
 800d894:	687a      	ldr	r2, [r7, #4]
 800d896:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d898:	7dfb      	ldrb	r3, [r7, #23]
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3718      	adds	r7, #24
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d8a4:	b004      	add	sp, #16
 800d8a6:	4770      	bx	lr
 800d8a8:	803c3800 	.word	0x803c3800
 800d8ac:	40000004 	.word	0x40000004

0800d8b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b085      	sub	sp, #20
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	4a13      	ldr	r2, [pc, #76]	; (800d914 <USB_FlushTxFifo+0x64>)
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d901      	bls.n	800d8d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d8cc:	2303      	movs	r3, #3
 800d8ce:	e01b      	b.n	800d908 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	691b      	ldr	r3, [r3, #16]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	daf2      	bge.n	800d8be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	019b      	lsls	r3, r3, #6
 800d8e0:	f043 0220 	orr.w	r2, r3, #32
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	3301      	adds	r3, #1
 800d8ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	4a08      	ldr	r2, [pc, #32]	; (800d914 <USB_FlushTxFifo+0x64>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d901      	bls.n	800d8fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d8f6:	2303      	movs	r3, #3
 800d8f8:	e006      	b.n	800d908 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	691b      	ldr	r3, [r3, #16]
 800d8fe:	f003 0320 	and.w	r3, r3, #32
 800d902:	2b20      	cmp	r3, #32
 800d904:	d0f0      	beq.n	800d8e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d906:	2300      	movs	r3, #0
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3714      	adds	r7, #20
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr
 800d914:	00030d40 	.word	0x00030d40

0800d918 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d918:	b480      	push	{r7}
 800d91a:	b085      	sub	sp, #20
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d920:	2300      	movs	r3, #0
 800d922:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	3301      	adds	r3, #1
 800d928:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	4a11      	ldr	r2, [pc, #68]	; (800d974 <USB_FlushRxFifo+0x5c>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d901      	bls.n	800d936 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d932:	2303      	movs	r3, #3
 800d934:	e018      	b.n	800d968 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	691b      	ldr	r3, [r3, #16]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	daf2      	bge.n	800d924 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d93e:	2300      	movs	r3, #0
 800d940:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2210      	movs	r2, #16
 800d946:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	3301      	adds	r3, #1
 800d94c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	4a08      	ldr	r2, [pc, #32]	; (800d974 <USB_FlushRxFifo+0x5c>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d901      	bls.n	800d95a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d956:	2303      	movs	r3, #3
 800d958:	e006      	b.n	800d968 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	691b      	ldr	r3, [r3, #16]
 800d95e:	f003 0310 	and.w	r3, r3, #16
 800d962:	2b10      	cmp	r3, #16
 800d964:	d0f0      	beq.n	800d948 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d966:	2300      	movs	r3, #0
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3714      	adds	r7, #20
 800d96c:	46bd      	mov	sp, r7
 800d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d972:	4770      	bx	lr
 800d974:	00030d40 	.word	0x00030d40

0800d978 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d978:	b480      	push	{r7}
 800d97a:	b085      	sub	sp, #20
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
 800d980:	460b      	mov	r3, r1
 800d982:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d98e:	681a      	ldr	r2, [r3, #0]
 800d990:	78fb      	ldrb	r3, [r7, #3]
 800d992:	68f9      	ldr	r1, [r7, #12]
 800d994:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d998:	4313      	orrs	r3, r2
 800d99a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d99c:	2300      	movs	r3, #0
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3714      	adds	r7, #20
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a8:	4770      	bx	lr

0800d9aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d9aa:	b480      	push	{r7}
 800d9ac:	b085      	sub	sp, #20
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	68fa      	ldr	r2, [r7, #12]
 800d9c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d9c4:	f023 0303 	bic.w	r3, r3, #3
 800d9c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	68fa      	ldr	r2, [r7, #12]
 800d9d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d9d8:	f043 0302 	orr.w	r3, r3, #2
 800d9dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d9de:	2300      	movs	r3, #0
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3714      	adds	r7, #20
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b083      	sub	sp, #12
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	695b      	ldr	r3, [r3, #20]
 800d9f8:	f003 0301 	and.w	r3, r3, #1
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	370c      	adds	r7, #12
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr

0800da08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800da08:	b480      	push	{r7}
 800da0a:	b085      	sub	sp, #20
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800da10:	2300      	movs	r3, #0
 800da12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	3301      	adds	r3, #1
 800da18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	4a13      	ldr	r2, [pc, #76]	; (800da6c <USB_CoreReset+0x64>)
 800da1e:	4293      	cmp	r3, r2
 800da20:	d901      	bls.n	800da26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800da22:	2303      	movs	r3, #3
 800da24:	e01b      	b.n	800da5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	691b      	ldr	r3, [r3, #16]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	daf2      	bge.n	800da14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800da2e:	2300      	movs	r3, #0
 800da30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	691b      	ldr	r3, [r3, #16]
 800da36:	f043 0201 	orr.w	r2, r3, #1
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	3301      	adds	r3, #1
 800da42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	4a09      	ldr	r2, [pc, #36]	; (800da6c <USB_CoreReset+0x64>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d901      	bls.n	800da50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800da4c:	2303      	movs	r3, #3
 800da4e:	e006      	b.n	800da5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	691b      	ldr	r3, [r3, #16]
 800da54:	f003 0301 	and.w	r3, r3, #1
 800da58:	2b01      	cmp	r3, #1
 800da5a:	d0f0      	beq.n	800da3e <USB_CoreReset+0x36>

  return HAL_OK;
 800da5c:	2300      	movs	r3, #0
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3714      	adds	r7, #20
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr
 800da6a:	bf00      	nop
 800da6c:	00030d40 	.word	0x00030d40

0800da70 <sniprintf>:
 800da70:	b40c      	push	{r2, r3}
 800da72:	b530      	push	{r4, r5, lr}
 800da74:	4b17      	ldr	r3, [pc, #92]	; (800dad4 <sniprintf+0x64>)
 800da76:	1e0c      	subs	r4, r1, #0
 800da78:	681d      	ldr	r5, [r3, #0]
 800da7a:	b09d      	sub	sp, #116	; 0x74
 800da7c:	da08      	bge.n	800da90 <sniprintf+0x20>
 800da7e:	238b      	movs	r3, #139	; 0x8b
 800da80:	602b      	str	r3, [r5, #0]
 800da82:	f04f 30ff 	mov.w	r0, #4294967295
 800da86:	b01d      	add	sp, #116	; 0x74
 800da88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da8c:	b002      	add	sp, #8
 800da8e:	4770      	bx	lr
 800da90:	f44f 7302 	mov.w	r3, #520	; 0x208
 800da94:	f8ad 3014 	strh.w	r3, [sp, #20]
 800da98:	bf14      	ite	ne
 800da9a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800da9e:	4623      	moveq	r3, r4
 800daa0:	9304      	str	r3, [sp, #16]
 800daa2:	9307      	str	r3, [sp, #28]
 800daa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800daa8:	9002      	str	r0, [sp, #8]
 800daaa:	9006      	str	r0, [sp, #24]
 800daac:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dab0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dab2:	ab21      	add	r3, sp, #132	; 0x84
 800dab4:	a902      	add	r1, sp, #8
 800dab6:	4628      	mov	r0, r5
 800dab8:	9301      	str	r3, [sp, #4]
 800daba:	f000 f9a1 	bl	800de00 <_svfiprintf_r>
 800dabe:	1c43      	adds	r3, r0, #1
 800dac0:	bfbc      	itt	lt
 800dac2:	238b      	movlt	r3, #139	; 0x8b
 800dac4:	602b      	strlt	r3, [r5, #0]
 800dac6:	2c00      	cmp	r4, #0
 800dac8:	d0dd      	beq.n	800da86 <sniprintf+0x16>
 800daca:	9b02      	ldr	r3, [sp, #8]
 800dacc:	2200      	movs	r2, #0
 800dace:	701a      	strb	r2, [r3, #0]
 800dad0:	e7d9      	b.n	800da86 <sniprintf+0x16>
 800dad2:	bf00      	nop
 800dad4:	2400005c 	.word	0x2400005c

0800dad8 <memset>:
 800dad8:	4402      	add	r2, r0
 800dada:	4603      	mov	r3, r0
 800dadc:	4293      	cmp	r3, r2
 800dade:	d100      	bne.n	800dae2 <memset+0xa>
 800dae0:	4770      	bx	lr
 800dae2:	f803 1b01 	strb.w	r1, [r3], #1
 800dae6:	e7f9      	b.n	800dadc <memset+0x4>

0800dae8 <__errno>:
 800dae8:	4b01      	ldr	r3, [pc, #4]	; (800daf0 <__errno+0x8>)
 800daea:	6818      	ldr	r0, [r3, #0]
 800daec:	4770      	bx	lr
 800daee:	bf00      	nop
 800daf0:	2400005c 	.word	0x2400005c

0800daf4 <__libc_init_array>:
 800daf4:	b570      	push	{r4, r5, r6, lr}
 800daf6:	4d0d      	ldr	r5, [pc, #52]	; (800db2c <__libc_init_array+0x38>)
 800daf8:	4c0d      	ldr	r4, [pc, #52]	; (800db30 <__libc_init_array+0x3c>)
 800dafa:	1b64      	subs	r4, r4, r5
 800dafc:	10a4      	asrs	r4, r4, #2
 800dafe:	2600      	movs	r6, #0
 800db00:	42a6      	cmp	r6, r4
 800db02:	d109      	bne.n	800db18 <__libc_init_array+0x24>
 800db04:	4d0b      	ldr	r5, [pc, #44]	; (800db34 <__libc_init_array+0x40>)
 800db06:	4c0c      	ldr	r4, [pc, #48]	; (800db38 <__libc_init_array+0x44>)
 800db08:	f000 fc6a 	bl	800e3e0 <_init>
 800db0c:	1b64      	subs	r4, r4, r5
 800db0e:	10a4      	asrs	r4, r4, #2
 800db10:	2600      	movs	r6, #0
 800db12:	42a6      	cmp	r6, r4
 800db14:	d105      	bne.n	800db22 <__libc_init_array+0x2e>
 800db16:	bd70      	pop	{r4, r5, r6, pc}
 800db18:	f855 3b04 	ldr.w	r3, [r5], #4
 800db1c:	4798      	blx	r3
 800db1e:	3601      	adds	r6, #1
 800db20:	e7ee      	b.n	800db00 <__libc_init_array+0xc>
 800db22:	f855 3b04 	ldr.w	r3, [r5], #4
 800db26:	4798      	blx	r3
 800db28:	3601      	adds	r6, #1
 800db2a:	e7f2      	b.n	800db12 <__libc_init_array+0x1e>
 800db2c:	0800e65c 	.word	0x0800e65c
 800db30:	0800e65c 	.word	0x0800e65c
 800db34:	0800e65c 	.word	0x0800e65c
 800db38:	0800e660 	.word	0x0800e660

0800db3c <__retarget_lock_acquire_recursive>:
 800db3c:	4770      	bx	lr

0800db3e <__retarget_lock_release_recursive>:
 800db3e:	4770      	bx	lr

0800db40 <memcpy>:
 800db40:	440a      	add	r2, r1
 800db42:	4291      	cmp	r1, r2
 800db44:	f100 33ff 	add.w	r3, r0, #4294967295
 800db48:	d100      	bne.n	800db4c <memcpy+0xc>
 800db4a:	4770      	bx	lr
 800db4c:	b510      	push	{r4, lr}
 800db4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db56:	4291      	cmp	r1, r2
 800db58:	d1f9      	bne.n	800db4e <memcpy+0xe>
 800db5a:	bd10      	pop	{r4, pc}

0800db5c <_free_r>:
 800db5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db5e:	2900      	cmp	r1, #0
 800db60:	d044      	beq.n	800dbec <_free_r+0x90>
 800db62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db66:	9001      	str	r0, [sp, #4]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	f1a1 0404 	sub.w	r4, r1, #4
 800db6e:	bfb8      	it	lt
 800db70:	18e4      	addlt	r4, r4, r3
 800db72:	f000 f8df 	bl	800dd34 <__malloc_lock>
 800db76:	4a1e      	ldr	r2, [pc, #120]	; (800dbf0 <_free_r+0x94>)
 800db78:	9801      	ldr	r0, [sp, #4]
 800db7a:	6813      	ldr	r3, [r2, #0]
 800db7c:	b933      	cbnz	r3, 800db8c <_free_r+0x30>
 800db7e:	6063      	str	r3, [r4, #4]
 800db80:	6014      	str	r4, [r2, #0]
 800db82:	b003      	add	sp, #12
 800db84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db88:	f000 b8da 	b.w	800dd40 <__malloc_unlock>
 800db8c:	42a3      	cmp	r3, r4
 800db8e:	d908      	bls.n	800dba2 <_free_r+0x46>
 800db90:	6825      	ldr	r5, [r4, #0]
 800db92:	1961      	adds	r1, r4, r5
 800db94:	428b      	cmp	r3, r1
 800db96:	bf01      	itttt	eq
 800db98:	6819      	ldreq	r1, [r3, #0]
 800db9a:	685b      	ldreq	r3, [r3, #4]
 800db9c:	1949      	addeq	r1, r1, r5
 800db9e:	6021      	streq	r1, [r4, #0]
 800dba0:	e7ed      	b.n	800db7e <_free_r+0x22>
 800dba2:	461a      	mov	r2, r3
 800dba4:	685b      	ldr	r3, [r3, #4]
 800dba6:	b10b      	cbz	r3, 800dbac <_free_r+0x50>
 800dba8:	42a3      	cmp	r3, r4
 800dbaa:	d9fa      	bls.n	800dba2 <_free_r+0x46>
 800dbac:	6811      	ldr	r1, [r2, #0]
 800dbae:	1855      	adds	r5, r2, r1
 800dbb0:	42a5      	cmp	r5, r4
 800dbb2:	d10b      	bne.n	800dbcc <_free_r+0x70>
 800dbb4:	6824      	ldr	r4, [r4, #0]
 800dbb6:	4421      	add	r1, r4
 800dbb8:	1854      	adds	r4, r2, r1
 800dbba:	42a3      	cmp	r3, r4
 800dbbc:	6011      	str	r1, [r2, #0]
 800dbbe:	d1e0      	bne.n	800db82 <_free_r+0x26>
 800dbc0:	681c      	ldr	r4, [r3, #0]
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	6053      	str	r3, [r2, #4]
 800dbc6:	440c      	add	r4, r1
 800dbc8:	6014      	str	r4, [r2, #0]
 800dbca:	e7da      	b.n	800db82 <_free_r+0x26>
 800dbcc:	d902      	bls.n	800dbd4 <_free_r+0x78>
 800dbce:	230c      	movs	r3, #12
 800dbd0:	6003      	str	r3, [r0, #0]
 800dbd2:	e7d6      	b.n	800db82 <_free_r+0x26>
 800dbd4:	6825      	ldr	r5, [r4, #0]
 800dbd6:	1961      	adds	r1, r4, r5
 800dbd8:	428b      	cmp	r3, r1
 800dbda:	bf04      	itt	eq
 800dbdc:	6819      	ldreq	r1, [r3, #0]
 800dbde:	685b      	ldreq	r3, [r3, #4]
 800dbe0:	6063      	str	r3, [r4, #4]
 800dbe2:	bf04      	itt	eq
 800dbe4:	1949      	addeq	r1, r1, r5
 800dbe6:	6021      	streq	r1, [r4, #0]
 800dbe8:	6054      	str	r4, [r2, #4]
 800dbea:	e7ca      	b.n	800db82 <_free_r+0x26>
 800dbec:	b003      	add	sp, #12
 800dbee:	bd30      	pop	{r4, r5, pc}
 800dbf0:	24001288 	.word	0x24001288

0800dbf4 <sbrk_aligned>:
 800dbf4:	b570      	push	{r4, r5, r6, lr}
 800dbf6:	4e0e      	ldr	r6, [pc, #56]	; (800dc30 <sbrk_aligned+0x3c>)
 800dbf8:	460c      	mov	r4, r1
 800dbfa:	6831      	ldr	r1, [r6, #0]
 800dbfc:	4605      	mov	r5, r0
 800dbfe:	b911      	cbnz	r1, 800dc06 <sbrk_aligned+0x12>
 800dc00:	f000 fba6 	bl	800e350 <_sbrk_r>
 800dc04:	6030      	str	r0, [r6, #0]
 800dc06:	4621      	mov	r1, r4
 800dc08:	4628      	mov	r0, r5
 800dc0a:	f000 fba1 	bl	800e350 <_sbrk_r>
 800dc0e:	1c43      	adds	r3, r0, #1
 800dc10:	d00a      	beq.n	800dc28 <sbrk_aligned+0x34>
 800dc12:	1cc4      	adds	r4, r0, #3
 800dc14:	f024 0403 	bic.w	r4, r4, #3
 800dc18:	42a0      	cmp	r0, r4
 800dc1a:	d007      	beq.n	800dc2c <sbrk_aligned+0x38>
 800dc1c:	1a21      	subs	r1, r4, r0
 800dc1e:	4628      	mov	r0, r5
 800dc20:	f000 fb96 	bl	800e350 <_sbrk_r>
 800dc24:	3001      	adds	r0, #1
 800dc26:	d101      	bne.n	800dc2c <sbrk_aligned+0x38>
 800dc28:	f04f 34ff 	mov.w	r4, #4294967295
 800dc2c:	4620      	mov	r0, r4
 800dc2e:	bd70      	pop	{r4, r5, r6, pc}
 800dc30:	2400128c 	.word	0x2400128c

0800dc34 <_malloc_r>:
 800dc34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc38:	1ccd      	adds	r5, r1, #3
 800dc3a:	f025 0503 	bic.w	r5, r5, #3
 800dc3e:	3508      	adds	r5, #8
 800dc40:	2d0c      	cmp	r5, #12
 800dc42:	bf38      	it	cc
 800dc44:	250c      	movcc	r5, #12
 800dc46:	2d00      	cmp	r5, #0
 800dc48:	4607      	mov	r7, r0
 800dc4a:	db01      	blt.n	800dc50 <_malloc_r+0x1c>
 800dc4c:	42a9      	cmp	r1, r5
 800dc4e:	d905      	bls.n	800dc5c <_malloc_r+0x28>
 800dc50:	230c      	movs	r3, #12
 800dc52:	603b      	str	r3, [r7, #0]
 800dc54:	2600      	movs	r6, #0
 800dc56:	4630      	mov	r0, r6
 800dc58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800dd30 <_malloc_r+0xfc>
 800dc60:	f000 f868 	bl	800dd34 <__malloc_lock>
 800dc64:	f8d8 3000 	ldr.w	r3, [r8]
 800dc68:	461c      	mov	r4, r3
 800dc6a:	bb5c      	cbnz	r4, 800dcc4 <_malloc_r+0x90>
 800dc6c:	4629      	mov	r1, r5
 800dc6e:	4638      	mov	r0, r7
 800dc70:	f7ff ffc0 	bl	800dbf4 <sbrk_aligned>
 800dc74:	1c43      	adds	r3, r0, #1
 800dc76:	4604      	mov	r4, r0
 800dc78:	d155      	bne.n	800dd26 <_malloc_r+0xf2>
 800dc7a:	f8d8 4000 	ldr.w	r4, [r8]
 800dc7e:	4626      	mov	r6, r4
 800dc80:	2e00      	cmp	r6, #0
 800dc82:	d145      	bne.n	800dd10 <_malloc_r+0xdc>
 800dc84:	2c00      	cmp	r4, #0
 800dc86:	d048      	beq.n	800dd1a <_malloc_r+0xe6>
 800dc88:	6823      	ldr	r3, [r4, #0]
 800dc8a:	4631      	mov	r1, r6
 800dc8c:	4638      	mov	r0, r7
 800dc8e:	eb04 0903 	add.w	r9, r4, r3
 800dc92:	f000 fb5d 	bl	800e350 <_sbrk_r>
 800dc96:	4581      	cmp	r9, r0
 800dc98:	d13f      	bne.n	800dd1a <_malloc_r+0xe6>
 800dc9a:	6821      	ldr	r1, [r4, #0]
 800dc9c:	1a6d      	subs	r5, r5, r1
 800dc9e:	4629      	mov	r1, r5
 800dca0:	4638      	mov	r0, r7
 800dca2:	f7ff ffa7 	bl	800dbf4 <sbrk_aligned>
 800dca6:	3001      	adds	r0, #1
 800dca8:	d037      	beq.n	800dd1a <_malloc_r+0xe6>
 800dcaa:	6823      	ldr	r3, [r4, #0]
 800dcac:	442b      	add	r3, r5
 800dcae:	6023      	str	r3, [r4, #0]
 800dcb0:	f8d8 3000 	ldr.w	r3, [r8]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d038      	beq.n	800dd2a <_malloc_r+0xf6>
 800dcb8:	685a      	ldr	r2, [r3, #4]
 800dcba:	42a2      	cmp	r2, r4
 800dcbc:	d12b      	bne.n	800dd16 <_malloc_r+0xe2>
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	605a      	str	r2, [r3, #4]
 800dcc2:	e00f      	b.n	800dce4 <_malloc_r+0xb0>
 800dcc4:	6822      	ldr	r2, [r4, #0]
 800dcc6:	1b52      	subs	r2, r2, r5
 800dcc8:	d41f      	bmi.n	800dd0a <_malloc_r+0xd6>
 800dcca:	2a0b      	cmp	r2, #11
 800dccc:	d917      	bls.n	800dcfe <_malloc_r+0xca>
 800dcce:	1961      	adds	r1, r4, r5
 800dcd0:	42a3      	cmp	r3, r4
 800dcd2:	6025      	str	r5, [r4, #0]
 800dcd4:	bf18      	it	ne
 800dcd6:	6059      	strne	r1, [r3, #4]
 800dcd8:	6863      	ldr	r3, [r4, #4]
 800dcda:	bf08      	it	eq
 800dcdc:	f8c8 1000 	streq.w	r1, [r8]
 800dce0:	5162      	str	r2, [r4, r5]
 800dce2:	604b      	str	r3, [r1, #4]
 800dce4:	4638      	mov	r0, r7
 800dce6:	f104 060b 	add.w	r6, r4, #11
 800dcea:	f000 f829 	bl	800dd40 <__malloc_unlock>
 800dcee:	f026 0607 	bic.w	r6, r6, #7
 800dcf2:	1d23      	adds	r3, r4, #4
 800dcf4:	1af2      	subs	r2, r6, r3
 800dcf6:	d0ae      	beq.n	800dc56 <_malloc_r+0x22>
 800dcf8:	1b9b      	subs	r3, r3, r6
 800dcfa:	50a3      	str	r3, [r4, r2]
 800dcfc:	e7ab      	b.n	800dc56 <_malloc_r+0x22>
 800dcfe:	42a3      	cmp	r3, r4
 800dd00:	6862      	ldr	r2, [r4, #4]
 800dd02:	d1dd      	bne.n	800dcc0 <_malloc_r+0x8c>
 800dd04:	f8c8 2000 	str.w	r2, [r8]
 800dd08:	e7ec      	b.n	800dce4 <_malloc_r+0xb0>
 800dd0a:	4623      	mov	r3, r4
 800dd0c:	6864      	ldr	r4, [r4, #4]
 800dd0e:	e7ac      	b.n	800dc6a <_malloc_r+0x36>
 800dd10:	4634      	mov	r4, r6
 800dd12:	6876      	ldr	r6, [r6, #4]
 800dd14:	e7b4      	b.n	800dc80 <_malloc_r+0x4c>
 800dd16:	4613      	mov	r3, r2
 800dd18:	e7cc      	b.n	800dcb4 <_malloc_r+0x80>
 800dd1a:	230c      	movs	r3, #12
 800dd1c:	603b      	str	r3, [r7, #0]
 800dd1e:	4638      	mov	r0, r7
 800dd20:	f000 f80e 	bl	800dd40 <__malloc_unlock>
 800dd24:	e797      	b.n	800dc56 <_malloc_r+0x22>
 800dd26:	6025      	str	r5, [r4, #0]
 800dd28:	e7dc      	b.n	800dce4 <_malloc_r+0xb0>
 800dd2a:	605b      	str	r3, [r3, #4]
 800dd2c:	deff      	udf	#255	; 0xff
 800dd2e:	bf00      	nop
 800dd30:	24001288 	.word	0x24001288

0800dd34 <__malloc_lock>:
 800dd34:	4801      	ldr	r0, [pc, #4]	; (800dd3c <__malloc_lock+0x8>)
 800dd36:	f7ff bf01 	b.w	800db3c <__retarget_lock_acquire_recursive>
 800dd3a:	bf00      	nop
 800dd3c:	24001284 	.word	0x24001284

0800dd40 <__malloc_unlock>:
 800dd40:	4801      	ldr	r0, [pc, #4]	; (800dd48 <__malloc_unlock+0x8>)
 800dd42:	f7ff befc 	b.w	800db3e <__retarget_lock_release_recursive>
 800dd46:	bf00      	nop
 800dd48:	24001284 	.word	0x24001284

0800dd4c <__ssputs_r>:
 800dd4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd50:	688e      	ldr	r6, [r1, #8]
 800dd52:	461f      	mov	r7, r3
 800dd54:	42be      	cmp	r6, r7
 800dd56:	680b      	ldr	r3, [r1, #0]
 800dd58:	4682      	mov	sl, r0
 800dd5a:	460c      	mov	r4, r1
 800dd5c:	4690      	mov	r8, r2
 800dd5e:	d82c      	bhi.n	800ddba <__ssputs_r+0x6e>
 800dd60:	898a      	ldrh	r2, [r1, #12]
 800dd62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dd66:	d026      	beq.n	800ddb6 <__ssputs_r+0x6a>
 800dd68:	6965      	ldr	r5, [r4, #20]
 800dd6a:	6909      	ldr	r1, [r1, #16]
 800dd6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd70:	eba3 0901 	sub.w	r9, r3, r1
 800dd74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd78:	1c7b      	adds	r3, r7, #1
 800dd7a:	444b      	add	r3, r9
 800dd7c:	106d      	asrs	r5, r5, #1
 800dd7e:	429d      	cmp	r5, r3
 800dd80:	bf38      	it	cc
 800dd82:	461d      	movcc	r5, r3
 800dd84:	0553      	lsls	r3, r2, #21
 800dd86:	d527      	bpl.n	800ddd8 <__ssputs_r+0x8c>
 800dd88:	4629      	mov	r1, r5
 800dd8a:	f7ff ff53 	bl	800dc34 <_malloc_r>
 800dd8e:	4606      	mov	r6, r0
 800dd90:	b360      	cbz	r0, 800ddec <__ssputs_r+0xa0>
 800dd92:	6921      	ldr	r1, [r4, #16]
 800dd94:	464a      	mov	r2, r9
 800dd96:	f7ff fed3 	bl	800db40 <memcpy>
 800dd9a:	89a3      	ldrh	r3, [r4, #12]
 800dd9c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dda0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dda4:	81a3      	strh	r3, [r4, #12]
 800dda6:	6126      	str	r6, [r4, #16]
 800dda8:	6165      	str	r5, [r4, #20]
 800ddaa:	444e      	add	r6, r9
 800ddac:	eba5 0509 	sub.w	r5, r5, r9
 800ddb0:	6026      	str	r6, [r4, #0]
 800ddb2:	60a5      	str	r5, [r4, #8]
 800ddb4:	463e      	mov	r6, r7
 800ddb6:	42be      	cmp	r6, r7
 800ddb8:	d900      	bls.n	800ddbc <__ssputs_r+0x70>
 800ddba:	463e      	mov	r6, r7
 800ddbc:	6820      	ldr	r0, [r4, #0]
 800ddbe:	4632      	mov	r2, r6
 800ddc0:	4641      	mov	r1, r8
 800ddc2:	f000 faab 	bl	800e31c <memmove>
 800ddc6:	68a3      	ldr	r3, [r4, #8]
 800ddc8:	1b9b      	subs	r3, r3, r6
 800ddca:	60a3      	str	r3, [r4, #8]
 800ddcc:	6823      	ldr	r3, [r4, #0]
 800ddce:	4433      	add	r3, r6
 800ddd0:	6023      	str	r3, [r4, #0]
 800ddd2:	2000      	movs	r0, #0
 800ddd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddd8:	462a      	mov	r2, r5
 800ddda:	f000 fac9 	bl	800e370 <_realloc_r>
 800ddde:	4606      	mov	r6, r0
 800dde0:	2800      	cmp	r0, #0
 800dde2:	d1e0      	bne.n	800dda6 <__ssputs_r+0x5a>
 800dde4:	6921      	ldr	r1, [r4, #16]
 800dde6:	4650      	mov	r0, sl
 800dde8:	f7ff feb8 	bl	800db5c <_free_r>
 800ddec:	230c      	movs	r3, #12
 800ddee:	f8ca 3000 	str.w	r3, [sl]
 800ddf2:	89a3      	ldrh	r3, [r4, #12]
 800ddf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddf8:	81a3      	strh	r3, [r4, #12]
 800ddfa:	f04f 30ff 	mov.w	r0, #4294967295
 800ddfe:	e7e9      	b.n	800ddd4 <__ssputs_r+0x88>

0800de00 <_svfiprintf_r>:
 800de00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de04:	4698      	mov	r8, r3
 800de06:	898b      	ldrh	r3, [r1, #12]
 800de08:	061b      	lsls	r3, r3, #24
 800de0a:	b09d      	sub	sp, #116	; 0x74
 800de0c:	4607      	mov	r7, r0
 800de0e:	460d      	mov	r5, r1
 800de10:	4614      	mov	r4, r2
 800de12:	d50e      	bpl.n	800de32 <_svfiprintf_r+0x32>
 800de14:	690b      	ldr	r3, [r1, #16]
 800de16:	b963      	cbnz	r3, 800de32 <_svfiprintf_r+0x32>
 800de18:	2140      	movs	r1, #64	; 0x40
 800de1a:	f7ff ff0b 	bl	800dc34 <_malloc_r>
 800de1e:	6028      	str	r0, [r5, #0]
 800de20:	6128      	str	r0, [r5, #16]
 800de22:	b920      	cbnz	r0, 800de2e <_svfiprintf_r+0x2e>
 800de24:	230c      	movs	r3, #12
 800de26:	603b      	str	r3, [r7, #0]
 800de28:	f04f 30ff 	mov.w	r0, #4294967295
 800de2c:	e0d0      	b.n	800dfd0 <_svfiprintf_r+0x1d0>
 800de2e:	2340      	movs	r3, #64	; 0x40
 800de30:	616b      	str	r3, [r5, #20]
 800de32:	2300      	movs	r3, #0
 800de34:	9309      	str	r3, [sp, #36]	; 0x24
 800de36:	2320      	movs	r3, #32
 800de38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800de40:	2330      	movs	r3, #48	; 0x30
 800de42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dfe8 <_svfiprintf_r+0x1e8>
 800de46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de4a:	f04f 0901 	mov.w	r9, #1
 800de4e:	4623      	mov	r3, r4
 800de50:	469a      	mov	sl, r3
 800de52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de56:	b10a      	cbz	r2, 800de5c <_svfiprintf_r+0x5c>
 800de58:	2a25      	cmp	r2, #37	; 0x25
 800de5a:	d1f9      	bne.n	800de50 <_svfiprintf_r+0x50>
 800de5c:	ebba 0b04 	subs.w	fp, sl, r4
 800de60:	d00b      	beq.n	800de7a <_svfiprintf_r+0x7a>
 800de62:	465b      	mov	r3, fp
 800de64:	4622      	mov	r2, r4
 800de66:	4629      	mov	r1, r5
 800de68:	4638      	mov	r0, r7
 800de6a:	f7ff ff6f 	bl	800dd4c <__ssputs_r>
 800de6e:	3001      	adds	r0, #1
 800de70:	f000 80a9 	beq.w	800dfc6 <_svfiprintf_r+0x1c6>
 800de74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de76:	445a      	add	r2, fp
 800de78:	9209      	str	r2, [sp, #36]	; 0x24
 800de7a:	f89a 3000 	ldrb.w	r3, [sl]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	f000 80a1 	beq.w	800dfc6 <_svfiprintf_r+0x1c6>
 800de84:	2300      	movs	r3, #0
 800de86:	f04f 32ff 	mov.w	r2, #4294967295
 800de8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de8e:	f10a 0a01 	add.w	sl, sl, #1
 800de92:	9304      	str	r3, [sp, #16]
 800de94:	9307      	str	r3, [sp, #28]
 800de96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de9a:	931a      	str	r3, [sp, #104]	; 0x68
 800de9c:	4654      	mov	r4, sl
 800de9e:	2205      	movs	r2, #5
 800dea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dea4:	4850      	ldr	r0, [pc, #320]	; (800dfe8 <_svfiprintf_r+0x1e8>)
 800dea6:	f7f2 fa23 	bl	80002f0 <memchr>
 800deaa:	9a04      	ldr	r2, [sp, #16]
 800deac:	b9d8      	cbnz	r0, 800dee6 <_svfiprintf_r+0xe6>
 800deae:	06d0      	lsls	r0, r2, #27
 800deb0:	bf44      	itt	mi
 800deb2:	2320      	movmi	r3, #32
 800deb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800deb8:	0711      	lsls	r1, r2, #28
 800deba:	bf44      	itt	mi
 800debc:	232b      	movmi	r3, #43	; 0x2b
 800debe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dec2:	f89a 3000 	ldrb.w	r3, [sl]
 800dec6:	2b2a      	cmp	r3, #42	; 0x2a
 800dec8:	d015      	beq.n	800def6 <_svfiprintf_r+0xf6>
 800deca:	9a07      	ldr	r2, [sp, #28]
 800decc:	4654      	mov	r4, sl
 800dece:	2000      	movs	r0, #0
 800ded0:	f04f 0c0a 	mov.w	ip, #10
 800ded4:	4621      	mov	r1, r4
 800ded6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800deda:	3b30      	subs	r3, #48	; 0x30
 800dedc:	2b09      	cmp	r3, #9
 800dede:	d94d      	bls.n	800df7c <_svfiprintf_r+0x17c>
 800dee0:	b1b0      	cbz	r0, 800df10 <_svfiprintf_r+0x110>
 800dee2:	9207      	str	r2, [sp, #28]
 800dee4:	e014      	b.n	800df10 <_svfiprintf_r+0x110>
 800dee6:	eba0 0308 	sub.w	r3, r0, r8
 800deea:	fa09 f303 	lsl.w	r3, r9, r3
 800deee:	4313      	orrs	r3, r2
 800def0:	9304      	str	r3, [sp, #16]
 800def2:	46a2      	mov	sl, r4
 800def4:	e7d2      	b.n	800de9c <_svfiprintf_r+0x9c>
 800def6:	9b03      	ldr	r3, [sp, #12]
 800def8:	1d19      	adds	r1, r3, #4
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	9103      	str	r1, [sp, #12]
 800defe:	2b00      	cmp	r3, #0
 800df00:	bfbb      	ittet	lt
 800df02:	425b      	neglt	r3, r3
 800df04:	f042 0202 	orrlt.w	r2, r2, #2
 800df08:	9307      	strge	r3, [sp, #28]
 800df0a:	9307      	strlt	r3, [sp, #28]
 800df0c:	bfb8      	it	lt
 800df0e:	9204      	strlt	r2, [sp, #16]
 800df10:	7823      	ldrb	r3, [r4, #0]
 800df12:	2b2e      	cmp	r3, #46	; 0x2e
 800df14:	d10c      	bne.n	800df30 <_svfiprintf_r+0x130>
 800df16:	7863      	ldrb	r3, [r4, #1]
 800df18:	2b2a      	cmp	r3, #42	; 0x2a
 800df1a:	d134      	bne.n	800df86 <_svfiprintf_r+0x186>
 800df1c:	9b03      	ldr	r3, [sp, #12]
 800df1e:	1d1a      	adds	r2, r3, #4
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	9203      	str	r2, [sp, #12]
 800df24:	2b00      	cmp	r3, #0
 800df26:	bfb8      	it	lt
 800df28:	f04f 33ff 	movlt.w	r3, #4294967295
 800df2c:	3402      	adds	r4, #2
 800df2e:	9305      	str	r3, [sp, #20]
 800df30:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800dff8 <_svfiprintf_r+0x1f8>
 800df34:	7821      	ldrb	r1, [r4, #0]
 800df36:	2203      	movs	r2, #3
 800df38:	4650      	mov	r0, sl
 800df3a:	f7f2 f9d9 	bl	80002f0 <memchr>
 800df3e:	b138      	cbz	r0, 800df50 <_svfiprintf_r+0x150>
 800df40:	9b04      	ldr	r3, [sp, #16]
 800df42:	eba0 000a 	sub.w	r0, r0, sl
 800df46:	2240      	movs	r2, #64	; 0x40
 800df48:	4082      	lsls	r2, r0
 800df4a:	4313      	orrs	r3, r2
 800df4c:	3401      	adds	r4, #1
 800df4e:	9304      	str	r3, [sp, #16]
 800df50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df54:	4825      	ldr	r0, [pc, #148]	; (800dfec <_svfiprintf_r+0x1ec>)
 800df56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df5a:	2206      	movs	r2, #6
 800df5c:	f7f2 f9c8 	bl	80002f0 <memchr>
 800df60:	2800      	cmp	r0, #0
 800df62:	d038      	beq.n	800dfd6 <_svfiprintf_r+0x1d6>
 800df64:	4b22      	ldr	r3, [pc, #136]	; (800dff0 <_svfiprintf_r+0x1f0>)
 800df66:	bb1b      	cbnz	r3, 800dfb0 <_svfiprintf_r+0x1b0>
 800df68:	9b03      	ldr	r3, [sp, #12]
 800df6a:	3307      	adds	r3, #7
 800df6c:	f023 0307 	bic.w	r3, r3, #7
 800df70:	3308      	adds	r3, #8
 800df72:	9303      	str	r3, [sp, #12]
 800df74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df76:	4433      	add	r3, r6
 800df78:	9309      	str	r3, [sp, #36]	; 0x24
 800df7a:	e768      	b.n	800de4e <_svfiprintf_r+0x4e>
 800df7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800df80:	460c      	mov	r4, r1
 800df82:	2001      	movs	r0, #1
 800df84:	e7a6      	b.n	800ded4 <_svfiprintf_r+0xd4>
 800df86:	2300      	movs	r3, #0
 800df88:	3401      	adds	r4, #1
 800df8a:	9305      	str	r3, [sp, #20]
 800df8c:	4619      	mov	r1, r3
 800df8e:	f04f 0c0a 	mov.w	ip, #10
 800df92:	4620      	mov	r0, r4
 800df94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df98:	3a30      	subs	r2, #48	; 0x30
 800df9a:	2a09      	cmp	r2, #9
 800df9c:	d903      	bls.n	800dfa6 <_svfiprintf_r+0x1a6>
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d0c6      	beq.n	800df30 <_svfiprintf_r+0x130>
 800dfa2:	9105      	str	r1, [sp, #20]
 800dfa4:	e7c4      	b.n	800df30 <_svfiprintf_r+0x130>
 800dfa6:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfaa:	4604      	mov	r4, r0
 800dfac:	2301      	movs	r3, #1
 800dfae:	e7f0      	b.n	800df92 <_svfiprintf_r+0x192>
 800dfb0:	ab03      	add	r3, sp, #12
 800dfb2:	9300      	str	r3, [sp, #0]
 800dfb4:	462a      	mov	r2, r5
 800dfb6:	4b0f      	ldr	r3, [pc, #60]	; (800dff4 <_svfiprintf_r+0x1f4>)
 800dfb8:	a904      	add	r1, sp, #16
 800dfba:	4638      	mov	r0, r7
 800dfbc:	f3af 8000 	nop.w
 800dfc0:	1c42      	adds	r2, r0, #1
 800dfc2:	4606      	mov	r6, r0
 800dfc4:	d1d6      	bne.n	800df74 <_svfiprintf_r+0x174>
 800dfc6:	89ab      	ldrh	r3, [r5, #12]
 800dfc8:	065b      	lsls	r3, r3, #25
 800dfca:	f53f af2d 	bmi.w	800de28 <_svfiprintf_r+0x28>
 800dfce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfd0:	b01d      	add	sp, #116	; 0x74
 800dfd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd6:	ab03      	add	r3, sp, #12
 800dfd8:	9300      	str	r3, [sp, #0]
 800dfda:	462a      	mov	r2, r5
 800dfdc:	4b05      	ldr	r3, [pc, #20]	; (800dff4 <_svfiprintf_r+0x1f4>)
 800dfde:	a904      	add	r1, sp, #16
 800dfe0:	4638      	mov	r0, r7
 800dfe2:	f000 f879 	bl	800e0d8 <_printf_i>
 800dfe6:	e7eb      	b.n	800dfc0 <_svfiprintf_r+0x1c0>
 800dfe8:	0800e620 	.word	0x0800e620
 800dfec:	0800e62a 	.word	0x0800e62a
 800dff0:	00000000 	.word	0x00000000
 800dff4:	0800dd4d 	.word	0x0800dd4d
 800dff8:	0800e626 	.word	0x0800e626

0800dffc <_printf_common>:
 800dffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e000:	4616      	mov	r6, r2
 800e002:	4699      	mov	r9, r3
 800e004:	688a      	ldr	r2, [r1, #8]
 800e006:	690b      	ldr	r3, [r1, #16]
 800e008:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e00c:	4293      	cmp	r3, r2
 800e00e:	bfb8      	it	lt
 800e010:	4613      	movlt	r3, r2
 800e012:	6033      	str	r3, [r6, #0]
 800e014:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e018:	4607      	mov	r7, r0
 800e01a:	460c      	mov	r4, r1
 800e01c:	b10a      	cbz	r2, 800e022 <_printf_common+0x26>
 800e01e:	3301      	adds	r3, #1
 800e020:	6033      	str	r3, [r6, #0]
 800e022:	6823      	ldr	r3, [r4, #0]
 800e024:	0699      	lsls	r1, r3, #26
 800e026:	bf42      	ittt	mi
 800e028:	6833      	ldrmi	r3, [r6, #0]
 800e02a:	3302      	addmi	r3, #2
 800e02c:	6033      	strmi	r3, [r6, #0]
 800e02e:	6825      	ldr	r5, [r4, #0]
 800e030:	f015 0506 	ands.w	r5, r5, #6
 800e034:	d106      	bne.n	800e044 <_printf_common+0x48>
 800e036:	f104 0a19 	add.w	sl, r4, #25
 800e03a:	68e3      	ldr	r3, [r4, #12]
 800e03c:	6832      	ldr	r2, [r6, #0]
 800e03e:	1a9b      	subs	r3, r3, r2
 800e040:	42ab      	cmp	r3, r5
 800e042:	dc26      	bgt.n	800e092 <_printf_common+0x96>
 800e044:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e048:	1e13      	subs	r3, r2, #0
 800e04a:	6822      	ldr	r2, [r4, #0]
 800e04c:	bf18      	it	ne
 800e04e:	2301      	movne	r3, #1
 800e050:	0692      	lsls	r2, r2, #26
 800e052:	d42b      	bmi.n	800e0ac <_printf_common+0xb0>
 800e054:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e058:	4649      	mov	r1, r9
 800e05a:	4638      	mov	r0, r7
 800e05c:	47c0      	blx	r8
 800e05e:	3001      	adds	r0, #1
 800e060:	d01e      	beq.n	800e0a0 <_printf_common+0xa4>
 800e062:	6823      	ldr	r3, [r4, #0]
 800e064:	6922      	ldr	r2, [r4, #16]
 800e066:	f003 0306 	and.w	r3, r3, #6
 800e06a:	2b04      	cmp	r3, #4
 800e06c:	bf02      	ittt	eq
 800e06e:	68e5      	ldreq	r5, [r4, #12]
 800e070:	6833      	ldreq	r3, [r6, #0]
 800e072:	1aed      	subeq	r5, r5, r3
 800e074:	68a3      	ldr	r3, [r4, #8]
 800e076:	bf0c      	ite	eq
 800e078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e07c:	2500      	movne	r5, #0
 800e07e:	4293      	cmp	r3, r2
 800e080:	bfc4      	itt	gt
 800e082:	1a9b      	subgt	r3, r3, r2
 800e084:	18ed      	addgt	r5, r5, r3
 800e086:	2600      	movs	r6, #0
 800e088:	341a      	adds	r4, #26
 800e08a:	42b5      	cmp	r5, r6
 800e08c:	d11a      	bne.n	800e0c4 <_printf_common+0xc8>
 800e08e:	2000      	movs	r0, #0
 800e090:	e008      	b.n	800e0a4 <_printf_common+0xa8>
 800e092:	2301      	movs	r3, #1
 800e094:	4652      	mov	r2, sl
 800e096:	4649      	mov	r1, r9
 800e098:	4638      	mov	r0, r7
 800e09a:	47c0      	blx	r8
 800e09c:	3001      	adds	r0, #1
 800e09e:	d103      	bne.n	800e0a8 <_printf_common+0xac>
 800e0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0a8:	3501      	adds	r5, #1
 800e0aa:	e7c6      	b.n	800e03a <_printf_common+0x3e>
 800e0ac:	18e1      	adds	r1, r4, r3
 800e0ae:	1c5a      	adds	r2, r3, #1
 800e0b0:	2030      	movs	r0, #48	; 0x30
 800e0b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e0b6:	4422      	add	r2, r4
 800e0b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e0bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e0c0:	3302      	adds	r3, #2
 800e0c2:	e7c7      	b.n	800e054 <_printf_common+0x58>
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	4622      	mov	r2, r4
 800e0c8:	4649      	mov	r1, r9
 800e0ca:	4638      	mov	r0, r7
 800e0cc:	47c0      	blx	r8
 800e0ce:	3001      	adds	r0, #1
 800e0d0:	d0e6      	beq.n	800e0a0 <_printf_common+0xa4>
 800e0d2:	3601      	adds	r6, #1
 800e0d4:	e7d9      	b.n	800e08a <_printf_common+0x8e>
	...

0800e0d8 <_printf_i>:
 800e0d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0dc:	7e0f      	ldrb	r7, [r1, #24]
 800e0de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e0e0:	2f78      	cmp	r7, #120	; 0x78
 800e0e2:	4691      	mov	r9, r2
 800e0e4:	4680      	mov	r8, r0
 800e0e6:	460c      	mov	r4, r1
 800e0e8:	469a      	mov	sl, r3
 800e0ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e0ee:	d807      	bhi.n	800e100 <_printf_i+0x28>
 800e0f0:	2f62      	cmp	r7, #98	; 0x62
 800e0f2:	d80a      	bhi.n	800e10a <_printf_i+0x32>
 800e0f4:	2f00      	cmp	r7, #0
 800e0f6:	f000 80d4 	beq.w	800e2a2 <_printf_i+0x1ca>
 800e0fa:	2f58      	cmp	r7, #88	; 0x58
 800e0fc:	f000 80c0 	beq.w	800e280 <_printf_i+0x1a8>
 800e100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e104:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e108:	e03a      	b.n	800e180 <_printf_i+0xa8>
 800e10a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e10e:	2b15      	cmp	r3, #21
 800e110:	d8f6      	bhi.n	800e100 <_printf_i+0x28>
 800e112:	a101      	add	r1, pc, #4	; (adr r1, 800e118 <_printf_i+0x40>)
 800e114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e118:	0800e171 	.word	0x0800e171
 800e11c:	0800e185 	.word	0x0800e185
 800e120:	0800e101 	.word	0x0800e101
 800e124:	0800e101 	.word	0x0800e101
 800e128:	0800e101 	.word	0x0800e101
 800e12c:	0800e101 	.word	0x0800e101
 800e130:	0800e185 	.word	0x0800e185
 800e134:	0800e101 	.word	0x0800e101
 800e138:	0800e101 	.word	0x0800e101
 800e13c:	0800e101 	.word	0x0800e101
 800e140:	0800e101 	.word	0x0800e101
 800e144:	0800e289 	.word	0x0800e289
 800e148:	0800e1b1 	.word	0x0800e1b1
 800e14c:	0800e243 	.word	0x0800e243
 800e150:	0800e101 	.word	0x0800e101
 800e154:	0800e101 	.word	0x0800e101
 800e158:	0800e2ab 	.word	0x0800e2ab
 800e15c:	0800e101 	.word	0x0800e101
 800e160:	0800e1b1 	.word	0x0800e1b1
 800e164:	0800e101 	.word	0x0800e101
 800e168:	0800e101 	.word	0x0800e101
 800e16c:	0800e24b 	.word	0x0800e24b
 800e170:	682b      	ldr	r3, [r5, #0]
 800e172:	1d1a      	adds	r2, r3, #4
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	602a      	str	r2, [r5, #0]
 800e178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e17c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e180:	2301      	movs	r3, #1
 800e182:	e09f      	b.n	800e2c4 <_printf_i+0x1ec>
 800e184:	6820      	ldr	r0, [r4, #0]
 800e186:	682b      	ldr	r3, [r5, #0]
 800e188:	0607      	lsls	r7, r0, #24
 800e18a:	f103 0104 	add.w	r1, r3, #4
 800e18e:	6029      	str	r1, [r5, #0]
 800e190:	d501      	bpl.n	800e196 <_printf_i+0xbe>
 800e192:	681e      	ldr	r6, [r3, #0]
 800e194:	e003      	b.n	800e19e <_printf_i+0xc6>
 800e196:	0646      	lsls	r6, r0, #25
 800e198:	d5fb      	bpl.n	800e192 <_printf_i+0xba>
 800e19a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e19e:	2e00      	cmp	r6, #0
 800e1a0:	da03      	bge.n	800e1aa <_printf_i+0xd2>
 800e1a2:	232d      	movs	r3, #45	; 0x2d
 800e1a4:	4276      	negs	r6, r6
 800e1a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1aa:	485a      	ldr	r0, [pc, #360]	; (800e314 <_printf_i+0x23c>)
 800e1ac:	230a      	movs	r3, #10
 800e1ae:	e012      	b.n	800e1d6 <_printf_i+0xfe>
 800e1b0:	682b      	ldr	r3, [r5, #0]
 800e1b2:	6820      	ldr	r0, [r4, #0]
 800e1b4:	1d19      	adds	r1, r3, #4
 800e1b6:	6029      	str	r1, [r5, #0]
 800e1b8:	0605      	lsls	r5, r0, #24
 800e1ba:	d501      	bpl.n	800e1c0 <_printf_i+0xe8>
 800e1bc:	681e      	ldr	r6, [r3, #0]
 800e1be:	e002      	b.n	800e1c6 <_printf_i+0xee>
 800e1c0:	0641      	lsls	r1, r0, #25
 800e1c2:	d5fb      	bpl.n	800e1bc <_printf_i+0xe4>
 800e1c4:	881e      	ldrh	r6, [r3, #0]
 800e1c6:	4853      	ldr	r0, [pc, #332]	; (800e314 <_printf_i+0x23c>)
 800e1c8:	2f6f      	cmp	r7, #111	; 0x6f
 800e1ca:	bf0c      	ite	eq
 800e1cc:	2308      	moveq	r3, #8
 800e1ce:	230a      	movne	r3, #10
 800e1d0:	2100      	movs	r1, #0
 800e1d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e1d6:	6865      	ldr	r5, [r4, #4]
 800e1d8:	60a5      	str	r5, [r4, #8]
 800e1da:	2d00      	cmp	r5, #0
 800e1dc:	bfa2      	ittt	ge
 800e1de:	6821      	ldrge	r1, [r4, #0]
 800e1e0:	f021 0104 	bicge.w	r1, r1, #4
 800e1e4:	6021      	strge	r1, [r4, #0]
 800e1e6:	b90e      	cbnz	r6, 800e1ec <_printf_i+0x114>
 800e1e8:	2d00      	cmp	r5, #0
 800e1ea:	d04b      	beq.n	800e284 <_printf_i+0x1ac>
 800e1ec:	4615      	mov	r5, r2
 800e1ee:	fbb6 f1f3 	udiv	r1, r6, r3
 800e1f2:	fb03 6711 	mls	r7, r3, r1, r6
 800e1f6:	5dc7      	ldrb	r7, [r0, r7]
 800e1f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e1fc:	4637      	mov	r7, r6
 800e1fe:	42bb      	cmp	r3, r7
 800e200:	460e      	mov	r6, r1
 800e202:	d9f4      	bls.n	800e1ee <_printf_i+0x116>
 800e204:	2b08      	cmp	r3, #8
 800e206:	d10b      	bne.n	800e220 <_printf_i+0x148>
 800e208:	6823      	ldr	r3, [r4, #0]
 800e20a:	07de      	lsls	r6, r3, #31
 800e20c:	d508      	bpl.n	800e220 <_printf_i+0x148>
 800e20e:	6923      	ldr	r3, [r4, #16]
 800e210:	6861      	ldr	r1, [r4, #4]
 800e212:	4299      	cmp	r1, r3
 800e214:	bfde      	ittt	le
 800e216:	2330      	movle	r3, #48	; 0x30
 800e218:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e21c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e220:	1b52      	subs	r2, r2, r5
 800e222:	6122      	str	r2, [r4, #16]
 800e224:	f8cd a000 	str.w	sl, [sp]
 800e228:	464b      	mov	r3, r9
 800e22a:	aa03      	add	r2, sp, #12
 800e22c:	4621      	mov	r1, r4
 800e22e:	4640      	mov	r0, r8
 800e230:	f7ff fee4 	bl	800dffc <_printf_common>
 800e234:	3001      	adds	r0, #1
 800e236:	d14a      	bne.n	800e2ce <_printf_i+0x1f6>
 800e238:	f04f 30ff 	mov.w	r0, #4294967295
 800e23c:	b004      	add	sp, #16
 800e23e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e242:	6823      	ldr	r3, [r4, #0]
 800e244:	f043 0320 	orr.w	r3, r3, #32
 800e248:	6023      	str	r3, [r4, #0]
 800e24a:	4833      	ldr	r0, [pc, #204]	; (800e318 <_printf_i+0x240>)
 800e24c:	2778      	movs	r7, #120	; 0x78
 800e24e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e252:	6823      	ldr	r3, [r4, #0]
 800e254:	6829      	ldr	r1, [r5, #0]
 800e256:	061f      	lsls	r7, r3, #24
 800e258:	f851 6b04 	ldr.w	r6, [r1], #4
 800e25c:	d402      	bmi.n	800e264 <_printf_i+0x18c>
 800e25e:	065f      	lsls	r7, r3, #25
 800e260:	bf48      	it	mi
 800e262:	b2b6      	uxthmi	r6, r6
 800e264:	07df      	lsls	r7, r3, #31
 800e266:	bf48      	it	mi
 800e268:	f043 0320 	orrmi.w	r3, r3, #32
 800e26c:	6029      	str	r1, [r5, #0]
 800e26e:	bf48      	it	mi
 800e270:	6023      	strmi	r3, [r4, #0]
 800e272:	b91e      	cbnz	r6, 800e27c <_printf_i+0x1a4>
 800e274:	6823      	ldr	r3, [r4, #0]
 800e276:	f023 0320 	bic.w	r3, r3, #32
 800e27a:	6023      	str	r3, [r4, #0]
 800e27c:	2310      	movs	r3, #16
 800e27e:	e7a7      	b.n	800e1d0 <_printf_i+0xf8>
 800e280:	4824      	ldr	r0, [pc, #144]	; (800e314 <_printf_i+0x23c>)
 800e282:	e7e4      	b.n	800e24e <_printf_i+0x176>
 800e284:	4615      	mov	r5, r2
 800e286:	e7bd      	b.n	800e204 <_printf_i+0x12c>
 800e288:	682b      	ldr	r3, [r5, #0]
 800e28a:	6826      	ldr	r6, [r4, #0]
 800e28c:	6961      	ldr	r1, [r4, #20]
 800e28e:	1d18      	adds	r0, r3, #4
 800e290:	6028      	str	r0, [r5, #0]
 800e292:	0635      	lsls	r5, r6, #24
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	d501      	bpl.n	800e29c <_printf_i+0x1c4>
 800e298:	6019      	str	r1, [r3, #0]
 800e29a:	e002      	b.n	800e2a2 <_printf_i+0x1ca>
 800e29c:	0670      	lsls	r0, r6, #25
 800e29e:	d5fb      	bpl.n	800e298 <_printf_i+0x1c0>
 800e2a0:	8019      	strh	r1, [r3, #0]
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	6123      	str	r3, [r4, #16]
 800e2a6:	4615      	mov	r5, r2
 800e2a8:	e7bc      	b.n	800e224 <_printf_i+0x14c>
 800e2aa:	682b      	ldr	r3, [r5, #0]
 800e2ac:	1d1a      	adds	r2, r3, #4
 800e2ae:	602a      	str	r2, [r5, #0]
 800e2b0:	681d      	ldr	r5, [r3, #0]
 800e2b2:	6862      	ldr	r2, [r4, #4]
 800e2b4:	2100      	movs	r1, #0
 800e2b6:	4628      	mov	r0, r5
 800e2b8:	f7f2 f81a 	bl	80002f0 <memchr>
 800e2bc:	b108      	cbz	r0, 800e2c2 <_printf_i+0x1ea>
 800e2be:	1b40      	subs	r0, r0, r5
 800e2c0:	6060      	str	r0, [r4, #4]
 800e2c2:	6863      	ldr	r3, [r4, #4]
 800e2c4:	6123      	str	r3, [r4, #16]
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2cc:	e7aa      	b.n	800e224 <_printf_i+0x14c>
 800e2ce:	6923      	ldr	r3, [r4, #16]
 800e2d0:	462a      	mov	r2, r5
 800e2d2:	4649      	mov	r1, r9
 800e2d4:	4640      	mov	r0, r8
 800e2d6:	47d0      	blx	sl
 800e2d8:	3001      	adds	r0, #1
 800e2da:	d0ad      	beq.n	800e238 <_printf_i+0x160>
 800e2dc:	6823      	ldr	r3, [r4, #0]
 800e2de:	079b      	lsls	r3, r3, #30
 800e2e0:	d413      	bmi.n	800e30a <_printf_i+0x232>
 800e2e2:	68e0      	ldr	r0, [r4, #12]
 800e2e4:	9b03      	ldr	r3, [sp, #12]
 800e2e6:	4298      	cmp	r0, r3
 800e2e8:	bfb8      	it	lt
 800e2ea:	4618      	movlt	r0, r3
 800e2ec:	e7a6      	b.n	800e23c <_printf_i+0x164>
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	4632      	mov	r2, r6
 800e2f2:	4649      	mov	r1, r9
 800e2f4:	4640      	mov	r0, r8
 800e2f6:	47d0      	blx	sl
 800e2f8:	3001      	adds	r0, #1
 800e2fa:	d09d      	beq.n	800e238 <_printf_i+0x160>
 800e2fc:	3501      	adds	r5, #1
 800e2fe:	68e3      	ldr	r3, [r4, #12]
 800e300:	9903      	ldr	r1, [sp, #12]
 800e302:	1a5b      	subs	r3, r3, r1
 800e304:	42ab      	cmp	r3, r5
 800e306:	dcf2      	bgt.n	800e2ee <_printf_i+0x216>
 800e308:	e7eb      	b.n	800e2e2 <_printf_i+0x20a>
 800e30a:	2500      	movs	r5, #0
 800e30c:	f104 0619 	add.w	r6, r4, #25
 800e310:	e7f5      	b.n	800e2fe <_printf_i+0x226>
 800e312:	bf00      	nop
 800e314:	0800e631 	.word	0x0800e631
 800e318:	0800e642 	.word	0x0800e642

0800e31c <memmove>:
 800e31c:	4288      	cmp	r0, r1
 800e31e:	b510      	push	{r4, lr}
 800e320:	eb01 0402 	add.w	r4, r1, r2
 800e324:	d902      	bls.n	800e32c <memmove+0x10>
 800e326:	4284      	cmp	r4, r0
 800e328:	4623      	mov	r3, r4
 800e32a:	d807      	bhi.n	800e33c <memmove+0x20>
 800e32c:	1e43      	subs	r3, r0, #1
 800e32e:	42a1      	cmp	r1, r4
 800e330:	d008      	beq.n	800e344 <memmove+0x28>
 800e332:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e336:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e33a:	e7f8      	b.n	800e32e <memmove+0x12>
 800e33c:	4402      	add	r2, r0
 800e33e:	4601      	mov	r1, r0
 800e340:	428a      	cmp	r2, r1
 800e342:	d100      	bne.n	800e346 <memmove+0x2a>
 800e344:	bd10      	pop	{r4, pc}
 800e346:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e34a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e34e:	e7f7      	b.n	800e340 <memmove+0x24>

0800e350 <_sbrk_r>:
 800e350:	b538      	push	{r3, r4, r5, lr}
 800e352:	4d06      	ldr	r5, [pc, #24]	; (800e36c <_sbrk_r+0x1c>)
 800e354:	2300      	movs	r3, #0
 800e356:	4604      	mov	r4, r0
 800e358:	4608      	mov	r0, r1
 800e35a:	602b      	str	r3, [r5, #0]
 800e35c:	f7f5 fba8 	bl	8003ab0 <_sbrk>
 800e360:	1c43      	adds	r3, r0, #1
 800e362:	d102      	bne.n	800e36a <_sbrk_r+0x1a>
 800e364:	682b      	ldr	r3, [r5, #0]
 800e366:	b103      	cbz	r3, 800e36a <_sbrk_r+0x1a>
 800e368:	6023      	str	r3, [r4, #0]
 800e36a:	bd38      	pop	{r3, r4, r5, pc}
 800e36c:	24001280 	.word	0x24001280

0800e370 <_realloc_r>:
 800e370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e374:	4680      	mov	r8, r0
 800e376:	4614      	mov	r4, r2
 800e378:	460e      	mov	r6, r1
 800e37a:	b921      	cbnz	r1, 800e386 <_realloc_r+0x16>
 800e37c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e380:	4611      	mov	r1, r2
 800e382:	f7ff bc57 	b.w	800dc34 <_malloc_r>
 800e386:	b92a      	cbnz	r2, 800e394 <_realloc_r+0x24>
 800e388:	f7ff fbe8 	bl	800db5c <_free_r>
 800e38c:	4625      	mov	r5, r4
 800e38e:	4628      	mov	r0, r5
 800e390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e394:	f000 f81b 	bl	800e3ce <_malloc_usable_size_r>
 800e398:	4284      	cmp	r4, r0
 800e39a:	4607      	mov	r7, r0
 800e39c:	d802      	bhi.n	800e3a4 <_realloc_r+0x34>
 800e39e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e3a2:	d812      	bhi.n	800e3ca <_realloc_r+0x5a>
 800e3a4:	4621      	mov	r1, r4
 800e3a6:	4640      	mov	r0, r8
 800e3a8:	f7ff fc44 	bl	800dc34 <_malloc_r>
 800e3ac:	4605      	mov	r5, r0
 800e3ae:	2800      	cmp	r0, #0
 800e3b0:	d0ed      	beq.n	800e38e <_realloc_r+0x1e>
 800e3b2:	42bc      	cmp	r4, r7
 800e3b4:	4622      	mov	r2, r4
 800e3b6:	4631      	mov	r1, r6
 800e3b8:	bf28      	it	cs
 800e3ba:	463a      	movcs	r2, r7
 800e3bc:	f7ff fbc0 	bl	800db40 <memcpy>
 800e3c0:	4631      	mov	r1, r6
 800e3c2:	4640      	mov	r0, r8
 800e3c4:	f7ff fbca 	bl	800db5c <_free_r>
 800e3c8:	e7e1      	b.n	800e38e <_realloc_r+0x1e>
 800e3ca:	4635      	mov	r5, r6
 800e3cc:	e7df      	b.n	800e38e <_realloc_r+0x1e>

0800e3ce <_malloc_usable_size_r>:
 800e3ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3d2:	1f18      	subs	r0, r3, #4
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	bfbc      	itt	lt
 800e3d8:	580b      	ldrlt	r3, [r1, r0]
 800e3da:	18c0      	addlt	r0, r0, r3
 800e3dc:	4770      	bx	lr
	...

0800e3e0 <_init>:
 800e3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3e2:	bf00      	nop
 800e3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3e6:	bc08      	pop	{r3}
 800e3e8:	469e      	mov	lr, r3
 800e3ea:	4770      	bx	lr

0800e3ec <_fini>:
 800e3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3ee:	bf00      	nop
 800e3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3f2:	bc08      	pop	{r3}
 800e3f4:	469e      	mov	lr, r3
 800e3f6:	4770      	bx	lr
