
STM32H750B-DK_Oximeter_5_Click.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012214  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  080124b4  080124b4  000224b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012698  08012698  00022698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080126a0  080126a0  000226a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080126a4  080126a4  000226a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000004d4  24000000  080126a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240004d4  08012b7c  000304d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000534  08012bdc  00030534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d0  24000594  08012c3c  00030594  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24001964  08012c3c  00031964  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030594  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000305c2  2**0
                  CONTENTS, READONLY
 13 .debug_info   00033cfb  00000000  00000000  00030605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f47  00000000  00000000  00064300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002570  00000000  00000000  00069248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d55  00000000  00000000  0006b7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000421f7  00000000  00000000  0006d50d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032e44  00000000  00000000  000af704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019e6d1  00000000  00000000  000e2548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ab6c  00000000  00000000  00280c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0028b788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000594 	.word	0x24000594
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801249c 	.word	0x0801249c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000598 	.word	0x24000598
 80002dc:	0801249c 	.word	0x0801249c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <Write_Cmd_Data>:

//===============================================================
//write parameter

void  Write_Cmd_Data (unsigned char CMDP)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
    LCD_CS_0;
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069c:	480b      	ldr	r0, [pc, #44]	; (80006cc <Write_Cmd_Data+0x40>)
 800069e:	f009 f9f7 	bl	8009a90 <HAL_GPIO_WritePin>
   	LCD_DC_1;
 80006a2:	2201      	movs	r2, #1
 80006a4:	2140      	movs	r1, #64	; 0x40
 80006a6:	480a      	ldr	r0, [pc, #40]	; (80006d0 <Write_Cmd_Data+0x44>)
 80006a8:	f009 f9f2 	bl	8009a90 <HAL_GPIO_WritePin>

   	SPI_Write(&CMDP, 1);
 80006ac:	1dfb      	adds	r3, r7, #7
 80006ae:	2101      	movs	r1, #1
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f857 	bl	8000764 <SPI_Write>

   	LCD_CS_1;
 80006b6:	2201      	movs	r2, #1
 80006b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <Write_Cmd_Data+0x40>)
 80006be:	f009 f9e7 	bl	8009a90 <HAL_GPIO_WritePin>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	58022000 	.word	0x58022000
 80006d0:	58021000 	.word	0x58021000

080006d4 <Write_Cmd>:

//=============================================================
//write command

void Write_Cmd(unsigned char CMD)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
    LCD_CS_0;
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e4:	480b      	ldr	r0, [pc, #44]	; (8000714 <Write_Cmd+0x40>)
 80006e6:	f009 f9d3 	bl	8009a90 <HAL_GPIO_WritePin>
   	LCD_DC_0;
 80006ea:	2200      	movs	r2, #0
 80006ec:	2140      	movs	r1, #64	; 0x40
 80006ee:	480a      	ldr	r0, [pc, #40]	; (8000718 <Write_Cmd+0x44>)
 80006f0:	f009 f9ce 	bl	8009a90 <HAL_GPIO_WritePin>

   	SPI_Write(&CMD, 1);
 80006f4:	1dfb      	adds	r3, r7, #7
 80006f6:	2101      	movs	r1, #1
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 f833 	bl	8000764 <SPI_Write>

   	LCD_CS_1;
 80006fe:	2201      	movs	r2, #1
 8000700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000704:	4803      	ldr	r0, [pc, #12]	; (8000714 <Write_Cmd+0x40>)
 8000706:	f009 f9c3 	bl	8009a90 <HAL_GPIO_WritePin>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	58022000 	.word	0x58022000
 8000718:	58021000 	.word	0x58021000

0800071c <Write_Bytes>:
   	LCD_CS_1;
}


void Write_Bytes(unsigned char * pbuff, unsigned short size)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	460b      	mov	r3, r1
 8000726:	807b      	strh	r3, [r7, #2]
    LCD_CS_0;
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072e:	480b      	ldr	r0, [pc, #44]	; (800075c <Write_Bytes+0x40>)
 8000730:	f009 f9ae 	bl	8009a90 <HAL_GPIO_WritePin>
   	LCD_DC_1;
 8000734:	2201      	movs	r2, #1
 8000736:	2140      	movs	r1, #64	; 0x40
 8000738:	4809      	ldr	r0, [pc, #36]	; (8000760 <Write_Bytes+0x44>)
 800073a:	f009 f9a9 	bl	8009a90 <HAL_GPIO_WritePin>

   	SPI_Write(pbuff, size);
 800073e:	887b      	ldrh	r3, [r7, #2]
 8000740:	4619      	mov	r1, r3
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f000 f80e 	bl	8000764 <SPI_Write>

   	LCD_CS_1;
 8000748:	2201      	movs	r2, #1
 800074a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074e:	4803      	ldr	r0, [pc, #12]	; (800075c <Write_Bytes+0x40>)
 8000750:	f009 f99e 	bl	8009a90 <HAL_GPIO_WritePin>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	58022000 	.word	0x58022000
 8000760:	58021000 	.word	0x58021000

08000764 <SPI_Write>:


HAL_StatusTypeDef SPI_Write(uint8_t* pbuff, uint16_t size)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	807b      	strh	r3, [r7, #2]
	//DMA, use HAL_SPI_Transmit_DMA() function
    HAL_StatusTypeDef status =  HAL_SPI_Transmit_DMA(&hspi2, pbuff, size);
 8000770:	887b      	ldrh	r3, [r7, #2]
 8000772:	461a      	mov	r2, r3
 8000774:	6879      	ldr	r1, [r7, #4]
 8000776:	4808      	ldr	r0, [pc, #32]	; (8000798 <SPI_Write+0x34>)
 8000778:	f00e ffee 	bl	800f758 <HAL_SPI_Transmit_DMA>
 800077c:	4603      	mov	r3, r0
 800077e:	73fb      	strb	r3, [r7, #15]
			snprintf(SendBuffer2,BUFSIZE2,"OTHER\n\r");
			HAL_UART_Transmit(&huart3,SendBuffer2,strlen(SendBuffer2),100);
			break;
	}
     */
    while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){;}
 8000780:	bf00      	nop
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <SPI_Write+0x34>)
 8000784:	f00f fb46 	bl	800fe14 <HAL_SPI_GetState>
 8000788:	4603      	mov	r3, r0
 800078a:	2b01      	cmp	r3, #1
 800078c:	d1f9      	bne.n	8000782 <SPI_Write+0x1e>
    return status;
 800078e:	7bfb      	ldrb	r3, [r7, #15]

    //no DMA, use HAL_SPI_Transmit() function
    //return HAL_SPI_Transmit(&hspi1, pbuff, size, 100);
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	24000ba0 	.word	0x24000ba0

0800079c <GC9A01_Initial>:

//=============================================================
//LCD Initial

void GC9A01_Initial(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  	LCD_CS_1;
 80007a0:	2201      	movs	r2, #1
 80007a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a6:	48fd      	ldr	r0, [pc, #1012]	; (8000b9c <GC9A01_Initial+0x400>)
 80007a8:	f009 f972 	bl	8009a90 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80007ac:	2005      	movs	r0, #5
 80007ae:	f004 fafd 	bl	8004dac <HAL_Delay>
	LCD_RST_0;
 80007b2:	2200      	movs	r2, #0
 80007b4:	2108      	movs	r1, #8
 80007b6:	48fa      	ldr	r0, [pc, #1000]	; (8000ba0 <GC9A01_Initial+0x404>)
 80007b8:	f009 f96a 	bl	8009a90 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80007bc:	200a      	movs	r0, #10
 80007be:	f004 faf5 	bl	8004dac <HAL_Delay>
	LCD_RST_1;
 80007c2:	2201      	movs	r2, #1
 80007c4:	2108      	movs	r1, #8
 80007c6:	48f6      	ldr	r0, [pc, #984]	; (8000ba0 <GC9A01_Initial+0x404>)
 80007c8:	f009 f962 	bl	8009a90 <HAL_GPIO_WritePin>
	HAL_Delay(120);
 80007cc:	2078      	movs	r0, #120	; 0x78
 80007ce:	f004 faed 	bl	8004dac <HAL_Delay>


 //************* Start Initial Sequence **********//
	Write_Cmd(0xEF);
 80007d2:	20ef      	movs	r0, #239	; 0xef
 80007d4:	f7ff ff7e 	bl	80006d4 <Write_Cmd>

	Write_Cmd(0xEB);
 80007d8:	20eb      	movs	r0, #235	; 0xeb
 80007da:	f7ff ff7b 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x14);
 80007de:	2014      	movs	r0, #20
 80007e0:	f7ff ff54 	bl	800068c <Write_Cmd_Data>

    Write_Cmd(0xFE);
 80007e4:	20fe      	movs	r0, #254	; 0xfe
 80007e6:	f7ff ff75 	bl	80006d4 <Write_Cmd>
	Write_Cmd(0xEF);
 80007ea:	20ef      	movs	r0, #239	; 0xef
 80007ec:	f7ff ff72 	bl	80006d4 <Write_Cmd>

	Write_Cmd(0xEB);
 80007f0:	20eb      	movs	r0, #235	; 0xeb
 80007f2:	f7ff ff6f 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x14);
 80007f6:	2014      	movs	r0, #20
 80007f8:	f7ff ff48 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0x84);
 80007fc:	2084      	movs	r0, #132	; 0x84
 80007fe:	f7ff ff69 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x40);
 8000802:	2040      	movs	r0, #64	; 0x40
 8000804:	f7ff ff42 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0x85);
 8000808:	2085      	movs	r0, #133	; 0x85
 800080a:	f7ff ff63 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0xFF);
 800080e:	20ff      	movs	r0, #255	; 0xff
 8000810:	f7ff ff3c 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0x86);
 8000814:	2086      	movs	r0, #134	; 0x86
 8000816:	f7ff ff5d 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0xFF);
 800081a:	20ff      	movs	r0, #255	; 0xff
 800081c:	f7ff ff36 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0x87);
 8000820:	2087      	movs	r0, #135	; 0x87
 8000822:	f7ff ff57 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0xFF);
 8000826:	20ff      	movs	r0, #255	; 0xff
 8000828:	f7ff ff30 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0x88);
 800082c:	2088      	movs	r0, #136	; 0x88
 800082e:	f7ff ff51 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x0A);
 8000832:	200a      	movs	r0, #10
 8000834:	f7ff ff2a 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0x89);
 8000838:	2089      	movs	r0, #137	; 0x89
 800083a:	f7ff ff4b 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x21);
 800083e:	2021      	movs	r0, #33	; 0x21
 8000840:	f7ff ff24 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0x8A);
 8000844:	208a      	movs	r0, #138	; 0x8a
 8000846:	f7ff ff45 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x00);
 800084a:	2000      	movs	r0, #0
 800084c:	f7ff ff1e 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0x8B);
 8000850:	208b      	movs	r0, #139	; 0x8b
 8000852:	f7ff ff3f 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x80);
 8000856:	2080      	movs	r0, #128	; 0x80
 8000858:	f7ff ff18 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0x8C);
 800085c:	208c      	movs	r0, #140	; 0x8c
 800085e:	f7ff ff39 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x01);
 8000862:	2001      	movs	r0, #1
 8000864:	f7ff ff12 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0x8D);
 8000868:	208d      	movs	r0, #141	; 0x8d
 800086a:	f7ff ff33 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x01);
 800086e:	2001      	movs	r0, #1
 8000870:	f7ff ff0c 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0x8E);
 8000874:	208e      	movs	r0, #142	; 0x8e
 8000876:	f7ff ff2d 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0xFF);
 800087a:	20ff      	movs	r0, #255	; 0xff
 800087c:	f7ff ff06 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0x8F);
 8000880:	208f      	movs	r0, #143	; 0x8f
 8000882:	f7ff ff27 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0xFF);
 8000886:	20ff      	movs	r0, #255	; 0xff
 8000888:	f7ff ff00 	bl	800068c <Write_Cmd_Data>


	Write_Cmd(0xB6);
 800088c:	20b6      	movs	r0, #182	; 0xb6
 800088e:	f7ff ff21 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x00);
 8000892:	2000      	movs	r0, #0
 8000894:	f7ff fefa 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8000898:	2000      	movs	r0, #0
 800089a:	f7ff fef7 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0x36);
 800089e:	2036      	movs	r0, #54	; 0x36
 80008a0:	f7ff ff18 	bl	80006d4 <Write_Cmd>

	if(USE_HORIZONTAL==0)Write_Cmd_Data(0x18);
	else if(USE_HORIZONTAL==1)Write_Cmd_Data(0x28);
 80008a4:	2028      	movs	r0, #40	; 0x28
 80008a6:	f7ff fef1 	bl	800068c <Write_Cmd_Data>
	else if(USE_HORIZONTAL==2)Write_Cmd_Data(0x48);
	else Write_Cmd_Data(0x88);



	Write_Cmd(0x3A);
 80008aa:	203a      	movs	r0, #58	; 0x3a
 80008ac:	f7ff ff12 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x05);
 80008b0:	2005      	movs	r0, #5
 80008b2:	f7ff feeb 	bl	800068c <Write_Cmd_Data>


	Write_Cmd(0x90);
 80008b6:	2090      	movs	r0, #144	; 0x90
 80008b8:	f7ff ff0c 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x08);
 80008bc:	2008      	movs	r0, #8
 80008be:	f7ff fee5 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x08);
 80008c2:	2008      	movs	r0, #8
 80008c4:	f7ff fee2 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x08);
 80008c8:	2008      	movs	r0, #8
 80008ca:	f7ff fedf 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x08);
 80008ce:	2008      	movs	r0, #8
 80008d0:	f7ff fedc 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0xBD);
 80008d4:	20bd      	movs	r0, #189	; 0xbd
 80008d6:	f7ff fefd 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x06);
 80008da:	2006      	movs	r0, #6
 80008dc:	f7ff fed6 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0xBC);
 80008e0:	20bc      	movs	r0, #188	; 0xbc
 80008e2:	f7ff fef7 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x00);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff fed0 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0xFF);
 80008ec:	20ff      	movs	r0, #255	; 0xff
 80008ee:	f7ff fef1 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x60);
 80008f2:	2060      	movs	r0, #96	; 0x60
 80008f4:	f7ff feca 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x01);
 80008f8:	2001      	movs	r0, #1
 80008fa:	f7ff fec7 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x04);
 80008fe:	2004      	movs	r0, #4
 8000900:	f7ff fec4 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0xC3);
 8000904:	20c3      	movs	r0, #195	; 0xc3
 8000906:	f7ff fee5 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x13);
 800090a:	2013      	movs	r0, #19
 800090c:	f7ff febe 	bl	800068c <Write_Cmd_Data>
	Write_Cmd(0xC4);
 8000910:	20c4      	movs	r0, #196	; 0xc4
 8000912:	f7ff fedf 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x13);
 8000916:	2013      	movs	r0, #19
 8000918:	f7ff feb8 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0xC9);
 800091c:	20c9      	movs	r0, #201	; 0xc9
 800091e:	f7ff fed9 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x22);
 8000922:	2022      	movs	r0, #34	; 0x22
 8000924:	f7ff feb2 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0xBE);
 8000928:	20be      	movs	r0, #190	; 0xbe
 800092a:	f7ff fed3 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x11);
 800092e:	2011      	movs	r0, #17
 8000930:	f7ff feac 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0xE1);
 8000934:	20e1      	movs	r0, #225	; 0xe1
 8000936:	f7ff fecd 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x10);
 800093a:	2010      	movs	r0, #16
 800093c:	f7ff fea6 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x0E);
 8000940:	200e      	movs	r0, #14
 8000942:	f7ff fea3 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0xDF);
 8000946:	20df      	movs	r0, #223	; 0xdf
 8000948:	f7ff fec4 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x21);
 800094c:	2021      	movs	r0, #33	; 0x21
 800094e:	f7ff fe9d 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x0c);
 8000952:	200c      	movs	r0, #12
 8000954:	f7ff fe9a 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x02);
 8000958:	2002      	movs	r0, #2
 800095a:	f7ff fe97 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0xF0);
 800095e:	20f0      	movs	r0, #240	; 0xf0
 8000960:	f7ff feb8 	bl	80006d4 <Write_Cmd>
    Write_Cmd_Data(0x45);
 8000964:	2045      	movs	r0, #69	; 0x45
 8000966:	f7ff fe91 	bl	800068c <Write_Cmd_Data>
    Write_Cmd_Data(0x09);
 800096a:	2009      	movs	r0, #9
 800096c:	f7ff fe8e 	bl	800068c <Write_Cmd_Data>
 	Write_Cmd_Data(0x08);
 8000970:	2008      	movs	r0, #8
 8000972:	f7ff fe8b 	bl	800068c <Write_Cmd_Data>
  	Write_Cmd_Data(0x08);
 8000976:	2008      	movs	r0, #8
 8000978:	f7ff fe88 	bl	800068c <Write_Cmd_Data>
 	Write_Cmd_Data(0x26);
 800097c:	2026      	movs	r0, #38	; 0x26
 800097e:	f7ff fe85 	bl	800068c <Write_Cmd_Data>
 	Write_Cmd_Data(0x2A);
 8000982:	202a      	movs	r0, #42	; 0x2a
 8000984:	f7ff fe82 	bl	800068c <Write_Cmd_Data>

 	Write_Cmd(0xF1);
 8000988:	20f1      	movs	r0, #241	; 0xf1
 800098a:	f7ff fea3 	bl	80006d4 <Write_Cmd>
 	Write_Cmd_Data(0x43);
 800098e:	2043      	movs	r0, #67	; 0x43
 8000990:	f7ff fe7c 	bl	800068c <Write_Cmd_Data>
 	Write_Cmd_Data(0x70);
 8000994:	2070      	movs	r0, #112	; 0x70
 8000996:	f7ff fe79 	bl	800068c <Write_Cmd_Data>
 	Write_Cmd_Data(0x72);
 800099a:	2072      	movs	r0, #114	; 0x72
 800099c:	f7ff fe76 	bl	800068c <Write_Cmd_Data>
 	Write_Cmd_Data(0x36);
 80009a0:	2036      	movs	r0, #54	; 0x36
 80009a2:	f7ff fe73 	bl	800068c <Write_Cmd_Data>
 	Write_Cmd_Data(0x37);
 80009a6:	2037      	movs	r0, #55	; 0x37
 80009a8:	f7ff fe70 	bl	800068c <Write_Cmd_Data>
 	Write_Cmd_Data(0x6F);
 80009ac:	206f      	movs	r0, #111	; 0x6f
 80009ae:	f7ff fe6d 	bl	800068c <Write_Cmd_Data>


 	Write_Cmd(0xF2);
 80009b2:	20f2      	movs	r0, #242	; 0xf2
 80009b4:	f7ff fe8e 	bl	80006d4 <Write_Cmd>
 	Write_Cmd_Data(0x45);
 80009b8:	2045      	movs	r0, #69	; 0x45
 80009ba:	f7ff fe67 	bl	800068c <Write_Cmd_Data>
 	Write_Cmd_Data(0x09);
 80009be:	2009      	movs	r0, #9
 80009c0:	f7ff fe64 	bl	800068c <Write_Cmd_Data>
 	Write_Cmd_Data(0x08);
 80009c4:	2008      	movs	r0, #8
 80009c6:	f7ff fe61 	bl	800068c <Write_Cmd_Data>
 	Write_Cmd_Data(0x08);
 80009ca:	2008      	movs	r0, #8
 80009cc:	f7ff fe5e 	bl	800068c <Write_Cmd_Data>
 	Write_Cmd_Data(0x26);
 80009d0:	2026      	movs	r0, #38	; 0x26
 80009d2:	f7ff fe5b 	bl	800068c <Write_Cmd_Data>
 	Write_Cmd_Data(0x2A);
 80009d6:	202a      	movs	r0, #42	; 0x2a
 80009d8:	f7ff fe58 	bl	800068c <Write_Cmd_Data>

 	Write_Cmd(0xF3);
 80009dc:	20f3      	movs	r0, #243	; 0xf3
 80009de:	f7ff fe79 	bl	80006d4 <Write_Cmd>
 	Write_Cmd_Data(0x43);
 80009e2:	2043      	movs	r0, #67	; 0x43
 80009e4:	f7ff fe52 	bl	800068c <Write_Cmd_Data>
 	Write_Cmd_Data(0x70);
 80009e8:	2070      	movs	r0, #112	; 0x70
 80009ea:	f7ff fe4f 	bl	800068c <Write_Cmd_Data>
 	Write_Cmd_Data(0x72);
 80009ee:	2072      	movs	r0, #114	; 0x72
 80009f0:	f7ff fe4c 	bl	800068c <Write_Cmd_Data>
 	Write_Cmd_Data(0x36);
 80009f4:	2036      	movs	r0, #54	; 0x36
 80009f6:	f7ff fe49 	bl	800068c <Write_Cmd_Data>
 	Write_Cmd_Data(0x37);
 80009fa:	2037      	movs	r0, #55	; 0x37
 80009fc:	f7ff fe46 	bl	800068c <Write_Cmd_Data>
 	Write_Cmd_Data(0x6F);
 8000a00:	206f      	movs	r0, #111	; 0x6f
 8000a02:	f7ff fe43 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0xED);
 8000a06:	20ed      	movs	r0, #237	; 0xed
 8000a08:	f7ff fe64 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x1B);
 8000a0c:	201b      	movs	r0, #27
 8000a0e:	f7ff fe3d 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x0B);
 8000a12:	200b      	movs	r0, #11
 8000a14:	f7ff fe3a 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0xAE);
 8000a18:	20ae      	movs	r0, #174	; 0xae
 8000a1a:	f7ff fe5b 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x77);
 8000a1e:	2077      	movs	r0, #119	; 0x77
 8000a20:	f7ff fe34 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0xCD);
 8000a24:	20cd      	movs	r0, #205	; 0xcd
 8000a26:	f7ff fe55 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x63);
 8000a2a:	2063      	movs	r0, #99	; 0x63
 8000a2c:	f7ff fe2e 	bl	800068c <Write_Cmd_Data>


	Write_Cmd(0x70);
 8000a30:	2070      	movs	r0, #112	; 0x70
 8000a32:	f7ff fe4f 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x07);
 8000a36:	2007      	movs	r0, #7
 8000a38:	f7ff fe28 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x07);
 8000a3c:	2007      	movs	r0, #7
 8000a3e:	f7ff fe25 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x04);
 8000a42:	2004      	movs	r0, #4
 8000a44:	f7ff fe22 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x0E);
 8000a48:	200e      	movs	r0, #14
 8000a4a:	f7ff fe1f 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x0F);
 8000a4e:	200f      	movs	r0, #15
 8000a50:	f7ff fe1c 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x09);
 8000a54:	2009      	movs	r0, #9
 8000a56:	f7ff fe19 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x07);
 8000a5a:	2007      	movs	r0, #7
 8000a5c:	f7ff fe16 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x08);
 8000a60:	2008      	movs	r0, #8
 8000a62:	f7ff fe13 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x03);
 8000a66:	2003      	movs	r0, #3
 8000a68:	f7ff fe10 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0xE8);
 8000a6c:	20e8      	movs	r0, #232	; 0xe8
 8000a6e:	f7ff fe31 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x34);
 8000a72:	2034      	movs	r0, #52	; 0x34
 8000a74:	f7ff fe0a 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0x62);
 8000a78:	2062      	movs	r0, #98	; 0x62
 8000a7a:	f7ff fe2b 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x18);
 8000a7e:	2018      	movs	r0, #24
 8000a80:	f7ff fe04 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x0D);
 8000a84:	200d      	movs	r0, #13
 8000a86:	f7ff fe01 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x71);
 8000a8a:	2071      	movs	r0, #113	; 0x71
 8000a8c:	f7ff fdfe 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0xED);
 8000a90:	20ed      	movs	r0, #237	; 0xed
 8000a92:	f7ff fdfb 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 8000a96:	2070      	movs	r0, #112	; 0x70
 8000a98:	f7ff fdf8 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 8000a9c:	2070      	movs	r0, #112	; 0x70
 8000a9e:	f7ff fdf5 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x18);
 8000aa2:	2018      	movs	r0, #24
 8000aa4:	f7ff fdf2 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x0F);
 8000aa8:	200f      	movs	r0, #15
 8000aaa:	f7ff fdef 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x71);
 8000aae:	2071      	movs	r0, #113	; 0x71
 8000ab0:	f7ff fdec 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0xEF);
 8000ab4:	20ef      	movs	r0, #239	; 0xef
 8000ab6:	f7ff fde9 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 8000aba:	2070      	movs	r0, #112	; 0x70
 8000abc:	f7ff fde6 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 8000ac0:	2070      	movs	r0, #112	; 0x70
 8000ac2:	f7ff fde3 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0x63);
 8000ac6:	2063      	movs	r0, #99	; 0x63
 8000ac8:	f7ff fe04 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x18);
 8000acc:	2018      	movs	r0, #24
 8000ace:	f7ff fddd 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x11);
 8000ad2:	2011      	movs	r0, #17
 8000ad4:	f7ff fdda 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x71);
 8000ad8:	2071      	movs	r0, #113	; 0x71
 8000ada:	f7ff fdd7 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0xF1);
 8000ade:	20f1      	movs	r0, #241	; 0xf1
 8000ae0:	f7ff fdd4 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 8000ae4:	2070      	movs	r0, #112	; 0x70
 8000ae6:	f7ff fdd1 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 8000aea:	2070      	movs	r0, #112	; 0x70
 8000aec:	f7ff fdce 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x18);
 8000af0:	2018      	movs	r0, #24
 8000af2:	f7ff fdcb 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x13);
 8000af6:	2013      	movs	r0, #19
 8000af8:	f7ff fdc8 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x71);
 8000afc:	2071      	movs	r0, #113	; 0x71
 8000afe:	f7ff fdc5 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0xF3);
 8000b02:	20f3      	movs	r0, #243	; 0xf3
 8000b04:	f7ff fdc2 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 8000b08:	2070      	movs	r0, #112	; 0x70
 8000b0a:	f7ff fdbf 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 8000b0e:	2070      	movs	r0, #112	; 0x70
 8000b10:	f7ff fdbc 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0x64);
 8000b14:	2064      	movs	r0, #100	; 0x64
 8000b16:	f7ff fddd 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x28);
 8000b1a:	2028      	movs	r0, #40	; 0x28
 8000b1c:	f7ff fdb6 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x29);
 8000b20:	2029      	movs	r0, #41	; 0x29
 8000b22:	f7ff fdb3 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0xF1);
 8000b26:	20f1      	movs	r0, #241	; 0xf1
 8000b28:	f7ff fdb0 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x01);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f7ff fdad 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0xF1);
 8000b32:	20f1      	movs	r0, #241	; 0xf1
 8000b34:	f7ff fdaa 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f7ff fda7 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x07);
 8000b3e:	2007      	movs	r0, #7
 8000b40:	f7ff fda4 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0x66);
 8000b44:	2066      	movs	r0, #102	; 0x66
 8000b46:	f7ff fdc5 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x3C);
 8000b4a:	203c      	movs	r0, #60	; 0x3c
 8000b4c:	f7ff fd9e 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff fd9b 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0xCD);
 8000b56:	20cd      	movs	r0, #205	; 0xcd
 8000b58:	f7ff fd98 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x67);
 8000b5c:	2067      	movs	r0, #103	; 0x67
 8000b5e:	f7ff fd95 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x45);
 8000b62:	2045      	movs	r0, #69	; 0x45
 8000b64:	f7ff fd92 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x45);
 8000b68:	2045      	movs	r0, #69	; 0x45
 8000b6a:	f7ff fd8f 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x10);
 8000b6e:	2010      	movs	r0, #16
 8000b70:	f7ff fd8c 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff fd89 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff fd86 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff fd83 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0x67);
 8000b86:	2067      	movs	r0, #103	; 0x67
 8000b88:	f7ff fda4 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x00);
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f7ff fd7d 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x3C);
 8000b92:	203c      	movs	r0, #60	; 0x3c
 8000b94:	f7ff fd7a 	bl	800068c <Write_Cmd_Data>
 8000b98:	e004      	b.n	8000ba4 <GC9A01_Initial+0x408>
 8000b9a:	bf00      	nop
 8000b9c:	58022000 	.word	0x58022000
 8000ba0:	58021000 	.word	0x58021000
	Write_Cmd_Data(0x00);
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f7ff fd71 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8000baa:	2000      	movs	r0, #0
 8000bac:	f7ff fd6e 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f7ff fd6b 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x01);
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f7ff fd68 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x54);
 8000bbc:	2054      	movs	r0, #84	; 0x54
 8000bbe:	f7ff fd65 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x10);
 8000bc2:	2010      	movs	r0, #16
 8000bc4:	f7ff fd62 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x32);
 8000bc8:	2032      	movs	r0, #50	; 0x32
 8000bca:	f7ff fd5f 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x98);
 8000bce:	2098      	movs	r0, #152	; 0x98
 8000bd0:	f7ff fd5c 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0x74);
 8000bd4:	2074      	movs	r0, #116	; 0x74
 8000bd6:	f7ff fd7d 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x10);
 8000bda:	2010      	movs	r0, #16
 8000bdc:	f7ff fd56 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x85);
 8000be0:	2085      	movs	r0, #133	; 0x85
 8000be2:	f7ff fd53 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x80);
 8000be6:	2080      	movs	r0, #128	; 0x80
 8000be8:	f7ff fd50 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fd4d 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f7ff fd4a 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x4E);
 8000bf8:	204e      	movs	r0, #78	; 0x4e
 8000bfa:	f7ff fd47 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f7ff fd44 	bl	800068c <Write_Cmd_Data>

    Write_Cmd(0x98);
 8000c04:	2098      	movs	r0, #152	; 0x98
 8000c06:	f7ff fd65 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(0x3e);
 8000c0a:	203e      	movs	r0, #62	; 0x3e
 8000c0c:	f7ff fd3e 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(0x07);
 8000c10:	2007      	movs	r0, #7
 8000c12:	f7ff fd3b 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0x35);
 8000c16:	2035      	movs	r0, #53	; 0x35
 8000c18:	f7ff fd5c 	bl	80006d4 <Write_Cmd>
	Write_Cmd(0x21);
 8000c1c:	2021      	movs	r0, #33	; 0x21
 8000c1e:	f7ff fd59 	bl	80006d4 <Write_Cmd>

	Write_Cmd(0x11);
 8000c22:	2011      	movs	r0, #17
 8000c24:	f7ff fd56 	bl	80006d4 <Write_Cmd>
	HAL_Delay(120);
 8000c28:	2078      	movs	r0, #120	; 0x78
 8000c2a:	f004 f8bf 	bl	8004dac <HAL_Delay>
	Write_Cmd(0x29);
 8000c2e:	2029      	movs	r0, #41	; 0x29
 8000c30:	f7ff fd50 	bl	80006d4 <Write_Cmd>
	HAL_Delay(20);
 8000c34:	2014      	movs	r0, #20
 8000c36:	f004 f8b9 	bl	8004dac <HAL_Delay>
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop

08000c40 <ClearScreen2>:

//===============================================================
//clear screen2
//Use DMA，faster
void ClearScreen2(unsigned int bColor)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	6078      	str	r0, [r7, #4]
	ClearWindow(0,0,GC9A01_TFTWIDTH,GC9A01_TFTHEIGHT,bColor);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	23f0      	movs	r3, #240	; 0xf0
 8000c4e:	22f0      	movs	r2, #240	; 0xf0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2000      	movs	r0, #0
 8000c54:	f000 f804 	bl	8000c60 <ClearWindow>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <ClearWindow>:

void ClearWindow(unsigned int startX, unsigned int startY, unsigned int endX, unsigned int endY, unsigned int bColor)
{
 8000c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c64:	b08f      	sub	sp, #60	; 0x3c
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	60f8      	str	r0, [r7, #12]
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	466b      	mov	r3, sp
 8000c72:	461e      	mov	r6, r3
 unsigned int i;

 unsigned char hb = (bColor&0xFFFF) >> 8;
 8000c74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c76:	0a1b      	lsrs	r3, r3, #8
 8000c78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 unsigned char lb = bColor & 0xFF;
 8000c7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 unsigned short tempColor = lb * 256 + hb;
 8000c82:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	021b      	lsls	r3, r3, #8
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	4413      	add	r3, r2
 8000c94:	863b      	strh	r3, [r7, #48]	; 0x30

 unsigned int totalSize = (endX-startX) * (endY - startY) * 2;
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	6839      	ldr	r1, [r7, #0]
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	1a8a      	subs	r2, r1, r2
 8000ca2:	fb02 f303 	mul.w	r3, r2, r3
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 unsigned int bufSize = 512;
 8000caa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28

 unsigned int loopNum = (totalSize - (totalSize % bufSize)) / bufSize;
 8000cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cb4:	fbb3 f2f2 	udiv	r2, r3, r2
 8000cb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000cba:	fb01 f202 	mul.w	r2, r1, r2
 8000cbe:	1a9b      	subs	r3, r3, r2
 8000cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cc2:	1ad2      	subs	r2, r2, r3
 8000cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
 unsigned int modNum = totalSize % bufSize;
 8000ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cd0:	fbb3 f2f2 	udiv	r2, r3, r2
 8000cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000cd6:	fb01 f202 	mul.w	r2, r1, r2
 8000cda:	1a9b      	subs	r3, r3, r2
 8000cdc:	623b      	str	r3, [r7, #32]


 unsigned short tempBuf[bufSize];
 8000cde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	61fb      	str	r3, [r7, #28]
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	4688      	mov	r8, r1
 8000cea:	4699      	mov	r9, r3
 8000cec:	f04f 0200 	mov.w	r2, #0
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000cf8:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000cfc:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000d00:	2300      	movs	r3, #0
 8000d02:	460c      	mov	r4, r1
 8000d04:	461d      	mov	r5, r3
 8000d06:	f04f 0200 	mov.w	r2, #0
 8000d0a:	f04f 0300 	mov.w	r3, #0
 8000d0e:	012b      	lsls	r3, r5, #4
 8000d10:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000d14:	0122      	lsls	r2, r4, #4
 8000d16:	004b      	lsls	r3, r1, #1
 8000d18:	3307      	adds	r3, #7
 8000d1a:	08db      	lsrs	r3, r3, #3
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	ebad 0d03 	sub.w	sp, sp, r3
 8000d22:	466b      	mov	r3, sp
 8000d24:	3301      	adds	r3, #1
 8000d26:	085b      	lsrs	r3, r3, #1
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	61bb      	str	r3, [r7, #24]
 unsigned char * ptempBuf;

 for(i=0; i<bufSize; i++){
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8000d30:	e007      	b.n	8000d42 <ClearWindow+0xe2>
	 tempBuf[i] = tempColor;
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d36:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8000d38:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 for(i=0; i<bufSize; i++){
 8000d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d3e:	3301      	adds	r3, #1
 8000d40:	637b      	str	r3, [r7, #52]	; 0x34
 8000d42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d3f3      	bcc.n	8000d32 <ClearWindow+0xd2>
 }

 LCD_SetPos(startX,startY,endX-1,endY-1);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	1e5a      	subs	r2, r3, #1
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	68b9      	ldr	r1, [r7, #8]
 8000d54:	68f8      	ldr	r0, [r7, #12]
 8000d56:	f000 f81e 	bl	8000d96 <LCD_SetPos>

 ptempBuf = (unsigned char *)tempBuf;
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	617b      	str	r3, [r7, #20]
 for(i=0; i<loopNum; i++){
 8000d5e:	2300      	movs	r3, #0
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
 8000d62:	e008      	b.n	8000d76 <ClearWindow+0x116>
	 Write_Bytes(ptempBuf, bufSize);
 8000d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	4619      	mov	r1, r3
 8000d6a:	6978      	ldr	r0, [r7, #20]
 8000d6c:	f7ff fcd6 	bl	800071c <Write_Bytes>
 for(i=0; i<loopNum; i++){
 8000d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d72:	3301      	adds	r3, #1
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
 8000d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d3f2      	bcc.n	8000d64 <ClearWindow+0x104>
 }

 Write_Bytes(ptempBuf, modNum);
 8000d7e:	6a3b      	ldr	r3, [r7, #32]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	4619      	mov	r1, r3
 8000d84:	6978      	ldr	r0, [r7, #20]
 8000d86:	f7ff fcc9 	bl	800071c <Write_Bytes>
 8000d8a:	46b5      	mov	sp, r6

}
 8000d8c:	bf00      	nop
 8000d8e:	373c      	adds	r7, #60	; 0x3c
 8000d90:	46bd      	mov	sp, r7
 8000d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000d96 <LCD_SetPos>:


//===============================================================
 void LCD_SetPos(unsigned int Xstart,unsigned int Ystart,unsigned int Xend,unsigned int Yend)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b084      	sub	sp, #16
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
 8000da2:	603b      	str	r3, [r7, #0]
	Write_Cmd(0x2a);
 8000da4:	202a      	movs	r0, #42	; 0x2a
 8000da6:	f7ff fc95 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(Xstart>>8);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fc6b 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(Xstart);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fc66 	bl	800068c <Write_Cmd_Data>
 	Write_Cmd_Data(Xend>>8);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	0a1b      	lsrs	r3, r3, #8
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fc60 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(Xend);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fc5b 	bl	800068c <Write_Cmd_Data>

	Write_Cmd(0x2b);
 8000dd6:	202b      	movs	r0, #43	; 0x2b
 8000dd8:	f7ff fc7c 	bl	80006d4 <Write_Cmd>
	Write_Cmd_Data(Ystart>>8);
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	0a1b      	lsrs	r3, r3, #8
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fc52 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(Ystart);
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fc4d 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(Yend>>8);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fc47 	bl	800068c <Write_Cmd_Data>
	Write_Cmd_Data(Yend);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fc42 	bl	800068c <Write_Cmd_Data>

  	Write_Cmd(0x2c);//LCD_WriteCMD(GRAMWR);
 8000e08:	202c      	movs	r0, #44	; 0x2c
 8000e0a:	f7ff fc63 	bl	80006d4 <Write_Cmd>
}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <showzifu_dma_scaled>:
 	 }
 }


  void showzifu_dma_scaled(unsigned int x, unsigned int y, unsigned char value, unsigned int dcolor, unsigned int bgcolor, unsigned int scale)
  {
 8000e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e1c:	b08f      	sub	sp, #60	; 0x3c
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	603b      	str	r3, [r7, #0]
 8000e26:	4613      	mov	r3, r2
 8000e28:	71fb      	strb	r3, [r7, #7]
 8000e2a:	466b      	mov	r3, sp
 8000e2c:	461e      	mov	r6, r3
      unsigned char i, j;
      unsigned char *temp = String6_12;
 8000e2e:	4b6c      	ldr	r3, [pc, #432]	; (8000fe0 <showzifu_dma_scaled+0x1c8>)
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30
      unsigned int bufSize = 512;
 8000e32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e36:	623b      	str	r3, [r7, #32]
      unsigned short tempBuf[bufSize];
 8000e38:	6a39      	ldr	r1, [r7, #32]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	61fb      	str	r3, [r7, #28]
 8000e40:	2300      	movs	r3, #0
 8000e42:	4688      	mov	r8, r1
 8000e44:	4699      	mov	r9, r3
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	f04f 0300 	mov.w	r3, #0
 8000e4e:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000e52:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000e56:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	460c      	mov	r4, r1
 8000e5e:	461d      	mov	r5, r3
 8000e60:	f04f 0200 	mov.w	r2, #0
 8000e64:	f04f 0300 	mov.w	r3, #0
 8000e68:	012b      	lsls	r3, r5, #4
 8000e6a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000e6e:	0122      	lsls	r2, r4, #4
 8000e70:	004b      	lsls	r3, r1, #1
 8000e72:	3307      	adds	r3, #7
 8000e74:	08db      	lsrs	r3, r3, #3
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	ebad 0d03 	sub.w	sp, sp, r3
 8000e7c:	466b      	mov	r3, sp
 8000e7e:	3301      	adds	r3, #1
 8000e80:	085b      	lsrs	r3, r3, #1
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	61bb      	str	r3, [r7, #24]
      unsigned short pixelIndex = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	85fb      	strh	r3, [r7, #46]	; 0x2e

      unsigned short dcolor_swapped = ((dcolor & 0xFF) << 8) | ((dcolor >> 8) & 0xFF);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	021b      	lsls	r3, r3, #8
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	82fb      	strh	r3, [r7, #22]
      unsigned short bgcolor_swapped = ((bgcolor & 0xFF) << 8) | ((bgcolor >> 8) & 0xFF);
 8000ea0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	021b      	lsls	r3, r3, #8
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000eaa:	0a1b      	lsrs	r3, r3, #8
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	82bb      	strh	r3, [r7, #20]

      LCD_SetPos(x, y, x + (8 * scale) - 1, y + (12 * scale) - 1);
 8000eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000eb8:	00da      	lsls	r2, r3, #3
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	1e59      	subs	r1, r3, #1
 8000ec0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	4413      	add	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	461a      	mov	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4413      	add	r3, r2
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	460a      	mov	r2, r1
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	68f8      	ldr	r0, [r7, #12]
 8000ed8:	f7ff ff5d 	bl	8000d96 <LCD_SetPos>

      temp += (value - 32) * 12;
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f1a3 0220 	sub.w	r2, r3, #32
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	4413      	add	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	461a      	mov	r2, r3
 8000eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eee:	4413      	add	r3, r2
 8000ef0:	633b      	str	r3, [r7, #48]	; 0x30
      for (j = 0; j < 12; j++) {
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000ef8:	e05d      	b.n	8000fb6 <showzifu_dma_scaled+0x19e>
          for (int y_scale = 0; y_scale < scale; y_scale++) {
 8000efa:	2300      	movs	r3, #0
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000efe:	e04e      	b.n	8000f9e <showzifu_dma_scaled+0x186>
              for (i = 0; i < 8; i++) {
 8000f00:	2300      	movs	r3, #0
 8000f02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000f06:	e035      	b.n	8000f74 <showzifu_dma_scaled+0x15c>
                  unsigned short pixelColor = ((*temp & (1 << (7 - i))) != 0) ? dcolor_swapped : bgcolor_swapped;
 8000f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	fa42 f303 	asr.w	r3, r2, r3
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <showzifu_dma_scaled+0x10e>
 8000f22:	8afb      	ldrh	r3, [r7, #22]
 8000f24:	e000      	b.n	8000f28 <showzifu_dma_scaled+0x110>
 8000f26:	8abb      	ldrh	r3, [r7, #20]
 8000f28:	827b      	strh	r3, [r7, #18]

                  for (int x_scale = 0; x_scale < scale; x_scale++) {
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f2e:	e018      	b.n	8000f62 <showzifu_dma_scaled+0x14a>
                      tempBuf[pixelIndex++] = pixelColor;
 8000f30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000f32:	1c5a      	adds	r2, r3, #1
 8000f34:	85fa      	strh	r2, [r7, #46]	; 0x2e
 8000f36:	4619      	mov	r1, r3
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	8a7a      	ldrh	r2, [r7, #18]
 8000f3c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]

                      if (pixelIndex >= bufSize) {
 8000f40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000f42:	6a3a      	ldr	r2, [r7, #32]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d809      	bhi.n	8000f5c <showzifu_dma_scaled+0x144>
                          Write_Bytes((unsigned char *)tempBuf, bufSize * 2);
 8000f48:	6a3b      	ldr	r3, [r7, #32]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	4619      	mov	r1, r3
 8000f52:	69b8      	ldr	r0, [r7, #24]
 8000f54:	f7ff fbe2 	bl	800071c <Write_Bytes>
                          pixelIndex = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	85fb      	strh	r3, [r7, #46]	; 0x2e
                  for (int x_scale = 0; x_scale < scale; x_scale++) {
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	3301      	adds	r3, #1
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d8e2      	bhi.n	8000f30 <showzifu_dma_scaled+0x118>
              for (i = 0; i < 8; i++) {
 8000f6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f6e:	3301      	adds	r3, #1
 8000f70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000f74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f78:	2b07      	cmp	r3, #7
 8000f7a:	d9c5      	bls.n	8000f08 <showzifu_dma_scaled+0xf0>
                      }
                  }
              }

              if (pixelIndex >= bufSize) {
 8000f7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000f7e:	6a3a      	ldr	r2, [r7, #32]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d809      	bhi.n	8000f98 <showzifu_dma_scaled+0x180>
                  Write_Bytes((unsigned char *)tempBuf, bufSize * 2);
 8000f84:	6a3b      	ldr	r3, [r7, #32]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	69b8      	ldr	r0, [r7, #24]
 8000f90:	f7ff fbc4 	bl	800071c <Write_Bytes>
                  pixelIndex = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	85fb      	strh	r3, [r7, #46]	; 0x2e
          for (int y_scale = 0; y_scale < scale; y_scale++) {
 8000f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d8ac      	bhi.n	8000f00 <showzifu_dma_scaled+0xe8>
              }
          }
          temp++;
 8000fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa8:	3301      	adds	r3, #1
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
      for (j = 0; j < 12; j++) {
 8000fac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000fb6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000fba:	2b0b      	cmp	r3, #11
 8000fbc:	d99d      	bls.n	8000efa <showzifu_dma_scaled+0xe2>
      }

      if (pixelIndex > 0) {
 8000fbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d006      	beq.n	8000fd2 <showzifu_dma_scaled+0x1ba>
          Write_Bytes((unsigned char *)tempBuf, pixelIndex * 2);
 8000fc4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	4619      	mov	r1, r3
 8000fcc:	69b8      	ldr	r0, [r7, #24]
 8000fce:	f7ff fba5 	bl	800071c <Write_Bytes>
 8000fd2:	46b5      	mov	sp, r6
      }
  }
 8000fd4:	bf00      	nop
 8000fd6:	373c      	adds	r7, #60	; 0x3c
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fde:	bf00      	nop
 8000fe0:	24000000 	.word	0x24000000

08000fe4 <showzifustr_scaled>:

  void showzifustr_scaled(unsigned int x, unsigned int y, unsigned char *str, unsigned int dcolor, unsigned int bgcolor, unsigned int scale, unsigned int space)
  {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	603b      	str	r3, [r7, #0]
      unsigned int x1 = x;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	617b      	str	r3, [r7, #20]
      unsigned int y1 = y;
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	613b      	str	r3, [r7, #16]
      while (*str != '\0') {
 8000ffa:	e011      	b.n	8001020 <showzifustr_scaled+0x3c>
          showzifu_dma_scaled(x1, y1, *str, dcolor, bgcolor, scale);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	781a      	ldrb	r2, [r3, #0]
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	9301      	str	r3, [sp, #4]
 8001004:	6a3b      	ldr	r3, [r7, #32]
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	6939      	ldr	r1, [r7, #16]
 800100c:	6978      	ldr	r0, [r7, #20]
 800100e:	f7ff ff03 	bl	8000e18 <showzifu_dma_scaled>
          x1 += space;
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001016:	4413      	add	r3, r2
 8001018:	617b      	str	r3, [r7, #20]
          str++;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3301      	adds	r3, #1
 800101e:	607b      	str	r3, [r7, #4]
      while (*str != '\0') {
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1e9      	bne.n	8000ffc <showzifustr_scaled+0x18>
      }
  }
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103a:	f003 fe25 	bl	8004c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103e:	f000 fb2b 	bl	8001698 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001042:	f000 fbab 	bl	800179c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001046:	f001 f977 	bl	8002338 <MX_GPIO_Init>
  MX_DMA_Init();
 800104a:	f001 f8ff 	bl	800224c <MX_DMA_Init>
  MX_ADC2_Init();
 800104e:	f000 fc4b 	bl	80018e8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001052:	f000 fcad 	bl	80019b0 <MX_ADC3_Init>
  MX_ETH_Init();
 8001056:	f000 fd0d 	bl	8001a74 <MX_ETH_Init>
  MX_FDCAN1_Init();
 800105a:	f000 fd57 	bl	8001b0c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800105e:	f000 fdb9 	bl	8001bd4 <MX_FDCAN2_Init>
  MX_FMC_Init();
 8001062:	f001 f91b 	bl	800229c <MX_FMC_Init>
  MX_LTDC_Init();
 8001066:	f000 fe59 	bl	8001d1c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800106a:	f000 ff09 	bl	8001e80 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800106e:	f000 ff33 	bl	8001ed8 <MX_RTC_Init>
  MX_SAI2_Init();
 8001072:	f000 ff59 	bl	8001f28 <MX_SAI2_Init>
  MX_SPI2_Init();
 8001076:	f001 f815 	bl	80020a4 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 800107a:	f001 f869 	bl	8002150 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800107e:	f001 f8b3 	bl	80021e8 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8001082:	f000 fbbb 	bl	80017fc <MX_ADC1_Init>
  MX_I2C4_Init();
 8001086:	f000 fe09 	bl	8001c9c <MX_I2C4_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //Display init
  GC9A01_Initial();
 800108a:	f7ff fb87 	bl	800079c <GC9A01_Initial>
  ClearScreen2(0x0000);
 800108e:	2000      	movs	r0, #0
 8001090:	f7ff fdd6 	bl	8000c40 <ClearScreen2>

  showzifustr_scaled(66, 100-20, "Prisloni", 0xFFFF, 0x0000,2,15);
 8001094:	230f      	movs	r3, #15
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	2302      	movs	r3, #2
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	2300      	movs	r3, #0
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010a4:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <main+0xa4>)
 80010a6:	2150      	movs	r1, #80	; 0x50
 80010a8:	2042      	movs	r0, #66	; 0x42
 80010aa:	f7ff ff9b 	bl	8000fe4 <showzifustr_scaled>
  showzifustr_scaled(96, 100+20, "prst", 0xFFFF, 0x0000,2,15);
 80010ae:	230f      	movs	r3, #15
 80010b0:	9302      	str	r3, [sp, #8]
 80010b2:	2302      	movs	r3, #2
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	2300      	movs	r3, #0
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010be:	4a07      	ldr	r2, [pc, #28]	; (80010dc <main+0xa8>)
 80010c0:	2178      	movs	r1, #120	; 0x78
 80010c2:	2060      	movs	r0, #96	; 0x60
 80010c4:	f7ff ff8e 	bl	8000fe4 <showzifustr_scaled>

  application_init();
 80010c8:	f000 f80c 	bl	80010e4 <application_init>
  counter = 0;
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <main+0xac>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]


  while (1)
  {
	  application_task();
 80010d2:	f000 f867 	bl	80011a4 <application_task>
 80010d6:	e7fc      	b.n	80010d2 <main+0x9e>
 80010d8:	080124b4 	.word	0x080124b4
 80010dc:	080124c0 	.word	0x080124c0
 80010e0:	240017ac 	.word	0x240017ac

080010e4 <application_init>:
  }
}

void application_init ( void )
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
	oximeter5_init();
 80010ea:	f001 faf9 	bl	80026e0 <oximeter5_init>
	HAL_Delay(100);
 80010ee:	2064      	movs	r0, #100	; 0x64
 80010f0:	f003 fe5c 	bl	8004dac <HAL_Delay>

	oximeter5_default_cfg();
 80010f4:	f001 fb3e 	bl	8002774 <oximeter5_default_cfg>
	HAL_Delay(100);
 80010f8:	2064      	movs	r0, #100	; 0x64
 80010fa:	f003 fe57 	bl	8004dac <HAL_Delay>

    un_brightness = 0;
 80010fe:	4b23      	ldr	r3, [pc, #140]	; (800118c <application_init+0xa8>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
    un_min = 0x3FFFF;
 8001104:	4b22      	ldr	r3, [pc, #136]	; (8001190 <application_init+0xac>)
 8001106:	4a23      	ldr	r2, [pc, #140]	; (8001194 <application_init+0xb0>)
 8001108:	601a      	str	r2, [r3, #0]
    un_max = 0;
 800110a:	4b23      	ldr	r3, [pc, #140]	; (8001198 <application_init+0xb4>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]

    for ( uint8_t n_cnt = 0; n_cnt < 100; n_cnt++ )
 8001110:	2300      	movs	r3, #0
 8001112:	71fb      	strb	r3, [r7, #7]
 8001114:	e030      	b.n	8001178 <application_init+0x94>
    {
        while ( oximeter5_check_interrupt() == OXIMETER5_INTERRUPT_ACTIVE );
 8001116:	bf00      	nop
 8001118:	f001 fc5e 	bl	80029d8 <oximeter5_check_interrupt>
 800111c:	4603      	mov	r3, r0
 800111e:	2b01      	cmp	r3, #1
 8001120:	d0fa      	beq.n	8001118 <application_init+0x34>

        oximeter5_read_sensor_data(&aun_ir_buffer[ n_cnt ], &aun_red_buffer[ n_cnt ] );
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4a1d      	ldr	r2, [pc, #116]	; (800119c <application_init+0xb8>)
 8001128:	441a      	add	r2, r3
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	491c      	ldr	r1, [pc, #112]	; (80011a0 <application_init+0xbc>)
 8001130:	440b      	add	r3, r1
 8001132:	4619      	mov	r1, r3
 8001134:	4610      	mov	r0, r2
 8001136:	f001 fcdd 	bl	8002af4 <oximeter5_read_sensor_data>

        if ( un_min > aun_red_buffer[ n_cnt ] )
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	4a18      	ldr	r2, [pc, #96]	; (80011a0 <application_init+0xbc>)
 800113e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <application_init+0xac>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	d205      	bcs.n	8001156 <application_init+0x72>
        {
            un_min = aun_red_buffer[ n_cnt ];
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <application_init+0xbc>)
 800114e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001152:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <application_init+0xac>)
 8001154:	6013      	str	r3, [r2, #0]
        }

        if ( un_max < aun_red_buffer[ n_cnt ] )
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4a11      	ldr	r2, [pc, #68]	; (80011a0 <application_init+0xbc>)
 800115a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <application_init+0xb4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	d905      	bls.n	8001172 <application_init+0x8e>
        {
            un_max = aun_red_buffer[ n_cnt ];
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <application_init+0xbc>)
 800116a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <application_init+0xb4>)
 8001170:	6013      	str	r3, [r2, #0]
    for ( uint8_t n_cnt = 0; n_cnt < 100; n_cnt++ )
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	3301      	adds	r3, #1
 8001176:	71fb      	strb	r3, [r7, #7]
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	2b63      	cmp	r3, #99	; 0x63
 800117c:	d9cb      	bls.n	8001116 <application_init+0x32>
        }
    }
    HAL_Delay(100);
 800117e:	2064      	movs	r0, #100	; 0x64
 8001180:	f003 fe14 	bl	8004dac <HAL_Delay>
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	24001718 	.word	0x24001718
 8001190:	2400170c 	.word	0x2400170c
 8001194:	0003ffff 	.word	0x0003ffff
 8001198:	24001710 	.word	0x24001710
 800119c:	240013ec 	.word	0x240013ec
 80011a0:	2400157c 	.word	0x2400157c

080011a4 <application_task>:

void application_task ( void )
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af04      	add	r7, sp, #16
	oximeter5_get_oxygen_saturation(&aun_ir_buffer[ 0 ], 100, &aun_red_buffer[ 0 ], &n_spo2 );
 80011aa:	4b69      	ldr	r3, [pc, #420]	; (8001350 <application_task+0x1ac>)
 80011ac:	4a69      	ldr	r2, [pc, #420]	; (8001354 <application_task+0x1b0>)
 80011ae:	2164      	movs	r1, #100	; 0x64
 80011b0:	4869      	ldr	r0, [pc, #420]	; (8001358 <application_task+0x1b4>)
 80011b2:	f001 fcf3 	bl	8002b9c <oximeter5_get_oxygen_saturation>
	oximeter5_get_heart_rate( &aun_ir_buffer[ 0 ], 100, &aun_red_buffer[ 0 ], &n_heart_rate );
 80011b6:	4b69      	ldr	r3, [pc, #420]	; (800135c <application_task+0x1b8>)
 80011b8:	4a66      	ldr	r2, [pc, #408]	; (8001354 <application_task+0x1b0>)
 80011ba:	2164      	movs	r1, #100	; 0x64
 80011bc:	4866      	ldr	r0, [pc, #408]	; (8001358 <application_task+0x1b4>)
 80011be:	f002 f84f 	bl	8003260 <oximeter5_get_heart_rate>

	if (n_spo2 <= 100 && n_heart_rate > 40 && n_heart_rate < 180) {
 80011c2:	4b63      	ldr	r3, [pc, #396]	; (8001350 <application_task+0x1ac>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d819      	bhi.n	80011fe <application_task+0x5a>
 80011ca:	4b64      	ldr	r3, [pc, #400]	; (800135c <application_task+0x1b8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b28      	cmp	r3, #40	; 0x28
 80011d0:	dd15      	ble.n	80011fe <application_task+0x5a>
 80011d2:	4b62      	ldr	r3, [pc, #392]	; (800135c <application_task+0x1b8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2bb3      	cmp	r3, #179	; 0xb3
 80011d8:	dc11      	bgt.n	80011fe <application_task+0x5a>
		spo2_array[counter] = n_spo2;
 80011da:	4b61      	ldr	r3, [pc, #388]	; (8001360 <application_task+0x1bc>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a5c      	ldr	r2, [pc, #368]	; (8001350 <application_task+0x1ac>)
 80011e0:	7811      	ldrb	r1, [r2, #0]
 80011e2:	4a60      	ldr	r2, [pc, #384]	; (8001364 <application_task+0x1c0>)
 80011e4:	54d1      	strb	r1, [r2, r3]
		hr_array[counter] = n_heart_rate;
 80011e6:	4b5e      	ldr	r3, [pc, #376]	; (8001360 <application_task+0x1bc>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a5c      	ldr	r2, [pc, #368]	; (800135c <application_task+0x1b8>)
 80011ec:	6812      	ldr	r2, [r2, #0]
 80011ee:	495e      	ldr	r1, [pc, #376]	; (8001368 <application_task+0x1c4>)
 80011f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		counter++;
 80011f4:	4b5a      	ldr	r3, [pc, #360]	; (8001360 <application_task+0x1bc>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	4a59      	ldr	r2, [pc, #356]	; (8001360 <application_task+0x1bc>)
 80011fc:	6013      	str	r3, [r2, #0]

	}

    for ( uint8_t n_cnt = 25; n_cnt < 100; n_cnt++ )
 80011fe:	2319      	movs	r3, #25
 8001200:	71fb      	strb	r3, [r7, #7]
 8001202:	e030      	b.n	8001266 <application_task+0xc2>
    {
        aun_red_buffer[ n_cnt - 25 ] = aun_red_buffer[ n_cnt ];
 8001204:	79fa      	ldrb	r2, [r7, #7]
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	3b19      	subs	r3, #25
 800120a:	4952      	ldr	r1, [pc, #328]	; (8001354 <application_task+0x1b0>)
 800120c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001210:	4950      	ldr	r1, [pc, #320]	; (8001354 <application_task+0x1b0>)
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        aun_ir_buffer[ n_cnt - 25 ] = aun_ir_buffer[ n_cnt ];
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	3b19      	subs	r3, #25
 800121c:	494e      	ldr	r1, [pc, #312]	; (8001358 <application_task+0x1b4>)
 800121e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001222:	494d      	ldr	r1, [pc, #308]	; (8001358 <application_task+0x1b4>)
 8001224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        if ( un_min > aun_red_buffer[ n_cnt ] )
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	4a4a      	ldr	r2, [pc, #296]	; (8001354 <application_task+0x1b0>)
 800122c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001230:	4b4e      	ldr	r3, [pc, #312]	; (800136c <application_task+0x1c8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	429a      	cmp	r2, r3
 8001236:	d205      	bcs.n	8001244 <application_task+0xa0>
        {
            un_min = aun_red_buffer[ n_cnt ];
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	4a46      	ldr	r2, [pc, #280]	; (8001354 <application_task+0x1b0>)
 800123c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001240:	4a4a      	ldr	r2, [pc, #296]	; (800136c <application_task+0x1c8>)
 8001242:	6013      	str	r3, [r2, #0]
        }

        if ( un_max < aun_red_buffer[ n_cnt ] )
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	4a43      	ldr	r2, [pc, #268]	; (8001354 <application_task+0x1b0>)
 8001248:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800124c:	4b48      	ldr	r3, [pc, #288]	; (8001370 <application_task+0x1cc>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	d905      	bls.n	8001260 <application_task+0xbc>
        {
            un_max=aun_red_buffer[n_cnt];
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	4a3f      	ldr	r2, [pc, #252]	; (8001354 <application_task+0x1b0>)
 8001258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125c:	4a44      	ldr	r2, [pc, #272]	; (8001370 <application_task+0x1cc>)
 800125e:	6013      	str	r3, [r2, #0]
    for ( uint8_t n_cnt = 25; n_cnt < 100; n_cnt++ )
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	3301      	adds	r3, #1
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b63      	cmp	r3, #99	; 0x63
 800126a:	d9cb      	bls.n	8001204 <application_task+0x60>
        }
    }

    for ( uint8_t n_cnt = 75; n_cnt < 100; n_cnt++ )
 800126c:	234b      	movs	r3, #75	; 0x4b
 800126e:	71bb      	strb	r3, [r7, #6]
 8001270:	e0ca      	b.n	8001408 <application_task+0x264>
    {
        un_prev_data = aun_red_buffer[ n_cnt - 1 ];
 8001272:	79bb      	ldrb	r3, [r7, #6]
 8001274:	3b01      	subs	r3, #1
 8001276:	4a37      	ldr	r2, [pc, #220]	; (8001354 <application_task+0x1b0>)
 8001278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127c:	4a3d      	ldr	r2, [pc, #244]	; (8001374 <application_task+0x1d0>)
 800127e:	6013      	str	r3, [r2, #0]
        while ( oximeter5_check_interrupt() == OXIMETER5_INTERRUPT_ACTIVE );
 8001280:	bf00      	nop
 8001282:	f001 fba9 	bl	80029d8 <oximeter5_check_interrupt>
 8001286:	4603      	mov	r3, r0
 8001288:	2b01      	cmp	r3, #1
 800128a:	d0fa      	beq.n	8001282 <application_task+0xde>

        oximeter5_read_sensor_data(&aun_ir_buffer[ n_cnt ], &aun_red_buffer[ n_cnt ]);
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4a31      	ldr	r2, [pc, #196]	; (8001358 <application_task+0x1b4>)
 8001292:	441a      	add	r2, r3
 8001294:	79bb      	ldrb	r3, [r7, #6]
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	492e      	ldr	r1, [pc, #184]	; (8001354 <application_task+0x1b0>)
 800129a:	440b      	add	r3, r1
 800129c:	4619      	mov	r1, r3
 800129e:	4610      	mov	r0, r2
 80012a0:	f001 fc28 	bl	8002af4 <oximeter5_read_sensor_data>

        if ( aun_red_buffer[ n_cnt ] > un_prev_data )
 80012a4:	79bb      	ldrb	r3, [r7, #6]
 80012a6:	4a2b      	ldr	r2, [pc, #172]	; (8001354 <application_task+0x1b0>)
 80012a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012ac:	4b31      	ldr	r3, [pc, #196]	; (8001374 <application_task+0x1d0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d967      	bls.n	8001384 <application_task+0x1e0>
        {
            f_temp = aun_red_buffer[ n_cnt ]-un_prev_data;
 80012b4:	79bb      	ldrb	r3, [r7, #6]
 80012b6:	4a27      	ldr	r2, [pc, #156]	; (8001354 <application_task+0x1b0>)
 80012b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012bc:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <application_task+0x1d0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ca:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <application_task+0x1d4>)
 80012cc:	edc3 7a00 	vstr	s15, [r3]
            f_temp /= ( un_max - un_min );
 80012d0:	4b29      	ldr	r3, [pc, #164]	; (8001378 <application_task+0x1d4>)
 80012d2:	edd3 6a00 	vldr	s13, [r3]
 80012d6:	4b26      	ldr	r3, [pc, #152]	; (8001370 <application_task+0x1cc>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <application_task+0x1c8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	ee07 3a90 	vmov	s15, r3
 80012e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ec:	4b22      	ldr	r3, [pc, #136]	; (8001378 <application_task+0x1d4>)
 80012ee:	edc3 7a00 	vstr	s15, [r3]
            f_temp *= MAX_BRIGHTNESS;
 80012f2:	4b21      	ldr	r3, [pc, #132]	; (8001378 <application_task+0x1d4>)
 80012f4:	edd3 7a00 	vldr	s15, [r3]
 80012f8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800137c <application_task+0x1d8>
 80012fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001300:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <application_task+0x1d4>)
 8001302:	edc3 7a00 	vstr	s15, [r3]
            f_temp = un_brightness - f_temp;
 8001306:	4b1e      	ldr	r3, [pc, #120]	; (8001380 <application_task+0x1dc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <application_task+0x1d4>)
 8001314:	edd3 7a00 	vldr	s15, [r3]
 8001318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <application_task+0x1d4>)
 800131e:	edc3 7a00 	vstr	s15, [r3]

            if ( f_temp < 0 )
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <application_task+0x1d4>)
 8001324:	edd3 7a00 	vldr	s15, [r3]
 8001328:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800132c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001330:	d503      	bpl.n	800133a <application_task+0x196>
            {
                un_brightness = 0;
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <application_task+0x1dc>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	e060      	b.n	80013fc <application_task+0x258>
            }
            else
            {
                un_brightness = ( uint32_t ) f_temp;
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <application_task+0x1d4>)
 800133c:	edd3 7a00 	vldr	s15, [r3]
 8001340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001344:	ee17 2a90 	vmov	r2, s15
 8001348:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <application_task+0x1dc>)
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	e056      	b.n	80013fc <application_task+0x258>
 800134e:	bf00      	nop
 8001350:	24001720 	.word	0x24001720
 8001354:	2400157c 	.word	0x2400157c
 8001358:	240013ec 	.word	0x240013ec
 800135c:	24001724 	.word	0x24001724
 8001360:	240017ac 	.word	0x240017ac
 8001364:	2400172c 	.word	0x2400172c
 8001368:	24001748 	.word	0x24001748
 800136c:	2400170c 	.word	0x2400170c
 8001370:	24001710 	.word	0x24001710
 8001374:	24001714 	.word	0x24001714
 8001378:	2400171c 	.word	0x2400171c
 800137c:	437f0000 	.word	0x437f0000
 8001380:	24001718 	.word	0x24001718
            }
        }
        else
        {
            f_temp = un_prev_data - aun_red_buffer[ n_cnt ];
 8001384:	4b57      	ldr	r3, [pc, #348]	; (80014e4 <application_task+0x340>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	79bb      	ldrb	r3, [r7, #6]
 800138a:	4957      	ldr	r1, [pc, #348]	; (80014e8 <application_task+0x344>)
 800138c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800139a:	4b54      	ldr	r3, [pc, #336]	; (80014ec <application_task+0x348>)
 800139c:	edc3 7a00 	vstr	s15, [r3]
            f_temp /= ( un_max - un_min );
 80013a0:	4b52      	ldr	r3, [pc, #328]	; (80014ec <application_task+0x348>)
 80013a2:	edd3 6a00 	vldr	s13, [r3]
 80013a6:	4b52      	ldr	r3, [pc, #328]	; (80014f0 <application_task+0x34c>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	4b52      	ldr	r3, [pc, #328]	; (80014f4 <application_task+0x350>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	ee07 3a90 	vmov	s15, r3
 80013b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013bc:	4b4b      	ldr	r3, [pc, #300]	; (80014ec <application_task+0x348>)
 80013be:	edc3 7a00 	vstr	s15, [r3]
            f_temp *= MAX_BRIGHTNESS;
 80013c2:	4b4a      	ldr	r3, [pc, #296]	; (80014ec <application_task+0x348>)
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80014f8 <application_task+0x354>
 80013cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d0:	4b46      	ldr	r3, [pc, #280]	; (80014ec <application_task+0x348>)
 80013d2:	edc3 7a00 	vstr	s15, [r3]
            un_brightness += ( uint32_t ) f_temp;
 80013d6:	4b45      	ldr	r3, [pc, #276]	; (80014ec <application_task+0x348>)
 80013d8:	edd3 7a00 	vldr	s15, [r3]
 80013dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e0:	ee17 2a90 	vmov	r2, s15
 80013e4:	4b45      	ldr	r3, [pc, #276]	; (80014fc <application_task+0x358>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4413      	add	r3, r2
 80013ea:	4a44      	ldr	r2, [pc, #272]	; (80014fc <application_task+0x358>)
 80013ec:	6013      	str	r3, [r2, #0]

            if ( un_brightness > MAX_BRIGHTNESS )
 80013ee:	4b43      	ldr	r3, [pc, #268]	; (80014fc <application_task+0x358>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2bff      	cmp	r3, #255	; 0xff
 80013f4:	d902      	bls.n	80013fc <application_task+0x258>
            {
                un_brightness = MAX_BRIGHTNESS;
 80013f6:	4b41      	ldr	r3, [pc, #260]	; (80014fc <application_task+0x358>)
 80013f8:	22ff      	movs	r2, #255	; 0xff
 80013fa:	601a      	str	r2, [r3, #0]
            }
        }

        oximeter5_read_temperature(&f_temp);
 80013fc:	483b      	ldr	r0, [pc, #236]	; (80014ec <application_task+0x348>)
 80013fe:	f001 fb0f 	bl	8002a20 <oximeter5_read_temperature>
    for ( uint8_t n_cnt = 75; n_cnt < 100; n_cnt++ )
 8001402:	79bb      	ldrb	r3, [r7, #6]
 8001404:	3301      	adds	r3, #1
 8001406:	71bb      	strb	r3, [r7, #6]
 8001408:	79bb      	ldrb	r3, [r7, #6]
 800140a:	2b63      	cmp	r3, #99	; 0x63
 800140c:	f67f af31 	bls.w	8001272 <application_task+0xce>
    }

    if (counter == 25) {
 8001410:	4b3b      	ldr	r3, [pc, #236]	; (8001500 <application_task+0x35c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b19      	cmp	r3, #25
 8001416:	d160      	bne.n	80014da <application_task+0x336>
    	ClearScreen2(0x0000);
 8001418:	2000      	movs	r0, #0
 800141a:	f7ff fc11 	bl	8000c40 <ClearScreen2>
		max_spo2 = maxSpo2(spo2_array, (sizeof(spo2_array) / sizeof(spo2_array[0])));
 800141e:	2119      	movs	r1, #25
 8001420:	4838      	ldr	r0, [pc, #224]	; (8001504 <application_task+0x360>)
 8001422:	f000 f887 	bl	8001534 <maxSpo2>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	4b37      	ldr	r3, [pc, #220]	; (8001508 <application_task+0x364>)
 800142c:	701a      	strb	r2, [r3, #0]
		valid_heart_rate = getHeartRate(hr_array, (sizeof(hr_array) / sizeof(hr_array[0])));
 800142e:	2119      	movs	r1, #25
 8001430:	4836      	ldr	r0, [pc, #216]	; (800150c <application_task+0x368>)
 8001432:	f000 f8a8 	bl	8001586 <getHeartRate>
 8001436:	4603      	mov	r3, r0
 8001438:	4a35      	ldr	r2, [pc, #212]	; (8001510 <application_task+0x36c>)
 800143a:	6013      	str	r3, [r2, #0]

	    sprintf(pulse_str, "HR: %d", valid_heart_rate);
 800143c:	4b34      	ldr	r3, [pc, #208]	; (8001510 <application_task+0x36c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4934      	ldr	r1, [pc, #208]	; (8001514 <application_task+0x370>)
 8001444:	4834      	ldr	r0, [pc, #208]	; (8001518 <application_task+0x374>)
 8001446:	f010 fb85 	bl	8011b54 <siprintf>
	    sprintf(spo2_str, "SpO2: %d%%", max_spo2);
 800144a:	4b2f      	ldr	r3, [pc, #188]	; (8001508 <application_task+0x364>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	4932      	ldr	r1, [pc, #200]	; (800151c <application_task+0x378>)
 8001452:	4833      	ldr	r0, [pc, #204]	; (8001520 <application_task+0x37c>)
 8001454:	f010 fb7e 	bl	8011b54 <siprintf>
	    showzifustr_scaled(60, 100 - 20, pulse_str, 0xFFFF, 0x0000, 2, 15);
 8001458:	230f      	movs	r3, #15
 800145a:	9302      	str	r3, [sp, #8]
 800145c:	2302      	movs	r3, #2
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	2300      	movs	r3, #0
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001468:	4a2b      	ldr	r2, [pc, #172]	; (8001518 <application_task+0x374>)
 800146a:	2150      	movs	r1, #80	; 0x50
 800146c:	203c      	movs	r0, #60	; 0x3c
 800146e:	f7ff fdb9 	bl	8000fe4 <showzifustr_scaled>
	    showzifustr_scaled(60, 100 + 20, spo2_str, 0xFFFF, 0x0000, 2, 15);
 8001472:	230f      	movs	r3, #15
 8001474:	9302      	str	r3, [sp, #8]
 8001476:	2302      	movs	r3, #2
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	2300      	movs	r3, #0
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001482:	4a27      	ldr	r2, [pc, #156]	; (8001520 <application_task+0x37c>)
 8001484:	2178      	movs	r1, #120	; 0x78
 8001486:	203c      	movs	r0, #60	; 0x3c
 8001488:	f7ff fdac 	bl	8000fe4 <showzifustr_scaled>

		snprintf(SendBuffer,BUFSIZE,"\tSPO2: %u %%\r\n", max_spo2);
 800148c:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <application_task+0x364>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4a24      	ldr	r2, [pc, #144]	; (8001524 <application_task+0x380>)
 8001492:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001496:	4824      	ldr	r0, [pc, #144]	; (8001528 <application_task+0x384>)
 8001498:	f010 fb28 	bl	8011aec <sniprintf>
		HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 800149c:	4822      	ldr	r0, [pc, #136]	; (8001528 <application_task+0x384>)
 800149e:	f7fe ff1f 	bl	80002e0 <strlen>
 80014a2:	4603      	mov	r3, r0
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	2364      	movs	r3, #100	; 0x64
 80014a8:	491f      	ldr	r1, [pc, #124]	; (8001528 <application_task+0x384>)
 80014aa:	4820      	ldr	r0, [pc, #128]	; (800152c <application_task+0x388>)
 80014ac:	f00e fe39 	bl	8010122 <HAL_UART_Transmit>

		snprintf(SendBuffer,BUFSIZE,"\tHR: %ld %\r\n", valid_heart_rate);
 80014b0:	4b17      	ldr	r3, [pc, #92]	; (8001510 <application_task+0x36c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a1e      	ldr	r2, [pc, #120]	; (8001530 <application_task+0x38c>)
 80014b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ba:	481b      	ldr	r0, [pc, #108]	; (8001528 <application_task+0x384>)
 80014bc:	f010 fb16 	bl	8011aec <sniprintf>
		HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 80014c0:	4819      	ldr	r0, [pc, #100]	; (8001528 <application_task+0x384>)
 80014c2:	f7fe ff0d 	bl	80002e0 <strlen>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	2364      	movs	r3, #100	; 0x64
 80014cc:	4916      	ldr	r1, [pc, #88]	; (8001528 <application_task+0x384>)
 80014ce:	4817      	ldr	r0, [pc, #92]	; (800152c <application_task+0x388>)
 80014d0:	f00e fe27 	bl	8010122 <HAL_UART_Transmit>
		counter = 0;
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <application_task+0x35c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
	}
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	24001714 	.word	0x24001714
 80014e8:	2400157c 	.word	0x2400157c
 80014ec:	2400171c 	.word	0x2400171c
 80014f0:	24001710 	.word	0x24001710
 80014f4:	2400170c 	.word	0x2400170c
 80014f8:	437f0000 	.word	0x437f0000
 80014fc:	24001718 	.word	0x24001718
 8001500:	240017ac 	.word	0x240017ac
 8001504:	2400172c 	.word	0x2400172c
 8001508:	24001721 	.word	0x24001721
 800150c:	24001748 	.word	0x24001748
 8001510:	24001728 	.word	0x24001728
 8001514:	080124c8 	.word	0x080124c8
 8001518:	240017b0 	.word	0x240017b0
 800151c:	080124d0 	.word	0x080124d0
 8001520:	240017bc 	.word	0x240017bc
 8001524:	080124dc 	.word	0x080124dc
 8001528:	240012ec 	.word	0x240012ec
 800152c:	24000d18 	.word	0x24000d18
 8001530:	080124ec 	.word	0x080124ec

08001534 <maxSpo2>:

uint8_t maxSpo2(uint8_t *array, int size) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
	uint8_t max = array[0];
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 1; i < size; i++) {
 8001544:	2301      	movs	r3, #1
 8001546:	73bb      	strb	r3, [r7, #14]
 8001548:	e00e      	b.n	8001568 <maxSpo2+0x34>
		if (max < array[i])
 800154a:	7bbb      	ldrb	r3, [r7, #14]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	4413      	add	r3, r2
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	7bfa      	ldrb	r2, [r7, #15]
 8001554:	429a      	cmp	r2, r3
 8001556:	d204      	bcs.n	8001562 <maxSpo2+0x2e>
			max = array[i];
 8001558:	7bbb      	ldrb	r3, [r7, #14]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 1; i < size; i++) {
 8001562:	7bbb      	ldrb	r3, [r7, #14]
 8001564:	3301      	adds	r3, #1
 8001566:	73bb      	strb	r3, [r7, #14]
 8001568:	7bbb      	ldrb	r3, [r7, #14]
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	dcec      	bgt.n	800154a <maxSpo2+0x16>
	}
	memset(array, 0, size);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	2100      	movs	r1, #0
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f010 fb0c 	bl	8011b94 <memset>
	return max;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <getHeartRate>:

int32_t getHeartRate(int32_t *array, int size) {
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	6039      	str	r1, [r7, #0]
	bubbleSort(array, size);
 8001590:	6839      	ldr	r1, [r7, #0]
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 f82e 	bl	80015f4 <bubbleSort>
	if (size % 2 == 0) {
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d11b      	bne.n	80015da <getHeartRate+0x54>
		return (array[size / 2 - 1] + array[size / 2]) / 2;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	da00      	bge.n	80015aa <getHeartRate+0x24>
 80015a8:	3301      	adds	r3, #1
 80015aa:	105b      	asrs	r3, r3, #1
 80015ac:	461a      	mov	r2, r3
 80015ae:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80015b2:	4413      	add	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	da00      	bge.n	80015c4 <getHeartRate+0x3e>
 80015c2:	3301      	adds	r3, #1
 80015c4:	105b      	asrs	r3, r3, #1
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	440b      	add	r3, r1
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	da00      	bge.n	80015d6 <getHeartRate+0x50>
 80015d4:	3301      	adds	r3, #1
 80015d6:	105b      	asrs	r3, r3, #1
 80015d8:	e008      	b.n	80015ec <getHeartRate+0x66>
	} else {
		return array[size / 2];
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	da00      	bge.n	80015e2 <getHeartRate+0x5c>
 80015e0:	3301      	adds	r3, #1
 80015e2:	105b      	asrs	r3, r3, #1
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	681b      	ldr	r3, [r3, #0]
	}
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <bubbleSort>:

void bubbleSort(int32_t *array, int size) {
 80015f4:	b480      	push	{r7}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
    int32_t temp;
    int swapped;

    for (size_t i = 0; i < size - 1; i++) {
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	e03b      	b.n	800167c <bubbleSort+0x88>
        swapped = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
        for (size_t j = 0; j < size - i - 1; j++) {
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	e029      	b.n	8001662 <bubbleSort+0x6e>
            if (array[j] > array[j + 1]) {
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	3301      	adds	r3, #1
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	440b      	add	r3, r1
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	dd19      	ble.n	800165c <bubbleSort+0x68>
                temp = array[j];
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	4413      	add	r3, r2
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	60bb      	str	r3, [r7, #8]
                array[j] = array[j + 1];
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3301      	adds	r3, #1
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	441a      	add	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	440b      	add	r3, r1
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	601a      	str	r2, [r3, #0]
                array[j + 1] = temp;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	3301      	adds	r3, #1
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	4413      	add	r3, r2
 8001654:	68ba      	ldr	r2, [r7, #8]
 8001656:	601a      	str	r2, [r3, #0]
                swapped = 1;
 8001658:	2301      	movs	r3, #1
 800165a:	617b      	str	r3, [r7, #20]
        for (size_t j = 0; j < size - i - 1; j++) {
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3301      	adds	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	3b01      	subs	r3, #1
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	429a      	cmp	r2, r3
 800166e:	d3ce      	bcc.n	800160e <bubbleSort+0x1a>
            }
        }
        if (!swapped) {
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d009      	beq.n	800168a <bubbleSort+0x96>
    for (size_t i = 0; i < size - 1; i++) {
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	3301      	adds	r3, #1
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	3b01      	subs	r3, #1
 8001680:	461a      	mov	r2, r3
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4293      	cmp	r3, r2
 8001686:	d3bd      	bcc.n	8001604 <bubbleSort+0x10>
            break;
        }
    }
}
 8001688:	e000      	b.n	800168c <bubbleSort+0x98>
            break;
 800168a:	bf00      	nop
}
 800168c:	bf00      	nop
 800168e:	371c      	adds	r7, #28
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b09c      	sub	sp, #112	; 0x70
 800169c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a2:	224c      	movs	r2, #76	; 0x4c
 80016a4:	2100      	movs	r1, #0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f010 fa74 	bl	8011b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	2220      	movs	r2, #32
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f010 fa6e 	bl	8011b94 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80016b8:	2002      	movs	r0, #2
 80016ba:	f009 fd09 	bl	800b0d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80016be:	2300      	movs	r3, #0
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	4b34      	ldr	r3, [pc, #208]	; (8001794 <SystemClock_Config+0xfc>)
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	4a33      	ldr	r2, [pc, #204]	; (8001794 <SystemClock_Config+0xfc>)
 80016c8:	f023 0301 	bic.w	r3, r3, #1
 80016cc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80016ce:	4b31      	ldr	r3, [pc, #196]	; (8001794 <SystemClock_Config+0xfc>)
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <SystemClock_Config+0x100>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016e0:	4a2d      	ldr	r2, [pc, #180]	; (8001798 <SystemClock_Config+0x100>)
 80016e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016e6:	6193      	str	r3, [r2, #24]
 80016e8:	4b2b      	ldr	r3, [pc, #172]	; (8001798 <SystemClock_Config+0x100>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016f4:	bf00      	nop
 80016f6:	4b28      	ldr	r3, [pc, #160]	; (8001798 <SystemClock_Config+0x100>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001702:	d1f8      	bne.n	80016f6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001704:	230b      	movs	r3, #11
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001708:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800170e:	2301      	movs	r3, #1
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001712:	2340      	movs	r3, #64	; 0x40
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001716:	2301      	movs	r3, #1
 8001718:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800171a:	2302      	movs	r3, #2
 800171c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800171e:	2302      	movs	r3, #2
 8001720:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8001722:	2316      	movs	r3, #22
 8001724:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8001726:	23a9      	movs	r3, #169	; 0xa9
 8001728:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800172a:	2302      	movs	r3, #2
 800172c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800172e:	2304      	movs	r3, #4
 8001730:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001732:	2302      	movs	r3, #2
 8001734:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8001736:	2300      	movs	r3, #0
 8001738:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800173a:	2300      	movs	r3, #0
 800173c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001746:	4618      	mov	r0, r3
 8001748:	f009 fdc6 	bl	800b2d8 <HAL_RCC_OscConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001752:	f000 ffbf 	bl	80026d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001756:	233f      	movs	r3, #63	; 0x3f
 8001758:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800176a:	2300      	movs	r3, #0
 800176c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2101      	movs	r1, #1
 800177a:	4618      	mov	r0, r3
 800177c:	f00a fa06 	bl	800bb8c <HAL_RCC_ClockConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001786:	f000 ffa5 	bl	80026d4 <Error_Handler>
  }
}
 800178a:	bf00      	nop
 800178c:	3770      	adds	r7, #112	; 0x70
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	58000400 	.word	0x58000400
 8001798:	58024800 	.word	0x58024800

0800179c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b0b0      	sub	sp, #192	; 0xc0
 80017a0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017a2:	463b      	mov	r3, r7
 80017a4:	22c0      	movs	r2, #192	; 0xc0
 80017a6:	2100      	movs	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f010 f9f3 	bl	8011b94 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80017ba:	2302      	movs	r3, #2
 80017bc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80017be:	230c      	movs	r3, #12
 80017c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 80017c2:	2305      	movs	r3, #5
 80017c4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80017c6:	2302      	movs	r3, #2
 80017c8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80017ca:	2302      	movs	r3, #2
 80017cc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80017ce:	23c0      	movs	r3, #192	; 0xc0
 80017d0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80017d2:	2320      	movs	r3, #32
 80017d4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80017da:	2300      	movs	r3, #0
 80017dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017e0:	463b      	mov	r3, r7
 80017e2:	4618      	mov	r0, r3
 80017e4:	f00a fd5e 	bl	800c2a4 <HAL_RCCEx_PeriphCLKConfig>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80017ee:	f000 ff71 	bl	80026d4 <Error_Handler>
  }
}
 80017f2:	bf00      	nop
 80017f4:	37c0      	adds	r7, #192	; 0xc0
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001802:	f107 031c 	add.w	r3, r7, #28
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800180e:	463b      	mov	r3, r7
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
 800181c:	615a      	str	r2, [r3, #20]
 800181e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001820:	4b2f      	ldr	r3, [pc, #188]	; (80018e0 <MX_ADC1_Init+0xe4>)
 8001822:	4a30      	ldr	r2, [pc, #192]	; (80018e4 <MX_ADC1_Init+0xe8>)
 8001824:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001826:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <MX_ADC1_Init+0xe4>)
 8001828:	2200      	movs	r2, #0
 800182a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800182c:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <MX_ADC1_Init+0xe4>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001832:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <MX_ADC1_Init+0xe4>)
 8001834:	2200      	movs	r2, #0
 8001836:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001838:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <MX_ADC1_Init+0xe4>)
 800183a:	2204      	movs	r2, #4
 800183c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800183e:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <MX_ADC1_Init+0xe4>)
 8001840:	2200      	movs	r2, #0
 8001842:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001844:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <MX_ADC1_Init+0xe4>)
 8001846:	2200      	movs	r2, #0
 8001848:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800184a:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <MX_ADC1_Init+0xe4>)
 800184c:	2201      	movs	r2, #1
 800184e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001850:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <MX_ADC1_Init+0xe4>)
 8001852:	2200      	movs	r2, #0
 8001854:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <MX_ADC1_Init+0xe4>)
 8001858:	2200      	movs	r2, #0
 800185a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800185c:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <MX_ADC1_Init+0xe4>)
 800185e:	2200      	movs	r2, #0
 8001860:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001862:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <MX_ADC1_Init+0xe4>)
 8001864:	2200      	movs	r2, #0
 8001866:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001868:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <MX_ADC1_Init+0xe4>)
 800186a:	2200      	movs	r2, #0
 800186c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <MX_ADC1_Init+0xe4>)
 8001870:	2200      	movs	r2, #0
 8001872:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <MX_ADC1_Init+0xe4>)
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800187c:	4818      	ldr	r0, [pc, #96]	; (80018e0 <MX_ADC1_Init+0xe4>)
 800187e:	f003 fc7b 	bl	8005178 <HAL_ADC_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001888:	f000 ff24 	bl	80026d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	4619      	mov	r1, r3
 8001896:	4812      	ldr	r0, [pc, #72]	; (80018e0 <MX_ADC1_Init+0xe4>)
 8001898:	f004 fa92 	bl	8005dc0 <HAL_ADCEx_MultiModeConfigChannel>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80018a2:	f000 ff17 	bl	80026d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018a6:	2301      	movs	r3, #1
 80018a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018aa:	2306      	movs	r3, #6
 80018ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018b2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80018b6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018b8:	2304      	movs	r3, #4
 80018ba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018c4:	463b      	mov	r3, r7
 80018c6:	4619      	mov	r1, r3
 80018c8:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_ADC1_Init+0xe4>)
 80018ca:	f003 fdf7 	bl	80054bc <HAL_ADC_ConfigChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80018d4:	f000 fefe 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	3728      	adds	r7, #40	; 0x28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	240005e8 	.word	0x240005e8
 80018e4:	40022000 	.word	0x40022000

080018e8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
 80018fc:	615a      	str	r2, [r3, #20]
 80018fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001900:	4b29      	ldr	r3, [pc, #164]	; (80019a8 <MX_ADC2_Init+0xc0>)
 8001902:	4a2a      	ldr	r2, [pc, #168]	; (80019ac <MX_ADC2_Init+0xc4>)
 8001904:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001906:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <MX_ADC2_Init+0xc0>)
 8001908:	2200      	movs	r2, #0
 800190a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 800190c:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <MX_ADC2_Init+0xc0>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001912:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <MX_ADC2_Init+0xc0>)
 8001914:	2200      	movs	r2, #0
 8001916:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001918:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <MX_ADC2_Init+0xc0>)
 800191a:	2204      	movs	r2, #4
 800191c:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800191e:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <MX_ADC2_Init+0xc0>)
 8001920:	2200      	movs	r2, #0
 8001922:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001924:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <MX_ADC2_Init+0xc0>)
 8001926:	2200      	movs	r2, #0
 8001928:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 800192a:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <MX_ADC2_Init+0xc0>)
 800192c:	2201      	movs	r2, #1
 800192e:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001930:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <MX_ADC2_Init+0xc0>)
 8001932:	2200      	movs	r2, #0
 8001934:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <MX_ADC2_Init+0xc0>)
 8001938:	2200      	movs	r2, #0
 800193a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <MX_ADC2_Init+0xc0>)
 800193e:	2200      	movs	r2, #0
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <MX_ADC2_Init+0xc0>)
 8001944:	2200      	movs	r2, #0
 8001946:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <MX_ADC2_Init+0xc0>)
 800194a:	2200      	movs	r2, #0
 800194c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <MX_ADC2_Init+0xc0>)
 8001950:	2200      	movs	r2, #0
 8001952:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <MX_ADC2_Init+0xc0>)
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800195c:	4812      	ldr	r0, [pc, #72]	; (80019a8 <MX_ADC2_Init+0xc0>)
 800195e:	f003 fc0b 	bl	8005178 <HAL_ADC_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001968:	f000 feb4 	bl	80026d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800196c:	2301      	movs	r3, #1
 800196e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001970:	2306      	movs	r3, #6
 8001972:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001978:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800197c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800197e:	2304      	movs	r3, #4
 8001980:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	4619      	mov	r1, r3
 800198e:	4806      	ldr	r0, [pc, #24]	; (80019a8 <MX_ADC2_Init+0xc0>)
 8001990:	f003 fd94 	bl	80054bc <HAL_ADC_ConfigChannel>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800199a:	f000 fe9b 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	3720      	adds	r7, #32
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	2400064c 	.word	0x2400064c
 80019ac:	40022100 	.word	0x40022100

080019b0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
 80019c4:	615a      	str	r2, [r3, #20]
 80019c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80019c8:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <MX_ADC3_Init+0xb8>)
 80019ca:	4a28      	ldr	r2, [pc, #160]	; (8001a6c <MX_ADC3_Init+0xbc>)
 80019cc:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80019ce:	4b26      	ldr	r3, [pc, #152]	; (8001a68 <MX_ADC3_Init+0xb8>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <MX_ADC3_Init+0xb8>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019da:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <MX_ADC3_Init+0xb8>)
 80019dc:	2204      	movs	r2, #4
 80019de:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80019e0:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <MX_ADC3_Init+0xb8>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80019e6:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <MX_ADC3_Init+0xb8>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80019ec:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <MX_ADC3_Init+0xb8>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <MX_ADC3_Init+0xb8>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <MX_ADC3_Init+0xb8>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <MX_ADC3_Init+0xb8>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001a04:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <MX_ADC3_Init+0xb8>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a0a:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <MX_ADC3_Init+0xb8>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001a10:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <MX_ADC3_Init+0xb8>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <MX_ADC3_Init+0xb8>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001a1e:	4812      	ldr	r0, [pc, #72]	; (8001a68 <MX_ADC3_Init+0xb8>)
 8001a20:	f003 fbaa 	bl	8005178 <HAL_ADC_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8001a2a:	f000 fe53 	bl	80026d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <MX_ADC3_Init+0xc0>)
 8001a30:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a32:	2306      	movs	r3, #6
 8001a34:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a3a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001a3e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a40:	2304      	movs	r3, #4
 8001a42:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_ADC3_Init+0xb8>)
 8001a52:	f003 fd33 	bl	80054bc <HAL_ADC_ConfigChannel>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001a5c:	f000 fe3a 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001a60:	bf00      	nop
 8001a62:	3720      	adds	r7, #32
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	240006b0 	.word	0x240006b0
 8001a6c:	58026000 	.word	0x58026000
 8001a70:	1d500080 	.word	0x1d500080

08001a74 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001a78:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <MX_ETH_Init+0x80>)
 8001a7a:	4a1f      	ldr	r2, [pc, #124]	; (8001af8 <MX_ETH_Init+0x84>)
 8001a7c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001a7e:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <MX_ETH_Init+0x88>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001a84:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <MX_ETH_Init+0x88>)
 8001a86:	2280      	movs	r2, #128	; 0x80
 8001a88:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001a8a:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <MX_ETH_Init+0x88>)
 8001a8c:	22e1      	movs	r2, #225	; 0xe1
 8001a8e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001a90:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <MX_ETH_Init+0x88>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001a96:	4b19      	ldr	r3, [pc, #100]	; (8001afc <MX_ETH_Init+0x88>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001a9c:	4b17      	ldr	r3, [pc, #92]	; (8001afc <MX_ETH_Init+0x88>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001aa2:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <MX_ETH_Init+0x80>)
 8001aa4:	4a15      	ldr	r2, [pc, #84]	; (8001afc <MX_ETH_Init+0x88>)
 8001aa6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <MX_ETH_Init+0x80>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <MX_ETH_Init+0x80>)
 8001ab0:	4a13      	ldr	r2, [pc, #76]	; (8001b00 <MX_ETH_Init+0x8c>)
 8001ab2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <MX_ETH_Init+0x80>)
 8001ab6:	4a13      	ldr	r2, [pc, #76]	; (8001b04 <MX_ETH_Init+0x90>)
 8001ab8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <MX_ETH_Init+0x80>)
 8001abc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001ac0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001ac2:	480c      	ldr	r0, [pc, #48]	; (8001af4 <MX_ETH_Init+0x80>)
 8001ac4:	f006 fe94 	bl	80087f0 <HAL_ETH_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001ace:	f000 fe01 	bl	80026d4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001ad2:	2238      	movs	r2, #56	; 0x38
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	480c      	ldr	r0, [pc, #48]	; (8001b08 <MX_ETH_Init+0x94>)
 8001ad8:	f010 f85c 	bl	8011b94 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001adc:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <MX_ETH_Init+0x94>)
 8001ade:	2221      	movs	r2, #33	; 0x21
 8001ae0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <MX_ETH_Init+0x94>)
 8001ae4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ae8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <MX_ETH_Init+0x94>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	24000714 	.word	0x24000714
 8001af8:	40028000 	.word	0x40028000
 8001afc:	240017c8 	.word	0x240017c8
 8001b00:	24000534 	.word	0x24000534
 8001b04:	240004d4 	.word	0x240004d4
 8001b08:	240005b0 	.word	0x240005b0

08001b0c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001b10:	4b2e      	ldr	r3, [pc, #184]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b12:	4a2f      	ldr	r2, [pc, #188]	; (8001bd0 <MX_FDCAN1_Init+0xc4>)
 8001b14:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001b16:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001b1c:	4b2b      	ldr	r3, [pc, #172]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001b22:	4b2a      	ldr	r3, [pc, #168]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001b28:	4b28      	ldr	r3, [pc, #160]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001b2e:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001b34:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b36:	2210      	movs	r2, #16
 8001b38:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001b3a:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001b40:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b42:	2202      	movs	r2, #2
 8001b44:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001b46:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b48:	2202      	movs	r2, #2
 8001b4a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001b52:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001b58:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001b70:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001b7c:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b7e:	2204      	movs	r2, #4
 8001b80:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001b88:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001b94:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b96:	2204      	movs	r2, #4
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001bb8:	4804      	ldr	r0, [pc, #16]	; (8001bcc <MX_FDCAN1_Init+0xc0>)
 8001bba:	f007 fa3d 	bl	8009038 <HAL_FDCAN_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001bc4:	f000 fd86 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	240007c4 	.word	0x240007c4
 8001bd0:	4000a000 	.word	0x4000a000

08001bd4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001bd8:	4b2e      	ldr	r3, [pc, #184]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001bda:	4a2f      	ldr	r2, [pc, #188]	; (8001c98 <MX_FDCAN2_Init+0xc4>)
 8001bdc:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001bde:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001be4:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001bea:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001bf0:	4b28      	ldr	r3, [pc, #160]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001bf6:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8001bfc:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001bfe:	2210      	movs	r2, #16
 8001c00:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001c02:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8001c08:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001c0e:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001c10:	2202      	movs	r2, #2
 8001c12:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001c14:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001c20:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001c26:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001c2c:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001c46:	2204      	movs	r2, #4
 8001c48:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001c50:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001c52:	2204      	movs	r2, #4
 8001c54:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001c5c:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001c5e:	2204      	movs	r2, #4
 8001c60:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8001c62:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8001c68:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001c74:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001c7c:	2204      	movs	r2, #4
 8001c7e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001c80:	4804      	ldr	r0, [pc, #16]	; (8001c94 <MX_FDCAN2_Init+0xc0>)
 8001c82:	f007 f9d9 	bl	8009038 <HAL_FDCAN_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8001c8c:	f000 fd22 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	24000864 	.word	0x24000864
 8001c98:	4000a400 	.word	0x4000a400

08001c9c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <MX_I2C4_Init+0x74>)
 8001ca2:	4a1c      	ldr	r2, [pc, #112]	; (8001d14 <MX_I2C4_Init+0x78>)
 8001ca4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <MX_I2C4_Init+0x74>)
 8001ca8:	4a1b      	ldr	r2, [pc, #108]	; (8001d18 <MX_I2C4_Init+0x7c>)
 8001caa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001cac:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <MX_I2C4_Init+0x74>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <MX_I2C4_Init+0x74>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <MX_I2C4_Init+0x74>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001cbe:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <MX_I2C4_Init+0x74>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <MX_I2C4_Init+0x74>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <MX_I2C4_Init+0x74>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <MX_I2C4_Init+0x74>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001cd6:	480e      	ldr	r0, [pc, #56]	; (8001d10 <MX_I2C4_Init+0x74>)
 8001cd8:	f007 fef4 	bl	8009ac4 <HAL_I2C_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001ce2:	f000 fcf7 	bl	80026d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4809      	ldr	r0, [pc, #36]	; (8001d10 <MX_I2C4_Init+0x74>)
 8001cea:	f008 fd69 	bl	800a7c0 <HAL_I2CEx_ConfigAnalogFilter>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001cf4:	f000 fcee 	bl	80026d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <MX_I2C4_Init+0x74>)
 8001cfc:	f008 fdab 	bl	800a856 <HAL_I2CEx_ConfigDigitalFilter>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001d06:	f000 fce5 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	24000904 	.word	0x24000904
 8001d14:	58001c00 	.word	0x58001c00
 8001d18:	10707dbc 	.word	0x10707dbc

08001d1c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b09a      	sub	sp, #104	; 0x68
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001d22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d26:	2234      	movs	r2, #52	; 0x34
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f00f ff32 	bl	8011b94 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001d30:	463b      	mov	r3, r7
 8001d32:	2234      	movs	r2, #52	; 0x34
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f00f ff2c 	bl	8011b94 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001d3c:	4b4e      	ldr	r3, [pc, #312]	; (8001e78 <MX_LTDC_Init+0x15c>)
 8001d3e:	4a4f      	ldr	r2, [pc, #316]	; (8001e7c <MX_LTDC_Init+0x160>)
 8001d40:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001d42:	4b4d      	ldr	r3, [pc, #308]	; (8001e78 <MX_LTDC_Init+0x15c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001d48:	4b4b      	ldr	r3, [pc, #300]	; (8001e78 <MX_LTDC_Init+0x15c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001d4e:	4b4a      	ldr	r3, [pc, #296]	; (8001e78 <MX_LTDC_Init+0x15c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001d54:	4b48      	ldr	r3, [pc, #288]	; (8001e78 <MX_LTDC_Init+0x15c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001d5a:	4b47      	ldr	r3, [pc, #284]	; (8001e78 <MX_LTDC_Init+0x15c>)
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001d60:	4b45      	ldr	r3, [pc, #276]	; (8001e78 <MX_LTDC_Init+0x15c>)
 8001d62:	2203      	movs	r2, #3
 8001d64:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001d66:	4b44      	ldr	r3, [pc, #272]	; (8001e78 <MX_LTDC_Init+0x15c>)
 8001d68:	220e      	movs	r2, #14
 8001d6a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001d6c:	4b42      	ldr	r3, [pc, #264]	; (8001e78 <MX_LTDC_Init+0x15c>)
 8001d6e:	2205      	movs	r2, #5
 8001d70:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001d72:	4b41      	ldr	r3, [pc, #260]	; (8001e78 <MX_LTDC_Init+0x15c>)
 8001d74:	f240 228e 	movw	r2, #654	; 0x28e
 8001d78:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001d7a:	4b3f      	ldr	r3, [pc, #252]	; (8001e78 <MX_LTDC_Init+0x15c>)
 8001d7c:	f240 12e5 	movw	r2, #485	; 0x1e5
 8001d80:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8001d82:	4b3d      	ldr	r3, [pc, #244]	; (8001e78 <MX_LTDC_Init+0x15c>)
 8001d84:	f44f 7225 	mov.w	r2, #660	; 0x294
 8001d88:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001d8a:	4b3b      	ldr	r3, [pc, #236]	; (8001e78 <MX_LTDC_Init+0x15c>)
 8001d8c:	f240 12e7 	movw	r2, #487	; 0x1e7
 8001d90:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001d92:	4b39      	ldr	r3, [pc, #228]	; (8001e78 <MX_LTDC_Init+0x15c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001d9a:	4b37      	ldr	r3, [pc, #220]	; (8001e78 <MX_LTDC_Init+0x15c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001da2:	4b35      	ldr	r3, [pc, #212]	; (8001e78 <MX_LTDC_Init+0x15c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001daa:	4833      	ldr	r0, [pc, #204]	; (8001e78 <MX_LTDC_Init+0x15c>)
 8001dac:	f008 fda0 	bl	800a8f0 <HAL_LTDC_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001db6:	f000 fc8d 	bl	80026d4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dda:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001ddc:	2305      	movs	r3, #5
 8001dde:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001dfe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e02:	2200      	movs	r2, #0
 8001e04:	4619      	mov	r1, r3
 8001e06:	481c      	ldr	r0, [pc, #112]	; (8001e78 <MX_LTDC_Init+0x15c>)
 8001e08:	f008 fe42 	bl	800aa90 <HAL_LTDC_ConfigLayer>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001e12:	f000 fc5f 	bl	80026d4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e36:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001e38:	2305      	movs	r3, #5
 8001e3a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001e5a:	463b      	mov	r3, r7
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4805      	ldr	r0, [pc, #20]	; (8001e78 <MX_LTDC_Init+0x15c>)
 8001e62:	f008 fe15 	bl	800aa90 <HAL_LTDC_ConfigLayer>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001e6c:	f000 fc32 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001e70:	bf00      	nop
 8001e72:	3768      	adds	r7, #104	; 0x68
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	24000958 	.word	0x24000958
 8001e7c:	50001000 	.word	0x50001000

08001e80 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001e84:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <MX_QUADSPI_Init+0x50>)
 8001e86:	4a13      	ldr	r2, [pc, #76]	; (8001ed4 <MX_QUADSPI_Init+0x54>)
 8001e88:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001e8a:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <MX_QUADSPI_Init+0x50>)
 8001e8c:	22ff      	movs	r2, #255	; 0xff
 8001e8e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001e90:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <MX_QUADSPI_Init+0x50>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <MX_QUADSPI_Init+0x50>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <MX_QUADSPI_Init+0x50>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <MX_QUADSPI_Init+0x50>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <MX_QUADSPI_Init+0x50>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <MX_QUADSPI_Init+0x50>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <MX_QUADSPI_Init+0x50>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001eba:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <MX_QUADSPI_Init+0x50>)
 8001ebc:	f009 f952 	bl	800b164 <HAL_QSPI_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001ec6:	f000 fc05 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	24000a00 	.word	0x24000a00
 8001ed4:	52005000 	.word	0x52005000

08001ed8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001edc:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <MX_RTC_Init+0x48>)
 8001ede:	4a11      	ldr	r2, [pc, #68]	; (8001f24 <MX_RTC_Init+0x4c>)
 8001ee0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <MX_RTC_Init+0x48>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <MX_RTC_Init+0x48>)
 8001eea:	227f      	movs	r2, #127	; 0x7f
 8001eec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <MX_RTC_Init+0x48>)
 8001ef0:	22ff      	movs	r2, #255	; 0xff
 8001ef2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <MX_RTC_Init+0x48>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <MX_RTC_Init+0x48>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f00:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <MX_RTC_Init+0x48>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <MX_RTC_Init+0x48>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f0c:	4804      	ldr	r0, [pc, #16]	; (8001f20 <MX_RTC_Init+0x48>)
 8001f0e:	f00c fec7 	bl	800eca0 <HAL_RTC_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001f18:	f000 fbdc 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	24000a4c 	.word	0x24000a4c
 8001f24:	58004000 	.word	0x58004000

08001f28 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001f2c:	4b58      	ldr	r3, [pc, #352]	; (8002090 <MX_SAI2_Init+0x168>)
 8001f2e:	4a59      	ldr	r2, [pc, #356]	; (8002094 <MX_SAI2_Init+0x16c>)
 8001f30:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001f32:	4b57      	ldr	r3, [pc, #348]	; (8002090 <MX_SAI2_Init+0x168>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001f38:	4b55      	ldr	r3, [pc, #340]	; (8002090 <MX_SAI2_Init+0x168>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001f3e:	4b54      	ldr	r3, [pc, #336]	; (8002090 <MX_SAI2_Init+0x168>)
 8001f40:	2240      	movs	r2, #64	; 0x40
 8001f42:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001f44:	4b52      	ldr	r3, [pc, #328]	; (8002090 <MX_SAI2_Init+0x168>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001f4a:	4b51      	ldr	r3, [pc, #324]	; (8002090 <MX_SAI2_Init+0x168>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001f50:	4b4f      	ldr	r3, [pc, #316]	; (8002090 <MX_SAI2_Init+0x168>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001f56:	4b4e      	ldr	r3, [pc, #312]	; (8002090 <MX_SAI2_Init+0x168>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001f5c:	4b4c      	ldr	r3, [pc, #304]	; (8002090 <MX_SAI2_Init+0x168>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001f62:	4b4b      	ldr	r3, [pc, #300]	; (8002090 <MX_SAI2_Init+0x168>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001f68:	4b49      	ldr	r3, [pc, #292]	; (8002090 <MX_SAI2_Init+0x168>)
 8001f6a:	4a4b      	ldr	r2, [pc, #300]	; (8002098 <MX_SAI2_Init+0x170>)
 8001f6c:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001f6e:	4b48      	ldr	r3, [pc, #288]	; (8002090 <MX_SAI2_Init+0x168>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001f74:	4b46      	ldr	r3, [pc, #280]	; (8002090 <MX_SAI2_Init+0x168>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001f7a:	4b45      	ldr	r3, [pc, #276]	; (8002090 <MX_SAI2_Init+0x168>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001f80:	4b43      	ldr	r3, [pc, #268]	; (8002090 <MX_SAI2_Init+0x168>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8001f86:	4b42      	ldr	r3, [pc, #264]	; (8002090 <MX_SAI2_Init+0x168>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 8001f8e:	4b40      	ldr	r3, [pc, #256]	; (8002090 <MX_SAI2_Init+0x168>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001f94:	4b3e      	ldr	r3, [pc, #248]	; (8002090 <MX_SAI2_Init+0x168>)
 8001f96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f9a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001f9c:	4b3c      	ldr	r3, [pc, #240]	; (8002090 <MX_SAI2_Init+0x168>)
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001fa2:	4b3b      	ldr	r3, [pc, #236]	; (8002090 <MX_SAI2_Init+0x168>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001fa8:	4b39      	ldr	r3, [pc, #228]	; (8002090 <MX_SAI2_Init+0x168>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001fae:	4b38      	ldr	r3, [pc, #224]	; (8002090 <MX_SAI2_Init+0x168>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001fb4:	4b36      	ldr	r3, [pc, #216]	; (8002090 <MX_SAI2_Init+0x168>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001fba:	4b35      	ldr	r3, [pc, #212]	; (8002090 <MX_SAI2_Init+0x168>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001fc0:	4b33      	ldr	r3, [pc, #204]	; (8002090 <MX_SAI2_Init+0x168>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001fc6:	4b32      	ldr	r3, [pc, #200]	; (8002090 <MX_SAI2_Init+0x168>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001fcc:	4b30      	ldr	r3, [pc, #192]	; (8002090 <MX_SAI2_Init+0x168>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001fd2:	482f      	ldr	r0, [pc, #188]	; (8002090 <MX_SAI2_Init+0x168>)
 8001fd4:	f00c ff7c 	bl	800eed0 <HAL_SAI_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 8001fde:	f000 fb79 	bl	80026d4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001fe2:	4b2e      	ldr	r3, [pc, #184]	; (800209c <MX_SAI2_Init+0x174>)
 8001fe4:	4a2e      	ldr	r2, [pc, #184]	; (80020a0 <MX_SAI2_Init+0x178>)
 8001fe6:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001fe8:	4b2c      	ldr	r3, [pc, #176]	; (800209c <MX_SAI2_Init+0x174>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001fee:	4b2b      	ldr	r3, [pc, #172]	; (800209c <MX_SAI2_Init+0x174>)
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001ff4:	4b29      	ldr	r3, [pc, #164]	; (800209c <MX_SAI2_Init+0x174>)
 8001ff6:	2240      	movs	r2, #64	; 0x40
 8001ff8:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001ffa:	4b28      	ldr	r3, [pc, #160]	; (800209c <MX_SAI2_Init+0x174>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002000:	4b26      	ldr	r3, [pc, #152]	; (800209c <MX_SAI2_Init+0x174>)
 8002002:	2200      	movs	r2, #0
 8002004:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8002006:	4b25      	ldr	r3, [pc, #148]	; (800209c <MX_SAI2_Init+0x174>)
 8002008:	2201      	movs	r2, #1
 800200a:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800200c:	4b23      	ldr	r3, [pc, #140]	; (800209c <MX_SAI2_Init+0x174>)
 800200e:	2200      	movs	r2, #0
 8002010:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002012:	4b22      	ldr	r3, [pc, #136]	; (800209c <MX_SAI2_Init+0x174>)
 8002014:	2200      	movs	r2, #0
 8002016:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002018:	4b20      	ldr	r3, [pc, #128]	; (800209c <MX_SAI2_Init+0x174>)
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800201e:	4b1f      	ldr	r3, [pc, #124]	; (800209c <MX_SAI2_Init+0x174>)
 8002020:	2200      	movs	r2, #0
 8002022:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002024:	4b1d      	ldr	r3, [pc, #116]	; (800209c <MX_SAI2_Init+0x174>)
 8002026:	2200      	movs	r2, #0
 8002028:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800202a:	4b1c      	ldr	r3, [pc, #112]	; (800209c <MX_SAI2_Init+0x174>)
 800202c:	2200      	movs	r2, #0
 800202e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8002030:	4b1a      	ldr	r3, [pc, #104]	; (800209c <MX_SAI2_Init+0x174>)
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 8002038:	4b18      	ldr	r3, [pc, #96]	; (800209c <MX_SAI2_Init+0x174>)
 800203a:	2201      	movs	r2, #1
 800203c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800203e:	4b17      	ldr	r3, [pc, #92]	; (800209c <MX_SAI2_Init+0x174>)
 8002040:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002044:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <MX_SAI2_Init+0x174>)
 8002048:	2208      	movs	r2, #8
 800204a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <MX_SAI2_Init+0x174>)
 800204e:	2201      	movs	r2, #1
 8002050:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002052:	4b12      	ldr	r3, [pc, #72]	; (800209c <MX_SAI2_Init+0x174>)
 8002054:	2200      	movs	r2, #0
 8002056:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002058:	4b10      	ldr	r3, [pc, #64]	; (800209c <MX_SAI2_Init+0x174>)
 800205a:	2200      	movs	r2, #0
 800205c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800205e:	4b0f      	ldr	r3, [pc, #60]	; (800209c <MX_SAI2_Init+0x174>)
 8002060:	2200      	movs	r2, #0
 8002062:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8002064:	4b0d      	ldr	r3, [pc, #52]	; (800209c <MX_SAI2_Init+0x174>)
 8002066:	2200      	movs	r2, #0
 8002068:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <MX_SAI2_Init+0x174>)
 800206c:	2200      	movs	r2, #0
 800206e:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8002070:	4b0a      	ldr	r3, [pc, #40]	; (800209c <MX_SAI2_Init+0x174>)
 8002072:	2201      	movs	r2, #1
 8002074:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <MX_SAI2_Init+0x174>)
 8002078:	2200      	movs	r2, #0
 800207a:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800207c:	4807      	ldr	r0, [pc, #28]	; (800209c <MX_SAI2_Init+0x174>)
 800207e:	f00c ff27 	bl	800eed0 <HAL_SAI_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 8002088:	f000 fb24 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	24000a70 	.word	0x24000a70
 8002094:	40015c04 	.word	0x40015c04
 8002098:	0002ee00 	.word	0x0002ee00
 800209c:	24000b08 	.word	0x24000b08
 80020a0:	40015c24 	.word	0x40015c24

080020a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80020a8:	4b27      	ldr	r3, [pc, #156]	; (8002148 <MX_SPI2_Init+0xa4>)
 80020aa:	4a28      	ldr	r2, [pc, #160]	; (800214c <MX_SPI2_Init+0xa8>)
 80020ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020ae:	4b26      	ldr	r3, [pc, #152]	; (8002148 <MX_SPI2_Init+0xa4>)
 80020b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80020b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020b6:	4b24      	ldr	r3, [pc, #144]	; (8002148 <MX_SPI2_Init+0xa4>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020bc:	4b22      	ldr	r3, [pc, #136]	; (8002148 <MX_SPI2_Init+0xa4>)
 80020be:	2207      	movs	r2, #7
 80020c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020c2:	4b21      	ldr	r3, [pc, #132]	; (8002148 <MX_SPI2_Init+0xa4>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020c8:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <MX_SPI2_Init+0xa4>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80020ce:	4b1e      	ldr	r3, [pc, #120]	; (8002148 <MX_SPI2_Init+0xa4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80020d4:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <MX_SPI2_Init+0xa4>)
 80020d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020dc:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <MX_SPI2_Init+0xa4>)
 80020de:	2200      	movs	r2, #0
 80020e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020e2:	4b19      	ldr	r3, [pc, #100]	; (8002148 <MX_SPI2_Init+0xa4>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020e8:	4b17      	ldr	r3, [pc, #92]	; (8002148 <MX_SPI2_Init+0xa4>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80020ee:	4b16      	ldr	r3, [pc, #88]	; (8002148 <MX_SPI2_Init+0xa4>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <MX_SPI2_Init+0xa4>)
 80020f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020fa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <MX_SPI2_Init+0xa4>)
 80020fe:	2200      	movs	r2, #0
 8002100:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002102:	4b11      	ldr	r3, [pc, #68]	; (8002148 <MX_SPI2_Init+0xa4>)
 8002104:	2200      	movs	r2, #0
 8002106:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002108:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <MX_SPI2_Init+0xa4>)
 800210a:	2200      	movs	r2, #0
 800210c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <MX_SPI2_Init+0xa4>)
 8002110:	2200      	movs	r2, #0
 8002112:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <MX_SPI2_Init+0xa4>)
 8002116:	2200      	movs	r2, #0
 8002118:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800211a:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <MX_SPI2_Init+0xa4>)
 800211c:	2200      	movs	r2, #0
 800211e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <MX_SPI2_Init+0xa4>)
 8002122:	2200      	movs	r2, #0
 8002124:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <MX_SPI2_Init+0xa4>)
 8002128:	2200      	movs	r2, #0
 800212a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <MX_SPI2_Init+0xa4>)
 800212e:	2200      	movs	r2, #0
 8002130:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002132:	4805      	ldr	r0, [pc, #20]	; (8002148 <MX_SPI2_Init+0xa4>)
 8002134:	f00d f9ec 	bl	800f510 <HAL_SPI_Init>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 800213e:	f000 fac9 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	24000ba0 	.word	0x24000ba0
 800214c:	40003800 	.word	0x40003800

08002150 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002154:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <MX_USART3_UART_Init+0x90>)
 8002156:	4a23      	ldr	r2, [pc, #140]	; (80021e4 <MX_USART3_UART_Init+0x94>)
 8002158:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800215a:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <MX_USART3_UART_Init+0x90>)
 800215c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002160:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002162:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <MX_USART3_UART_Init+0x90>)
 8002164:	2200      	movs	r2, #0
 8002166:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002168:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <MX_USART3_UART_Init+0x90>)
 800216a:	2200      	movs	r2, #0
 800216c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800216e:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <MX_USART3_UART_Init+0x90>)
 8002170:	2200      	movs	r2, #0
 8002172:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <MX_USART3_UART_Init+0x90>)
 8002176:	220c      	movs	r2, #12
 8002178:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800217a:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <MX_USART3_UART_Init+0x90>)
 800217c:	2200      	movs	r2, #0
 800217e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002180:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <MX_USART3_UART_Init+0x90>)
 8002182:	2200      	movs	r2, #0
 8002184:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <MX_USART3_UART_Init+0x90>)
 8002188:	2200      	movs	r2, #0
 800218a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <MX_USART3_UART_Init+0x90>)
 800218e:	2200      	movs	r2, #0
 8002190:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <MX_USART3_UART_Init+0x90>)
 8002194:	2200      	movs	r2, #0
 8002196:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002198:	4811      	ldr	r0, [pc, #68]	; (80021e0 <MX_USART3_UART_Init+0x90>)
 800219a:	f00d ff72 	bl	8010082 <HAL_UART_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80021a4:	f000 fa96 	bl	80026d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021a8:	2100      	movs	r1, #0
 80021aa:	480d      	ldr	r0, [pc, #52]	; (80021e0 <MX_USART3_UART_Init+0x90>)
 80021ac:	f00f f803 	bl	80111b6 <HAL_UARTEx_SetTxFifoThreshold>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80021b6:	f000 fa8d 	bl	80026d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021ba:	2100      	movs	r1, #0
 80021bc:	4808      	ldr	r0, [pc, #32]	; (80021e0 <MX_USART3_UART_Init+0x90>)
 80021be:	f00f f838 	bl	8011232 <HAL_UARTEx_SetRxFifoThreshold>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80021c8:	f000 fa84 	bl	80026d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80021cc:	4804      	ldr	r0, [pc, #16]	; (80021e0 <MX_USART3_UART_Init+0x90>)
 80021ce:	f00e ffb9 	bl	8011144 <HAL_UARTEx_DisableFifoMode>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80021d8:	f000 fa7c 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	24000d18 	.word	0x24000d18
 80021e4:	40004800 	.word	0x40004800

080021e8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80021ec:	4b15      	ldr	r3, [pc, #84]	; (8002244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021ee:	4a16      	ldr	r2, [pc, #88]	; (8002248 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80021f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80021f2:	4b14      	ldr	r3, [pc, #80]	; (8002244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021f4:	2209      	movs	r2, #9
 80021f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021fa:	2202      	movs	r2, #2
 80021fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002200:	2200      	movs	r2, #0
 8002202:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002206:	2202      	movs	r2, #2
 8002208:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800220c:	2200      	movs	r2, #0
 800220e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002212:	2200      	movs	r2, #0
 8002214:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002218:	2200      	movs	r2, #0
 800221a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800221e:	2201      	movs	r2, #1
 8002220:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002224:	2201      	movs	r2, #1
 8002226:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800222a:	2200      	movs	r2, #0
 800222c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800222e:	4805      	ldr	r0, [pc, #20]	; (8002244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002230:	f008 fe06 	bl	800ae40 <HAL_PCD_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800223a:	f000 fa4b 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	24000dac 	.word	0x24000dac
 8002248:	40080000 	.word	0x40080000

0800224c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002252:	4b11      	ldr	r3, [pc, #68]	; (8002298 <MX_DMA_Init+0x4c>)
 8002254:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002258:	4a0f      	ldr	r2, [pc, #60]	; (8002298 <MX_DMA_Init+0x4c>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002262:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <MX_DMA_Init+0x4c>)
 8002264:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002270:	2200      	movs	r2, #0
 8002272:	2100      	movs	r1, #0
 8002274:	200b      	movs	r0, #11
 8002276:	f003 ff5c 	bl	8006132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800227a:	200b      	movs	r0, #11
 800227c:	f003 ff73 	bl	8006166 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002280:	2200      	movs	r2, #0
 8002282:	2100      	movs	r1, #0
 8002284:	200c      	movs	r0, #12
 8002286:	f003 ff54 	bl	8006132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800228a:	200c      	movs	r0, #12
 800228c:	f003 ff6b 	bl	8006166 <HAL_NVIC_EnableIRQ>

}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	58024400 	.word	0x58024400

0800229c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
 80022b0:	615a      	str	r2, [r3, #20]
 80022b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80022b4:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <MX_FMC_Init+0x94>)
 80022b6:	4a1f      	ldr	r2, [pc, #124]	; (8002334 <MX_FMC_Init+0x98>)
 80022b8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80022ba:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <MX_FMC_Init+0x94>)
 80022bc:	2201      	movs	r2, #1
 80022be:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <MX_FMC_Init+0x94>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80022c6:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <MX_FMC_Init+0x94>)
 80022c8:	2204      	movs	r2, #4
 80022ca:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80022cc:	4b18      	ldr	r3, [pc, #96]	; (8002330 <MX_FMC_Init+0x94>)
 80022ce:	2210      	movs	r2, #16
 80022d0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80022d2:	4b17      	ldr	r3, [pc, #92]	; (8002330 <MX_FMC_Init+0x94>)
 80022d4:	2240      	movs	r2, #64	; 0x40
 80022d6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80022d8:	4b15      	ldr	r3, [pc, #84]	; (8002330 <MX_FMC_Init+0x94>)
 80022da:	2280      	movs	r2, #128	; 0x80
 80022dc:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80022de:	4b14      	ldr	r3, [pc, #80]	; (8002330 <MX_FMC_Init+0x94>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80022e4:	4b12      	ldr	r3, [pc, #72]	; (8002330 <MX_FMC_Init+0x94>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80022ea:	4b11      	ldr	r3, [pc, #68]	; (8002330 <MX_FMC_Init+0x94>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80022f0:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <MX_FMC_Init+0x94>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80022f6:	2310      	movs	r3, #16
 80022f8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80022fa:	2310      	movs	r3, #16
 80022fc:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80022fe:	2310      	movs	r3, #16
 8002300:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8002302:	2310      	movs	r3, #16
 8002304:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8002306:	2310      	movs	r3, #16
 8002308:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800230a:	2310      	movs	r3, #16
 800230c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800230e:	2310      	movs	r3, #16
 8002310:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002312:	1d3b      	adds	r3, r7, #4
 8002314:	4619      	mov	r1, r3
 8002316:	4806      	ldr	r0, [pc, #24]	; (8002330 <MX_FMC_Init+0x94>)
 8002318:	f00d f8be 	bl	800f498 <HAL_SDRAM_Init>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8002322:	f000 f9d7 	bl	80026d4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002326:	bf00      	nop
 8002328:	3720      	adds	r7, #32
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	240012b8 	.word	0x240012b8
 8002334:	52004140 	.word	0x52004140

08002338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b090      	sub	sp, #64	; 0x40
 800233c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	60da      	str	r2, [r3, #12]
 800234c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800234e:	4bbf      	ldr	r3, [pc, #764]	; (800264c <MX_GPIO_Init+0x314>)
 8002350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002354:	4abd      	ldr	r2, [pc, #756]	; (800264c <MX_GPIO_Init+0x314>)
 8002356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800235e:	4bbb      	ldr	r3, [pc, #748]	; (800264c <MX_GPIO_Init+0x314>)
 8002360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	62bb      	str	r3, [r7, #40]	; 0x28
 800236a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800236c:	4bb7      	ldr	r3, [pc, #732]	; (800264c <MX_GPIO_Init+0x314>)
 800236e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002372:	4ab6      	ldr	r2, [pc, #728]	; (800264c <MX_GPIO_Init+0x314>)
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800237c:	4bb3      	ldr	r3, [pc, #716]	; (800264c <MX_GPIO_Init+0x314>)
 800237e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800238a:	4bb0      	ldr	r3, [pc, #704]	; (800264c <MX_GPIO_Init+0x314>)
 800238c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002390:	4aae      	ldr	r2, [pc, #696]	; (800264c <MX_GPIO_Init+0x314>)
 8002392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002396:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800239a:	4bac      	ldr	r3, [pc, #688]	; (800264c <MX_GPIO_Init+0x314>)
 800239c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a4:	623b      	str	r3, [r7, #32]
 80023a6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80023a8:	4ba8      	ldr	r3, [pc, #672]	; (800264c <MX_GPIO_Init+0x314>)
 80023aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ae:	4aa7      	ldr	r2, [pc, #668]	; (800264c <MX_GPIO_Init+0x314>)
 80023b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023b8:	4ba4      	ldr	r3, [pc, #656]	; (800264c <MX_GPIO_Init+0x314>)
 80023ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c2:	61fb      	str	r3, [r7, #28]
 80023c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c6:	4ba1      	ldr	r3, [pc, #644]	; (800264c <MX_GPIO_Init+0x314>)
 80023c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023cc:	4a9f      	ldr	r2, [pc, #636]	; (800264c <MX_GPIO_Init+0x314>)
 80023ce:	f043 0304 	orr.w	r3, r3, #4
 80023d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023d6:	4b9d      	ldr	r3, [pc, #628]	; (800264c <MX_GPIO_Init+0x314>)
 80023d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	61bb      	str	r3, [r7, #24]
 80023e2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e4:	4b99      	ldr	r3, [pc, #612]	; (800264c <MX_GPIO_Init+0x314>)
 80023e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ea:	4a98      	ldr	r2, [pc, #608]	; (800264c <MX_GPIO_Init+0x314>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023f4:	4b95      	ldr	r3, [pc, #596]	; (800264c <MX_GPIO_Init+0x314>)
 80023f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002402:	4b92      	ldr	r3, [pc, #584]	; (800264c <MX_GPIO_Init+0x314>)
 8002404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002408:	4a90      	ldr	r2, [pc, #576]	; (800264c <MX_GPIO_Init+0x314>)
 800240a:	f043 0310 	orr.w	r3, r3, #16
 800240e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002412:	4b8e      	ldr	r3, [pc, #568]	; (800264c <MX_GPIO_Init+0x314>)
 8002414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002420:	4b8a      	ldr	r3, [pc, #552]	; (800264c <MX_GPIO_Init+0x314>)
 8002422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002426:	4a89      	ldr	r2, [pc, #548]	; (800264c <MX_GPIO_Init+0x314>)
 8002428:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800242c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002430:	4b86      	ldr	r3, [pc, #536]	; (800264c <MX_GPIO_Init+0x314>)
 8002432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800243e:	4b83      	ldr	r3, [pc, #524]	; (800264c <MX_GPIO_Init+0x314>)
 8002440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002444:	4a81      	ldr	r2, [pc, #516]	; (800264c <MX_GPIO_Init+0x314>)
 8002446:	f043 0308 	orr.w	r3, r3, #8
 800244a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800244e:	4b7f      	ldr	r3, [pc, #508]	; (800264c <MX_GPIO_Init+0x314>)
 8002450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800245c:	4b7b      	ldr	r3, [pc, #492]	; (800264c <MX_GPIO_Init+0x314>)
 800245e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002462:	4a7a      	ldr	r2, [pc, #488]	; (800264c <MX_GPIO_Init+0x314>)
 8002464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002468:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800246c:	4b77      	ldr	r3, [pc, #476]	; (800264c <MX_GPIO_Init+0x314>)
 800246e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002476:	607b      	str	r3, [r7, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800247a:	4b74      	ldr	r3, [pc, #464]	; (800264c <MX_GPIO_Init+0x314>)
 800247c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002480:	4a72      	ldr	r2, [pc, #456]	; (800264c <MX_GPIO_Init+0x314>)
 8002482:	f043 0320 	orr.w	r3, r3, #32
 8002486:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800248a:	4b70      	ldr	r3, [pc, #448]	; (800264c <MX_GPIO_Init+0x314>)
 800248c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	603b      	str	r3, [r7, #0]
 8002496:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_R_Pin|LCD_DC_R_Pin, GPIO_PIN_RESET);
 8002498:	2200      	movs	r2, #0
 800249a:	2148      	movs	r1, #72	; 0x48
 800249c:	486c      	ldr	r0, [pc, #432]	; (8002650 <MX_GPIO_Init+0x318>)
 800249e:	f007 faf7 	bl	8009a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LCD_CS_R_Pin|LD2_Pin, GPIO_PIN_RESET);
 80024a2:	2200      	movs	r2, #0
 80024a4:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 80024a8:	486a      	ldr	r0, [pc, #424]	; (8002654 <MX_GPIO_Init+0x31c>)
 80024aa:	f007 faf1 	bl	8009a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80024ae:	2200      	movs	r2, #0
 80024b0:	f241 0104 	movw	r1, #4100	; 0x1004
 80024b4:	4868      	ldr	r0, [pc, #416]	; (8002658 <MX_GPIO_Init+0x320>)
 80024b6:	f007 faeb 	bl	8009a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2104      	movs	r1, #4
 80024be:	4867      	ldr	r0, [pc, #412]	; (800265c <MX_GPIO_Init+0x324>)
 80024c0:	f007 fae6 	bl	8009a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d2:	2300      	movs	r3, #0
 80024d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80024d6:	2303      	movs	r3, #3
 80024d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024de:	4619      	mov	r1, r3
 80024e0:	485f      	ldr	r0, [pc, #380]	; (8002660 <MX_GPIO_Init+0x328>)
 80024e2:	f007 f90d 	bl	8009700 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ea:	2300      	movs	r3, #0
 80024ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 80024f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f6:	4619      	mov	r1, r3
 80024f8:	485a      	ldr	r0, [pc, #360]	; (8002664 <MX_GPIO_Init+0x32c>)
 80024fa:	f007 f901 	bl	8009700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 80024fe:	2330      	movs	r3, #48	; 0x30
 8002500:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002502:	2302      	movs	r3, #2
 8002504:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250a:	2300      	movs	r3, #0
 800250c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 800250e:	230a      	movs	r3, #10
 8002510:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002512:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002516:	4619      	mov	r1, r3
 8002518:	484d      	ldr	r0, [pc, #308]	; (8002650 <MX_GPIO_Init+0x318>)
 800251a:	f007 f8f1 	bl	8009700 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_R_Pin LCD_DC_R_Pin */
  GPIO_InitStruct.Pin = LCD_RST_R_Pin|LCD_DC_R_Pin;
 800251e:	2348      	movs	r3, #72	; 0x48
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002522:	2301      	movs	r3, #1
 8002524:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252a:	2300      	movs	r3, #0
 800252c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800252e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002532:	4619      	mov	r1, r3
 8002534:	4846      	ldr	r0, [pc, #280]	; (8002650 <MX_GPIO_Init+0x318>)
 8002536:	f007 f8e3 	bl	8009700 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 800253a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002540:	2300      	movs	r3, #0
 8002542:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002548:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800254c:	4619      	mov	r1, r3
 800254e:	4846      	ldr	r0, [pc, #280]	; (8002668 <MX_GPIO_Init+0x330>)
 8002550:	f007 f8d6 	bl	8009700 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800255a:	2300      	movs	r3, #0
 800255c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002562:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002566:	4619      	mov	r1, r3
 8002568:	4840      	ldr	r0, [pc, #256]	; (800266c <MX_GPIO_Init+0x334>)
 800256a:	f007 f8c9 	bl	8009700 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_R_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LCD_CS_R_Pin|LD2_Pin;
 800256e:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002574:	2301      	movs	r3, #1
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257c:	2300      	movs	r3, #0
 800257e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002580:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002584:	4619      	mov	r1, r3
 8002586:	4833      	ldr	r0, [pc, #204]	; (8002654 <MX_GPIO_Init+0x31c>)
 8002588:	f007 f8ba 	bl	8009700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800258c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2300      	movs	r3, #0
 800259c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800259e:	2301      	movs	r3, #1
 80025a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025a6:	4619      	mov	r1, r3
 80025a8:	482f      	ldr	r0, [pc, #188]	; (8002668 <MX_GPIO_Init+0x330>)
 80025aa:	f007 f8a9 	bl	8009700 <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b2:	2302      	movs	r3, #2
 80025b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ba:	2300      	movs	r3, #0
 80025bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80025be:	2306      	movs	r3, #6
 80025c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 80025c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c6:	4619      	mov	r1, r3
 80025c8:	4829      	ldr	r0, [pc, #164]	; (8002670 <MX_GPIO_Init+0x338>)
 80025ca:	f007 f899 	bl	8009700 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80025ce:	2304      	movs	r3, #4
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80025dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025e0:	4619      	mov	r1, r3
 80025e2:	4823      	ldr	r0, [pc, #140]	; (8002670 <MX_GPIO_Init+0x338>)
 80025e4:	f007 f88c 	bl	8009700 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80025e8:	2301      	movs	r3, #1
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ec:	2300      	movs	r3, #0
 80025ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80025f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025f8:	4619      	mov	r1, r3
 80025fa:	481e      	ldr	r0, [pc, #120]	; (8002674 <MX_GPIO_Init+0x33c>)
 80025fc:	f007 f880 	bl	8009700 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 8002600:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002606:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800260a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002610:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002614:	4619      	mov	r1, r3
 8002616:	4812      	ldr	r0, [pc, #72]	; (8002660 <MX_GPIO_Init+0x328>)
 8002618:	f007 f872 	bl	8009700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800261c:	2340      	movs	r3, #64	; 0x40
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002620:	2302      	movs	r3, #2
 8002622:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002628:	2300      	movs	r3, #0
 800262a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800262c:	2309      	movs	r3, #9
 800262e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002630:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002634:	4619      	mov	r1, r3
 8002636:	480c      	ldr	r0, [pc, #48]	; (8002668 <MX_GPIO_Init+0x330>)
 8002638:	f007 f862 	bl	8009700 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 800263c:	f241 0304 	movw	r3, #4100	; 0x1004
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002642:	2301      	movs	r3, #1
 8002644:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	637b      	str	r3, [r7, #52]	; 0x34
 800264a:	e015      	b.n	8002678 <MX_GPIO_Init+0x340>
 800264c:	58024400 	.word	0x58024400
 8002650:	58021000 	.word	0x58021000
 8002654:	58022000 	.word	0x58022000
 8002658:	58020400 	.word	0x58020400
 800265c:	58022400 	.word	0x58022400
 8002660:	58021c00 	.word	0x58021c00
 8002664:	58020c00 	.word	0x58020c00
 8002668:	58020000 	.word	0x58020000
 800266c:	58020800 	.word	0x58020800
 8002670:	58021800 	.word	0x58021800
 8002674:	58022800 	.word	0x58022800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002678:	2300      	movs	r3, #0
 800267a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800267c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002680:	4619      	mov	r1, r3
 8002682:	4811      	ldr	r0, [pc, #68]	; (80026c8 <MX_GPIO_Init+0x390>)
 8002684:	f007 f83c 	bl	8009700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800268c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800268e:	2300      	movs	r3, #0
 8002690:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800269a:	4619      	mov	r1, r3
 800269c:	480b      	ldr	r0, [pc, #44]	; (80026cc <MX_GPIO_Init+0x394>)
 800269e:	f007 f82f 	bl	8009700 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80026a2:	2304      	movs	r3, #4
 80026a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a6:	2301      	movs	r3, #1
 80026a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80026b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026b6:	4619      	mov	r1, r3
 80026b8:	4805      	ldr	r0, [pc, #20]	; (80026d0 <MX_GPIO_Init+0x398>)
 80026ba:	f007 f821 	bl	8009700 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026be:	bf00      	nop
 80026c0:	3740      	adds	r7, #64	; 0x40
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	58020400 	.word	0x58020400
 80026cc:	58021c00 	.word	0x58021c00
 80026d0:	58022400 	.word	0x58022400

080026d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026d8:	b672      	cpsid	i
}
 80026da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026dc:	e7fe      	b.n	80026dc <Error_Handler+0x8>
	...

080026e0 <oximeter5_init>:
 */
static void dev_find_peaks ( int32_t *pn_locs, int32_t *n_npks,  int32_t  *pn_x, uint8_t n_size, int32_t n_min_height, int32_t n_min_distance, int32_t n_max_num );


err_t oximeter5_init ( void )
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
	retval = !HAL_OK;
 80026e4:	4b1d      	ldr	r3, [pc, #116]	; (800275c <oximeter5_init+0x7c>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]
	while (retval != HAL_OK){
 80026ea:	e020      	b.n	800272e <oximeter5_init+0x4e>
		retval = HAL_I2C_IsDeviceReady(&hi2c4, (OXIMETER5_SET_DEV_ADDR << 1), 3, 100);
 80026ec:	2364      	movs	r3, #100	; 0x64
 80026ee:	2203      	movs	r2, #3
 80026f0:	21ae      	movs	r1, #174	; 0xae
 80026f2:	481b      	ldr	r0, [pc, #108]	; (8002760 <oximeter5_init+0x80>)
 80026f4:	f007 fca4 	bl	800a040 <HAL_I2C_IsDeviceReady>
 80026f8:	4603      	mov	r3, r0
 80026fa:	461a      	mov	r2, r3
 80026fc:	4b17      	ldr	r3, [pc, #92]	; (800275c <oximeter5_init+0x7c>)
 80026fe:	701a      	strb	r2, [r3, #0]
		if (retval != HAL_OK)
 8002700:	4b16      	ldr	r3, [pc, #88]	; (800275c <oximeter5_init+0x7c>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00e      	beq.n	8002726 <oximeter5_init+0x46>
		{
			snprintf(SendBuffer1, sizeof(SendBuffer1), "Device not ready\n\r");
 8002708:	4a16      	ldr	r2, [pc, #88]	; (8002764 <oximeter5_init+0x84>)
 800270a:	2132      	movs	r1, #50	; 0x32
 800270c:	4816      	ldr	r0, [pc, #88]	; (8002768 <oximeter5_init+0x88>)
 800270e:	f00f f9ed 	bl	8011aec <sniprintf>
			HAL_UART_Transmit(&huart3, SendBuffer1, strlen(SendBuffer1), 100);
 8002712:	4815      	ldr	r0, [pc, #84]	; (8002768 <oximeter5_init+0x88>)
 8002714:	f7fd fde4 	bl	80002e0 <strlen>
 8002718:	4603      	mov	r3, r0
 800271a:	b29a      	uxth	r2, r3
 800271c:	2364      	movs	r3, #100	; 0x64
 800271e:	4912      	ldr	r1, [pc, #72]	; (8002768 <oximeter5_init+0x88>)
 8002720:	4812      	ldr	r0, [pc, #72]	; (800276c <oximeter5_init+0x8c>)
 8002722:	f00d fcfe 	bl	8010122 <HAL_UART_Transmit>
		}
		HAL_Delay(1000);
 8002726:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800272a:	f002 fb3f 	bl	8004dac <HAL_Delay>
	while (retval != HAL_OK){
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <oximeter5_init+0x7c>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1da      	bne.n	80026ec <oximeter5_init+0xc>
	}
	snprintf(SendBuffer1, sizeof(SendBuffer1), "Device ready\n\r");
 8002736:	4a0e      	ldr	r2, [pc, #56]	; (8002770 <oximeter5_init+0x90>)
 8002738:	2132      	movs	r1, #50	; 0x32
 800273a:	480b      	ldr	r0, [pc, #44]	; (8002768 <oximeter5_init+0x88>)
 800273c:	f00f f9d6 	bl	8011aec <sniprintf>
	HAL_UART_Transmit(&huart3, SendBuffer1, strlen(SendBuffer1), 100);
 8002740:	4809      	ldr	r0, [pc, #36]	; (8002768 <oximeter5_init+0x88>)
 8002742:	f7fd fdcd 	bl	80002e0 <strlen>
 8002746:	4603      	mov	r3, r0
 8002748:	b29a      	uxth	r2, r3
 800274a:	2364      	movs	r3, #100	; 0x64
 800274c:	4906      	ldr	r1, [pc, #24]	; (8002768 <oximeter5_init+0x88>)
 800274e:	4807      	ldr	r0, [pc, #28]	; (800276c <oximeter5_init+0x8c>)
 8002750:	f00d fce7 	bl	8010122 <HAL_UART_Transmit>
	return OXIMETER5_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	240017ce 	.word	0x240017ce
 8002760:	24000904 	.word	0x24000904
 8002764:	080124fc 	.word	0x080124fc
 8002768:	240017d0 	.word	0x240017d0
 800276c:	24000d18 	.word	0x24000d18
 8002770:	08012510 	.word	0x08012510

08002774 <oximeter5_default_cfg>:

err_t oximeter5_default_cfg ( void )
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
    uint8_t tmp;

    err_t error_flag = oximeter5_sw_reset();
 800277a:	f000 f93f 	bl	80029fc <oximeter5_sw_reset>
 800277e:	4603      	mov	r3, r0
 8002780:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1000);
 8002782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002786:	f002 fb11 	bl	8004dac <HAL_Delay>

    error_flag |= oximeter5_generic_read(OXIMETER5_REG_INTR_STATUS_1, &tmp, 1 );
 800278a:	f107 030e 	add.w	r3, r7, #14
 800278e:	2201      	movs	r2, #1
 8002790:	4619      	mov	r1, r3
 8002792:	2000      	movs	r0, #0
 8002794:	f000 f8fa 	bl	800298c <oximeter5_generic_read>
 8002798:	4603      	mov	r3, r0
 800279a:	461a      	mov	r2, r3
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	4313      	orrs	r3, r2
 80027a0:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 80027a2:	200a      	movs	r0, #10
 80027a4:	f002 fb02 	bl	8004dac <HAL_Delay>

    tmp = OXIMETER5_SET_INTR_EN_1_FULL_EN;
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	73bb      	strb	r3, [r7, #14]
    tmp |= OXIMETER5_SET_INTR_EN_1_PPG_RDY_EN;
 80027ac:	7bbb      	ldrb	r3, [r7, #14]
 80027ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_INTR_ENABLE_1, &tmp, 1 );
 80027b6:	f107 030e 	add.w	r3, r7, #14
 80027ba:	2201      	movs	r2, #1
 80027bc:	4619      	mov	r1, r3
 80027be:	2002      	movs	r0, #2
 80027c0:	f000 f8be 	bl	8002940 <oximeter5_generic_write>
 80027c4:	4603      	mov	r3, r0
 80027c6:	461a      	mov	r2, r3
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 80027ce:	200a      	movs	r0, #10
 80027d0:	f002 faec 	bl	8004dac <HAL_Delay>

    tmp = OXIMETER5_SET_INTR_EN_2_TEMP_DIS;
 80027d4:	2300      	movs	r3, #0
 80027d6:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_INTR_ENABLE_2, &tmp, 1 );
 80027d8:	f107 030e 	add.w	r3, r7, #14
 80027dc:	2201      	movs	r2, #1
 80027de:	4619      	mov	r1, r3
 80027e0:	2003      	movs	r0, #3
 80027e2:	f000 f8ad 	bl	8002940 <oximeter5_generic_write>
 80027e6:	4603      	mov	r3, r0
 80027e8:	461a      	mov	r2, r3
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 80027f0:	200a      	movs	r0, #10
 80027f2:	f002 fadb 	bl	8004dac <HAL_Delay>

    tmp = OXIMETER5_SET_FIFO_PTR_RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_FIFO_WR_PTR, &tmp, 1 );
 80027fa:	f107 030e 	add.w	r3, r7, #14
 80027fe:	2201      	movs	r2, #1
 8002800:	4619      	mov	r1, r3
 8002802:	2004      	movs	r0, #4
 8002804:	f000 f89c 	bl	8002940 <oximeter5_generic_write>
 8002808:	4603      	mov	r3, r0
 800280a:	461a      	mov	r2, r3
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	4313      	orrs	r3, r2
 8002810:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8002812:	200a      	movs	r0, #10
 8002814:	f002 faca 	bl	8004dac <HAL_Delay>

    tmp = OXIMETER5_SET_FIFO_COUNTER_RESET;
 8002818:	2300      	movs	r3, #0
 800281a:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_OVF_COUNTER, &tmp, 1 );
 800281c:	f107 030e 	add.w	r3, r7, #14
 8002820:	2201      	movs	r2, #1
 8002822:	4619      	mov	r1, r3
 8002824:	2005      	movs	r0, #5
 8002826:	f000 f88b 	bl	8002940 <oximeter5_generic_write>
 800282a:	4603      	mov	r3, r0
 800282c:	461a      	mov	r2, r3
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	4313      	orrs	r3, r2
 8002832:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8002834:	200a      	movs	r0, #10
 8002836:	f002 fab9 	bl	8004dac <HAL_Delay>

    tmp = OXIMETER5_SET_FIFO_PTR_RESET;
 800283a:	2300      	movs	r3, #0
 800283c:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_FIFO_RD_PTR, &tmp, 1 );
 800283e:	f107 030e 	add.w	r3, r7, #14
 8002842:	2201      	movs	r2, #1
 8002844:	4619      	mov	r1, r3
 8002846:	2006      	movs	r0, #6
 8002848:	f000 f87a 	bl	8002940 <oximeter5_generic_write>
 800284c:	4603      	mov	r3, r0
 800284e:	461a      	mov	r2, r3
 8002850:	7bfb      	ldrb	r3, [r7, #15]
 8002852:	4313      	orrs	r3, r2
 8002854:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8002856:	200a      	movs	r0, #10
 8002858:	f002 faa8 	bl	8004dac <HAL_Delay>

    tmp = OXIMETER5_SET_FIFO_CFG_SMP_AVE_3;
 800285c:	2340      	movs	r3, #64	; 0x40
 800285e:	73bb      	strb	r3, [r7, #14]
    tmp |= OXIMETER5_SET_FIFO_CFG_DATA_SAMP_15;
 8002860:	7bbb      	ldrb	r3, [r7, #14]
 8002862:	f043 030f 	orr.w	r3, r3, #15
 8002866:	b2db      	uxtb	r3, r3
 8002868:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_FIFO_CONFIG, &tmp, 1 );
 800286a:	f107 030e 	add.w	r3, r7, #14
 800286e:	2201      	movs	r2, #1
 8002870:	4619      	mov	r1, r3
 8002872:	2008      	movs	r0, #8
 8002874:	f000 f864 	bl	8002940 <oximeter5_generic_write>
 8002878:	4603      	mov	r3, r0
 800287a:	461a      	mov	r2, r3
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	4313      	orrs	r3, r2
 8002880:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8002882:	200a      	movs	r0, #10
 8002884:	f002 fa92 	bl	8004dac <HAL_Delay>

    tmp = OXIMETER5_SET_CFG_MODE_SpO2;
 8002888:	2303      	movs	r3, #3
 800288a:	73bb      	strb	r3, [r7, #14]
    //tmp = OXIMETER5_SET_CFG_MODE_HEART_RATE;
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_MODE_CONFIG, &tmp, 1 );
 800288c:	f107 030e 	add.w	r3, r7, #14
 8002890:	2201      	movs	r2, #1
 8002892:	4619      	mov	r1, r3
 8002894:	2009      	movs	r0, #9
 8002896:	f000 f853 	bl	8002940 <oximeter5_generic_write>
 800289a:	4603      	mov	r3, r0
 800289c:	461a      	mov	r2, r3
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 80028a4:	200a      	movs	r0, #10
 80028a6:	f002 fa81 	bl	8004dac <HAL_Delay>

    tmp = OXIMETER5_SET_SPO2_CFG_ADC_RGE_4096;
 80028aa:	2320      	movs	r3, #32
 80028ac:	73bb      	strb	r3, [r7, #14]
    tmp |= OXIMETER5_SET_SPO2_CFG_SR_SEC_100;
 80028ae:	7bbb      	ldrb	r3, [r7, #14]
 80028b0:	f043 0304 	orr.w	r3, r3, #4
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	73bb      	strb	r3, [r7, #14]
    tmp |= OXIMETER5_SET_SPO2_CFG_LED_PW_18_bit;
 80028b8:	7bbb      	ldrb	r3, [r7, #14]
 80028ba:	f043 0303 	orr.w	r3, r3, #3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_SPO2_CONFIG, &tmp, 1 );
 80028c2:	f107 030e 	add.w	r3, r7, #14
 80028c6:	2201      	movs	r2, #1
 80028c8:	4619      	mov	r1, r3
 80028ca:	200a      	movs	r0, #10
 80028cc:	f000 f838 	bl	8002940 <oximeter5_generic_write>
 80028d0:	4603      	mov	r3, r0
 80028d2:	461a      	mov	r2, r3
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 80028da:	200a      	movs	r0, #10
 80028dc:	f002 fa66 	bl	8004dac <HAL_Delay>

    tmp = OXIMETER5_SET_LED_PULSE_AMPL_7_2_mA;
 80028e0:	2324      	movs	r3, #36	; 0x24
 80028e2:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_LED1_PA, &tmp, 1 );
 80028e4:	f107 030e 	add.w	r3, r7, #14
 80028e8:	2201      	movs	r2, #1
 80028ea:	4619      	mov	r1, r3
 80028ec:	200c      	movs	r0, #12
 80028ee:	f000 f827 	bl	8002940 <oximeter5_generic_write>
 80028f2:	4603      	mov	r3, r0
 80028f4:	461a      	mov	r2, r3
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 80028fc:	200a      	movs	r0, #10
 80028fe:	f002 fa55 	bl	8004dac <HAL_Delay>

    tmp = OXIMETER5_SET_LED_PULSE_AMPL_7_2_mA;
 8002902:	2324      	movs	r3, #36	; 0x24
 8002904:	73bb      	strb	r3, [r7, #14]
    error_flag |= oximeter5_generic_write(OXIMETER5_REG_LED2_PA, &tmp, 1 );
 8002906:	f107 030e 	add.w	r3, r7, #14
 800290a:	2201      	movs	r2, #1
 800290c:	4619      	mov	r1, r3
 800290e:	200d      	movs	r0, #13
 8002910:	f000 f816 	bl	8002940 <oximeter5_generic_write>
 8002914:	4603      	mov	r3, r0
 8002916:	461a      	mov	r2, r3
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	4313      	orrs	r3, r2
 800291c:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 800291e:	200a      	movs	r0, #10
 8002920:	f002 fa44 	bl	8004dac <HAL_Delay>

    uint32_t ir, red;
    error_flag = oximeter5_read_sensor_data(&ir, &red );
 8002924:	1d3a      	adds	r2, r7, #4
 8002926:	f107 0308 	add.w	r3, r7, #8
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f000 f8e1 	bl	8002af4 <oximeter5_read_sensor_data>
 8002932:	4603      	mov	r3, r0
 8002934:	73fb      	strb	r3, [r7, #15]

    return error_flag;
 8002936:	7bfb      	ldrb	r3, [r7, #15]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <oximeter5_generic_write>:

err_t oximeter5_generic_write ( uint8_t reg, uint8_t *tx_buf, uint8_t tx_len )
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af04      	add	r7, sp, #16
 8002946:	4603      	mov	r3, r0
 8002948:	6039      	str	r1, [r7, #0]
 800294a:	71fb      	strb	r3, [r7, #7]
 800294c:	4613      	mov	r3, r2
 800294e:	71bb      	strb	r3, [r7, #6]
	retval = HAL_I2C_Mem_Write(&hi2c4, (OXIMETER5_SET_DEV_ADDR << 1), reg, I2C_MEMADD_SIZE_8BIT, tx_buf, tx_len, HAL_MAX_DELAY);
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	b29a      	uxth	r2, r3
 8002954:	79bb      	ldrb	r3, [r7, #6]
 8002956:	b29b      	uxth	r3, r3
 8002958:	f04f 31ff 	mov.w	r1, #4294967295
 800295c:	9102      	str	r1, [sp, #8]
 800295e:	9301      	str	r3, [sp, #4]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	2301      	movs	r3, #1
 8002966:	21ae      	movs	r1, #174	; 0xae
 8002968:	4806      	ldr	r0, [pc, #24]	; (8002984 <oximeter5_generic_write+0x44>)
 800296a:	f007 f93b 	bl	8009be4 <HAL_I2C_Mem_Write>
 800296e:	4603      	mov	r3, r0
 8002970:	461a      	mov	r2, r3
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <oximeter5_generic_write+0x48>)
 8002974:	701a      	strb	r2, [r3, #0]
	return retval;
 8002976:	4b04      	ldr	r3, [pc, #16]	; (8002988 <oximeter5_generic_write+0x48>)
 8002978:	781b      	ldrb	r3, [r3, #0]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	24000904 	.word	0x24000904
 8002988:	240017ce 	.word	0x240017ce

0800298c <oximeter5_generic_read>:

err_t oximeter5_generic_read ( uint8_t reg, uint8_t *rx_buf, uint8_t rx_len )
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af04      	add	r7, sp, #16
 8002992:	4603      	mov	r3, r0
 8002994:	6039      	str	r1, [r7, #0]
 8002996:	71fb      	strb	r3, [r7, #7]
 8002998:	4613      	mov	r3, r2
 800299a:	71bb      	strb	r3, [r7, #6]
	retval = HAL_I2C_Mem_Read(&hi2c4, (OXIMETER5_SET_DEV_ADDR << 1), reg, I2C_MEMADD_SIZE_8BIT, rx_buf, rx_len, HAL_MAX_DELAY);
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	b29a      	uxth	r2, r3
 80029a0:	79bb      	ldrb	r3, [r7, #6]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	f04f 31ff 	mov.w	r1, #4294967295
 80029a8:	9102      	str	r1, [sp, #8]
 80029aa:	9301      	str	r3, [sp, #4]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	2301      	movs	r3, #1
 80029b2:	21ae      	movs	r1, #174	; 0xae
 80029b4:	4806      	ldr	r0, [pc, #24]	; (80029d0 <oximeter5_generic_read+0x44>)
 80029b6:	f007 fa29 	bl	8009e0c <HAL_I2C_Mem_Read>
 80029ba:	4603      	mov	r3, r0
 80029bc:	461a      	mov	r2, r3
 80029be:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <oximeter5_generic_read+0x48>)
 80029c0:	701a      	strb	r2, [r3, #0]
	return retval;
 80029c2:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <oximeter5_generic_read+0x48>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	24000904 	.word	0x24000904
 80029d4:	240017ce 	.word	0x240017ce

080029d8 <oximeter5_check_interrupt>:

uint8_t oximeter5_check_interrupt ( void )
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_12) == GPIO_PIN_SET ? OXIMETER5_INTERRUPT_ACTIVE : OXIMETER5_INTERRUPT_INACTIVE;
 80029dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029e0:	4805      	ldr	r0, [pc, #20]	; (80029f8 <oximeter5_check_interrupt+0x20>)
 80029e2:	f007 f83d 	bl	8009a60 <HAL_GPIO_ReadPin>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	58021c00 	.word	0x58021c00

080029fc <oximeter5_sw_reset>:

err_t oximeter5_sw_reset ( void )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
    uint8_t tx_data;

    tx_data = OXIMETER5_SW_RESET;
 8002a02:	2340      	movs	r3, #64	; 0x40
 8002a04:	71bb      	strb	r3, [r7, #6]
    err_t error_flag = oximeter5_generic_write((OXIMETER5_REG_MODE_CONFIG << 1), &tx_data, 1 );
 8002a06:	1dbb      	adds	r3, r7, #6
 8002a08:	2201      	movs	r2, #1
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	2012      	movs	r0, #18
 8002a0e:	f7ff ff97 	bl	8002940 <oximeter5_generic_write>
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]

    return error_flag;
 8002a16:	79fb      	ldrb	r3, [r7, #7]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <oximeter5_read_temperature>:

err_t oximeter5_read_temperature ( float *temperature )
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
    uint8_t tx_data;
    uint8_t rx_data;

    tx_data = OXIMETER5_SET_CFG_TEMP_ENABLE;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	73bb      	strb	r3, [r7, #14]
    err_t error_flag = oximeter5_generic_write(OXIMETER5_REG_TEMP_CONFIG, &tx_data, 1 );
 8002a2c:	f107 030e 	add.w	r3, r7, #14
 8002a30:	2201      	movs	r2, #1
 8002a32:	4619      	mov	r1, r3
 8002a34:	2021      	movs	r0, #33	; 0x21
 8002a36:	f7ff ff83 	bl	8002940 <oximeter5_generic_write>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8002a3e:	200a      	movs	r0, #10
 8002a40:	f002 f9b4 	bl	8004dac <HAL_Delay>

    error_flag |= oximeter5_generic_read(OXIMETER5_REG_TEMP_INTR, &rx_data, 1 );
 8002a44:	f107 030d 	add.w	r3, r7, #13
 8002a48:	2201      	movs	r2, #1
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	201f      	movs	r0, #31
 8002a4e:	f7ff ff9d 	bl	800298c <oximeter5_generic_read>
 8002a52:	4603      	mov	r3, r0
 8002a54:	461a      	mov	r2, r3
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	73fb      	strb	r3, [r7, #15]

    *temperature = ( float ) rx_data;
 8002a5c:	7b7b      	ldrb	r3, [r7, #13]
 8002a5e:	ee07 3a90 	vmov	s15, r3
 8002a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	edc3 7a00 	vstr	s15, [r3]
    if ( rx_data > MAX_UNSIGNED_8_BIT_DATA )
 8002a6c:	7b7b      	ldrb	r3, [r7, #13]
 8002a6e:	b25b      	sxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	da09      	bge.n	8002a88 <oximeter5_read_temperature+0x68>
    {
        *temperature -= DATA_CONV_SIGN_8_BIT_DATA;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	edd3 7a00 	vldr	s15, [r3]
 8002a7a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002af0 <oximeter5_read_temperature+0xd0>
 8002a7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	edc3 7a00 	vstr	s15, [r3]
    }

    error_flag |= oximeter5_generic_read(OXIMETER5_REG_TEMP_FRAC, &rx_data, 1 );
 8002a88:	f107 030d 	add.w	r3, r7, #13
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	4619      	mov	r1, r3
 8002a90:	2020      	movs	r0, #32
 8002a92:	f7ff ff7b 	bl	800298c <oximeter5_generic_read>
 8002a96:	4603      	mov	r3, r0
 8002a98:	461a      	mov	r2, r3
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	73fb      	strb	r3, [r7, #15]
    rx_data &= BYTE_LOW_NIBBLE;
 8002aa0:	7b7b      	ldrb	r3, [r7, #13]
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	737b      	strb	r3, [r7, #13]

    *temperature += ( float ) rx_data * TEMPERATURE_DATA_CALC_DATA;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	edd3 7a00 	vldr	s15, [r3]
 8002ab0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002ab4:	7b7b      	ldrb	r3, [r7, #13]
 8002ab6:	ee07 3a90 	vmov	s15, r3
 8002aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002abe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ac2:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8002ae8 <oximeter5_read_temperature+0xc8>
 8002ac6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002aca:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002ace:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	edc3 7a00 	vstr	s15, [r3]

    return error_flag;
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	f3af 8000 	nop.w
 8002ae8:	00000000 	.word	0x00000000
 8002aec:	3fb00000 	.word	0x3fb00000
 8002af0:	43800000 	.word	0x43800000

08002af4 <oximeter5_read_sensor_data>:

    return oximeter5_generic_write(OXIMETER5_REG_MODE_CONFIG, &tx_data, 1 );
}

err_t oximeter5_read_sensor_data ( uint32_t *ir, uint32_t *red )
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
    uint8_t rx_buf[ 6 ];

    err_t error_flag = oximeter5_generic_read(OXIMETER5_REG_FIFO_DATA, rx_buf, 6 );
 8002afe:	f107 0308 	add.w	r3, r7, #8
 8002b02:	2206      	movs	r2, #6
 8002b04:	4619      	mov	r1, r3
 8002b06:	2007      	movs	r0, #7
 8002b08:	f7ff ff40 	bl	800298c <oximeter5_generic_read>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	73fb      	strb	r3, [r7, #15]

    *ir = rx_buf[ 0 ];
 8002b10:	7a3b      	ldrb	r3, [r7, #8]
 8002b12:	461a      	mov	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	601a      	str	r2, [r3, #0]
    *ir <<= 8;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	021a      	lsls	r2, r3, #8
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	601a      	str	r2, [r3, #0]
    *ir |= rx_buf[ 1 ];
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	7a7a      	ldrb	r2, [r7, #9]
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	601a      	str	r2, [r3, #0]
    *ir <<= 8;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	021a      	lsls	r2, r3, #8
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	601a      	str	r2, [r3, #0]
    *ir |= rx_buf[ 2 ];
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	7aba      	ldrb	r2, [r7, #10]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	601a      	str	r2, [r3, #0]
    *ir &= DATA_18_BIT;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	601a      	str	r2, [r3, #0]

    *red = rx_buf[ 3 ];
 8002b50:	7afb      	ldrb	r3, [r7, #11]
 8002b52:	461a      	mov	r2, r3
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	601a      	str	r2, [r3, #0]
    *red <<= 8;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	021a      	lsls	r2, r3, #8
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	601a      	str	r2, [r3, #0]
    *red |= rx_buf[ 4 ];
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	7b3a      	ldrb	r2, [r7, #12]
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	601a      	str	r2, [r3, #0]
    *red <<= 8;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	021a      	lsls	r2, r3, #8
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	601a      	str	r2, [r3, #0]
    *red |= rx_buf[ 5 ];
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	7b7a      	ldrb	r2, [r7, #13]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	601a      	str	r2, [r3, #0]
    *red &= DATA_18_BIT;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	601a      	str	r2, [r3, #0]

    return error_flag;
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <oximeter5_get_oxygen_saturation>:

err_t oximeter5_get_oxygen_saturation ( uint32_t *pun_ir_buffer, int32_t n_ir_buffer_length, uint32_t *pun_red_buffer, uint8_t *pn_spo2 )
{
 8002b9c:	b590      	push	{r4, r7, lr}
 8002b9e:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 8002ba2:	af04      	add	r7, sp, #16
 8002ba4:	f507 747c 	add.w	r4, r7, #1008	; 0x3f0
 8002ba8:	f5a4 7479 	sub.w	r4, r4, #996	; 0x3e4
 8002bac:	6020      	str	r0, [r4, #0]
 8002bae:	f507 707c 	add.w	r0, r7, #1008	; 0x3f0
 8002bb2:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
 8002bb6:	6001      	str	r1, [r0, #0]
 8002bb8:	f507 717c 	add.w	r1, r7, #1008	; 0x3f0
 8002bbc:	f5a1 717b 	sub.w	r1, r1, #1004	; 0x3ec
 8002bc0:	600a      	str	r2, [r1, #0]
 8002bc2:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002bc6:	f5a2 727c 	sub.w	r2, r2, #1008	; 0x3f0
 8002bca:	6013      	str	r3, [r2, #0]
    int32_t n_nume, n_denom ;
    int32_t an_x[ BUFFER_SIZE ];
    int32_t an_y[ BUFFER_SIZE ];
    err_t error_flag;

    un_ir_mean = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

    for ( int32_t n_cnt_k = 0; n_cnt_k < n_ir_buffer_length; n_cnt_k++ )
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8002bd8:	e013      	b.n	8002c02 <oximeter5_get_oxygen_saturation+0x66>
    {
        un_ir_mean += pun_ir_buffer[ n_cnt_k ];
 8002bda:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002be4:	f5a2 7279 	sub.w	r2, r2, #996	; 0x3e4
 8002be8:	6812      	ldr	r2, [r2, #0]
 8002bea:	4413      	add	r3, r2
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    for ( int32_t n_cnt_k = 0; n_cnt_k < n_ir_buffer_length; n_cnt_k++ )
 8002bf8:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8002c02:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002c06:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002c0a:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	dbe2      	blt.n	8002bda <oximeter5_get_oxygen_saturation+0x3e>
    }

    un_ir_mean =un_ir_mean/n_ir_buffer_length ;
 8002c14:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002c18:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8002c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c26:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

    // remove DC and invert signal so that we can use peak detector as valley detector
    for ( int32_t n_cnt_k = 0; n_cnt_k < n_ir_buffer_length; n_cnt_k++ )
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8002c30:	e01a      	b.n	8002c68 <oximeter5_get_oxygen_saturation+0xcc>
    {
        an_x[ n_cnt_k ] = -1*(pun_ir_buffer[ n_cnt_k ] - un_ir_mean );
 8002c32:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002c3c:	f5a2 7279 	sub.w	r2, r2, #996	; 0x3e4
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	4413      	add	r3, r2
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002c52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8002c56:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8002c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for ( int32_t n_cnt_k = 0; n_cnt_k < n_ir_buffer_length; n_cnt_k++ )
 8002c5e:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8002c62:	3301      	adds	r3, #1
 8002c64:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8002c68:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002c6c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002c70:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	dbdb      	blt.n	8002c32 <oximeter5_get_oxygen_saturation+0x96>
    }

    // 4 pt Moving Average
    for ( int32_t n_cnt_k = 0; n_cnt_k < BUFFER_SIZE-MA4_SIZE; n_cnt_k++ )
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 8002c80:	e037      	b.n	8002cf2 <oximeter5_get_oxygen_saturation+0x156>
    {
        an_x[ n_cnt_k ] = ( an_x[ n_cnt_k ] + an_x[ n_cnt_k + 1 ] + an_x[ n_cnt_k + 2 ] + an_x[ n_cnt_k + 3 ] ) / 4;
 8002c82:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002c86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8002c8a:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8002c8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c92:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8002c96:	1c59      	adds	r1, r3, #1
 8002c98:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002c9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8002ca0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ca4:	441a      	add	r2, r3
 8002ca6:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8002caa:	1c99      	adds	r1, r3, #2
 8002cac:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002cb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8002cb4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002cb8:	441a      	add	r2, r3
 8002cba:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8002cbe:	1cd9      	adds	r1, r3, #3
 8002cc0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002cc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8002cc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ccc:	4413      	add	r3, r2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	da00      	bge.n	8002cd4 <oximeter5_get_oxygen_saturation+0x138>
 8002cd2:	3303      	adds	r3, #3
 8002cd4:	109b      	asrs	r3, r3, #2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002cdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8002ce0:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8002ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for ( int32_t n_cnt_k = 0; n_cnt_k < BUFFER_SIZE-MA4_SIZE; n_cnt_k++ )
 8002ce8:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8002cec:	3301      	adds	r3, #1
 8002cee:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 8002cf2:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8002cf6:	2b5f      	cmp	r3, #95	; 0x5f
 8002cf8:	ddc3      	ble.n	8002c82 <oximeter5_get_oxygen_saturation+0xe6>
    }

    // calculate threshold
    n_th1 = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
    for ( int32_t n_cnt_k = 0; n_cnt_k < BUFFER_SIZE; n_cnt_k++ )
 8002d00:	2300      	movs	r3, #0
 8002d02:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 8002d06:	e011      	b.n	8002d2c <oximeter5_get_oxygen_saturation+0x190>
    {
        n_th1 +=  an_x[ n_cnt_k ];
 8002d08:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002d0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8002d10:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 8002d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d18:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
    for ( int32_t n_cnt_k = 0; n_cnt_k < BUFFER_SIZE; n_cnt_k++ )
 8002d22:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8002d26:	3301      	adds	r3, #1
 8002d28:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 8002d2c:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8002d30:	2b63      	cmp	r3, #99	; 0x63
 8002d32:	dde9      	ble.n	8002d08 <oximeter5_get_oxygen_saturation+0x16c>
    }

    n_th1=  n_th1 / BUFFER_SIZE;
 8002d34:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002d38:	4a71      	ldr	r2, [pc, #452]	; (8002f00 <oximeter5_get_oxygen_saturation+0x364>)
 8002d3a:	fb82 1203 	smull	r1, r2, r2, r3
 8002d3e:	1152      	asrs	r2, r2, #5
 8002d40:	17db      	asrs	r3, r3, #31
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
    if ( n_th1 < 30 )
 8002d48:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002d4c:	2b1d      	cmp	r3, #29
 8002d4e:	dc02      	bgt.n	8002d56 <oximeter5_get_oxygen_saturation+0x1ba>
    {
        n_th1 = 30; // min allowed
 8002d50:	231e      	movs	r3, #30
 8002d52:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
    }

    if ( n_th1 > 60 )
 8002d56:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002d5a:	2b3c      	cmp	r3, #60	; 0x3c
 8002d5c:	dd02      	ble.n	8002d64 <oximeter5_get_oxygen_saturation+0x1c8>
    {
        n_th1 = 60; // max allowed
 8002d5e:	233c      	movs	r3, #60	; 0x3c
 8002d60:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
    }

    for ( int32_t n_cnt_k = 0; n_cnt_k < 15; n_cnt_k++ )
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 8002d6a:	e00d      	b.n	8002d88 <oximeter5_get_oxygen_saturation+0x1ec>
    {
        an_ir_valley_locs[ n_cnt_k ] = 0;
 8002d6c:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8002d76:	443b      	add	r3, r7
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f843 2ca8 	str.w	r2, [r3, #-168]
    for ( int32_t n_cnt_k = 0; n_cnt_k < 15; n_cnt_k++ )
 8002d7e:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8002d82:	3301      	adds	r3, #1
 8002d84:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 8002d88:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8002d8c:	2b0e      	cmp	r3, #14
 8002d8e:	dded      	ble.n	8002d6c <oximeter5_get_oxygen_saturation+0x1d0>
    }

    // since we flipped signal, we use peak detector as valley detector
    dev_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks
 8002d90:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8002d94:	f507 7161 	add.w	r1, r7, #900	; 0x384
 8002d98:	f507 7052 	add.w	r0, r7, #840	; 0x348
 8002d9c:	230f      	movs	r3, #15
 8002d9e:	9302      	str	r3, [sp, #8]
 8002da0:	2304      	movs	r3, #4
 8002da2:	9301      	str	r3, [sp, #4]
 8002da4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	2364      	movs	r3, #100	; 0x64
 8002dac:	f000 fd22 	bl	80037f4 <dev_find_peaks>

    //  load raw value again for SPO2 calculation : RED(=y) and IR(=X)
    for ( int32_t n_cnt_k = 0; n_cnt_k < n_ir_buffer_length; n_cnt_k++ )
 8002db0:	2300      	movs	r3, #0
 8002db2:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8002db6:	e02a      	b.n	8002e0e <oximeter5_get_oxygen_saturation+0x272>
    {
        an_x[ n_cnt_k ] = pun_ir_buffer[ n_cnt_k ];
 8002db8:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002dc2:	f5a2 7279 	sub.w	r2, r2, #996	; 0x3e4
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	4413      	add	r3, r2
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4619      	mov	r1, r3
 8002dce:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002dd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8002dd6:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8002dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        an_y[ n_cnt_k ] = pun_red_buffer[ n_cnt_k ];
 8002dde:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002de8:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 8002dec:	6812      	ldr	r2, [r2, #0]
 8002dee:	4413      	add	r3, r2
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4619      	mov	r1, r3
 8002df4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002df8:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8002dfc:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8002e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for ( int32_t n_cnt_k = 0; n_cnt_k < n_ir_buffer_length; n_cnt_k++ )
 8002e04:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8002e08:	3301      	adds	r3, #1
 8002e0a:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8002e0e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002e12:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002e16:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	dbcb      	blt.n	8002db8 <oximeter5_get_oxygen_saturation+0x21c>
    }

    // find precise min near an_ir_valley_locs
    n_exact_ir_valley_locs_count = n_npks;
 8002e20:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8002e24:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0

    //using exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration an_ratio
    //finding AC/DC maximum of raw
    n_ratio_average = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
    n_i_ratio_count = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

    for ( int32_t n_cnt_k = 0; n_cnt_k < 5; n_cnt_k++ )
 8002e34:	2300      	movs	r3, #0
 8002e36:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8002e3a:	e00d      	b.n	8002e58 <oximeter5_get_oxygen_saturation+0x2bc>
    {
        an_ratio[ n_cnt_k ] = 0;
 8002e3c:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8002e46:	443b      	add	r3, r7
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f843 2cbc 	str.w	r2, [r3, #-188]
    for ( int32_t n_cnt_k = 0; n_cnt_k < 5; n_cnt_k++ )
 8002e4e:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8002e52:	3301      	adds	r3, #1
 8002e54:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8002e58:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	dded      	ble.n	8002e3c <oximeter5_get_oxygen_saturation+0x2a0>
    }

    for ( int32_t n_cnt_k = 0; n_cnt_k < n_exact_ir_valley_locs_count; n_cnt_k++ )
 8002e60:	2300      	movs	r3, #0
 8002e62:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8002e66:	e018      	b.n	8002e9a <oximeter5_get_oxygen_saturation+0x2fe>
    {
        if ( an_ir_valley_locs[ n_cnt_k ] > BUFFER_SIZE )
 8002e68:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8002e72:	443b      	add	r3, r7
 8002e74:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8002e78:	2b64      	cmp	r3, #100	; 0x64
 8002e7a:	dd09      	ble.n	8002e90 <oximeter5_get_oxygen_saturation+0x2f4>
        {
            // do not use SPO2 since valley loc is out of range
            *pn_spo2 = OXIMETER5_PN_SPO2_ERROR_DATA;
 8002e7c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002e80:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	22ff      	movs	r2, #255	; 0xff
 8002e88:	701a      	strb	r2, [r3, #0]
            error_flag  = OXIMETER5_ERROR;
 8002e8a:	23ff      	movs	r3, #255	; 0xff
 8002e8c:	f887 33cf 	strb.w	r3, [r7, #975]	; 0x3cf
    for ( int32_t n_cnt_k = 0; n_cnt_k < n_exact_ir_valley_locs_count; n_cnt_k++ )
 8002e90:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8002e94:	3301      	adds	r3, #1
 8002e96:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8002e9a:	f8d7 23ac 	ldr.w	r2, [r7, #940]	; 0x3ac
 8002e9e:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	dbe0      	blt.n	8002e68 <oximeter5_get_oxygen_saturation+0x2cc>
        }
    }

    // find max between two valley locations
    // and use an_ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2
    for ( int32_t n_cnt_k = 0; n_cnt_k < n_exact_ir_valley_locs_count - 1; n_cnt_k++ )
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 8002eac:	e16b      	b.n	8003186 <oximeter5_get_oxygen_saturation+0x5ea>
    {
        n_y_dc_max= OXIMETER5_N_X_DC_MAX;
 8002eae:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002eb2:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        n_x_dc_max= OXIMETER5_N_X_DC_MAX;
 8002eb6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002eba:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc

        if ( an_ir_valley_locs[ n_cnt_k + 1 ] - an_ir_valley_locs[ n_cnt_k ] > 3 )
 8002ebe:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8002eca:	443b      	add	r3, r7
 8002ecc:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 8002ed0:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8002eda:	443b      	add	r3, r7
 8002edc:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	f340 814a 	ble.w	800317c <oximeter5_get_oxygen_saturation+0x5e0>
        {
            for ( int32_t n_cnt_i = an_ir_valley_locs[ n_cnt_k]; n_cnt_i < an_ir_valley_locs[ n_cnt_k + 1 ]; n_cnt_i++ )
 8002ee8:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8002ef2:	443b      	add	r3, r7
 8002ef4:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8002ef8:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8002efc:	e03b      	b.n	8002f76 <oximeter5_get_oxygen_saturation+0x3da>
 8002efe:	bf00      	nop
 8002f00:	51eb851f 	.word	0x51eb851f
            {
                if ( an_x[ n_cnt_i ] > n_x_dc_max )
 8002f04:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002f08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8002f0c:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8002f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f14:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	da0d      	bge.n	8002f38 <oximeter5_get_oxygen_saturation+0x39c>
                {
                    n_x_dc_max = an_x[ n_cnt_i ];
 8002f1c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002f20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8002f24:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8002f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f2c:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
                    n_x_dc_max_idx = n_cnt_i;
 8002f30:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8002f34:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
                }

                if ( an_y[ n_cnt_i ] > n_y_dc_max )
 8002f38:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002f3c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8002f40:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8002f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f48:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	da0d      	bge.n	8002f6c <oximeter5_get_oxygen_saturation+0x3d0>
                {
                    n_y_dc_max = an_y[ n_cnt_i ];
 8002f50:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002f54:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8002f58:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8002f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f60:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
                    n_y_dc_max_idx = n_cnt_i;
 8002f64:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8002f68:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
            for ( int32_t n_cnt_i = an_ir_valley_locs[ n_cnt_k]; n_cnt_i < an_ir_valley_locs[ n_cnt_k + 1 ]; n_cnt_i++ )
 8002f6c:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8002f70:	3301      	adds	r3, #1
 8002f72:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8002f76:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8002f82:	443b      	add	r3, r7
 8002f84:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8002f88:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	dbb9      	blt.n	8002f04 <oximeter5_get_oxygen_saturation+0x368>

                }
            }

            //red
            n_y_ac = ( an_y[ an_ir_valley_locs[ n_cnt_k + 1 ] ] - an_y[ an_ir_valley_locs[ n_cnt_k ] ] ) * ( n_y_dc_max_idx - an_ir_valley_locs[ n_cnt_k ] );
 8002f90:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8002f94:	3301      	adds	r3, #1
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8002f9c:	443b      	add	r3, r7
 8002f9e:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 8002fa2:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002fa6:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8002faa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002fae:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8002fb8:	443b      	add	r3, r7
 8002fba:	f853 1ca8 	ldr.w	r1, [r3, #-168]
 8002fbe:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002fc2:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8002fc6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002fca:	1ad2      	subs	r2, r2, r3
 8002fcc:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8002fd6:	443b      	add	r3, r7
 8002fd8:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8002fdc:	f8d7 13d8 	ldr.w	r1, [r7, #984]	; 0x3d8
 8002fe0:	1acb      	subs	r3, r1, r3
 8002fe2:	fb02 f303 	mul.w	r3, r2, r3
 8002fe6:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
            n_y_ac =  an_y[an_ir_valley_locs[ n_cnt_k ] ] + n_y_ac / ( an_ir_valley_locs[ n_cnt_k + 1 ] - an_ir_valley_locs[ n_cnt_k ] );
 8002fea:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8002ff4:	443b      	add	r3, r7
 8002ff6:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 8002ffa:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002ffe:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8003002:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003006:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800300a:	3301      	adds	r3, #1
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8003012:	443b      	add	r3, r7
 8003014:	f853 1ca8 	ldr.w	r1, [r3, #-168]
 8003018:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8003022:	443b      	add	r3, r7
 8003024:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8003028:	1acb      	subs	r3, r1, r3
 800302a:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 800302e:	fb91 f3f3 	sdiv	r3, r1, r3
 8003032:	4413      	add	r3, r2
 8003034:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
            // subracting linear DC compoenents from raw
            n_y_ac =  an_y[ n_y_dc_max_idx ] - n_y_ac;
 8003038:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800303c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8003040:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8003044:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003048:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
            // ir
            n_x_ac = ( an_x[ an_ir_valley_locs[ n_cnt_k + 1 ] ] - an_x[ an_ir_valley_locs[ n_cnt_k ] ] ) * ( n_x_dc_max_idx - an_ir_valley_locs[ n_cnt_k ] );
 8003052:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8003056:	3301      	adds	r3, #1
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 800305e:	443b      	add	r3, r7
 8003060:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 8003064:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003068:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800306c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003070:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 800307a:	443b      	add	r3, r7
 800307c:	f853 1ca8 	ldr.w	r1, [r3, #-168]
 8003080:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003084:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8003088:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800308c:	1ad2      	subs	r2, r2, r3
 800308e:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8003098:	443b      	add	r3, r7
 800309a:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 800309e:	f8d7 13d4 	ldr.w	r1, [r7, #980]	; 0x3d4
 80030a2:	1acb      	subs	r3, r1, r3
 80030a4:	fb02 f303 	mul.w	r3, r2, r3
 80030a8:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
            // subracting linear DC compoenents from raw
            n_x_ac =  an_x[ an_ir_valley_locs[ n_cnt_k ] ] + n_x_ac / ( an_ir_valley_locs[ n_cnt_k + 1 ] - an_ir_valley_locs[ n_cnt_k ] );
 80030ac:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 80030b6:	443b      	add	r3, r7
 80030b8:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 80030bc:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80030c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80030c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80030c8:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80030cc:	3301      	adds	r3, #1
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 80030d4:	443b      	add	r3, r7
 80030d6:	f853 1ca8 	ldr.w	r1, [r3, #-168]
 80030da:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 80030e4:	443b      	add	r3, r7
 80030e6:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 80030ea:	1acb      	subs	r3, r1, r3
 80030ec:	f8d7 1390 	ldr.w	r1, [r7, #912]	; 0x390
 80030f0:	fb91 f3f3 	sdiv	r3, r1, r3
 80030f4:	4413      	add	r3, r2
 80030f6:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
            n_x_ac =  an_x[ n_y_dc_max_idx ] - n_x_ac;
 80030fa:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80030fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8003102:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8003106:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800310a:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
            //prepare X100 to preserve floating value
            n_nume =( n_y_ac * n_x_dc_max ) >> 7;
 8003114:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8003118:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 800311c:	fb02 f303 	mul.w	r3, r2, r3
 8003120:	11db      	asrs	r3, r3, #7
 8003122:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
            n_denom = ( n_x_ac * n_y_dc_max ) >> 7;
 8003126:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800312a:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 800312e:	fb02 f303 	mul.w	r3, r2, r3
 8003132:	11db      	asrs	r3, r3, #7
 8003134:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388

            if ( ( n_denom > 0 )  && ( n_i_ratio_count < 5 ) && ( n_nume != 0 ) )
 8003138:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 800313c:	2b00      	cmp	r3, #0
 800313e:	dd1d      	ble.n	800317c <oximeter5_get_oxygen_saturation+0x5e0>
 8003140:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8003144:	2b04      	cmp	r3, #4
 8003146:	dc19      	bgt.n	800317c <oximeter5_get_oxygen_saturation+0x5e0>
 8003148:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d015      	beq.n	800317c <oximeter5_get_oxygen_saturation+0x5e0>
            {
                an_ratio[ n_i_ratio_count ] = ( n_nume * 100 ) / n_denom;
 8003150:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8003154:	2264      	movs	r2, #100	; 0x64
 8003156:	fb03 f202 	mul.w	r2, r3, r2
 800315a:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 800315e:	fb92 f2f3 	sdiv	r2, r2, r3
 8003162:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 800316c:	443b      	add	r3, r7
 800316e:	f843 2cbc 	str.w	r2, [r3, #-188]
                n_i_ratio_count++;
 8003172:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8003176:	3301      	adds	r3, #1
 8003178:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
    for ( int32_t n_cnt_k = 0; n_cnt_k < n_exact_ir_valley_locs_count - 1; n_cnt_k++ )
 800317c:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8003180:	3301      	adds	r3, #1
 8003182:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 8003186:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800318a:	3b01      	subs	r3, #1
 800318c:	f8d7 23a8 	ldr.w	r2, [r7, #936]	; 0x3a8
 8003190:	429a      	cmp	r2, r3
 8003192:	f6ff ae8c 	blt.w	8002eae <oximeter5_get_oxygen_saturation+0x312>
            }
        }
    }

    // choose median value since PPG signal may varies from beat to beat
    dev_sort_ascend( an_ratio, n_i_ratio_count );
 8003196:	f507 734d 	add.w	r3, r7, #820	; 0x334
 800319a:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	; 0x3e8
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fa85 	bl	80036ae <dev_sort_ascend>
    n_middle_idx = n_i_ratio_count / 2;
 80031a4:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	da00      	bge.n	80031ae <oximeter5_get_oxygen_saturation+0x612>
 80031ac:	3301      	adds	r3, #1
 80031ae:	105b      	asrs	r3, r3, #1
 80031b0:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c

    if ( n_middle_idx > 1 )
 80031b4:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	dd18      	ble.n	80031ee <oximeter5_get_oxygen_saturation+0x652>
    {
        // use median
        n_ratio_average = ( an_ratio[ n_middle_idx - 1 ] + an_ratio[ n_middle_idx ] ) / 2;
 80031bc:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 80031c0:	3b01      	subs	r3, #1
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 80031c8:	443b      	add	r3, r7
 80031ca:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 80031ce:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 80031d8:	443b      	add	r3, r7
 80031da:	f853 3cbc 	ldr.w	r3, [r3, #-188]
 80031de:	4413      	add	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	da00      	bge.n	80031e6 <oximeter5_get_oxygen_saturation+0x64a>
 80031e4:	3301      	adds	r3, #1
 80031e6:	105b      	asrs	r3, r3, #1
 80031e8:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 80031ec:	e009      	b.n	8003202 <oximeter5_get_oxygen_saturation+0x666>
    }
    else
    {
        n_ratio_average = an_ratio[ n_middle_idx ];
 80031ee:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 80031f8:	443b      	add	r3, r7
 80031fa:	f853 3cbc 	ldr.w	r3, [r3, #-188]
 80031fe:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
    }

    if ( ( n_ratio_average > 2 ) && ( n_ratio_average < 184 ) )
 8003202:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8003206:	2b02      	cmp	r3, #2
 8003208:	dd17      	ble.n	800323a <oximeter5_get_oxygen_saturation+0x69e>
 800320a:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 800320e:	2bb7      	cmp	r3, #183	; 0xb7
 8003210:	dc13      	bgt.n	800323a <oximeter5_get_oxygen_saturation+0x69e>
    {
        n_spo2_calc = uch_spo2_table[ n_ratio_average ];
 8003212:	4a12      	ldr	r2, [pc, #72]	; (800325c <oximeter5_get_oxygen_saturation+0x6c0>)
 8003214:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8003218:	4413      	add	r3, r2
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
        *pn_spo2 = n_spo2_calc;
 8003220:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8003224:	b2da      	uxtb	r2, r3
 8003226:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800322a:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	701a      	strb	r2, [r3, #0]
        error_flag = OXIMETER5_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	f887 33cf 	strb.w	r3, [r7, #975]	; 0x3cf
 8003238:	e009      	b.n	800324e <oximeter5_get_oxygen_saturation+0x6b2>
    }
    else
    {
        *pn_spo2 = OXIMETER5_PN_SPO2_ERROR_DATA;
 800323a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800323e:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	22ff      	movs	r2, #255	; 0xff
 8003246:	701a      	strb	r2, [r3, #0]
        error_flag  = OXIMETER5_ERROR;
 8003248:	23ff      	movs	r3, #255	; 0xff
 800324a:	f887 33cf 	strb.w	r3, [r7, #975]	; 0x3cf
    }

    return error_flag;
 800324e:	f897 33cf 	ldrb.w	r3, [r7, #975]	; 0x3cf
}
 8003252:	4618      	mov	r0, r3
 8003254:	f507 777d 	add.w	r7, r7, #1012	; 0x3f4
 8003258:	46bd      	mov	sp, r7
 800325a:	bd90      	pop	{r4, r7, pc}
 800325c:	0801256c 	.word	0x0801256c

08003260 <oximeter5_get_heart_rate>:

err_t oximeter5_get_heart_rate ( uint32_t *pun_ir_buffer, int32_t n_ir_buffer_length, uint32_t *pun_red_buffer, int32_t *pn_heart_rate )
{
 8003260:	b590      	push	{r4, r7, lr}
 8003262:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8003266:	af04      	add	r7, sp, #16
 8003268:	f507 7402 	add.w	r4, r7, #520	; 0x208
 800326c:	f5a4 74fe 	sub.w	r4, r4, #508	; 0x1fc
 8003270:	6020      	str	r0, [r4, #0]
 8003272:	f507 7002 	add.w	r0, r7, #520	; 0x208
 8003276:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
 800327a:	6001      	str	r1, [r0, #0]
 800327c:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8003280:	f5a1 7101 	sub.w	r1, r1, #516	; 0x204
 8003284:	600a      	str	r2, [r1, #0]
 8003286:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800328a:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 800328e:	6013      	str	r3, [r2, #0]
    int32_t n_peak_interval_sum;
    int32_t an_x[ BUFFER_SIZE ];
     err_t error_flag;

    // calculates DC mean and subtract DC from ir
    un_ir_mean = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    for ( int32_t n_cnt_k = 0; n_cnt_k < n_ir_buffer_length; n_cnt_k++ )
 8003296:	2300      	movs	r3, #0
 8003298:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800329c:	e013      	b.n	80032c6 <oximeter5_get_heart_rate+0x66>
    {
        un_ir_mean += pun_ir_buffer[ n_cnt_k ];
 800329e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032a8:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	4413      	add	r3, r2
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 80032b6:	4413      	add	r3, r2
 80032b8:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    for ( int32_t n_cnt_k = 0; n_cnt_k < n_ir_buffer_length; n_cnt_k++ )
 80032bc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032c0:	3301      	adds	r3, #1
 80032c2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 80032c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ca:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80032ce:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	dbe2      	blt.n	800329e <oximeter5_get_heart_rate+0x3e>
    }

    un_ir_mean = un_ir_mean / n_ir_buffer_length;
 80032d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032dc:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 80032e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ea:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

    // remove DC and invert signal so that we can use peak detector as valley detector
    for ( int32_t n_cnt_k = 0; n_cnt_k < n_ir_buffer_length; n_cnt_k++ )
 80032ee:	2300      	movs	r3, #0
 80032f0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80032f4:	e01a      	b.n	800332c <oximeter5_get_heart_rate+0xcc>
    {
        an_x[ n_cnt_k ] = -1 * ( pun_ir_buffer[ n_cnt_k ] - un_ir_mean );
 80032f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003300:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	4413      	add	r3, r2
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	4619      	mov	r1, r3
 8003312:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003316:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800331a:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800331e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for ( int32_t n_cnt_k = 0; n_cnt_k < n_ir_buffer_length; n_cnt_k++ )
 8003322:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003326:	3301      	adds	r3, #1
 8003328:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800332c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003330:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8003334:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	dbdb      	blt.n	80032f6 <oximeter5_get_heart_rate+0x96>
    }

    // 4 pt Moving Average
    for( int32_t n_cnt_k = 0; n_cnt_k < BUFFER_SIZE - MA4_SIZE; n_cnt_k++ )
 800333e:	2300      	movs	r3, #0
 8003340:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8003344:	e037      	b.n	80033b6 <oximeter5_get_heart_rate+0x156>
    {
        an_x[ n_cnt_k ]=( an_x[ n_cnt_k ] + an_x[ n_cnt_k + 1 ] + an_x[ n_cnt_k + 2 ] + an_x[ n_cnt_k + 3 ] ) / 4;
 8003346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800334a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800334e:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8003352:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003356:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800335a:	1c59      	adds	r1, r3, #1
 800335c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003360:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003364:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003368:	441a      	add	r2, r3
 800336a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800336e:	1c99      	adds	r1, r3, #2
 8003370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003374:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003378:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800337c:	441a      	add	r2, r3
 800337e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003382:	1cd9      	adds	r1, r3, #3
 8003384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003388:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800338c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003390:	4413      	add	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	da00      	bge.n	8003398 <oximeter5_get_heart_rate+0x138>
 8003396:	3303      	adds	r3, #3
 8003398:	109b      	asrs	r3, r3, #2
 800339a:	4619      	mov	r1, r3
 800339c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033a0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80033a4:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 80033a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( int32_t n_cnt_k = 0; n_cnt_k < BUFFER_SIZE - MA4_SIZE; n_cnt_k++ )
 80033ac:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80033b0:	3301      	adds	r3, #1
 80033b2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80033b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80033ba:	2b5f      	cmp	r3, #95	; 0x5f
 80033bc:	ddc3      	ble.n	8003346 <oximeter5_get_heart_rate+0xe6>
    }

    // calculate threshold
    n_th1 = 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    for ( int32_t n_cnt_k = 0; n_cnt_k < BUFFER_SIZE; n_cnt_k++ )
 80033c4:	2300      	movs	r3, #0
 80033c6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80033ca:	e011      	b.n	80033f0 <oximeter5_get_heart_rate+0x190>
    {
        n_th1 +=  an_x[ n_cnt_k ];
 80033cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80033d4:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 80033d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033dc:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 80033e0:	4413      	add	r3, r2
 80033e2:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    for ( int32_t n_cnt_k = 0; n_cnt_k < BUFFER_SIZE; n_cnt_k++ )
 80033e6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80033ea:	3301      	adds	r3, #1
 80033ec:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80033f0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80033f4:	2b63      	cmp	r3, #99	; 0x63
 80033f6:	dde9      	ble.n	80033cc <oximeter5_get_heart_rate+0x16c>
    }

    n_th1 = n_th1 / BUFFER_SIZE;
 80033f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033fc:	4a49      	ldr	r2, [pc, #292]	; (8003524 <oximeter5_get_heart_rate+0x2c4>)
 80033fe:	fb82 1203 	smull	r1, r2, r2, r3
 8003402:	1152      	asrs	r2, r2, #5
 8003404:	17db      	asrs	r3, r3, #31
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

    if ( n_th1 < 30 )
 800340c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003410:	2b1d      	cmp	r3, #29
 8003412:	dc02      	bgt.n	800341a <oximeter5_get_heart_rate+0x1ba>
    {
        n_th1 = 30; // min allowed
 8003414:	231e      	movs	r3, #30
 8003416:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    }

    if( n_th1 > 60 )
 800341a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800341e:	2b3c      	cmp	r3, #60	; 0x3c
 8003420:	dd02      	ble.n	8003428 <oximeter5_get_heart_rate+0x1c8>
    {
        n_th1 = 60; // max allowed
 8003422:	233c      	movs	r3, #60	; 0x3c
 8003424:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    }

    for ( int32_t n_cnt_k = 0; n_cnt_k < 15; n_cnt_k++ )
 8003428:	2300      	movs	r3, #0
 800342a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800342e:	e00d      	b.n	800344c <oximeter5_get_heart_rate+0x1ec>
    {
        an_ir_valley_locs[ n_cnt_k ] = 0;
 8003430:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800343a:	443b      	add	r3, r7
 800343c:	2200      	movs	r2, #0
 800343e:	f843 2c68 	str.w	r2, [r3, #-104]
    for ( int32_t n_cnt_k = 0; n_cnt_k < 15; n_cnt_k++ )
 8003442:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003446:	3301      	adds	r3, #1
 8003448:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800344c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003450:	2b0e      	cmp	r3, #14
 8003452:	dded      	ble.n	8003430 <oximeter5_get_heart_rate+0x1d0>
    }

    // since we flipped signal, we use peak detector as valley detector
    dev_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks
 8003454:	f107 0210 	add.w	r2, r7, #16
 8003458:	f507 71ee 	add.w	r1, r7, #476	; 0x1dc
 800345c:	f507 70d0 	add.w	r0, r7, #416	; 0x1a0
 8003460:	230f      	movs	r3, #15
 8003462:	9302      	str	r3, [sp, #8]
 8003464:	2304      	movs	r3, #4
 8003466:	9301      	str	r3, [sp, #4]
 8003468:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	2364      	movs	r3, #100	; 0x64
 8003470:	f000 f9c0 	bl	80037f4 <dev_find_peaks>

    n_peak_interval_sum = 0;
 8003474:	2300      	movs	r3, #0
 8003476:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc

    if ( n_npks >= 2 )
 800347a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800347e:	2b01      	cmp	r3, #1
 8003480:	dd3e      	ble.n	8003500 <oximeter5_get_heart_rate+0x2a0>
    {
        for ( int32_t n_cnt_k = 1; n_cnt_k < n_npks; n_cnt_k++ )
 8003482:	2301      	movs	r3, #1
 8003484:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003488:	e01b      	b.n	80034c2 <oximeter5_get_heart_rate+0x262>
        {
            n_peak_interval_sum += ( an_ir_valley_locs[ n_cnt_k ] -an_ir_valley_locs[ n_cnt_k - 1 ] );
 800348a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003494:	443b      	add	r3, r7
 8003496:	f853 2c68 	ldr.w	r2, [r3, #-104]
 800349a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800349e:	3b01      	subs	r3, #1
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034a6:	443b      	add	r3, r7
 80034a8:	f853 3c68 	ldr.w	r3, [r3, #-104]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80034b2:	4413      	add	r3, r2
 80034b4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
        for ( int32_t n_cnt_k = 1; n_cnt_k < n_npks; n_cnt_k++ )
 80034b8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80034bc:	3301      	adds	r3, #1
 80034be:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80034c2:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80034c6:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80034ca:	429a      	cmp	r2, r3
 80034cc:	dbdd      	blt.n	800348a <oximeter5_get_heart_rate+0x22a>
        }

        n_peak_interval_sum = n_peak_interval_sum / ( n_npks - 1 );
 80034ce:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80034d2:	3b01      	subs	r3, #1
 80034d4:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80034d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80034dc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
        *pn_heart_rate = ( int32_t ) ( ( SAMPLING_FREQUENCY * 60 ) / n_peak_interval_sum );
 80034e0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80034e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80034e8:	fb92 f2f3 	sdiv	r2, r2, r3
 80034ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034f0:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	601a      	str	r2, [r3, #0]
        error_flag  = OXIMETER5_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
 80034fe:	e009      	b.n	8003514 <oximeter5_get_heart_rate+0x2b4>
    }
    else
    {
        *pn_heart_rate = OXIMETER5_HEART_RATE_ERROR_DATA; // unable to calculate because # of peaks are too small
 8003500:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003504:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a07      	ldr	r2, [pc, #28]	; (8003528 <oximeter5_get_heart_rate+0x2c8>)
 800350c:	601a      	str	r2, [r3, #0]
        error_flag  = OXIMETER5_ERROR;
 800350e:	23ff      	movs	r3, #255	; 0xff
 8003510:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
    }

  return error_flag;
 8003514:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb

}
 8003518:	4618      	mov	r0, r3
 800351a:	f507 7703 	add.w	r7, r7, #524	; 0x20c
 800351e:	46bd      	mov	sp, r7
 8003520:	bd90      	pop	{r4, r7, pc}
 8003522:	bf00      	nop
 8003524:	51eb851f 	.word	0x51eb851f
 8003528:	fffffc19 	.word	0xfffffc19

0800352c <dev_peaks_above_min_height>:


static void dev_peaks_above_min_height ( int32_t *pn_locs, int32_t *n_npks,  int32_t  *pn_x, uint8_t n_size, int32_t n_min_height )
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	70fb      	strb	r3, [r7, #3]
    uint8_t n_width;
    uint8_t n_cnt = 1;
 800353a:	2301      	movs	r3, #1
 800353c:	75bb      	strb	r3, [r7, #22]

    *n_npks = 0;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

    while ( n_cnt < ( n_size - 1 ) )
 8003544:	e05b      	b.n	80035fe <dev_peaks_above_min_height+0xd2>
    {
        if ( pn_x[ n_cnt ] > n_min_height && pn_x[ n_cnt ] > pn_x[ n_cnt - 1 ] )
 8003546:	7dbb      	ldrb	r3, [r7, #22]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	4413      	add	r3, r2
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6a3a      	ldr	r2, [r7, #32]
 8003552:	429a      	cmp	r2, r3
 8003554:	da50      	bge.n	80035f8 <dev_peaks_above_min_height+0xcc>
 8003556:	7dbb      	ldrb	r3, [r7, #22]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	7db9      	ldrb	r1, [r7, #22]
 8003562:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003566:	440b      	add	r3, r1
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	440b      	add	r3, r1
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	dd41      	ble.n	80035f8 <dev_peaks_above_min_height+0xcc>
        {
            n_width = 1;
 8003574:	2301      	movs	r3, #1
 8003576:	75fb      	strb	r3, [r7, #23]

            while ( n_cnt + n_width < n_size && pn_x[ n_cnt ] == pn_x[ n_cnt + n_width ] )
 8003578:	e002      	b.n	8003580 <dev_peaks_above_min_height+0x54>
            {
                n_width++;
 800357a:	7dfb      	ldrb	r3, [r7, #23]
 800357c:	3301      	adds	r3, #1
 800357e:	75fb      	strb	r3, [r7, #23]
            while ( n_cnt + n_width < n_size && pn_x[ n_cnt ] == pn_x[ n_cnt + n_width ] )
 8003580:	7dba      	ldrb	r2, [r7, #22]
 8003582:	7dfb      	ldrb	r3, [r7, #23]
 8003584:	441a      	add	r2, r3
 8003586:	78fb      	ldrb	r3, [r7, #3]
 8003588:	429a      	cmp	r2, r3
 800358a:	da0d      	bge.n	80035a8 <dev_peaks_above_min_height+0x7c>
 800358c:	7dbb      	ldrb	r3, [r7, #22]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	4413      	add	r3, r2
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	7db9      	ldrb	r1, [r7, #22]
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	440b      	add	r3, r1
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	440b      	add	r3, r1
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d0e8      	beq.n	800357a <dev_peaks_above_min_height+0x4e>
            }

            if ( pn_x[ n_cnt ] > pn_x[ n_cnt + n_width ] && ( *n_npks ) < 15 )
 80035a8:	7dbb      	ldrb	r3, [r7, #22]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	4413      	add	r3, r2
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	7db9      	ldrb	r1, [r7, #22]
 80035b4:	7dfb      	ldrb	r3, [r7, #23]
 80035b6:	440b      	add	r3, r1
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	440b      	add	r3, r1
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	dd14      	ble.n	80035ee <dev_peaks_above_min_height+0xc2>
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b0e      	cmp	r3, #14
 80035ca:	dc10      	bgt.n	80035ee <dev_peaks_above_min_height+0xc2>
            {
                pn_locs[( *n_npks )++ ] = n_cnt;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	1c59      	adds	r1, r3, #1
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	6011      	str	r1, [r2, #0]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4413      	add	r3, r2
 80035dc:	7dba      	ldrb	r2, [r7, #22]
 80035de:	601a      	str	r2, [r3, #0]
                n_cnt += n_width + 1;
 80035e0:	7dfa      	ldrb	r2, [r7, #23]
 80035e2:	7dbb      	ldrb	r3, [r7, #22]
 80035e4:	4413      	add	r3, r2
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	3301      	adds	r3, #1
 80035ea:	75bb      	strb	r3, [r7, #22]
 80035ec:	e003      	b.n	80035f6 <dev_peaks_above_min_height+0xca>
            }
            else
            {
                n_cnt += n_width;
 80035ee:	7dba      	ldrb	r2, [r7, #22]
 80035f0:	7dfb      	ldrb	r3, [r7, #23]
 80035f2:	4413      	add	r3, r2
 80035f4:	75bb      	strb	r3, [r7, #22]
            if ( pn_x[ n_cnt ] > pn_x[ n_cnt + n_width ] && ( *n_npks ) < 15 )
 80035f6:	e002      	b.n	80035fe <dev_peaks_above_min_height+0xd2>
            }
        }
        else
        {
            n_cnt++;
 80035f8:	7dbb      	ldrb	r3, [r7, #22]
 80035fa:	3301      	adds	r3, #1
 80035fc:	75bb      	strb	r3, [r7, #22]
    while ( n_cnt < ( n_size - 1 ) )
 80035fe:	7dba      	ldrb	r2, [r7, #22]
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	3b01      	subs	r3, #1
 8003604:	429a      	cmp	r2, r3
 8003606:	db9e      	blt.n	8003546 <dev_peaks_above_min_height+0x1a>
        }
    }
}
 8003608:	bf00      	nop
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <dev_sort_indices_descend>:


static void dev_sort_indices_descend ( int32_t *pn_x, int32_t *pn_indx, int32_t n_size )
{
 8003616:	b480      	push	{r7}
 8003618:	b089      	sub	sp, #36	; 0x24
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
    int32_t n_temp;

    for ( int32_t n_cnt_i = 1; n_cnt_i < n_size; n_cnt_i++ )
 8003622:	2301      	movs	r3, #1
 8003624:	61fb      	str	r3, [r7, #28]
 8003626:	e037      	b.n	8003698 <dev_sort_indices_descend+0x82>
    {
        n_temp = pn_indx[ n_cnt_i ];
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	4413      	add	r3, r2
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	617b      	str	r3, [r7, #20]

        int32_t n_cnt_j;
        for ( n_cnt_j = n_cnt_i; n_cnt_j > 0 && pn_x[ n_temp ] > pn_x[ pn_indx[ n_cnt_j - 1 ] ]; n_cnt_j-- )
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	61bb      	str	r3, [r7, #24]
 8003638:	e00f      	b.n	800365a <dev_sort_indices_descend+0x44>
        {
            pn_indx[ n_cnt_j ] = pn_indx[ n_cnt_j - 1 ];
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	441a      	add	r2, r3
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	68b9      	ldr	r1, [r7, #8]
 800364e:	440b      	add	r3, r1
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	601a      	str	r2, [r3, #0]
        for ( n_cnt_j = n_cnt_i; n_cnt_j > 0 && pn_x[ n_temp ] > pn_x[ pn_indx[ n_cnt_j - 1 ] ]; n_cnt_j-- )
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	3b01      	subs	r3, #1
 8003658:	61bb      	str	r3, [r7, #24]
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	2b00      	cmp	r3, #0
 800365e:	dd12      	ble.n	8003686 <dev_sort_indices_descend+0x70>
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4413      	add	r3, r2
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	69b9      	ldr	r1, [r7, #24]
 800366c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003670:	440b      	add	r3, r1
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	440b      	add	r3, r1
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	68f9      	ldr	r1, [r7, #12]
 800367e:	440b      	add	r3, r1
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	dcd9      	bgt.n	800363a <dev_sort_indices_descend+0x24>
        }

        pn_indx[ n_cnt_j ] = n_temp;
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	4413      	add	r3, r2
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	601a      	str	r2, [r3, #0]
    for ( int32_t n_cnt_i = 1; n_cnt_i < n_size; n_cnt_i++ )
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3301      	adds	r3, #1
 8003696:	61fb      	str	r3, [r7, #28]
 8003698:	69fa      	ldr	r2, [r7, #28]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	429a      	cmp	r2, r3
 800369e:	dbc3      	blt.n	8003628 <dev_sort_indices_descend+0x12>
    }
}
 80036a0:	bf00      	nop
 80036a2:	bf00      	nop
 80036a4:	3724      	adds	r7, #36	; 0x24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <dev_sort_ascend>:

static void dev_sort_ascend ( int32_t  *pn_x, int32_t n_size )
{
 80036ae:	b480      	push	{r7}
 80036b0:	b087      	sub	sp, #28
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	6039      	str	r1, [r7, #0]
    int32_t n_temp;

    for ( int32_t n_cnt_i = 1; n_cnt_i < n_size; n_cnt_i++ )
 80036b8:	2301      	movs	r3, #1
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	e02f      	b.n	800371e <dev_sort_ascend+0x70>
    {
        n_temp = pn_x[ n_cnt_i ];
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	4413      	add	r3, r2
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60fb      	str	r3, [r7, #12]

        int32_t n_cnt_j;
        for ( n_cnt_j = n_cnt_i; n_cnt_j > 0 && n_temp < pn_x[ n_cnt_j - 1 ]; n_cnt_j-- )
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	613b      	str	r3, [r7, #16]
 80036ce:	e00f      	b.n	80036f0 <dev_sort_ascend+0x42>
        {
            pn_x[ n_cnt_j ] = pn_x[ n_cnt_j - 1 ];
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	441a      	add	r2, r3
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	440b      	add	r3, r1
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	601a      	str	r2, [r3, #0]
        for ( n_cnt_j = n_cnt_i; n_cnt_j > 0 && n_temp < pn_x[ n_cnt_j - 1 ]; n_cnt_j-- )
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	3b01      	subs	r3, #1
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	dd0a      	ble.n	800370c <dev_sort_ascend+0x5e>
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	4413      	add	r3, r2
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	429a      	cmp	r2, r3
 800370a:	dbe1      	blt.n	80036d0 <dev_sort_ascend+0x22>
        }

        pn_x[ n_cnt_j ] = n_temp;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	4413      	add	r3, r2
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	601a      	str	r2, [r3, #0]
    for ( int32_t n_cnt_i = 1; n_cnt_i < n_size; n_cnt_i++ )
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	3301      	adds	r3, #1
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	dbcb      	blt.n	80036be <dev_sort_ascend+0x10>
    }
}
 8003726:	bf00      	nop
 8003728:	bf00      	nop
 800372a:	371c      	adds	r7, #28
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <dev_remove_close_peaks>:

static void dev_remove_close_peaks ( int32_t *pn_locs, int32_t *pn_npks, int32_t *pn_x, int32_t n_min_distance )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	603b      	str	r3, [r7, #0]
    int32_t n_old_npks, n_dist;

    dev_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	68f9      	ldr	r1, [r7, #12]
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff ff63 	bl	8003616 <dev_sort_indices_descend>

    for ( int32_t n_cnt_i = -1; n_cnt_i < *pn_npks; n_cnt_i++ )
 8003750:	f04f 33ff 	mov.w	r3, #4294967295
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	e03e      	b.n	80037d6 <dev_remove_close_peaks+0xa2>
    {
        n_old_npks = *pn_npks;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	617b      	str	r3, [r7, #20]
        *pn_npks = n_cnt_i + 1;
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	601a      	str	r2, [r3, #0]

        for ( int32_t n_cnt_j = n_cnt_i + 1; n_cnt_j < n_old_npks; n_cnt_j++ )
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	3301      	adds	r3, #1
 800376a:	61bb      	str	r3, [r7, #24]
 800376c:	e02c      	b.n	80037c8 <dev_remove_close_peaks+0x94>
        {
            n_dist =  pn_locs[ n_cnt_j ] - ( n_cnt_i == -1 ? -1 : pn_locs[ n_cnt_i ] );
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	4413      	add	r3, r2
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377e:	d005      	beq.n	800378c <dev_remove_close_peaks+0x58>
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	68f9      	ldr	r1, [r7, #12]
 8003786:	440b      	add	r3, r1
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	e001      	b.n	8003790 <dev_remove_close_peaks+0x5c>
 800378c:	f04f 33ff 	mov.w	r3, #4294967295
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	613b      	str	r3, [r7, #16]

            if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	dc04      	bgt.n	80037a6 <dev_remove_close_peaks+0x72>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	425b      	negs	r3, r3
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	da0d      	bge.n	80037c2 <dev_remove_close_peaks+0x8e>
            {
                pn_locs[ (*pn_npks)++ ] = pn_locs[ n_cnt_j ];
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	441a      	add	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	1c58      	adds	r0, r3, #1
 80037b4:	68b9      	ldr	r1, [r7, #8]
 80037b6:	6008      	str	r0, [r1, #0]
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	68f9      	ldr	r1, [r7, #12]
 80037bc:	440b      	add	r3, r1
 80037be:	6812      	ldr	r2, [r2, #0]
 80037c0:	601a      	str	r2, [r3, #0]
        for ( int32_t n_cnt_j = n_cnt_i + 1; n_cnt_j < n_old_npks; n_cnt_j++ )
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	3301      	adds	r3, #1
 80037c6:	61bb      	str	r3, [r7, #24]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	dbce      	blt.n	800376e <dev_remove_close_peaks+0x3a>
    for ( int32_t n_cnt_i = -1; n_cnt_i < *pn_npks; n_cnt_i++ )
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	3301      	adds	r3, #1
 80037d4:	61fb      	str	r3, [r7, #28]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	429a      	cmp	r2, r3
 80037de:	dbbb      	blt.n	8003758 <dev_remove_close_peaks+0x24>
            }
        }
    }

    dev_sort_ascend( pn_locs, *pn_npks );
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4619      	mov	r1, r3
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f7ff ff61 	bl	80036ae <dev_sort_ascend>
}
 80037ec:	bf00      	nop
 80037ee:	3720      	adds	r7, #32
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <dev_find_peaks>:

static void dev_find_peaks ( int32_t *pn_locs, int32_t *n_npks,  int32_t  *pn_x, uint8_t n_size, int32_t n_min_height, int32_t n_min_distance, int32_t n_max_num )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	70fb      	strb	r3, [r7, #3]
    dev_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	4613      	mov	r3, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f7ff fe8c 	bl	800352c <dev_peaks_above_min_height>
    dev_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f7ff ff8a 	bl	8003734 <dev_remove_close_peaks>
    if ( *n_npks > n_max_num )
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6a3a      	ldr	r2, [r7, #32]
 8003826:	429a      	cmp	r2, r3
 8003828:	da02      	bge.n	8003830 <dev_find_peaks+0x3c>
    {
        *n_npks = n_max_num;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	6a3a      	ldr	r2, [r7, #32]
 800382e:	601a      	str	r2, [r3, #0]
    }
}
 8003830:	bf00      	nop
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800383e:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <HAL_MspInit+0x30>)
 8003840:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003844:	4a08      	ldr	r2, [pc, #32]	; (8003868 <HAL_MspInit+0x30>)
 8003846:	f043 0302 	orr.w	r3, r3, #2
 800384a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800384e:	4b06      	ldr	r3, [pc, #24]	; (8003868 <HAL_MspInit+0x30>)
 8003850:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	607b      	str	r3, [r7, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	58024400 	.word	0x58024400

0800386c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b090      	sub	sp, #64	; 0x40
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003874:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a72      	ldr	r2, [pc, #456]	; (8003a54 <HAL_ADC_MspInit+0x1e8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d14e      	bne.n	800392c <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800388e:	4b72      	ldr	r3, [pc, #456]	; (8003a58 <HAL_ADC_MspInit+0x1ec>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3301      	adds	r3, #1
 8003894:	4a70      	ldr	r2, [pc, #448]	; (8003a58 <HAL_ADC_MspInit+0x1ec>)
 8003896:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003898:	4b6f      	ldr	r3, [pc, #444]	; (8003a58 <HAL_ADC_MspInit+0x1ec>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d10e      	bne.n	80038be <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80038a0:	4b6e      	ldr	r3, [pc, #440]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 80038a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80038a6:	4a6d      	ldr	r2, [pc, #436]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 80038a8:	f043 0320 	orr.w	r3, r3, #32
 80038ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80038b0:	4b6a      	ldr	r3, [pc, #424]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 80038b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80038bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038be:	4b67      	ldr	r3, [pc, #412]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 80038c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038c4:	4a65      	ldr	r2, [pc, #404]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 80038c6:	f043 0304 	orr.w	r3, r3, #4
 80038ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038ce:	4b63      	ldr	r3, [pc, #396]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 80038d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038dc:	4b5f      	ldr	r3, [pc, #380]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 80038de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038e2:	4a5e      	ldr	r2, [pc, #376]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038ec:	4b5b      	ldr	r3, [pc, #364]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 80038ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	623b      	str	r3, [r7, #32]
 80038f8:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80038fa:	2301      	movs	r3, #1
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038fe:	2303      	movs	r3, #3
 8003900:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003902:	2300      	movs	r3, #0
 8003904:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800390a:	4619      	mov	r1, r3
 800390c:	4854      	ldr	r0, [pc, #336]	; (8003a60 <HAL_ADC_MspInit+0x1f4>)
 800390e:	f005 fef7 	bl	8009700 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8003912:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8003916:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800391a:	f001 fa8b 	bl	8004e34 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800391e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003922:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8003926:	f001 fa85 	bl	8004e34 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800392a:	e08f      	b.n	8003a4c <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a4c      	ldr	r2, [pc, #304]	; (8003a64 <HAL_ADC_MspInit+0x1f8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d133      	bne.n	800399e <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003936:	4b48      	ldr	r3, [pc, #288]	; (8003a58 <HAL_ADC_MspInit+0x1ec>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3301      	adds	r3, #1
 800393c:	4a46      	ldr	r2, [pc, #280]	; (8003a58 <HAL_ADC_MspInit+0x1ec>)
 800393e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003940:	4b45      	ldr	r3, [pc, #276]	; (8003a58 <HAL_ADC_MspInit+0x1ec>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d10e      	bne.n	8003966 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003948:	4b44      	ldr	r3, [pc, #272]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 800394a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800394e:	4a43      	ldr	r2, [pc, #268]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 8003950:	f043 0320 	orr.w	r3, r3, #32
 8003954:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003958:	4b40      	ldr	r3, [pc, #256]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 800395a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800395e:	f003 0320 	and.w	r3, r3, #32
 8003962:	61fb      	str	r3, [r7, #28]
 8003964:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003966:	4b3d      	ldr	r3, [pc, #244]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 8003968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800396c:	4a3b      	ldr	r2, [pc, #236]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003976:	4b39      	ldr	r3, [pc, #228]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 8003978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	61bb      	str	r3, [r7, #24]
 8003982:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8003984:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8003988:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800398c:	f001 fa52 	bl	8004e34 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8003990:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003994:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8003998:	f001 fa4c 	bl	8004e34 <HAL_SYSCFG_AnalogSwitchConfig>
}
 800399c:	e056      	b.n	8003a4c <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a31      	ldr	r2, [pc, #196]	; (8003a68 <HAL_ADC_MspInit+0x1fc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d151      	bne.n	8003a4c <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80039a8:	4b2c      	ldr	r3, [pc, #176]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 80039aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ae:	4a2b      	ldr	r2, [pc, #172]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 80039b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039b8:	4b28      	ldr	r3, [pc, #160]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 80039ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80039c6:	4b25      	ldr	r3, [pc, #148]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 80039c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039cc:	4a23      	ldr	r2, [pc, #140]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 80039ce:	f043 0320 	orr.w	r3, r3, #32
 80039d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039d6:	4b21      	ldr	r3, [pc, #132]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 80039d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039dc:	f003 0320 	and.w	r3, r3, #32
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039e4:	4b1d      	ldr	r3, [pc, #116]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 80039e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ea:	4a1c      	ldr	r2, [pc, #112]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 80039ec:	f043 0304 	orr.w	r3, r3, #4
 80039f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039f4:	4b19      	ldr	r3, [pc, #100]	; (8003a5c <HAL_ADC_MspInit+0x1f0>)
 80039f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003a10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a14:	4619      	mov	r1, r3
 8003a16:	4815      	ldr	r0, [pc, #84]	; (8003a6c <HAL_ADC_MspInit+0x200>)
 8003a18:	f005 fe72 	bl	8009700 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a20:	2303      	movs	r3, #3
 8003a22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	480c      	ldr	r0, [pc, #48]	; (8003a60 <HAL_ADC_MspInit+0x1f4>)
 8003a30:	f005 fe66 	bl	8009700 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8003a34:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8003a38:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003a3c:	f001 f9fa 	bl	8004e34 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8003a40:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003a44:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003a48:	f001 f9f4 	bl	8004e34 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8003a4c:	bf00      	nop
 8003a4e:	3740      	adds	r7, #64	; 0x40
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40022000 	.word	0x40022000
 8003a58:	24001804 	.word	0x24001804
 8003a5c:	58024400 	.word	0x58024400
 8003a60:	58020800 	.word	0x58020800
 8003a64:	40022100 	.word	0x40022100
 8003a68:	58026000 	.word	0x58026000
 8003a6c:	58021400 	.word	0x58021400

08003a70 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b092      	sub	sp, #72	; 0x48
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	605a      	str	r2, [r3, #4]
 8003a82:	609a      	str	r2, [r3, #8]
 8003a84:	60da      	str	r2, [r3, #12]
 8003a86:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a87      	ldr	r2, [pc, #540]	; (8003cac <HAL_ETH_MspInit+0x23c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	f040 8108 	bne.w	8003ca4 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003a94:	4b86      	ldr	r3, [pc, #536]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003a96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a9a:	4a85      	ldr	r2, [pc, #532]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aa0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003aa4:	4b82      	ldr	r3, [pc, #520]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003aa6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003aaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aae:	633b      	str	r3, [r7, #48]	; 0x30
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8003ab2:	4b7f      	ldr	r3, [pc, #508]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003ab4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003ab8:	4a7d      	ldr	r2, [pc, #500]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003abe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003ac2:	4b7b      	ldr	r3, [pc, #492]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003ac4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8003ad0:	4b77      	ldr	r3, [pc, #476]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003ad2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003ad6:	4a76      	ldr	r2, [pc, #472]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003adc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003ae0:	4b73      	ldr	r3, [pc, #460]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003ae2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aec:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003aee:	4b70      	ldr	r3, [pc, #448]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003af4:	4a6e      	ldr	r2, [pc, #440]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003afa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003afe:	4b6c      	ldr	r3, [pc, #432]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b0c:	4b68      	ldr	r3, [pc, #416]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b12:	4a67      	ldr	r2, [pc, #412]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003b14:	f043 0310 	orr.w	r3, r3, #16
 8003b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b1c:	4b64      	ldr	r3, [pc, #400]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b22:	f003 0310 	and.w	r3, r3, #16
 8003b26:	623b      	str	r3, [r7, #32]
 8003b28:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003b2a:	4b61      	ldr	r3, [pc, #388]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b30:	4a5f      	ldr	r2, [pc, #380]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b3a:	4b5d      	ldr	r3, [pc, #372]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b44:	61fb      	str	r3, [r7, #28]
 8003b46:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b48:	4b59      	ldr	r3, [pc, #356]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b4e:	4a58      	ldr	r2, [pc, #352]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003b50:	f043 0304 	orr.w	r3, r3, #4
 8003b54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b58:	4b55      	ldr	r3, [pc, #340]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	61bb      	str	r3, [r7, #24]
 8003b64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b66:	4b52      	ldr	r3, [pc, #328]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b6c:	4a50      	ldr	r2, [pc, #320]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b76:	4b4e      	ldr	r3, [pc, #312]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b84:	4b4a      	ldr	r3, [pc, #296]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b8a:	4a49      	ldr	r2, [pc, #292]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b94:	4b46      	ldr	r3, [pc, #280]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ba2:	4b43      	ldr	r3, [pc, #268]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ba8:	4a41      	ldr	r2, [pc, #260]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003baa:	f043 0302 	orr.w	r3, r3, #2
 8003bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bb2:	4b3f      	ldr	r3, [pc, #252]	; (8003cb0 <HAL_ETH_MspInit+0x240>)
 8003bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8003bc0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003bc4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003bd2:	230b      	movs	r3, #11
 8003bd4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003bd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4835      	ldr	r0, [pc, #212]	; (8003cb4 <HAL_ETH_MspInit+0x244>)
 8003bde:	f005 fd8f 	bl	8009700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8003be2:	2304      	movs	r3, #4
 8003be4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be6:	2302      	movs	r3, #2
 8003be8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003bf2:	230b      	movs	r3, #11
 8003bf4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8003bf6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	482e      	ldr	r0, [pc, #184]	; (8003cb8 <HAL_ETH_MspInit+0x248>)
 8003bfe:	f005 fd7f 	bl	8009700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8003c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c06:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c08:	2302      	movs	r3, #2
 8003c0a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c10:	2300      	movs	r3, #0
 8003c12:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c14:	230b      	movs	r3, #11
 8003c16:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8003c18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4827      	ldr	r0, [pc, #156]	; (8003cbc <HAL_ETH_MspInit+0x24c>)
 8003c20:	f005 fd6e 	bl	8009700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8003c24:	233e      	movs	r3, #62	; 0x3e
 8003c26:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c28:	2302      	movs	r3, #2
 8003c2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c30:	2300      	movs	r3, #0
 8003c32:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c34:	230b      	movs	r3, #11
 8003c36:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4820      	ldr	r0, [pc, #128]	; (8003cc0 <HAL_ETH_MspInit+0x250>)
 8003c40:	f005 fd5e 	bl	8009700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8003c44:	230c      	movs	r3, #12
 8003c46:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c48:	2302      	movs	r3, #2
 8003c4a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c50:	2300      	movs	r3, #0
 8003c52:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c54:	230b      	movs	r3, #11
 8003c56:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003c58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4819      	ldr	r0, [pc, #100]	; (8003cc4 <HAL_ETH_MspInit+0x254>)
 8003c60:	f005 fd4e 	bl	8009700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8003c64:	2386      	movs	r3, #134	; 0x86
 8003c66:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c68:	2302      	movs	r3, #2
 8003c6a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c70:	2300      	movs	r3, #0
 8003c72:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c74:	230b      	movs	r3, #11
 8003c76:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4812      	ldr	r0, [pc, #72]	; (8003cc8 <HAL_ETH_MspInit+0x258>)
 8003c80:	f005 fd3e 	bl	8009700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8003c84:	2303      	movs	r3, #3
 8003c86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c88:	2302      	movs	r3, #2
 8003c8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c90:	2300      	movs	r3, #0
 8003c92:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c94:	230b      	movs	r3, #11
 8003c96:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	480b      	ldr	r0, [pc, #44]	; (8003ccc <HAL_ETH_MspInit+0x25c>)
 8003ca0:	f005 fd2e 	bl	8009700 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003ca4:	bf00      	nop
 8003ca6:	3748      	adds	r7, #72	; 0x48
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40028000 	.word	0x40028000
 8003cb0:	58024400 	.word	0x58024400
 8003cb4:	58021800 	.word	0x58021800
 8003cb8:	58021000 	.word	0x58021000
 8003cbc:	58022000 	.word	0x58022000
 8003cc0:	58020800 	.word	0x58020800
 8003cc4:	58021c00 	.word	0x58021c00
 8003cc8:	58020000 	.word	0x58020000
 8003ccc:	58020400 	.word	0x58020400

08003cd0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b0bc      	sub	sp, #240	; 0xf0
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	605a      	str	r2, [r3, #4]
 8003ce2:	609a      	str	r2, [r3, #8]
 8003ce4:	60da      	str	r2, [r3, #12]
 8003ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ce8:	f107 0318 	add.w	r3, r7, #24
 8003cec:	22c0      	movs	r2, #192	; 0xc0
 8003cee:	2100      	movs	r1, #0
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f00d ff4f 	bl	8011b94 <memset>
  if(hfdcan->Instance==FDCAN1)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a57      	ldr	r2, [pc, #348]	; (8003e58 <HAL_FDCAN_MspInit+0x188>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d151      	bne.n	8003da4 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003d00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003d0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003d10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d14:	f107 0318 	add.w	r3, r7, #24
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f008 fac3 	bl	800c2a4 <HAL_RCCEx_PeriphCLKConfig>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8003d24:	f7fe fcd6 	bl	80026d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003d28:	4b4c      	ldr	r3, [pc, #304]	; (8003e5c <HAL_FDCAN_MspInit+0x18c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	4a4b      	ldr	r2, [pc, #300]	; (8003e5c <HAL_FDCAN_MspInit+0x18c>)
 8003d30:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003d32:	4b4a      	ldr	r3, [pc, #296]	; (8003e5c <HAL_FDCAN_MspInit+0x18c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d10e      	bne.n	8003d58 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003d3a:	4b49      	ldr	r3, [pc, #292]	; (8003e60 <HAL_FDCAN_MspInit+0x190>)
 8003d3c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d40:	4a47      	ldr	r2, [pc, #284]	; (8003e60 <HAL_FDCAN_MspInit+0x190>)
 8003d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d46:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003d4a:	4b45      	ldr	r3, [pc, #276]	; (8003e60 <HAL_FDCAN_MspInit+0x190>)
 8003d4c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d58:	4b41      	ldr	r3, [pc, #260]	; (8003e60 <HAL_FDCAN_MspInit+0x190>)
 8003d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d5e:	4a40      	ldr	r2, [pc, #256]	; (8003e60 <HAL_FDCAN_MspInit+0x190>)
 8003d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d68:	4b3d      	ldr	r3, [pc, #244]	; (8003e60 <HAL_FDCAN_MspInit+0x190>)
 8003d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d72:	613b      	str	r3, [r7, #16]
 8003d74:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8003d76:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d84:	2300      	movs	r3, #0
 8003d86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003d90:	2309      	movs	r3, #9
 8003d92:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003d96:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4831      	ldr	r0, [pc, #196]	; (8003e64 <HAL_FDCAN_MspInit+0x194>)
 8003d9e:	f005 fcaf 	bl	8009700 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8003da2:	e055      	b.n	8003e50 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a2f      	ldr	r2, [pc, #188]	; (8003e68 <HAL_FDCAN_MspInit+0x198>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d150      	bne.n	8003e50 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003dae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003dba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003dbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003dc2:	f107 0318 	add.w	r3, r7, #24
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f008 fa6c 	bl	800c2a4 <HAL_RCCEx_PeriphCLKConfig>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8003dd2:	f7fe fc7f 	bl	80026d4 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003dd6:	4b21      	ldr	r3, [pc, #132]	; (8003e5c <HAL_FDCAN_MspInit+0x18c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	4a1f      	ldr	r2, [pc, #124]	; (8003e5c <HAL_FDCAN_MspInit+0x18c>)
 8003dde:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003de0:	4b1e      	ldr	r3, [pc, #120]	; (8003e5c <HAL_FDCAN_MspInit+0x18c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d10e      	bne.n	8003e06 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003de8:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <HAL_FDCAN_MspInit+0x190>)
 8003dea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003dee:	4a1c      	ldr	r2, [pc, #112]	; (8003e60 <HAL_FDCAN_MspInit+0x190>)
 8003df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003df8:	4b19      	ldr	r3, [pc, #100]	; (8003e60 <HAL_FDCAN_MspInit+0x190>)
 8003dfa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e06:	4b16      	ldr	r3, [pc, #88]	; (8003e60 <HAL_FDCAN_MspInit+0x190>)
 8003e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e0c:	4a14      	ldr	r2, [pc, #80]	; (8003e60 <HAL_FDCAN_MspInit+0x190>)
 8003e0e:	f043 0302 	orr.w	r3, r3, #2
 8003e12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e16:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <HAL_FDCAN_MspInit+0x190>)
 8003e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8003e24:	f242 0320 	movw	r3, #8224	; 0x2020
 8003e28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8003e3e:	2309      	movs	r3, #9
 8003e40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e44:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4808      	ldr	r0, [pc, #32]	; (8003e6c <HAL_FDCAN_MspInit+0x19c>)
 8003e4c:	f005 fc58 	bl	8009700 <HAL_GPIO_Init>
}
 8003e50:	bf00      	nop
 8003e52:	37f0      	adds	r7, #240	; 0xf0
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	4000a000 	.word	0x4000a000
 8003e5c:	24001808 	.word	0x24001808
 8003e60:	58024400 	.word	0x58024400
 8003e64:	58021c00 	.word	0x58021c00
 8003e68:	4000a400 	.word	0x4000a400
 8003e6c:	58020400 	.word	0x58020400

08003e70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b0ba      	sub	sp, #232	; 0xe8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	605a      	str	r2, [r3, #4]
 8003e82:	609a      	str	r2, [r3, #8]
 8003e84:	60da      	str	r2, [r3, #12]
 8003e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e88:	f107 0310 	add.w	r3, r7, #16
 8003e8c:	22c0      	movs	r2, #192	; 0xc0
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	f00d fe7f 	bl	8011b94 <memset>
  if(hi2c->Instance==I2C4)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a27      	ldr	r2, [pc, #156]	; (8003f38 <HAL_I2C_MspInit+0xc8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d146      	bne.n	8003f2e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8003ea0:	f04f 0210 	mov.w	r2, #16
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8003eac:	2300      	movs	r3, #0
 8003eae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003eb2:	f107 0310 	add.w	r3, r7, #16
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f008 f9f4 	bl	800c2a4 <HAL_RCCEx_PeriphCLKConfig>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003ec2:	f7fe fc07 	bl	80026d4 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ec6:	4b1d      	ldr	r3, [pc, #116]	; (8003f3c <HAL_I2C_MspInit+0xcc>)
 8003ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ecc:	4a1b      	ldr	r2, [pc, #108]	; (8003f3c <HAL_I2C_MspInit+0xcc>)
 8003ece:	f043 0308 	orr.w	r3, r3, #8
 8003ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ed6:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <HAL_I2C_MspInit+0xcc>)
 8003ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003ee4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003ee8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003eec:	2312      	movs	r3, #18
 8003eee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003efe:	2304      	movs	r3, #4
 8003f00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f04:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003f08:	4619      	mov	r1, r3
 8003f0a:	480d      	ldr	r0, [pc, #52]	; (8003f40 <HAL_I2C_MspInit+0xd0>)
 8003f0c:	f005 fbf8 	bl	8009700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003f10:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <HAL_I2C_MspInit+0xcc>)
 8003f12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f16:	4a09      	ldr	r2, [pc, #36]	; (8003f3c <HAL_I2C_MspInit+0xcc>)
 8003f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f20:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <HAL_I2C_MspInit+0xcc>)
 8003f22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2a:	60bb      	str	r3, [r7, #8]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8003f2e:	bf00      	nop
 8003f30:	37e8      	adds	r7, #232	; 0xe8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	58001c00 	.word	0x58001c00
 8003f3c:	58024400 	.word	0x58024400
 8003f40:	58020c00 	.word	0x58020c00

08003f44 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b0be      	sub	sp, #248	; 0xf8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f4c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	605a      	str	r2, [r3, #4]
 8003f56:	609a      	str	r2, [r3, #8]
 8003f58:	60da      	str	r2, [r3, #12]
 8003f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f5c:	f107 0320 	add.w	r3, r7, #32
 8003f60:	22c0      	movs	r2, #192	; 0xc0
 8003f62:	2100      	movs	r1, #0
 8003f64:	4618      	mov	r0, r3
 8003f66:	f00d fe15 	bl	8011b94 <memset>
  if(hltdc->Instance==LTDC)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a66      	ldr	r2, [pc, #408]	; (8004108 <HAL_LTDC_MspInit+0x1c4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	f040 80c4 	bne.w	80040fe <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003f76:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8003f82:	2320      	movs	r3, #32
 8003f84:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8003f86:	23c0      	movs	r3, #192	; 0xc0
 8003f88:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8003f92:	2302      	movs	r3, #2
 8003f94:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8003f96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003f9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8003f9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fa0:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fa6:	f107 0320 	add.w	r3, r7, #32
 8003faa:	4618      	mov	r0, r3
 8003fac:	f008 f97a 	bl	800c2a4 <HAL_RCCEx_PeriphCLKConfig>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8003fb6:	f7fe fb8d 	bl	80026d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003fba:	4b54      	ldr	r3, [pc, #336]	; (800410c <HAL_LTDC_MspInit+0x1c8>)
 8003fbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003fc0:	4a52      	ldr	r2, [pc, #328]	; (800410c <HAL_LTDC_MspInit+0x1c8>)
 8003fc2:	f043 0308 	orr.w	r3, r3, #8
 8003fc6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003fca:	4b50      	ldr	r3, [pc, #320]	; (800410c <HAL_LTDC_MspInit+0x1c8>)
 8003fcc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003fd8:	4b4c      	ldr	r3, [pc, #304]	; (800410c <HAL_LTDC_MspInit+0x1c8>)
 8003fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fde:	4a4b      	ldr	r2, [pc, #300]	; (800410c <HAL_LTDC_MspInit+0x1c8>)
 8003fe0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fe8:	4b48      	ldr	r3, [pc, #288]	; (800410c <HAL_LTDC_MspInit+0x1c8>)
 8003fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff2:	61bb      	str	r3, [r7, #24]
 8003ff4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003ff6:	4b45      	ldr	r3, [pc, #276]	; (800410c <HAL_LTDC_MspInit+0x1c8>)
 8003ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ffc:	4a43      	ldr	r2, [pc, #268]	; (800410c <HAL_LTDC_MspInit+0x1c8>)
 8003ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004002:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004006:	4b41      	ldr	r3, [pc, #260]	; (800410c <HAL_LTDC_MspInit+0x1c8>)
 8004008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800400c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004014:	4b3d      	ldr	r3, [pc, #244]	; (800410c <HAL_LTDC_MspInit+0x1c8>)
 8004016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800401a:	4a3c      	ldr	r2, [pc, #240]	; (800410c <HAL_LTDC_MspInit+0x1c8>)
 800401c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004020:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004024:	4b39      	ldr	r3, [pc, #228]	; (800410c <HAL_LTDC_MspInit+0x1c8>)
 8004026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800402a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004032:	4b36      	ldr	r3, [pc, #216]	; (800410c <HAL_LTDC_MspInit+0x1c8>)
 8004034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004038:	4a34      	ldr	r2, [pc, #208]	; (800410c <HAL_LTDC_MspInit+0x1c8>)
 800403a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800403e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004042:	4b32      	ldr	r3, [pc, #200]	; (800410c <HAL_LTDC_MspInit+0x1c8>)
 8004044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8004050:	23fc      	movs	r3, #252	; 0xfc
 8004052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004056:	2302      	movs	r3, #2
 8004058:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405c:	2300      	movs	r3, #0
 800405e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004062:	2300      	movs	r3, #0
 8004064:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004068:	230e      	movs	r3, #14
 800406a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800406e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004072:	4619      	mov	r1, r3
 8004074:	4826      	ldr	r0, [pc, #152]	; (8004110 <HAL_LTDC_MspInit+0x1cc>)
 8004076:	f005 fb43 	bl	8009700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 800407a:	f24d 2303 	movw	r3, #53763	; 0xd203
 800407e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004082:	2302      	movs	r3, #2
 8004084:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004088:	2300      	movs	r3, #0
 800408a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800408e:	2300      	movs	r3, #0
 8004090:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004094:	230e      	movs	r3, #14
 8004096:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800409a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800409e:	4619      	mov	r1, r3
 80040a0:	481c      	ldr	r0, [pc, #112]	; (8004114 <HAL_LTDC_MspInit+0x1d0>)
 80040a2:	f005 fb2d 	bl	8009700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 80040a6:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80040aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ae:	2302      	movs	r3, #2
 80040b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b4:	2300      	movs	r3, #0
 80040b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ba:	2300      	movs	r3, #0
 80040bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80040c0:	230e      	movs	r3, #14
 80040c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80040c6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80040ca:	4619      	mov	r1, r3
 80040cc:	4812      	ldr	r0, [pc, #72]	; (8004118 <HAL_LTDC_MspInit+0x1d4>)
 80040ce:	f005 fb17 	bl	8009700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80040d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040da:	2302      	movs	r3, #2
 80040dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e6:	2300      	movs	r3, #0
 80040e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80040ec:	230e      	movs	r3, #14
 80040ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80040f2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80040f6:	4619      	mov	r1, r3
 80040f8:	4808      	ldr	r0, [pc, #32]	; (800411c <HAL_LTDC_MspInit+0x1d8>)
 80040fa:	f005 fb01 	bl	8009700 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80040fe:	bf00      	nop
 8004100:	37f8      	adds	r7, #248	; 0xf8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	50001000 	.word	0x50001000
 800410c:	58024400 	.word	0x58024400
 8004110:	58022800 	.word	0x58022800
 8004114:	58022000 	.word	0x58022000
 8004118:	58022400 	.word	0x58022400
 800411c:	58021c00 	.word	0x58021c00

08004120 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b0bc      	sub	sp, #240	; 0xf0
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004128:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	605a      	str	r2, [r3, #4]
 8004132:	609a      	str	r2, [r3, #8]
 8004134:	60da      	str	r2, [r3, #12]
 8004136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004138:	f107 0318 	add.w	r3, r7, #24
 800413c:	22c0      	movs	r2, #192	; 0xc0
 800413e:	2100      	movs	r1, #0
 8004140:	4618      	mov	r0, r3
 8004142:	f00d fd27 	bl	8011b94 <memset>
  if(hqspi->Instance==QUADSPI)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a56      	ldr	r2, [pc, #344]	; (80042a4 <HAL_QSPI_MspInit+0x184>)
 800414c:	4293      	cmp	r3, r2
 800414e:	f040 80a5 	bne.w	800429c <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8004152:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004156:	f04f 0300 	mov.w	r3, #0
 800415a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800415e:	2300      	movs	r3, #0
 8004160:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004162:	f107 0318 	add.w	r3, r7, #24
 8004166:	4618      	mov	r0, r3
 8004168:	f008 f89c 	bl	800c2a4 <HAL_RCCEx_PeriphCLKConfig>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8004172:	f7fe faaf 	bl	80026d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004176:	4b4c      	ldr	r3, [pc, #304]	; (80042a8 <HAL_QSPI_MspInit+0x188>)
 8004178:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800417c:	4a4a      	ldr	r2, [pc, #296]	; (80042a8 <HAL_QSPI_MspInit+0x188>)
 800417e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004182:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8004186:	4b48      	ldr	r3, [pc, #288]	; (80042a8 <HAL_QSPI_MspInit+0x188>)
 8004188:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800418c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004190:	617b      	str	r3, [r7, #20]
 8004192:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004194:	4b44      	ldr	r3, [pc, #272]	; (80042a8 <HAL_QSPI_MspInit+0x188>)
 8004196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800419a:	4a43      	ldr	r2, [pc, #268]	; (80042a8 <HAL_QSPI_MspInit+0x188>)
 800419c:	f043 0302 	orr.w	r3, r3, #2
 80041a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041a4:	4b40      	ldr	r3, [pc, #256]	; (80042a8 <HAL_QSPI_MspInit+0x188>)
 80041a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	613b      	str	r3, [r7, #16]
 80041b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80041b2:	4b3d      	ldr	r3, [pc, #244]	; (80042a8 <HAL_QSPI_MspInit+0x188>)
 80041b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041b8:	4a3b      	ldr	r2, [pc, #236]	; (80042a8 <HAL_QSPI_MspInit+0x188>)
 80041ba:	f043 0320 	orr.w	r3, r3, #32
 80041be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041c2:	4b39      	ldr	r3, [pc, #228]	; (80042a8 <HAL_QSPI_MspInit+0x188>)
 80041c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041d0:	4b35      	ldr	r3, [pc, #212]	; (80042a8 <HAL_QSPI_MspInit+0x188>)
 80041d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041d6:	4a34      	ldr	r2, [pc, #208]	; (80042a8 <HAL_QSPI_MspInit+0x188>)
 80041d8:	f043 0308 	orr.w	r3, r3, #8
 80041dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041e0:	4b31      	ldr	r3, [pc, #196]	; (80042a8 <HAL_QSPI_MspInit+0x188>)
 80041e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	60bb      	str	r3, [r7, #8]
 80041ec:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80041ee:	2340      	movs	r3, #64	; 0x40
 80041f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f4:	2302      	movs	r3, #2
 80041f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004200:	2300      	movs	r3, #0
 8004202:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004206:	230a      	movs	r3, #10
 8004208:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800420c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004210:	4619      	mov	r1, r3
 8004212:	4826      	ldr	r0, [pc, #152]	; (80042ac <HAL_QSPI_MspInit+0x18c>)
 8004214:	f005 fa74 	bl	8009700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8004218:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800421c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004220:	2302      	movs	r3, #2
 8004222:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004226:	2300      	movs	r3, #0
 8004228:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800422c:	2300      	movs	r3, #0
 800422e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004232:	2309      	movs	r3, #9
 8004234:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004238:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800423c:	4619      	mov	r1, r3
 800423e:	481c      	ldr	r0, [pc, #112]	; (80042b0 <HAL_QSPI_MspInit+0x190>)
 8004240:	f005 fa5e 	bl	8009700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004244:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004248:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800424c:	2302      	movs	r3, #2
 800424e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004252:	2300      	movs	r3, #0
 8004254:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004258:	2300      	movs	r3, #0
 800425a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800425e:	230a      	movs	r3, #10
 8004260:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004264:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004268:	4619      	mov	r1, r3
 800426a:	4811      	ldr	r0, [pc, #68]	; (80042b0 <HAL_QSPI_MspInit+0x190>)
 800426c:	f005 fa48 	bl	8009700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004270:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004274:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004278:	2302      	movs	r3, #2
 800427a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427e:	2300      	movs	r3, #0
 8004280:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004284:	2300      	movs	r3, #0
 8004286:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800428a:	2309      	movs	r3, #9
 800428c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004290:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004294:	4619      	mov	r1, r3
 8004296:	4807      	ldr	r0, [pc, #28]	; (80042b4 <HAL_QSPI_MspInit+0x194>)
 8004298:	f005 fa32 	bl	8009700 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800429c:	bf00      	nop
 800429e:	37f0      	adds	r7, #240	; 0xf0
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	52005000 	.word	0x52005000
 80042a8:	58024400 	.word	0x58024400
 80042ac:	58020400 	.word	0x58020400
 80042b0:	58021400 	.word	0x58021400
 80042b4:	58020c00 	.word	0x58020c00

080042b8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b0b2      	sub	sp, #200	; 0xc8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80042c0:	f107 0308 	add.w	r3, r7, #8
 80042c4:	22c0      	movs	r2, #192	; 0xc0
 80042c6:	2100      	movs	r1, #0
 80042c8:	4618      	mov	r0, r3
 80042ca:	f00d fc63 	bl	8011b94 <memset>
  if(hrtc->Instance==RTC)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a10      	ldr	r2, [pc, #64]	; (8004314 <HAL_RTC_MspInit+0x5c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d119      	bne.n	800430c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80042d8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80042dc:	f04f 0300 	mov.w	r3, #0
 80042e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80042e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042ec:	f107 0308 	add.w	r3, r7, #8
 80042f0:	4618      	mov	r0, r3
 80042f2:	f007 ffd7 	bl	800c2a4 <HAL_RCCEx_PeriphCLKConfig>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80042fc:	f7fe f9ea 	bl	80026d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <HAL_RTC_MspInit+0x60>)
 8004302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004304:	4a04      	ldr	r2, [pc, #16]	; (8004318 <HAL_RTC_MspInit+0x60>)
 8004306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800430a:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800430c:	bf00      	nop
 800430e:	37c8      	adds	r7, #200	; 0xc8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	58004000 	.word	0x58004000
 8004318:	58024400 	.word	0x58024400

0800431c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b0bc      	sub	sp, #240	; 0xf0
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004324:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	605a      	str	r2, [r3, #4]
 800432e:	609a      	str	r2, [r3, #8]
 8004330:	60da      	str	r2, [r3, #12]
 8004332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004334:	f107 0318 	add.w	r3, r7, #24
 8004338:	22c0      	movs	r2, #192	; 0xc0
 800433a:	2100      	movs	r1, #0
 800433c:	4618      	mov	r0, r3
 800433e:	f00d fc29 	bl	8011b94 <memset>
  if(hspi->Instance==SPI2)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a87      	ldr	r2, [pc, #540]	; (8004564 <HAL_SPI_MspInit+0x248>)
 8004348:	4293      	cmp	r3, r2
 800434a:	f040 8107 	bne.w	800455c <HAL_SPI_MspInit+0x240>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800434e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800435a:	2300      	movs	r3, #0
 800435c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800435e:	f107 0318 	add.w	r3, r7, #24
 8004362:	4618      	mov	r0, r3
 8004364:	f007 ff9e 	bl	800c2a4 <HAL_RCCEx_PeriphCLKConfig>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800436e:	f7fe f9b1 	bl	80026d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004372:	4b7d      	ldr	r3, [pc, #500]	; (8004568 <HAL_SPI_MspInit+0x24c>)
 8004374:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004378:	4a7b      	ldr	r2, [pc, #492]	; (8004568 <HAL_SPI_MspInit+0x24c>)
 800437a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800437e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004382:	4b79      	ldr	r3, [pc, #484]	; (8004568 <HAL_SPI_MspInit+0x24c>)
 8004384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004390:	4b75      	ldr	r3, [pc, #468]	; (8004568 <HAL_SPI_MspInit+0x24c>)
 8004392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004396:	4a74      	ldr	r2, [pc, #464]	; (8004568 <HAL_SPI_MspInit+0x24c>)
 8004398:	f043 0302 	orr.w	r3, r3, #2
 800439c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043a0:	4b71      	ldr	r3, [pc, #452]	; (8004568 <HAL_SPI_MspInit+0x24c>)
 80043a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80043ae:	4b6e      	ldr	r3, [pc, #440]	; (8004568 <HAL_SPI_MspInit+0x24c>)
 80043b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043b4:	4a6c      	ldr	r2, [pc, #432]	; (8004568 <HAL_SPI_MspInit+0x24c>)
 80043b6:	f043 0308 	orr.w	r3, r3, #8
 80043ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043be:	4b6a      	ldr	r3, [pc, #424]	; (8004568 <HAL_SPI_MspInit+0x24c>)
 80043c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80043cc:	4b66      	ldr	r3, [pc, #408]	; (8004568 <HAL_SPI_MspInit+0x24c>)
 80043ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043d2:	4a65      	ldr	r2, [pc, #404]	; (8004568 <HAL_SPI_MspInit+0x24c>)
 80043d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043dc:	4b62      	ldr	r3, [pc, #392]	; (8004568 <HAL_SPI_MspInit+0x24c>)
 80043de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e6:	60bb      	str	r3, [r7, #8]
 80043e8:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80043ea:	2310      	movs	r3, #16
 80043ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f0:	2302      	movs	r3, #2
 80043f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043fc:	2300      	movs	r3, #0
 80043fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8004402:	2307      	movs	r3, #7
 8004404:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004408:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800440c:	4619      	mov	r1, r3
 800440e:	4857      	ldr	r0, [pc, #348]	; (800456c <HAL_SPI_MspInit+0x250>)
 8004410:	f005 f976 	bl	8009700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004414:	2308      	movs	r3, #8
 8004416:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800441a:	2302      	movs	r3, #2
 800441c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004420:	2300      	movs	r3, #0
 8004422:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004426:	2300      	movs	r3, #0
 8004428:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800442c:	2305      	movs	r3, #5
 800442e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004432:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004436:	4619      	mov	r1, r3
 8004438:	484d      	ldr	r0, [pc, #308]	; (8004570 <HAL_SPI_MspInit+0x254>)
 800443a:	f005 f961 	bl	8009700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800443e:	2304      	movs	r3, #4
 8004440:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004444:	2302      	movs	r3, #2
 8004446:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444a:	2300      	movs	r3, #0
 800444c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004450:	2300      	movs	r3, #0
 8004452:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004456:	2305      	movs	r3, #5
 8004458:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800445c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004460:	4619      	mov	r1, r3
 8004462:	4844      	ldr	r0, [pc, #272]	; (8004574 <HAL_SPI_MspInit+0x258>)
 8004464:	f005 f94c 	bl	8009700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004468:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800446c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004470:	2302      	movs	r3, #2
 8004472:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004476:	2300      	movs	r3, #0
 8004478:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800447c:	2300      	movs	r3, #0
 800447e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004482:	2305      	movs	r3, #5
 8004484:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004488:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800448c:	4619      	mov	r1, r3
 800448e:	4837      	ldr	r0, [pc, #220]	; (800456c <HAL_SPI_MspInit+0x250>)
 8004490:	f005 f936 	bl	8009700 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream0;
 8004494:	4b38      	ldr	r3, [pc, #224]	; (8004578 <HAL_SPI_MspInit+0x25c>)
 8004496:	4a39      	ldr	r2, [pc, #228]	; (800457c <HAL_SPI_MspInit+0x260>)
 8004498:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800449a:	4b37      	ldr	r3, [pc, #220]	; (8004578 <HAL_SPI_MspInit+0x25c>)
 800449c:	2227      	movs	r2, #39	; 0x27
 800449e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044a0:	4b35      	ldr	r3, [pc, #212]	; (8004578 <HAL_SPI_MspInit+0x25c>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044a6:	4b34      	ldr	r3, [pc, #208]	; (8004578 <HAL_SPI_MspInit+0x25c>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044ac:	4b32      	ldr	r3, [pc, #200]	; (8004578 <HAL_SPI_MspInit+0x25c>)
 80044ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044b2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044b4:	4b30      	ldr	r3, [pc, #192]	; (8004578 <HAL_SPI_MspInit+0x25c>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044ba:	4b2f      	ldr	r3, [pc, #188]	; (8004578 <HAL_SPI_MspInit+0x25c>)
 80044bc:	2200      	movs	r2, #0
 80044be:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80044c0:	4b2d      	ldr	r3, [pc, #180]	; (8004578 <HAL_SPI_MspInit+0x25c>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80044c6:	4b2c      	ldr	r3, [pc, #176]	; (8004578 <HAL_SPI_MspInit+0x25c>)
 80044c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80044cc:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044ce:	4b2a      	ldr	r3, [pc, #168]	; (8004578 <HAL_SPI_MspInit+0x25c>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80044d4:	4828      	ldr	r0, [pc, #160]	; (8004578 <HAL_SPI_MspInit+0x25c>)
 80044d6:	f001 fe61 	bl	800619c <HAL_DMA_Init>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <HAL_SPI_MspInit+0x1c8>
    {
      Error_Handler();
 80044e0:	f7fe f8f8 	bl	80026d4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a24      	ldr	r2, [pc, #144]	; (8004578 <HAL_SPI_MspInit+0x25c>)
 80044e8:	67da      	str	r2, [r3, #124]	; 0x7c
 80044ea:	4a23      	ldr	r2, [pc, #140]	; (8004578 <HAL_SPI_MspInit+0x25c>)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream1;
 80044f0:	4b23      	ldr	r3, [pc, #140]	; (8004580 <HAL_SPI_MspInit+0x264>)
 80044f2:	4a24      	ldr	r2, [pc, #144]	; (8004584 <HAL_SPI_MspInit+0x268>)
 80044f4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80044f6:	4b22      	ldr	r3, [pc, #136]	; (8004580 <HAL_SPI_MspInit+0x264>)
 80044f8:	2228      	movs	r2, #40	; 0x28
 80044fa:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044fc:	4b20      	ldr	r3, [pc, #128]	; (8004580 <HAL_SPI_MspInit+0x264>)
 80044fe:	2240      	movs	r2, #64	; 0x40
 8004500:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004502:	4b1f      	ldr	r3, [pc, #124]	; (8004580 <HAL_SPI_MspInit+0x264>)
 8004504:	2200      	movs	r2, #0
 8004506:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004508:	4b1d      	ldr	r3, [pc, #116]	; (8004580 <HAL_SPI_MspInit+0x264>)
 800450a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800450e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004510:	4b1b      	ldr	r3, [pc, #108]	; (8004580 <HAL_SPI_MspInit+0x264>)
 8004512:	2200      	movs	r2, #0
 8004514:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004516:	4b1a      	ldr	r3, [pc, #104]	; (8004580 <HAL_SPI_MspInit+0x264>)
 8004518:	2200      	movs	r2, #0
 800451a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800451c:	4b18      	ldr	r3, [pc, #96]	; (8004580 <HAL_SPI_MspInit+0x264>)
 800451e:	2200      	movs	r2, #0
 8004520:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004522:	4b17      	ldr	r3, [pc, #92]	; (8004580 <HAL_SPI_MspInit+0x264>)
 8004524:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004528:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800452a:	4b15      	ldr	r3, [pc, #84]	; (8004580 <HAL_SPI_MspInit+0x264>)
 800452c:	2200      	movs	r2, #0
 800452e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004530:	4813      	ldr	r0, [pc, #76]	; (8004580 <HAL_SPI_MspInit+0x264>)
 8004532:	f001 fe33 	bl	800619c <HAL_DMA_Init>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_SPI_MspInit+0x224>
    {
      Error_Handler();
 800453c:	f7fe f8ca 	bl	80026d4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a0f      	ldr	r2, [pc, #60]	; (8004580 <HAL_SPI_MspInit+0x264>)
 8004544:	679a      	str	r2, [r3, #120]	; 0x78
 8004546:	4a0e      	ldr	r2, [pc, #56]	; (8004580 <HAL_SPI_MspInit+0x264>)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800454c:	2200      	movs	r2, #0
 800454e:	2100      	movs	r1, #0
 8004550:	2024      	movs	r0, #36	; 0x24
 8004552:	f001 fdee 	bl	8006132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004556:	2024      	movs	r0, #36	; 0x24
 8004558:	f001 fe05 	bl	8006166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800455c:	bf00      	nop
 800455e:	37f0      	adds	r7, #240	; 0xf0
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40003800 	.word	0x40003800
 8004568:	58024400 	.word	0x58024400
 800456c:	58020400 	.word	0x58020400
 8004570:	58020c00 	.word	0x58020c00
 8004574:	58022000 	.word	0x58022000
 8004578:	24000c28 	.word	0x24000c28
 800457c:	40020010 	.word	0x40020010
 8004580:	24000ca0 	.word	0x24000ca0
 8004584:	40020028 	.word	0x40020028

08004588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b0ba      	sub	sp, #232	; 0xe8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004590:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	605a      	str	r2, [r3, #4]
 800459a:	609a      	str	r2, [r3, #8]
 800459c:	60da      	str	r2, [r3, #12]
 800459e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045a0:	f107 0310 	add.w	r3, r7, #16
 80045a4:	22c0      	movs	r2, #192	; 0xc0
 80045a6:	2100      	movs	r1, #0
 80045a8:	4618      	mov	r0, r3
 80045aa:	f00d faf3 	bl	8011b94 <memset>
  if(huart->Instance==USART3)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a27      	ldr	r2, [pc, #156]	; (8004650 <HAL_UART_MspInit+0xc8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d146      	bne.n	8004646 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80045b8:	f04f 0202 	mov.w	r2, #2
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80045c4:	2300      	movs	r3, #0
 80045c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045ca:	f107 0310 	add.w	r3, r7, #16
 80045ce:	4618      	mov	r0, r3
 80045d0:	f007 fe68 	bl	800c2a4 <HAL_RCCEx_PeriphCLKConfig>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80045da:	f7fe f87b 	bl	80026d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80045de:	4b1d      	ldr	r3, [pc, #116]	; (8004654 <HAL_UART_MspInit+0xcc>)
 80045e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045e4:	4a1b      	ldr	r2, [pc, #108]	; (8004654 <HAL_UART_MspInit+0xcc>)
 80045e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045ee:	4b19      	ldr	r3, [pc, #100]	; (8004654 <HAL_UART_MspInit+0xcc>)
 80045f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045fc:	4b15      	ldr	r3, [pc, #84]	; (8004654 <HAL_UART_MspInit+0xcc>)
 80045fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004602:	4a14      	ldr	r2, [pc, #80]	; (8004654 <HAL_UART_MspInit+0xcc>)
 8004604:	f043 0302 	orr.w	r3, r3, #2
 8004608:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800460c:	4b11      	ldr	r3, [pc, #68]	; (8004654 <HAL_UART_MspInit+0xcc>)
 800460e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	60bb      	str	r3, [r7, #8]
 8004618:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800461a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800461e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004622:	2302      	movs	r3, #2
 8004624:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004628:	2300      	movs	r3, #0
 800462a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800462e:	2300      	movs	r3, #0
 8004630:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004634:	2307      	movs	r3, #7
 8004636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800463a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800463e:	4619      	mov	r1, r3
 8004640:	4805      	ldr	r0, [pc, #20]	; (8004658 <HAL_UART_MspInit+0xd0>)
 8004642:	f005 f85d 	bl	8009700 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004646:	bf00      	nop
 8004648:	37e8      	adds	r7, #232	; 0xe8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40004800 	.word	0x40004800
 8004654:	58024400 	.word	0x58024400
 8004658:	58020400 	.word	0x58020400

0800465c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b0ba      	sub	sp, #232	; 0xe8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004664:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	605a      	str	r2, [r3, #4]
 800466e:	609a      	str	r2, [r3, #8]
 8004670:	60da      	str	r2, [r3, #12]
 8004672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004674:	f107 0310 	add.w	r3, r7, #16
 8004678:	22c0      	movs	r2, #192	; 0xc0
 800467a:	2100      	movs	r1, #0
 800467c:	4618      	mov	r0, r3
 800467e:	f00d fa89 	bl	8011b94 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a30      	ldr	r2, [pc, #192]	; (8004748 <HAL_PCD_MspInit+0xec>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d159      	bne.n	8004740 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800468c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8004698:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800469c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046a0:	f107 0310 	add.w	r3, r7, #16
 80046a4:	4618      	mov	r0, r3
 80046a6:	f007 fdfd 	bl	800c2a4 <HAL_RCCEx_PeriphCLKConfig>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80046b0:	f7fe f810 	bl	80026d4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80046b4:	f006 fd46 	bl	800b144 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046b8:	4b24      	ldr	r3, [pc, #144]	; (800474c <HAL_PCD_MspInit+0xf0>)
 80046ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046be:	4a23      	ldr	r2, [pc, #140]	; (800474c <HAL_PCD_MspInit+0xf0>)
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046c8:	4b20      	ldr	r3, [pc, #128]	; (800474c <HAL_PCD_MspInit+0xf0>)
 80046ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 80046d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046de:	2300      	movs	r3, #0
 80046e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e4:	2300      	movs	r3, #0
 80046e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 80046ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80046ee:	4619      	mov	r1, r3
 80046f0:	4817      	ldr	r0, [pc, #92]	; (8004750 <HAL_PCD_MspInit+0xf4>)
 80046f2:	f005 f805 	bl	8009700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 80046f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80046fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046fe:	2302      	movs	r3, #2
 8004700:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004704:	2300      	movs	r3, #0
 8004706:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800470a:	2300      	movs	r3, #0
 800470c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8004710:	230a      	movs	r3, #10
 8004712:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004716:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800471a:	4619      	mov	r1, r3
 800471c:	480c      	ldr	r0, [pc, #48]	; (8004750 <HAL_PCD_MspInit+0xf4>)
 800471e:	f004 ffef 	bl	8009700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004722:	4b0a      	ldr	r3, [pc, #40]	; (800474c <HAL_PCD_MspInit+0xf0>)
 8004724:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004728:	4a08      	ldr	r2, [pc, #32]	; (800474c <HAL_PCD_MspInit+0xf0>)
 800472a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800472e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004732:	4b06      	ldr	r3, [pc, #24]	; (800474c <HAL_PCD_MspInit+0xf0>)
 8004734:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8004740:	bf00      	nop
 8004742:	37e8      	adds	r7, #232	; 0xe8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40080000 	.word	0x40080000
 800474c:	58024400 	.word	0x58024400
 8004750:	58020000 	.word	0x58020000

08004754 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004754:	b580      	push	{r7, lr}
 8004756:	b0b8      	sub	sp, #224	; 0xe0
 8004758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800475a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	605a      	str	r2, [r3, #4]
 8004764:	609a      	str	r2, [r3, #8]
 8004766:	60da      	str	r2, [r3, #12]
 8004768:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800476a:	4b51      	ldr	r3, [pc, #324]	; (80048b0 <HAL_FMC_MspInit+0x15c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	f040 8099 	bne.w	80048a6 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8004774:	4b4e      	ldr	r3, [pc, #312]	; (80048b0 <HAL_FMC_MspInit+0x15c>)
 8004776:	2201      	movs	r2, #1
 8004778:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800477a:	f107 0308 	add.w	r3, r7, #8
 800477e:	22c0      	movs	r2, #192	; 0xc0
 8004780:	2100      	movs	r1, #0
 8004782:	4618      	mov	r0, r3
 8004784:	f00d fa06 	bl	8011b94 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8004788:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8004794:	2300      	movs	r3, #0
 8004796:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004798:	f107 0308 	add.w	r3, r7, #8
 800479c:	4618      	mov	r0, r3
 800479e:	f007 fd81 	bl	800c2a4 <HAL_RCCEx_PeriphCLKConfig>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80047a8:	f7fd ff94 	bl	80026d4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80047ac:	4b41      	ldr	r3, [pc, #260]	; (80048b4 <HAL_FMC_MspInit+0x160>)
 80047ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80047b2:	4a40      	ldr	r2, [pc, #256]	; (80048b4 <HAL_FMC_MspInit+0x160>)
 80047b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80047b8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80047bc:	4b3d      	ldr	r3, [pc, #244]	; (80048b4 <HAL_FMC_MspInit+0x160>)
 80047be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80047c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047c6:	607b      	str	r3, [r7, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80047ca:	f64f 7383 	movw	r3, #65411	; 0xff83
 80047ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d2:	2302      	movs	r3, #2
 80047d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d8:	2300      	movs	r3, #0
 80047da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047de:	2303      	movs	r3, #3
 80047e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80047e4:	230c      	movs	r3, #12
 80047e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047ea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80047ee:	4619      	mov	r1, r3
 80047f0:	4831      	ldr	r0, [pc, #196]	; (80048b8 <HAL_FMC_MspInit+0x164>)
 80047f2:	f004 ff85 	bl	8009700 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80047f6:	f248 1333 	movw	r3, #33075	; 0x8133
 80047fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047fe:	2302      	movs	r3, #2
 8004800:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004804:	2300      	movs	r3, #0
 8004806:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800480a:	2303      	movs	r3, #3
 800480c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004810:	230c      	movs	r3, #12
 8004812:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004816:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800481a:	4619      	mov	r1, r3
 800481c:	4827      	ldr	r0, [pc, #156]	; (80048bc <HAL_FMC_MspInit+0x168>)
 800481e:	f004 ff6f 	bl	8009700 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8004822:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004826:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800482a:	2302      	movs	r3, #2
 800482c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004830:	2300      	movs	r3, #0
 8004832:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004836:	2303      	movs	r3, #3
 8004838:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800483c:	230c      	movs	r3, #12
 800483e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004842:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004846:	4619      	mov	r1, r3
 8004848:	481d      	ldr	r0, [pc, #116]	; (80048c0 <HAL_FMC_MspInit+0x16c>)
 800484a:	f004 ff59 	bl	8009700 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800484e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004852:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004856:	2302      	movs	r3, #2
 8004858:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485c:	2300      	movs	r3, #0
 800485e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004862:	2303      	movs	r3, #3
 8004864:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004868:	230c      	movs	r3, #12
 800486a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800486e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004872:	4619      	mov	r1, r3
 8004874:	4813      	ldr	r0, [pc, #76]	; (80048c4 <HAL_FMC_MspInit+0x170>)
 8004876:	f004 ff43 	bl	8009700 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800487a:	23e0      	movs	r3, #224	; 0xe0
 800487c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004880:	2302      	movs	r3, #2
 8004882:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004886:	2300      	movs	r3, #0
 8004888:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800488c:	2303      	movs	r3, #3
 800488e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004892:	230c      	movs	r3, #12
 8004894:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004898:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800489c:	4619      	mov	r1, r3
 800489e:	480a      	ldr	r0, [pc, #40]	; (80048c8 <HAL_FMC_MspInit+0x174>)
 80048a0:	f004 ff2e 	bl	8009700 <HAL_GPIO_Init>
 80048a4:	e000      	b.n	80048a8 <HAL_FMC_MspInit+0x154>
    return;
 80048a6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80048a8:	37e0      	adds	r7, #224	; 0xe0
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	2400180c 	.word	0x2400180c
 80048b4:	58024400 	.word	0x58024400
 80048b8:	58021000 	.word	0x58021000
 80048bc:	58021800 	.word	0x58021800
 80048c0:	58020c00 	.word	0x58020c00
 80048c4:	58021400 	.word	0x58021400
 80048c8:	58021c00 	.word	0x58021c00

080048cc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80048d4:	f7ff ff3e 	bl	8004754 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80048d8:	bf00      	nop
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b0ba      	sub	sp, #232	; 0xe8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80048e8:	f107 0310 	add.w	r3, r7, #16
 80048ec:	22c0      	movs	r2, #192	; 0xc0
 80048ee:	2100      	movs	r1, #0
 80048f0:	4618      	mov	r0, r3
 80048f2:	f00d f94f 	bl	8011b94 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a45      	ldr	r2, [pc, #276]	; (8004a10 <HAL_SAI_MspInit+0x130>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d13e      	bne.n	800497e <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8004900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 800490c:	2300      	movs	r3, #0
 800490e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004910:	f107 0310 	add.w	r3, r7, #16
 8004914:	4618      	mov	r0, r3
 8004916:	f007 fcc5 	bl	800c2a4 <HAL_RCCEx_PeriphCLKConfig>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8004920:	f7fd fed8 	bl	80026d4 <Error_Handler>
    }

    if (SAI2_client == 0)
 8004924:	4b3b      	ldr	r3, [pc, #236]	; (8004a14 <HAL_SAI_MspInit+0x134>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10e      	bne.n	800494a <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800492c:	4b3a      	ldr	r3, [pc, #232]	; (8004a18 <HAL_SAI_MspInit+0x138>)
 800492e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004932:	4a39      	ldr	r2, [pc, #228]	; (8004a18 <HAL_SAI_MspInit+0x138>)
 8004934:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004938:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800493c:	4b36      	ldr	r3, [pc, #216]	; (8004a18 <HAL_SAI_MspInit+0x138>)
 800493e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004942:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 800494a:	4b32      	ldr	r3, [pc, #200]	; (8004a14 <HAL_SAI_MspInit+0x134>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3301      	adds	r3, #1
 8004950:	4a30      	ldr	r2, [pc, #192]	; (8004a14 <HAL_SAI_MspInit+0x134>)
 8004952:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8004954:	23f0      	movs	r3, #240	; 0xf0
 8004956:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800495a:	2302      	movs	r3, #2
 800495c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004960:	2300      	movs	r3, #0
 8004962:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004966:	2300      	movs	r3, #0
 8004968:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800496c:	230a      	movs	r3, #10
 800496e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004972:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004976:	4619      	mov	r1, r3
 8004978:	4828      	ldr	r0, [pc, #160]	; (8004a1c <HAL_SAI_MspInit+0x13c>)
 800497a:	f004 fec1 	bl	8009700 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a27      	ldr	r2, [pc, #156]	; (8004a20 <HAL_SAI_MspInit+0x140>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d13f      	bne.n	8004a08 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8004988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8004994:	2300      	movs	r3, #0
 8004996:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004998:	f107 0310 	add.w	r3, r7, #16
 800499c:	4618      	mov	r0, r3
 800499e:	f007 fc81 	bl	800c2a4 <HAL_RCCEx_PeriphCLKConfig>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 80049a8:	f7fd fe94 	bl	80026d4 <Error_Handler>
    }

      if (SAI2_client == 0)
 80049ac:	4b19      	ldr	r3, [pc, #100]	; (8004a14 <HAL_SAI_MspInit+0x134>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10e      	bne.n	80049d2 <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80049b4:	4b18      	ldr	r3, [pc, #96]	; (8004a18 <HAL_SAI_MspInit+0x138>)
 80049b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049ba:	4a17      	ldr	r2, [pc, #92]	; (8004a18 <HAL_SAI_MspInit+0x138>)
 80049bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80049c4:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <HAL_SAI_MspInit+0x138>)
 80049c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049ce:	60bb      	str	r3, [r7, #8]
 80049d0:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 80049d2:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <HAL_SAI_MspInit+0x134>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3301      	adds	r3, #1
 80049d8:	4a0e      	ldr	r2, [pc, #56]	; (8004a14 <HAL_SAI_MspInit+0x134>)
 80049da:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80049dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049e4:	2302      	movs	r3, #2
 80049e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ea:	2300      	movs	r3, #0
 80049ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049f0:	2300      	movs	r3, #0
 80049f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80049f6:	230a      	movs	r3, #10
 80049f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80049fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004a00:	4619      	mov	r1, r3
 8004a02:	4808      	ldr	r0, [pc, #32]	; (8004a24 <HAL_SAI_MspInit+0x144>)
 8004a04:	f004 fe7c 	bl	8009700 <HAL_GPIO_Init>

    }
}
 8004a08:	bf00      	nop
 8004a0a:	37e8      	adds	r7, #232	; 0xe8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40015c04 	.word	0x40015c04
 8004a14:	24001810 	.word	0x24001810
 8004a18:	58024400 	.word	0x58024400
 8004a1c:	58022000 	.word	0x58022000
 8004a20:	40015c24 	.word	0x40015c24
 8004a24:	58021800 	.word	0x58021800

08004a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a2c:	e7fe      	b.n	8004a2c <NMI_Handler+0x4>

08004a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a32:	e7fe      	b.n	8004a32 <HardFault_Handler+0x4>

08004a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a38:	e7fe      	b.n	8004a38 <MemManage_Handler+0x4>

08004a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a3e:	e7fe      	b.n	8004a3e <BusFault_Handler+0x4>

08004a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a44:	e7fe      	b.n	8004a44 <UsageFault_Handler+0x4>

08004a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a46:	b480      	push	{r7}
 8004a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a4a:	bf00      	nop
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a58:	bf00      	nop
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a62:	b480      	push	{r7}
 8004a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a66:	bf00      	nop
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a74:	f000 f97a 	bl	8004d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a78:	bf00      	nop
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004a80:	4802      	ldr	r0, [pc, #8]	; (8004a8c <DMA1_Stream0_IRQHandler+0x10>)
 8004a82:	f002 fb97 	bl	80071b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004a86:	bf00      	nop
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	24000c28 	.word	0x24000c28

08004a90 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004a94:	4802      	ldr	r0, [pc, #8]	; (8004aa0 <DMA1_Stream1_IRQHandler+0x10>)
 8004a96:	f002 fb8d 	bl	80071b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004a9a:	bf00      	nop
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	24000ca0 	.word	0x24000ca0

08004aa4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004aa8:	4802      	ldr	r0, [pc, #8]	; (8004ab4 <SPI2_IRQHandler+0x10>)
 8004aaa:	f00a ffa9 	bl	800fa00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004aae:	bf00      	nop
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	24000ba0 	.word	0x24000ba0

08004ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ac0:	4a14      	ldr	r2, [pc, #80]	; (8004b14 <_sbrk+0x5c>)
 8004ac2:	4b15      	ldr	r3, [pc, #84]	; (8004b18 <_sbrk+0x60>)
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004acc:	4b13      	ldr	r3, [pc, #76]	; (8004b1c <_sbrk+0x64>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d102      	bne.n	8004ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ad4:	4b11      	ldr	r3, [pc, #68]	; (8004b1c <_sbrk+0x64>)
 8004ad6:	4a12      	ldr	r2, [pc, #72]	; (8004b20 <_sbrk+0x68>)
 8004ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ada:	4b10      	ldr	r3, [pc, #64]	; (8004b1c <_sbrk+0x64>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d207      	bcs.n	8004af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ae8:	f00d f85c 	bl	8011ba4 <__errno>
 8004aec:	4603      	mov	r3, r0
 8004aee:	220c      	movs	r2, #12
 8004af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004af2:	f04f 33ff 	mov.w	r3, #4294967295
 8004af6:	e009      	b.n	8004b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004af8:	4b08      	ldr	r3, [pc, #32]	; (8004b1c <_sbrk+0x64>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004afe:	4b07      	ldr	r3, [pc, #28]	; (8004b1c <_sbrk+0x64>)
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4413      	add	r3, r2
 8004b06:	4a05      	ldr	r2, [pc, #20]	; (8004b1c <_sbrk+0x64>)
 8004b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3718      	adds	r7, #24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	24080000 	.word	0x24080000
 8004b18:	00000400 	.word	0x00000400
 8004b1c:	24001814 	.word	0x24001814
 8004b20:	24001968 	.word	0x24001968

08004b24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004b28:	4b37      	ldr	r3, [pc, #220]	; (8004c08 <SystemInit+0xe4>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2e:	4a36      	ldr	r2, [pc, #216]	; (8004c08 <SystemInit+0xe4>)
 8004b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004b38:	4b34      	ldr	r3, [pc, #208]	; (8004c0c <SystemInit+0xe8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	2b06      	cmp	r3, #6
 8004b42:	d807      	bhi.n	8004b54 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004b44:	4b31      	ldr	r3, [pc, #196]	; (8004c0c <SystemInit+0xe8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f023 030f 	bic.w	r3, r3, #15
 8004b4c:	4a2f      	ldr	r2, [pc, #188]	; (8004c0c <SystemInit+0xe8>)
 8004b4e:	f043 0307 	orr.w	r3, r3, #7
 8004b52:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004b54:	4b2e      	ldr	r3, [pc, #184]	; (8004c10 <SystemInit+0xec>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a2d      	ldr	r2, [pc, #180]	; (8004c10 <SystemInit+0xec>)
 8004b5a:	f043 0301 	orr.w	r3, r3, #1
 8004b5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004b60:	4b2b      	ldr	r3, [pc, #172]	; (8004c10 <SystemInit+0xec>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004b66:	4b2a      	ldr	r3, [pc, #168]	; (8004c10 <SystemInit+0xec>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4929      	ldr	r1, [pc, #164]	; (8004c10 <SystemInit+0xec>)
 8004b6c:	4b29      	ldr	r3, [pc, #164]	; (8004c14 <SystemInit+0xf0>)
 8004b6e:	4013      	ands	r3, r2
 8004b70:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004b72:	4b26      	ldr	r3, [pc, #152]	; (8004c0c <SystemInit+0xe8>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0308 	and.w	r3, r3, #8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d007      	beq.n	8004b8e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004b7e:	4b23      	ldr	r3, [pc, #140]	; (8004c0c <SystemInit+0xe8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f023 030f 	bic.w	r3, r3, #15
 8004b86:	4a21      	ldr	r2, [pc, #132]	; (8004c0c <SystemInit+0xe8>)
 8004b88:	f043 0307 	orr.w	r3, r3, #7
 8004b8c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004b8e:	4b20      	ldr	r3, [pc, #128]	; (8004c10 <SystemInit+0xec>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004b94:	4b1e      	ldr	r3, [pc, #120]	; (8004c10 <SystemInit+0xec>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004b9a:	4b1d      	ldr	r3, [pc, #116]	; (8004c10 <SystemInit+0xec>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004ba0:	4b1b      	ldr	r3, [pc, #108]	; (8004c10 <SystemInit+0xec>)
 8004ba2:	4a1d      	ldr	r2, [pc, #116]	; (8004c18 <SystemInit+0xf4>)
 8004ba4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004ba6:	4b1a      	ldr	r3, [pc, #104]	; (8004c10 <SystemInit+0xec>)
 8004ba8:	4a1c      	ldr	r2, [pc, #112]	; (8004c1c <SystemInit+0xf8>)
 8004baa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004bac:	4b18      	ldr	r3, [pc, #96]	; (8004c10 <SystemInit+0xec>)
 8004bae:	4a1c      	ldr	r2, [pc, #112]	; (8004c20 <SystemInit+0xfc>)
 8004bb0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004bb2:	4b17      	ldr	r3, [pc, #92]	; (8004c10 <SystemInit+0xec>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004bb8:	4b15      	ldr	r3, [pc, #84]	; (8004c10 <SystemInit+0xec>)
 8004bba:	4a19      	ldr	r2, [pc, #100]	; (8004c20 <SystemInit+0xfc>)
 8004bbc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004bbe:	4b14      	ldr	r3, [pc, #80]	; (8004c10 <SystemInit+0xec>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004bc4:	4b12      	ldr	r3, [pc, #72]	; (8004c10 <SystemInit+0xec>)
 8004bc6:	4a16      	ldr	r2, [pc, #88]	; (8004c20 <SystemInit+0xfc>)
 8004bc8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004bca:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <SystemInit+0xec>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004bd0:	4b0f      	ldr	r3, [pc, #60]	; (8004c10 <SystemInit+0xec>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a0e      	ldr	r2, [pc, #56]	; (8004c10 <SystemInit+0xec>)
 8004bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004bdc:	4b0c      	ldr	r3, [pc, #48]	; (8004c10 <SystemInit+0xec>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004be2:	4b10      	ldr	r3, [pc, #64]	; (8004c24 <SystemInit+0x100>)
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	4b10      	ldr	r3, [pc, #64]	; (8004c28 <SystemInit+0x104>)
 8004be8:	4013      	ands	r3, r2
 8004bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bee:	d202      	bcs.n	8004bf6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004bf0:	4b0e      	ldr	r3, [pc, #56]	; (8004c2c <SystemInit+0x108>)
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004bf6:	4b0e      	ldr	r3, [pc, #56]	; (8004c30 <SystemInit+0x10c>)
 8004bf8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004bfc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004bfe:	bf00      	nop
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	e000ed00 	.word	0xe000ed00
 8004c0c:	52002000 	.word	0x52002000
 8004c10:	58024400 	.word	0x58024400
 8004c14:	eaf6ed7f 	.word	0xeaf6ed7f
 8004c18:	02020200 	.word	0x02020200
 8004c1c:	01ff0000 	.word	0x01ff0000
 8004c20:	01010280 	.word	0x01010280
 8004c24:	5c001000 	.word	0x5c001000
 8004c28:	ffff0000 	.word	0xffff0000
 8004c2c:	51008108 	.word	0x51008108
 8004c30:	52004000 	.word	0x52004000

08004c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004c38:	f7ff ff74 	bl	8004b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c3c:	480c      	ldr	r0, [pc, #48]	; (8004c70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004c3e:	490d      	ldr	r1, [pc, #52]	; (8004c74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004c40:	4a0d      	ldr	r2, [pc, #52]	; (8004c78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c44:	e002      	b.n	8004c4c <LoopCopyDataInit>

08004c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c4a:	3304      	adds	r3, #4

08004c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c50:	d3f9      	bcc.n	8004c46 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c52:	4a0a      	ldr	r2, [pc, #40]	; (8004c7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004c54:	4c0a      	ldr	r4, [pc, #40]	; (8004c80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c58:	e001      	b.n	8004c5e <LoopFillZerobss>

08004c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c5c:	3204      	adds	r2, #4

08004c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c60:	d3fb      	bcc.n	8004c5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004c62:	f00c ffa5 	bl	8011bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c66:	f7fc f9e5 	bl	8001034 <main>
  bx  lr
 8004c6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004c6c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004c70:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004c74:	240004d4 	.word	0x240004d4
  ldr r2, =_sidata
 8004c78:	080126a8 	.word	0x080126a8
  ldr r2, =_sbss
 8004c7c:	24000594 	.word	0x24000594
  ldr r4, =_ebss
 8004c80:	24001964 	.word	0x24001964

08004c84 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c84:	e7fe      	b.n	8004c84 <ADC3_IRQHandler>
	...

08004c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c8e:	2003      	movs	r0, #3
 8004c90:	f001 fa44 	bl	800611c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c94:	f007 f930 	bl	800bef8 <HAL_RCC_GetSysClockFreq>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	4b15      	ldr	r3, [pc, #84]	; (8004cf0 <HAL_Init+0x68>)
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	0a1b      	lsrs	r3, r3, #8
 8004ca0:	f003 030f 	and.w	r3, r3, #15
 8004ca4:	4913      	ldr	r1, [pc, #76]	; (8004cf4 <HAL_Init+0x6c>)
 8004ca6:	5ccb      	ldrb	r3, [r1, r3]
 8004ca8:	f003 031f 	and.w	r3, r3, #31
 8004cac:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cb2:	4b0f      	ldr	r3, [pc, #60]	; (8004cf0 <HAL_Init+0x68>)
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	4a0e      	ldr	r2, [pc, #56]	; (8004cf4 <HAL_Init+0x6c>)
 8004cbc:	5cd3      	ldrb	r3, [r2, r3]
 8004cbe:	f003 031f 	and.w	r3, r3, #31
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc8:	4a0b      	ldr	r2, [pc, #44]	; (8004cf8 <HAL_Init+0x70>)
 8004cca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ccc:	4a0b      	ldr	r2, [pc, #44]	; (8004cfc <HAL_Init+0x74>)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	f000 f814 	bl	8004d00 <HAL_InitTick>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e002      	b.n	8004ce8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004ce2:	f7fe fda9 	bl	8003838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	58024400 	.word	0x58024400
 8004cf4:	08012624 	.word	0x08012624
 8004cf8:	24000478 	.word	0x24000478
 8004cfc:	24000474 	.word	0x24000474

08004d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004d08:	4b15      	ldr	r3, [pc, #84]	; (8004d60 <HAL_InitTick+0x60>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e021      	b.n	8004d58 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004d14:	4b13      	ldr	r3, [pc, #76]	; (8004d64 <HAL_InitTick+0x64>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	4b11      	ldr	r3, [pc, #68]	; (8004d60 <HAL_InitTick+0x60>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f001 fa29 	bl	8006182 <HAL_SYSTICK_Config>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e00e      	b.n	8004d58 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b0f      	cmp	r3, #15
 8004d3e:	d80a      	bhi.n	8004d56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d40:	2200      	movs	r2, #0
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	f04f 30ff 	mov.w	r0, #4294967295
 8004d48:	f001 f9f3 	bl	8006132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d4c:	4a06      	ldr	r2, [pc, #24]	; (8004d68 <HAL_InitTick+0x68>)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	e000      	b.n	8004d58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	24000480 	.word	0x24000480
 8004d64:	24000474 	.word	0x24000474
 8004d68:	2400047c 	.word	0x2400047c

08004d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004d70:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <HAL_IncTick+0x20>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	461a      	mov	r2, r3
 8004d76:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <HAL_IncTick+0x24>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	4a04      	ldr	r2, [pc, #16]	; (8004d90 <HAL_IncTick+0x24>)
 8004d7e:	6013      	str	r3, [r2, #0]
}
 8004d80:	bf00      	nop
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	24000480 	.word	0x24000480
 8004d90:	24001818 	.word	0x24001818

08004d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  return uwTick;
 8004d98:	4b03      	ldr	r3, [pc, #12]	; (8004da8 <HAL_GetTick+0x14>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	24001818 	.word	0x24001818

08004dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004db4:	f7ff ffee 	bl	8004d94 <HAL_GetTick>
 8004db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc4:	d005      	beq.n	8004dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004dc6:	4b0a      	ldr	r3, [pc, #40]	; (8004df0 <HAL_Delay+0x44>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004dd2:	bf00      	nop
 8004dd4:	f7ff ffde 	bl	8004d94 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d8f7      	bhi.n	8004dd4 <HAL_Delay+0x28>
  {
  }
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	24000480 	.word	0x24000480

08004df4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004df8:	4b03      	ldr	r3, [pc, #12]	; (8004e08 <HAL_GetREVID+0x14>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	0c1b      	lsrs	r3, r3, #16
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	5c001000 	.word	0x5c001000

08004e0c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8004e14:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004e1c:	4904      	ldr	r1, [pc, #16]	; (8004e30 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	604b      	str	r3, [r1, #4]
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	58000400 	.word	0x58000400

08004e34 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004e3e:	4b07      	ldr	r3, [pc, #28]	; (8004e5c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	43db      	mvns	r3, r3
 8004e46:	401a      	ands	r2, r3
 8004e48:	4904      	ldr	r1, [pc, #16]	; (8004e5c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	604b      	str	r3, [r1, #4]
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	58000400 	.word	0x58000400

08004e60 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	431a      	orrs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	609a      	str	r2, [r3, #8]
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b083      	sub	sp, #12
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	609a      	str	r2, [r3, #8]
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
 8004ed4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	3360      	adds	r3, #96	; 0x60
 8004eda:	461a      	mov	r2, r3
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004efc:	bf00      	nop
 8004efe:	371c      	adds	r7, #28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f003 031f 	and.w	r3, r3, #31
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	fa01 f303 	lsl.w	r3, r1, r3
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	611a      	str	r2, [r3, #16]
}
 8004f2e:	bf00      	nop
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b087      	sub	sp, #28
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3360      	adds	r3, #96	; 0x60
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	601a      	str	r2, [r3, #0]
  }
}
 8004f64:	bf00      	nop
 8004f66:	371c      	adds	r7, #28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	3330      	adds	r3, #48	; 0x30
 8004f80:	461a      	mov	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	0a1b      	lsrs	r3, r3, #8
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	f003 030c 	and.w	r3, r3, #12
 8004f8c:	4413      	add	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f003 031f 	and.w	r3, r3, #31
 8004f9a:	211f      	movs	r1, #31
 8004f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa0:	43db      	mvns	r3, r3
 8004fa2:	401a      	ands	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	0e9b      	lsrs	r3, r3, #26
 8004fa8:	f003 011f 	and.w	r1, r3, #31
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f003 031f 	and.w	r3, r3, #31
 8004fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004fbc:	bf00      	nop
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3314      	adds	r3, #20
 8004fd8:	461a      	mov	r2, r3
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	0e5b      	lsrs	r3, r3, #25
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	4413      	add	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	0d1b      	lsrs	r3, r3, #20
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	2107      	movs	r1, #7
 8004ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffa:	43db      	mvns	r3, r3
 8004ffc:	401a      	ands	r2, r3
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	0d1b      	lsrs	r3, r3, #20
 8005002:	f003 031f 	and.w	r3, r3, #31
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	fa01 f303 	lsl.w	r3, r1, r3
 800500c:	431a      	orrs	r2, r3
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005012:	bf00      	nop
 8005014:	371c      	adds	r7, #28
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
	...

08005020 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005038:	43db      	mvns	r3, r3
 800503a:	401a      	ands	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f003 0318 	and.w	r3, r3, #24
 8005042:	4908      	ldr	r1, [pc, #32]	; (8005064 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005044:	40d9      	lsrs	r1, r3
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	400b      	ands	r3, r1
 800504a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800504e:	431a      	orrs	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005056:	bf00      	nop
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	000fffff 	.word	0x000fffff

08005068 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	4b04      	ldr	r3, [pc, #16]	; (8005088 <LL_ADC_DisableDeepPowerDown+0x20>)
 8005076:	4013      	ands	r3, r2
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6093      	str	r3, [r2, #8]
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	5fffffc0 	.word	0x5fffffc0

0800508c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800509c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050a0:	d101      	bne.n	80050a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <LL_ADC_EnableInternalRegulator+0x24>)
 80050c2:	4013      	ands	r3, r2
 80050c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	6fffffc0 	.word	0x6fffffc0

080050dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050f0:	d101      	bne.n	80050f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <LL_ADC_IsEnabled+0x18>
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <LL_ADC_IsEnabled+0x1a>
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 0304 	and.w	r3, r3, #4
 800513a:	2b04      	cmp	r3, #4
 800513c:	d101      	bne.n	8005142 <LL_ADC_REG_IsConversionOngoing+0x18>
 800513e:	2301      	movs	r3, #1
 8005140:	e000      	b.n	8005144 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 0308 	and.w	r3, r3, #8
 8005160:	2b08      	cmp	r3, #8
 8005162:	d101      	bne.n	8005168 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005164:	2301      	movs	r3, #1
 8005166:	e000      	b.n	800516a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
	...

08005178 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005178:	b590      	push	{r4, r7, lr}
 800517a:	b089      	sub	sp, #36	; 0x24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005184:	2300      	movs	r3, #0
 8005186:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e18f      	b.n	80054b2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519c:	2b00      	cmp	r3, #0
 800519e:	d109      	bne.n	80051b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7fe fb63 	bl	800386c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff ff67 	bl	800508c <LL_ADC_IsDeepPowerDownEnabled>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d004      	beq.n	80051ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff ff4d 	bl	8005068 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7ff ff82 	bl	80050dc <LL_ADC_IsInternalRegulatorEnabled>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d114      	bne.n	8005208 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff ff66 	bl	80050b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80051e8:	4b87      	ldr	r3, [pc, #540]	; (8005408 <HAL_ADC_Init+0x290>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	099b      	lsrs	r3, r3, #6
 80051ee:	4a87      	ldr	r2, [pc, #540]	; (800540c <HAL_ADC_Init+0x294>)
 80051f0:	fba2 2303 	umull	r2, r3, r2, r3
 80051f4:	099b      	lsrs	r3, r3, #6
 80051f6:	3301      	adds	r3, #1
 80051f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80051fa:	e002      	b.n	8005202 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	3b01      	subs	r3, #1
 8005200:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1f9      	bne.n	80051fc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff ff65 	bl	80050dc <LL_ADC_IsInternalRegulatorEnabled>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10d      	bne.n	8005234 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521c:	f043 0210 	orr.w	r2, r3, #16
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005228:	f043 0201 	orr.w	r2, r3, #1
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff ff76 	bl	800512a <LL_ADC_REG_IsConversionOngoing>
 800523e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005244:	f003 0310 	and.w	r3, r3, #16
 8005248:	2b00      	cmp	r3, #0
 800524a:	f040 8129 	bne.w	80054a0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b00      	cmp	r3, #0
 8005252:	f040 8125 	bne.w	80054a0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800525e:	f043 0202 	orr.w	r2, r3, #2
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff ff4a 	bl	8005104 <LL_ADC_IsEnabled>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d136      	bne.n	80052e4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a65      	ldr	r2, [pc, #404]	; (8005410 <HAL_ADC_Init+0x298>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d004      	beq.n	800528a <HAL_ADC_Init+0x112>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a63      	ldr	r2, [pc, #396]	; (8005414 <HAL_ADC_Init+0x29c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d10e      	bne.n	80052a8 <HAL_ADC_Init+0x130>
 800528a:	4861      	ldr	r0, [pc, #388]	; (8005410 <HAL_ADC_Init+0x298>)
 800528c:	f7ff ff3a 	bl	8005104 <LL_ADC_IsEnabled>
 8005290:	4604      	mov	r4, r0
 8005292:	4860      	ldr	r0, [pc, #384]	; (8005414 <HAL_ADC_Init+0x29c>)
 8005294:	f7ff ff36 	bl	8005104 <LL_ADC_IsEnabled>
 8005298:	4603      	mov	r3, r0
 800529a:	4323      	orrs	r3, r4
 800529c:	2b00      	cmp	r3, #0
 800529e:	bf0c      	ite	eq
 80052a0:	2301      	moveq	r3, #1
 80052a2:	2300      	movne	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	e008      	b.n	80052ba <HAL_ADC_Init+0x142>
 80052a8:	485b      	ldr	r0, [pc, #364]	; (8005418 <HAL_ADC_Init+0x2a0>)
 80052aa:	f7ff ff2b 	bl	8005104 <LL_ADC_IsEnabled>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	bf0c      	ite	eq
 80052b4:	2301      	moveq	r3, #1
 80052b6:	2300      	movne	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d012      	beq.n	80052e4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a53      	ldr	r2, [pc, #332]	; (8005410 <HAL_ADC_Init+0x298>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d004      	beq.n	80052d2 <HAL_ADC_Init+0x15a>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a51      	ldr	r2, [pc, #324]	; (8005414 <HAL_ADC_Init+0x29c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d101      	bne.n	80052d6 <HAL_ADC_Init+0x15e>
 80052d2:	4a52      	ldr	r2, [pc, #328]	; (800541c <HAL_ADC_Init+0x2a4>)
 80052d4:	e000      	b.n	80052d8 <HAL_ADC_Init+0x160>
 80052d6:	4a52      	ldr	r2, [pc, #328]	; (8005420 <HAL_ADC_Init+0x2a8>)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	4619      	mov	r1, r3
 80052de:	4610      	mov	r0, r2
 80052e0:	f7ff fdbe 	bl	8004e60 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80052e4:	f7ff fd86 	bl	8004df4 <HAL_GetREVID>
 80052e8:	4603      	mov	r3, r0
 80052ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d914      	bls.n	800531c <HAL_ADC_Init+0x1a4>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	2b10      	cmp	r3, #16
 80052f8:	d110      	bne.n	800531c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	7d5b      	ldrb	r3, [r3, #21]
 80052fe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005304:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800530a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	7f1b      	ldrb	r3, [r3, #28]
 8005310:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005312:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005314:	f043 030c 	orr.w	r3, r3, #12
 8005318:	61bb      	str	r3, [r7, #24]
 800531a:	e00d      	b.n	8005338 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	7d5b      	ldrb	r3, [r3, #21]
 8005320:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005326:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800532c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	7f1b      	ldrb	r3, [r3, #28]
 8005332:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005334:	4313      	orrs	r3, r2
 8005336:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	7f1b      	ldrb	r3, [r3, #28]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d106      	bne.n	800534e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	3b01      	subs	r3, #1
 8005346:	045b      	lsls	r3, r3, #17
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4313      	orrs	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	2b00      	cmp	r3, #0
 8005354:	d009      	beq.n	800536a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005362:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	4313      	orrs	r3, r2
 8005368:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68da      	ldr	r2, [r3, #12]
 8005370:	4b2c      	ldr	r3, [pc, #176]	; (8005424 <HAL_ADC_Init+0x2ac>)
 8005372:	4013      	ands	r3, r2
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6812      	ldr	r2, [r2, #0]
 8005378:	69b9      	ldr	r1, [r7, #24]
 800537a:	430b      	orrs	r3, r1
 800537c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff fed1 	bl	800512a <LL_ADC_REG_IsConversionOngoing>
 8005388:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fede 	bl	8005150 <LL_ADC_INJ_IsConversionOngoing>
 8005394:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d15f      	bne.n	800545c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d15c      	bne.n	800545c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	7d1b      	ldrb	r3, [r3, #20]
 80053a6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80053ac:	4313      	orrs	r3, r2
 80053ae:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68da      	ldr	r2, [r3, #12]
 80053b6:	4b1c      	ldr	r3, [pc, #112]	; (8005428 <HAL_ADC_Init+0x2b0>)
 80053b8:	4013      	ands	r3, r2
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	6812      	ldr	r2, [r2, #0]
 80053be:	69b9      	ldr	r1, [r7, #24]
 80053c0:	430b      	orrs	r3, r1
 80053c2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d130      	bne.n	8005430 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691a      	ldr	r2, [r3, #16]
 80053da:	4b14      	ldr	r3, [pc, #80]	; (800542c <HAL_ADC_Init+0x2b4>)
 80053dc:	4013      	ands	r3, r2
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80053e2:	3a01      	subs	r2, #1
 80053e4:	0411      	lsls	r1, r2, #16
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80053ea:	4311      	orrs	r1, r2
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80053f0:	4311      	orrs	r1, r2
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80053f6:	430a      	orrs	r2, r1
 80053f8:	431a      	orrs	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0201 	orr.w	r2, r2, #1
 8005402:	611a      	str	r2, [r3, #16]
 8005404:	e01c      	b.n	8005440 <HAL_ADC_Init+0x2c8>
 8005406:	bf00      	nop
 8005408:	24000474 	.word	0x24000474
 800540c:	053e2d63 	.word	0x053e2d63
 8005410:	40022000 	.word	0x40022000
 8005414:	40022100 	.word	0x40022100
 8005418:	58026000 	.word	0x58026000
 800541c:	40022300 	.word	0x40022300
 8005420:	58026300 	.word	0x58026300
 8005424:	fff0c003 	.word	0xfff0c003
 8005428:	ffffbffc 	.word	0xffffbffc
 800542c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0201 	bic.w	r2, r2, #1
 800543e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 fb80 	bl	8005b5c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d10c      	bne.n	800547e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	f023 010f 	bic.w	r1, r3, #15
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	1e5a      	subs	r2, r3, #1
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	631a      	str	r2, [r3, #48]	; 0x30
 800547c:	e007      	b.n	800548e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 020f 	bic.w	r2, r2, #15
 800548c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005492:	f023 0303 	bic.w	r3, r3, #3
 8005496:	f043 0201 	orr.w	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	655a      	str	r2, [r3, #84]	; 0x54
 800549e:	e007      	b.n	80054b0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a4:	f043 0210 	orr.w	r2, r3, #16
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80054b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3724      	adds	r7, #36	; 0x24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd90      	pop	{r4, r7, pc}
 80054ba:	bf00      	nop

080054bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80054bc:	b590      	push	{r4, r7, lr}
 80054be:	b0a1      	sub	sp, #132	; 0x84
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80054cc:	2300      	movs	r3, #0
 80054ce:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	4a9d      	ldr	r2, [pc, #628]	; (800574c <HAL_ADC_ConfigChannel+0x290>)
 80054d6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d101      	bne.n	80054e6 <HAL_ADC_ConfigChannel+0x2a>
 80054e2:	2302      	movs	r3, #2
 80054e4:	e321      	b.n	8005b2a <HAL_ADC_ConfigChannel+0x66e>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff fe19 	bl	800512a <LL_ADC_REG_IsConversionOngoing>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f040 8306 	bne.w	8005b0c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005508:	2b00      	cmp	r3, #0
 800550a:	d108      	bne.n	800551e <HAL_ADC_ConfigChannel+0x62>
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	0e9b      	lsrs	r3, r3, #26
 8005512:	f003 031f 	and.w	r3, r3, #31
 8005516:	2201      	movs	r2, #1
 8005518:	fa02 f303 	lsl.w	r3, r2, r3
 800551c:	e016      	b.n	800554c <HAL_ADC_ConfigChannel+0x90>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005526:	fa93 f3a3 	rbit	r3, r3
 800552a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800552c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800552e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005530:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8005536:	2320      	movs	r3, #32
 8005538:	e003      	b.n	8005542 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800553a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800553c:	fab3 f383 	clz	r3, r3
 8005540:	b2db      	uxtb	r3, r3
 8005542:	f003 031f 	and.w	r3, r3, #31
 8005546:	2201      	movs	r2, #1
 8005548:	fa02 f303 	lsl.w	r3, r2, r3
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6812      	ldr	r2, [r2, #0]
 8005550:	69d1      	ldr	r1, [r2, #28]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6812      	ldr	r2, [r2, #0]
 8005556:	430b      	orrs	r3, r1
 8005558:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6818      	ldr	r0, [r3, #0]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6859      	ldr	r1, [r3, #4]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	f7ff fd02 	bl	8004f70 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff fdda 	bl	800512a <LL_ADC_REG_IsConversionOngoing>
 8005576:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff fde7 	bl	8005150 <LL_ADC_INJ_IsConversionOngoing>
 8005582:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005584:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005586:	2b00      	cmp	r3, #0
 8005588:	f040 80b3 	bne.w	80056f2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800558c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800558e:	2b00      	cmp	r3, #0
 8005590:	f040 80af 	bne.w	80056f2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6818      	ldr	r0, [r3, #0]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	6819      	ldr	r1, [r3, #0]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	461a      	mov	r2, r3
 80055a2:	f7ff fd11 	bl	8004fc8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80055a6:	4b6a      	ldr	r3, [pc, #424]	; (8005750 <HAL_ADC_ConfigChannel+0x294>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80055ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055b2:	d10b      	bne.n	80055cc <HAL_ADC_ConfigChannel+0x110>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	695a      	ldr	r2, [r3, #20]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	089b      	lsrs	r3, r3, #2
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ca:	e01d      	b.n	8005608 <HAL_ADC_ConfigChannel+0x14c>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f003 0310 	and.w	r3, r3, #16
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10b      	bne.n	80055f2 <HAL_ADC_ConfigChannel+0x136>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	695a      	ldr	r2, [r3, #20]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	089b      	lsrs	r3, r3, #2
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	fa02 f303 	lsl.w	r3, r2, r3
 80055f0:	e00a      	b.n	8005608 <HAL_ADC_ConfigChannel+0x14c>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	695a      	ldr	r2, [r3, #20]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	089b      	lsrs	r3, r3, #2
 80055fe:	f003 0304 	and.w	r3, r3, #4
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	fa02 f303 	lsl.w	r3, r2, r3
 8005608:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	2b04      	cmp	r3, #4
 8005610:	d027      	beq.n	8005662 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	6919      	ldr	r1, [r3, #16]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005620:	f7ff fc52 	bl	8004ec8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	6919      	ldr	r1, [r3, #16]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	7e5b      	ldrb	r3, [r3, #25]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d102      	bne.n	800563a <HAL_ADC_ConfigChannel+0x17e>
 8005634:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005638:	e000      	b.n	800563c <HAL_ADC_ConfigChannel+0x180>
 800563a:	2300      	movs	r3, #0
 800563c:	461a      	mov	r2, r3
 800563e:	f7ff fc7c 	bl	8004f3a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	6919      	ldr	r1, [r3, #16]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	7e1b      	ldrb	r3, [r3, #24]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d102      	bne.n	8005658 <HAL_ADC_ConfigChannel+0x19c>
 8005652:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005656:	e000      	b.n	800565a <HAL_ADC_ConfigChannel+0x19e>
 8005658:	2300      	movs	r3, #0
 800565a:	461a      	mov	r2, r3
 800565c:	f7ff fc54 	bl	8004f08 <LL_ADC_SetDataRightShift>
 8005660:	e047      	b.n	80056f2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005668:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	069b      	lsls	r3, r3, #26
 8005672:	429a      	cmp	r2, r3
 8005674:	d107      	bne.n	8005686 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005684:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800568c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	069b      	lsls	r3, r3, #26
 8005696:	429a      	cmp	r2, r3
 8005698:	d107      	bne.n	80056aa <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056a8:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	069b      	lsls	r3, r3, #26
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d107      	bne.n	80056ce <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056cc:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	069b      	lsls	r3, r3, #26
 80056de:	429a      	cmp	r2, r3
 80056e0:	d107      	bne.n	80056f2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056f0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff fd04 	bl	8005104 <LL_ADC_IsEnabled>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f040 820d 	bne.w	8005b1e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6818      	ldr	r0, [r3, #0]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	6819      	ldr	r1, [r3, #0]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	461a      	mov	r2, r3
 8005712:	f7ff fc85 	bl	8005020 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	4a0c      	ldr	r2, [pc, #48]	; (800574c <HAL_ADC_ConfigChannel+0x290>)
 800571c:	4293      	cmp	r3, r2
 800571e:	f040 8133 	bne.w	8005988 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800572e:	2b00      	cmp	r3, #0
 8005730:	d110      	bne.n	8005754 <HAL_ADC_ConfigChannel+0x298>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	0e9b      	lsrs	r3, r3, #26
 8005738:	3301      	adds	r3, #1
 800573a:	f003 031f 	and.w	r3, r3, #31
 800573e:	2b09      	cmp	r3, #9
 8005740:	bf94      	ite	ls
 8005742:	2301      	movls	r3, #1
 8005744:	2300      	movhi	r3, #0
 8005746:	b2db      	uxtb	r3, r3
 8005748:	e01e      	b.n	8005788 <HAL_ADC_ConfigChannel+0x2cc>
 800574a:	bf00      	nop
 800574c:	47ff0000 	.word	0x47ff0000
 8005750:	5c001000 	.word	0x5c001000
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800575a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800575c:	fa93 f3a3 	rbit	r3, r3
 8005760:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005764:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800576c:	2320      	movs	r3, #32
 800576e:	e003      	b.n	8005778 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005772:	fab3 f383 	clz	r3, r3
 8005776:	b2db      	uxtb	r3, r3
 8005778:	3301      	adds	r3, #1
 800577a:	f003 031f 	and.w	r3, r3, #31
 800577e:	2b09      	cmp	r3, #9
 8005780:	bf94      	ite	ls
 8005782:	2301      	movls	r3, #1
 8005784:	2300      	movhi	r3, #0
 8005786:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005788:	2b00      	cmp	r3, #0
 800578a:	d079      	beq.n	8005880 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005794:	2b00      	cmp	r3, #0
 8005796:	d107      	bne.n	80057a8 <HAL_ADC_ConfigChannel+0x2ec>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	0e9b      	lsrs	r3, r3, #26
 800579e:	3301      	adds	r3, #1
 80057a0:	069b      	lsls	r3, r3, #26
 80057a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80057a6:	e015      	b.n	80057d4 <HAL_ADC_ConfigChannel+0x318>
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b0:	fa93 f3a3 	rbit	r3, r3
 80057b4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80057b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057b8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80057ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80057c0:	2320      	movs	r3, #32
 80057c2:	e003      	b.n	80057cc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80057c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c6:	fab3 f383 	clz	r3, r3
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	3301      	adds	r3, #1
 80057ce:	069b      	lsls	r3, r3, #26
 80057d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d109      	bne.n	80057f4 <HAL_ADC_ConfigChannel+0x338>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	0e9b      	lsrs	r3, r3, #26
 80057e6:	3301      	adds	r3, #1
 80057e8:	f003 031f 	and.w	r3, r3, #31
 80057ec:	2101      	movs	r1, #1
 80057ee:	fa01 f303 	lsl.w	r3, r1, r3
 80057f2:	e017      	b.n	8005824 <HAL_ADC_ConfigChannel+0x368>
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057fc:	fa93 f3a3 	rbit	r3, r3
 8005800:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005804:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 800580c:	2320      	movs	r3, #32
 800580e:	e003      	b.n	8005818 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8005810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005812:	fab3 f383 	clz	r3, r3
 8005816:	b2db      	uxtb	r3, r3
 8005818:	3301      	adds	r3, #1
 800581a:	f003 031f 	and.w	r3, r3, #31
 800581e:	2101      	movs	r1, #1
 8005820:	fa01 f303 	lsl.w	r3, r1, r3
 8005824:	ea42 0103 	orr.w	r1, r2, r3
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10a      	bne.n	800584a <HAL_ADC_ConfigChannel+0x38e>
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	0e9b      	lsrs	r3, r3, #26
 800583a:	3301      	adds	r3, #1
 800583c:	f003 021f 	and.w	r2, r3, #31
 8005840:	4613      	mov	r3, r2
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	4413      	add	r3, r2
 8005846:	051b      	lsls	r3, r3, #20
 8005848:	e018      	b.n	800587c <HAL_ADC_ConfigChannel+0x3c0>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005852:	fa93 f3a3 	rbit	r3, r3
 8005856:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800585c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8005862:	2320      	movs	r3, #32
 8005864:	e003      	b.n	800586e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8005866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005868:	fab3 f383 	clz	r3, r3
 800586c:	b2db      	uxtb	r3, r3
 800586e:	3301      	adds	r3, #1
 8005870:	f003 021f 	and.w	r2, r3, #31
 8005874:	4613      	mov	r3, r2
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	4413      	add	r3, r2
 800587a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800587c:	430b      	orrs	r3, r1
 800587e:	e07e      	b.n	800597e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005888:	2b00      	cmp	r3, #0
 800588a:	d107      	bne.n	800589c <HAL_ADC_ConfigChannel+0x3e0>
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	0e9b      	lsrs	r3, r3, #26
 8005892:	3301      	adds	r3, #1
 8005894:	069b      	lsls	r3, r3, #26
 8005896:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800589a:	e015      	b.n	80058c8 <HAL_ADC_ConfigChannel+0x40c>
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a4:	fa93 f3a3 	rbit	r3, r3
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80058b4:	2320      	movs	r3, #32
 80058b6:	e003      	b.n	80058c0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80058b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ba:	fab3 f383 	clz	r3, r3
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	3301      	adds	r3, #1
 80058c2:	069b      	lsls	r3, r3, #26
 80058c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d109      	bne.n	80058e8 <HAL_ADC_ConfigChannel+0x42c>
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	0e9b      	lsrs	r3, r3, #26
 80058da:	3301      	adds	r3, #1
 80058dc:	f003 031f 	and.w	r3, r3, #31
 80058e0:	2101      	movs	r1, #1
 80058e2:	fa01 f303 	lsl.w	r3, r1, r3
 80058e6:	e017      	b.n	8005918 <HAL_ADC_ConfigChannel+0x45c>
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	fa93 f3a3 	rbit	r3, r3
 80058f4:	61bb      	str	r3, [r7, #24]
  return result;
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8005900:	2320      	movs	r3, #32
 8005902:	e003      	b.n	800590c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	fab3 f383 	clz	r3, r3
 800590a:	b2db      	uxtb	r3, r3
 800590c:	3301      	adds	r3, #1
 800590e:	f003 031f 	and.w	r3, r3, #31
 8005912:	2101      	movs	r1, #1
 8005914:	fa01 f303 	lsl.w	r3, r1, r3
 8005918:	ea42 0103 	orr.w	r1, r2, r3
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10d      	bne.n	8005944 <HAL_ADC_ConfigChannel+0x488>
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	0e9b      	lsrs	r3, r3, #26
 800592e:	3301      	adds	r3, #1
 8005930:	f003 021f 	and.w	r2, r3, #31
 8005934:	4613      	mov	r3, r2
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	4413      	add	r3, r2
 800593a:	3b1e      	subs	r3, #30
 800593c:	051b      	lsls	r3, r3, #20
 800593e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005942:	e01b      	b.n	800597c <HAL_ADC_ConfigChannel+0x4c0>
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	fa93 f3a3 	rbit	r3, r3
 8005950:	60fb      	str	r3, [r7, #12]
  return result;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800595c:	2320      	movs	r3, #32
 800595e:	e003      	b.n	8005968 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	fab3 f383 	clz	r3, r3
 8005966:	b2db      	uxtb	r3, r3
 8005968:	3301      	adds	r3, #1
 800596a:	f003 021f 	and.w	r2, r3, #31
 800596e:	4613      	mov	r3, r2
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	4413      	add	r3, r2
 8005974:	3b1e      	subs	r3, #30
 8005976:	051b      	lsls	r3, r3, #20
 8005978:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800597c:	430b      	orrs	r3, r1
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	6892      	ldr	r2, [r2, #8]
 8005982:	4619      	mov	r1, r3
 8005984:	f7ff fb20 	bl	8004fc8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	f280 80c6 	bge.w	8005b1e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a67      	ldr	r2, [pc, #412]	; (8005b34 <HAL_ADC_ConfigChannel+0x678>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d004      	beq.n	80059a6 <HAL_ADC_ConfigChannel+0x4ea>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a65      	ldr	r2, [pc, #404]	; (8005b38 <HAL_ADC_ConfigChannel+0x67c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d101      	bne.n	80059aa <HAL_ADC_ConfigChannel+0x4ee>
 80059a6:	4b65      	ldr	r3, [pc, #404]	; (8005b3c <HAL_ADC_ConfigChannel+0x680>)
 80059a8:	e000      	b.n	80059ac <HAL_ADC_ConfigChannel+0x4f0>
 80059aa:	4b65      	ldr	r3, [pc, #404]	; (8005b40 <HAL_ADC_ConfigChannel+0x684>)
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff fa7d 	bl	8004eac <LL_ADC_GetCommonPathInternalCh>
 80059b2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a5e      	ldr	r2, [pc, #376]	; (8005b34 <HAL_ADC_ConfigChannel+0x678>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d004      	beq.n	80059c8 <HAL_ADC_ConfigChannel+0x50c>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a5d      	ldr	r2, [pc, #372]	; (8005b38 <HAL_ADC_ConfigChannel+0x67c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d10e      	bne.n	80059e6 <HAL_ADC_ConfigChannel+0x52a>
 80059c8:	485a      	ldr	r0, [pc, #360]	; (8005b34 <HAL_ADC_ConfigChannel+0x678>)
 80059ca:	f7ff fb9b 	bl	8005104 <LL_ADC_IsEnabled>
 80059ce:	4604      	mov	r4, r0
 80059d0:	4859      	ldr	r0, [pc, #356]	; (8005b38 <HAL_ADC_ConfigChannel+0x67c>)
 80059d2:	f7ff fb97 	bl	8005104 <LL_ADC_IsEnabled>
 80059d6:	4603      	mov	r3, r0
 80059d8:	4323      	orrs	r3, r4
 80059da:	2b00      	cmp	r3, #0
 80059dc:	bf0c      	ite	eq
 80059de:	2301      	moveq	r3, #1
 80059e0:	2300      	movne	r3, #0
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	e008      	b.n	80059f8 <HAL_ADC_ConfigChannel+0x53c>
 80059e6:	4857      	ldr	r0, [pc, #348]	; (8005b44 <HAL_ADC_ConfigChannel+0x688>)
 80059e8:	f7ff fb8c 	bl	8005104 <LL_ADC_IsEnabled>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	bf0c      	ite	eq
 80059f2:	2301      	moveq	r3, #1
 80059f4:	2300      	movne	r3, #0
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d07d      	beq.n	8005af8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a51      	ldr	r2, [pc, #324]	; (8005b48 <HAL_ADC_ConfigChannel+0x68c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d130      	bne.n	8005a68 <HAL_ADC_ConfigChannel+0x5ac>
 8005a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d12b      	bne.n	8005a68 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a4b      	ldr	r2, [pc, #300]	; (8005b44 <HAL_ADC_ConfigChannel+0x688>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	f040 8081 	bne.w	8005b1e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a44      	ldr	r2, [pc, #272]	; (8005b34 <HAL_ADC_ConfigChannel+0x678>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d004      	beq.n	8005a30 <HAL_ADC_ConfigChannel+0x574>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a43      	ldr	r2, [pc, #268]	; (8005b38 <HAL_ADC_ConfigChannel+0x67c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d101      	bne.n	8005a34 <HAL_ADC_ConfigChannel+0x578>
 8005a30:	4a42      	ldr	r2, [pc, #264]	; (8005b3c <HAL_ADC_ConfigChannel+0x680>)
 8005a32:	e000      	b.n	8005a36 <HAL_ADC_ConfigChannel+0x57a>
 8005a34:	4a42      	ldr	r2, [pc, #264]	; (8005b40 <HAL_ADC_ConfigChannel+0x684>)
 8005a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4610      	mov	r0, r2
 8005a40:	f7ff fa21 	bl	8004e86 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a44:	4b41      	ldr	r3, [pc, #260]	; (8005b4c <HAL_ADC_ConfigChannel+0x690>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	099b      	lsrs	r3, r3, #6
 8005a4a:	4a41      	ldr	r2, [pc, #260]	; (8005b50 <HAL_ADC_ConfigChannel+0x694>)
 8005a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a50:	099b      	lsrs	r3, r3, #6
 8005a52:	3301      	adds	r3, #1
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005a58:	e002      	b.n	8005a60 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1f9      	bne.n	8005a5a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a66:	e05a      	b.n	8005b1e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a39      	ldr	r2, [pc, #228]	; (8005b54 <HAL_ADC_ConfigChannel+0x698>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d11e      	bne.n	8005ab0 <HAL_ADC_ConfigChannel+0x5f4>
 8005a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d119      	bne.n	8005ab0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a30      	ldr	r2, [pc, #192]	; (8005b44 <HAL_ADC_ConfigChannel+0x688>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d14b      	bne.n	8005b1e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a2a      	ldr	r2, [pc, #168]	; (8005b34 <HAL_ADC_ConfigChannel+0x678>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d004      	beq.n	8005a9a <HAL_ADC_ConfigChannel+0x5de>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a28      	ldr	r2, [pc, #160]	; (8005b38 <HAL_ADC_ConfigChannel+0x67c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d101      	bne.n	8005a9e <HAL_ADC_ConfigChannel+0x5e2>
 8005a9a:	4a28      	ldr	r2, [pc, #160]	; (8005b3c <HAL_ADC_ConfigChannel+0x680>)
 8005a9c:	e000      	b.n	8005aa0 <HAL_ADC_ConfigChannel+0x5e4>
 8005a9e:	4a28      	ldr	r2, [pc, #160]	; (8005b40 <HAL_ADC_ConfigChannel+0x684>)
 8005aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	f7ff f9ec 	bl	8004e86 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005aae:	e036      	b.n	8005b1e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a28      	ldr	r2, [pc, #160]	; (8005b58 <HAL_ADC_ConfigChannel+0x69c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d131      	bne.n	8005b1e <HAL_ADC_ConfigChannel+0x662>
 8005aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d12c      	bne.n	8005b1e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a1e      	ldr	r2, [pc, #120]	; (8005b44 <HAL_ADC_ConfigChannel+0x688>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d127      	bne.n	8005b1e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a18      	ldr	r2, [pc, #96]	; (8005b34 <HAL_ADC_ConfigChannel+0x678>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d004      	beq.n	8005ae2 <HAL_ADC_ConfigChannel+0x626>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a16      	ldr	r2, [pc, #88]	; (8005b38 <HAL_ADC_ConfigChannel+0x67c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d101      	bne.n	8005ae6 <HAL_ADC_ConfigChannel+0x62a>
 8005ae2:	4a16      	ldr	r2, [pc, #88]	; (8005b3c <HAL_ADC_ConfigChannel+0x680>)
 8005ae4:	e000      	b.n	8005ae8 <HAL_ADC_ConfigChannel+0x62c>
 8005ae6:	4a16      	ldr	r2, [pc, #88]	; (8005b40 <HAL_ADC_ConfigChannel+0x684>)
 8005ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005aee:	4619      	mov	r1, r3
 8005af0:	4610      	mov	r0, r2
 8005af2:	f7ff f9c8 	bl	8004e86 <LL_ADC_SetCommonPathInternalCh>
 8005af6:	e012      	b.n	8005b1e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afc:	f043 0220 	orr.w	r2, r3, #32
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005b0a:	e008      	b.n	8005b1e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b10:	f043 0220 	orr.w	r2, r3, #32
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005b26:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3784      	adds	r7, #132	; 0x84
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd90      	pop	{r4, r7, pc}
 8005b32:	bf00      	nop
 8005b34:	40022000 	.word	0x40022000
 8005b38:	40022100 	.word	0x40022100
 8005b3c:	40022300 	.word	0x40022300
 8005b40:	58026300 	.word	0x58026300
 8005b44:	58026000 	.word	0x58026000
 8005b48:	cb840000 	.word	0xcb840000
 8005b4c:	24000474 	.word	0x24000474
 8005b50:	053e2d63 	.word	0x053e2d63
 8005b54:	c7520000 	.word	0xc7520000
 8005b58:	cfb80000 	.word	0xcfb80000

08005b5c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a7a      	ldr	r2, [pc, #488]	; (8005d54 <ADC_ConfigureBoostMode+0x1f8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d004      	beq.n	8005b78 <ADC_ConfigureBoostMode+0x1c>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a79      	ldr	r2, [pc, #484]	; (8005d58 <ADC_ConfigureBoostMode+0x1fc>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d109      	bne.n	8005b8c <ADC_ConfigureBoostMode+0x30>
 8005b78:	4b78      	ldr	r3, [pc, #480]	; (8005d5c <ADC_ConfigureBoostMode+0x200>)
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	bf14      	ite	ne
 8005b84:	2301      	movne	r3, #1
 8005b86:	2300      	moveq	r3, #0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	e008      	b.n	8005b9e <ADC_ConfigureBoostMode+0x42>
 8005b8c:	4b74      	ldr	r3, [pc, #464]	; (8005d60 <ADC_ConfigureBoostMode+0x204>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	bf14      	ite	ne
 8005b98:	2301      	movne	r3, #1
 8005b9a:	2300      	moveq	r3, #0
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d01c      	beq.n	8005bdc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005ba2:	f006 fb23 	bl	800c1ec <HAL_RCC_GetHCLKFreq>
 8005ba6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bb0:	d010      	beq.n	8005bd4 <ADC_ConfigureBoostMode+0x78>
 8005bb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bb6:	d873      	bhi.n	8005ca0 <ADC_ConfigureBoostMode+0x144>
 8005bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bbc:	d002      	beq.n	8005bc4 <ADC_ConfigureBoostMode+0x68>
 8005bbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bc2:	d16d      	bne.n	8005ca0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	0c1b      	lsrs	r3, r3, #16
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd0:	60fb      	str	r3, [r7, #12]
        break;
 8005bd2:	e068      	b.n	8005ca6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	089b      	lsrs	r3, r3, #2
 8005bd8:	60fb      	str	r3, [r7, #12]
        break;
 8005bda:	e064      	b.n	8005ca6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005bdc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005be0:	f04f 0100 	mov.w	r1, #0
 8005be4:	f007 fd68 	bl	800d6b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005be8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005bf2:	d051      	beq.n	8005c98 <ADC_ConfigureBoostMode+0x13c>
 8005bf4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005bf8:	d854      	bhi.n	8005ca4 <ADC_ConfigureBoostMode+0x148>
 8005bfa:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005bfe:	d047      	beq.n	8005c90 <ADC_ConfigureBoostMode+0x134>
 8005c00:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005c04:	d84e      	bhi.n	8005ca4 <ADC_ConfigureBoostMode+0x148>
 8005c06:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005c0a:	d03d      	beq.n	8005c88 <ADC_ConfigureBoostMode+0x12c>
 8005c0c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005c10:	d848      	bhi.n	8005ca4 <ADC_ConfigureBoostMode+0x148>
 8005c12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c16:	d033      	beq.n	8005c80 <ADC_ConfigureBoostMode+0x124>
 8005c18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c1c:	d842      	bhi.n	8005ca4 <ADC_ConfigureBoostMode+0x148>
 8005c1e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005c22:	d029      	beq.n	8005c78 <ADC_ConfigureBoostMode+0x11c>
 8005c24:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005c28:	d83c      	bhi.n	8005ca4 <ADC_ConfigureBoostMode+0x148>
 8005c2a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005c2e:	d01a      	beq.n	8005c66 <ADC_ConfigureBoostMode+0x10a>
 8005c30:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005c34:	d836      	bhi.n	8005ca4 <ADC_ConfigureBoostMode+0x148>
 8005c36:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005c3a:	d014      	beq.n	8005c66 <ADC_ConfigureBoostMode+0x10a>
 8005c3c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005c40:	d830      	bhi.n	8005ca4 <ADC_ConfigureBoostMode+0x148>
 8005c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c46:	d00e      	beq.n	8005c66 <ADC_ConfigureBoostMode+0x10a>
 8005c48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c4c:	d82a      	bhi.n	8005ca4 <ADC_ConfigureBoostMode+0x148>
 8005c4e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005c52:	d008      	beq.n	8005c66 <ADC_ConfigureBoostMode+0x10a>
 8005c54:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005c58:	d824      	bhi.n	8005ca4 <ADC_ConfigureBoostMode+0x148>
 8005c5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c5e:	d002      	beq.n	8005c66 <ADC_ConfigureBoostMode+0x10a>
 8005c60:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c64:	d11e      	bne.n	8005ca4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	0c9b      	lsrs	r3, r3, #18
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c74:	60fb      	str	r3, [r7, #12]
        break;
 8005c76:	e016      	b.n	8005ca6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	091b      	lsrs	r3, r3, #4
 8005c7c:	60fb      	str	r3, [r7, #12]
        break;
 8005c7e:	e012      	b.n	8005ca6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	60fb      	str	r3, [r7, #12]
        break;
 8005c86:	e00e      	b.n	8005ca6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	099b      	lsrs	r3, r3, #6
 8005c8c:	60fb      	str	r3, [r7, #12]
        break;
 8005c8e:	e00a      	b.n	8005ca6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	09db      	lsrs	r3, r3, #7
 8005c94:	60fb      	str	r3, [r7, #12]
        break;
 8005c96:	e006      	b.n	8005ca6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	0a1b      	lsrs	r3, r3, #8
 8005c9c:	60fb      	str	r3, [r7, #12]
        break;
 8005c9e:	e002      	b.n	8005ca6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005ca0:	bf00      	nop
 8005ca2:	e000      	b.n	8005ca6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005ca4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005ca6:	f7ff f8a5 	bl	8004df4 <HAL_GetREVID>
 8005caa:	4603      	mov	r3, r0
 8005cac:	f241 0203 	movw	r2, #4099	; 0x1003
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d815      	bhi.n	8005ce0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4a2b      	ldr	r2, [pc, #172]	; (8005d64 <ADC_ConfigureBoostMode+0x208>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d908      	bls.n	8005cce <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cca:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005ccc:	e03e      	b.n	8005d4c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cdc:	609a      	str	r2, [r3, #8]
}
 8005cde:	e035      	b.n	8005d4c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	085b      	lsrs	r3, r3, #1
 8005ce4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	4a1f      	ldr	r2, [pc, #124]	; (8005d68 <ADC_ConfigureBoostMode+0x20c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d808      	bhi.n	8005d00 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005cfc:	609a      	str	r2, [r3, #8]
}
 8005cfe:	e025      	b.n	8005d4c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4a1a      	ldr	r2, [pc, #104]	; (8005d6c <ADC_ConfigureBoostMode+0x210>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d80a      	bhi.n	8005d1e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d1a:	609a      	str	r2, [r3, #8]
}
 8005d1c:	e016      	b.n	8005d4c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4a13      	ldr	r2, [pc, #76]	; (8005d70 <ADC_ConfigureBoostMode+0x214>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d80a      	bhi.n	8005d3c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d38:	609a      	str	r2, [r3, #8]
}
 8005d3a:	e007      	b.n	8005d4c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689a      	ldr	r2, [r3, #8]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005d4a:	609a      	str	r2, [r3, #8]
}
 8005d4c:	bf00      	nop
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	40022000 	.word	0x40022000
 8005d58:	40022100 	.word	0x40022100
 8005d5c:	40022300 	.word	0x40022300
 8005d60:	58026300 	.word	0x58026300
 8005d64:	01312d00 	.word	0x01312d00
 8005d68:	005f5e10 	.word	0x005f5e10
 8005d6c:	00bebc20 	.word	0x00bebc20
 8005d70:	017d7840 	.word	0x017d7840

08005d74 <LL_ADC_IsEnabled>:
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d101      	bne.n	8005d8c <LL_ADC_IsEnabled+0x18>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e000      	b.n	8005d8e <LL_ADC_IsEnabled+0x1a>
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <LL_ADC_REG_IsConversionOngoing>:
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 0304 	and.w	r3, r3, #4
 8005daa:	2b04      	cmp	r3, #4
 8005dac:	d101      	bne.n	8005db2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005dae:	2301      	movs	r3, #1
 8005db0:	e000      	b.n	8005db4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005dc0:	b590      	push	{r4, r7, lr}
 8005dc2:	b09f      	sub	sp, #124	; 0x7c
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e0be      	b.n	8005f5c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005de6:	2300      	movs	r3, #0
 8005de8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005dea:	2300      	movs	r3, #0
 8005dec:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a5c      	ldr	r2, [pc, #368]	; (8005f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d102      	bne.n	8005dfe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005df8:	4b5b      	ldr	r3, [pc, #364]	; (8005f68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005dfa:	60bb      	str	r3, [r7, #8]
 8005dfc:	e001      	b.n	8005e02 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10b      	bne.n	8005e20 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0c:	f043 0220 	orr.w	r2, r3, #32
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e09d      	b.n	8005f5c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff ffb9 	bl	8005d9a <LL_ADC_REG_IsConversionOngoing>
 8005e28:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7ff ffb3 	bl	8005d9a <LL_ADC_REG_IsConversionOngoing>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d17f      	bne.n	8005f3a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005e3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d17c      	bne.n	8005f3a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a47      	ldr	r2, [pc, #284]	; (8005f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d004      	beq.n	8005e54 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a46      	ldr	r2, [pc, #280]	; (8005f68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d101      	bne.n	8005e58 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005e54:	4b45      	ldr	r3, [pc, #276]	; (8005f6c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005e56:	e000      	b.n	8005e5a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005e58:	4b45      	ldr	r3, [pc, #276]	; (8005f70 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005e5a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d039      	beq.n	8005ed8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	431a      	orrs	r2, r3
 8005e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e74:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a3a      	ldr	r2, [pc, #232]	; (8005f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d004      	beq.n	8005e8a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a38      	ldr	r2, [pc, #224]	; (8005f68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d10e      	bne.n	8005ea8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005e8a:	4836      	ldr	r0, [pc, #216]	; (8005f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005e8c:	f7ff ff72 	bl	8005d74 <LL_ADC_IsEnabled>
 8005e90:	4604      	mov	r4, r0
 8005e92:	4835      	ldr	r0, [pc, #212]	; (8005f68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005e94:	f7ff ff6e 	bl	8005d74 <LL_ADC_IsEnabled>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	4323      	orrs	r3, r4
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	bf0c      	ite	eq
 8005ea0:	2301      	moveq	r3, #1
 8005ea2:	2300      	movne	r3, #0
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	e008      	b.n	8005eba <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005ea8:	4832      	ldr	r0, [pc, #200]	; (8005f74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005eaa:	f7ff ff63 	bl	8005d74 <LL_ADC_IsEnabled>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	bf0c      	ite	eq
 8005eb4:	2301      	moveq	r3, #1
 8005eb6:	2300      	movne	r3, #0
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d047      	beq.n	8005f4e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	4b2d      	ldr	r3, [pc, #180]	; (8005f78 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	6811      	ldr	r1, [r2, #0]
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	6892      	ldr	r2, [r2, #8]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ed6:	e03a      	b.n	8005f4e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a1e      	ldr	r2, [pc, #120]	; (8005f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d004      	beq.n	8005ef8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1d      	ldr	r2, [pc, #116]	; (8005f68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d10e      	bne.n	8005f16 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005ef8:	481a      	ldr	r0, [pc, #104]	; (8005f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005efa:	f7ff ff3b 	bl	8005d74 <LL_ADC_IsEnabled>
 8005efe:	4604      	mov	r4, r0
 8005f00:	4819      	ldr	r0, [pc, #100]	; (8005f68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005f02:	f7ff ff37 	bl	8005d74 <LL_ADC_IsEnabled>
 8005f06:	4603      	mov	r3, r0
 8005f08:	4323      	orrs	r3, r4
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	bf0c      	ite	eq
 8005f0e:	2301      	moveq	r3, #1
 8005f10:	2300      	movne	r3, #0
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	e008      	b.n	8005f28 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005f16:	4817      	ldr	r0, [pc, #92]	; (8005f74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005f18:	f7ff ff2c 	bl	8005d74 <LL_ADC_IsEnabled>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	bf0c      	ite	eq
 8005f22:	2301      	moveq	r3, #1
 8005f24:	2300      	movne	r3, #0
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d010      	beq.n	8005f4e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	4b11      	ldr	r3, [pc, #68]	; (8005f78 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005f32:	4013      	ands	r3, r2
 8005f34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f36:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f38:	e009      	b.n	8005f4e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3e:	f043 0220 	orr.w	r2, r3, #32
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005f4c:	e000      	b.n	8005f50 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f4e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005f58:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	377c      	adds	r7, #124	; 0x7c
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd90      	pop	{r4, r7, pc}
 8005f64:	40022000 	.word	0x40022000
 8005f68:	40022100 	.word	0x40022100
 8005f6c:	40022300 	.word	0x40022300
 8005f70:	58026300 	.word	0x58026300
 8005f74:	58026000 	.word	0x58026000
 8005f78:	fffff0e0 	.word	0xfffff0e0

08005f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f8c:	4b0b      	ldr	r3, [pc, #44]	; (8005fbc <__NVIC_SetPriorityGrouping+0x40>)
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f98:	4013      	ands	r3, r2
 8005f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005fa4:	4b06      	ldr	r3, [pc, #24]	; (8005fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005faa:	4a04      	ldr	r2, [pc, #16]	; (8005fbc <__NVIC_SetPriorityGrouping+0x40>)
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	60d3      	str	r3, [r2, #12]
}
 8005fb0:	bf00      	nop
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	e000ed00 	.word	0xe000ed00
 8005fc0:	05fa0000 	.word	0x05fa0000

08005fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fc8:	4b04      	ldr	r3, [pc, #16]	; (8005fdc <__NVIC_GetPriorityGrouping+0x18>)
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	0a1b      	lsrs	r3, r3, #8
 8005fce:	f003 0307 	and.w	r3, r3, #7
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	e000ed00 	.word	0xe000ed00

08005fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	db0b      	blt.n	800600a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ff2:	88fb      	ldrh	r3, [r7, #6]
 8005ff4:	f003 021f 	and.w	r2, r3, #31
 8005ff8:	4907      	ldr	r1, [pc, #28]	; (8006018 <__NVIC_EnableIRQ+0x38>)
 8005ffa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ffe:	095b      	lsrs	r3, r3, #5
 8006000:	2001      	movs	r0, #1
 8006002:	fa00 f202 	lsl.w	r2, r0, r2
 8006006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	e000e100 	.word	0xe000e100

0800601c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	4603      	mov	r3, r0
 8006024:	6039      	str	r1, [r7, #0]
 8006026:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006028:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800602c:	2b00      	cmp	r3, #0
 800602e:	db0a      	blt.n	8006046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	b2da      	uxtb	r2, r3
 8006034:	490c      	ldr	r1, [pc, #48]	; (8006068 <__NVIC_SetPriority+0x4c>)
 8006036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800603a:	0112      	lsls	r2, r2, #4
 800603c:	b2d2      	uxtb	r2, r2
 800603e:	440b      	add	r3, r1
 8006040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006044:	e00a      	b.n	800605c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	b2da      	uxtb	r2, r3
 800604a:	4908      	ldr	r1, [pc, #32]	; (800606c <__NVIC_SetPriority+0x50>)
 800604c:	88fb      	ldrh	r3, [r7, #6]
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	3b04      	subs	r3, #4
 8006054:	0112      	lsls	r2, r2, #4
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	440b      	add	r3, r1
 800605a:	761a      	strb	r2, [r3, #24]
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	e000e100 	.word	0xe000e100
 800606c:	e000ed00 	.word	0xe000ed00

08006070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006070:	b480      	push	{r7}
 8006072:	b089      	sub	sp, #36	; 0x24
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f003 0307 	and.w	r3, r3, #7
 8006082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	f1c3 0307 	rsb	r3, r3, #7
 800608a:	2b04      	cmp	r3, #4
 800608c:	bf28      	it	cs
 800608e:	2304      	movcs	r3, #4
 8006090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	3304      	adds	r3, #4
 8006096:	2b06      	cmp	r3, #6
 8006098:	d902      	bls.n	80060a0 <NVIC_EncodePriority+0x30>
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	3b03      	subs	r3, #3
 800609e:	e000      	b.n	80060a2 <NVIC_EncodePriority+0x32>
 80060a0:	2300      	movs	r3, #0
 80060a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060a4:	f04f 32ff 	mov.w	r2, #4294967295
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	fa02 f303 	lsl.w	r3, r2, r3
 80060ae:	43da      	mvns	r2, r3
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	401a      	ands	r2, r3
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060b8:	f04f 31ff 	mov.w	r1, #4294967295
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	fa01 f303 	lsl.w	r3, r1, r3
 80060c2:	43d9      	mvns	r1, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060c8:	4313      	orrs	r3, r2
         );
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3724      	adds	r7, #36	; 0x24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
	...

080060d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3b01      	subs	r3, #1
 80060e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060e8:	d301      	bcc.n	80060ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060ea:	2301      	movs	r3, #1
 80060ec:	e00f      	b.n	800610e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060ee:	4a0a      	ldr	r2, [pc, #40]	; (8006118 <SysTick_Config+0x40>)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	3b01      	subs	r3, #1
 80060f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060f6:	210f      	movs	r1, #15
 80060f8:	f04f 30ff 	mov.w	r0, #4294967295
 80060fc:	f7ff ff8e 	bl	800601c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006100:	4b05      	ldr	r3, [pc, #20]	; (8006118 <SysTick_Config+0x40>)
 8006102:	2200      	movs	r2, #0
 8006104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006106:	4b04      	ldr	r3, [pc, #16]	; (8006118 <SysTick_Config+0x40>)
 8006108:	2207      	movs	r2, #7
 800610a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	e000e010 	.word	0xe000e010

0800611c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f7ff ff29 	bl	8005f7c <__NVIC_SetPriorityGrouping>
}
 800612a:	bf00      	nop
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b086      	sub	sp, #24
 8006136:	af00      	add	r7, sp, #0
 8006138:	4603      	mov	r3, r0
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	607a      	str	r2, [r7, #4]
 800613e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006140:	f7ff ff40 	bl	8005fc4 <__NVIC_GetPriorityGrouping>
 8006144:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	68b9      	ldr	r1, [r7, #8]
 800614a:	6978      	ldr	r0, [r7, #20]
 800614c:	f7ff ff90 	bl	8006070 <NVIC_EncodePriority>
 8006150:	4602      	mov	r2, r0
 8006152:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006156:	4611      	mov	r1, r2
 8006158:	4618      	mov	r0, r3
 800615a:	f7ff ff5f 	bl	800601c <__NVIC_SetPriority>
}
 800615e:	bf00      	nop
 8006160:	3718      	adds	r7, #24
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	4603      	mov	r3, r0
 800616e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006170:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006174:	4618      	mov	r0, r3
 8006176:	f7ff ff33 	bl	8005fe0 <__NVIC_EnableIRQ>
}
 800617a:	bf00      	nop
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b082      	sub	sp, #8
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7ff ffa4 	bl	80060d8 <SysTick_Config>
 8006190:	4603      	mov	r3, r0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
	...

0800619c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80061a4:	f7fe fdf6 	bl	8004d94 <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e316      	b.n	80067e2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a66      	ldr	r2, [pc, #408]	; (8006354 <HAL_DMA_Init+0x1b8>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d04a      	beq.n	8006254 <HAL_DMA_Init+0xb8>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a65      	ldr	r2, [pc, #404]	; (8006358 <HAL_DMA_Init+0x1bc>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d045      	beq.n	8006254 <HAL_DMA_Init+0xb8>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a63      	ldr	r2, [pc, #396]	; (800635c <HAL_DMA_Init+0x1c0>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d040      	beq.n	8006254 <HAL_DMA_Init+0xb8>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a62      	ldr	r2, [pc, #392]	; (8006360 <HAL_DMA_Init+0x1c4>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d03b      	beq.n	8006254 <HAL_DMA_Init+0xb8>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a60      	ldr	r2, [pc, #384]	; (8006364 <HAL_DMA_Init+0x1c8>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d036      	beq.n	8006254 <HAL_DMA_Init+0xb8>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a5f      	ldr	r2, [pc, #380]	; (8006368 <HAL_DMA_Init+0x1cc>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d031      	beq.n	8006254 <HAL_DMA_Init+0xb8>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a5d      	ldr	r2, [pc, #372]	; (800636c <HAL_DMA_Init+0x1d0>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d02c      	beq.n	8006254 <HAL_DMA_Init+0xb8>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a5c      	ldr	r2, [pc, #368]	; (8006370 <HAL_DMA_Init+0x1d4>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d027      	beq.n	8006254 <HAL_DMA_Init+0xb8>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a5a      	ldr	r2, [pc, #360]	; (8006374 <HAL_DMA_Init+0x1d8>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d022      	beq.n	8006254 <HAL_DMA_Init+0xb8>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a59      	ldr	r2, [pc, #356]	; (8006378 <HAL_DMA_Init+0x1dc>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d01d      	beq.n	8006254 <HAL_DMA_Init+0xb8>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a57      	ldr	r2, [pc, #348]	; (800637c <HAL_DMA_Init+0x1e0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d018      	beq.n	8006254 <HAL_DMA_Init+0xb8>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a56      	ldr	r2, [pc, #344]	; (8006380 <HAL_DMA_Init+0x1e4>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d013      	beq.n	8006254 <HAL_DMA_Init+0xb8>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a54      	ldr	r2, [pc, #336]	; (8006384 <HAL_DMA_Init+0x1e8>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d00e      	beq.n	8006254 <HAL_DMA_Init+0xb8>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a53      	ldr	r2, [pc, #332]	; (8006388 <HAL_DMA_Init+0x1ec>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d009      	beq.n	8006254 <HAL_DMA_Init+0xb8>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a51      	ldr	r2, [pc, #324]	; (800638c <HAL_DMA_Init+0x1f0>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d004      	beq.n	8006254 <HAL_DMA_Init+0xb8>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a50      	ldr	r2, [pc, #320]	; (8006390 <HAL_DMA_Init+0x1f4>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d101      	bne.n	8006258 <HAL_DMA_Init+0xbc>
 8006254:	2301      	movs	r3, #1
 8006256:	e000      	b.n	800625a <HAL_DMA_Init+0xbe>
 8006258:	2300      	movs	r3, #0
 800625a:	2b00      	cmp	r3, #0
 800625c:	f000 813b 	beq.w	80064d6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a37      	ldr	r2, [pc, #220]	; (8006354 <HAL_DMA_Init+0x1b8>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d04a      	beq.n	8006310 <HAL_DMA_Init+0x174>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a36      	ldr	r2, [pc, #216]	; (8006358 <HAL_DMA_Init+0x1bc>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d045      	beq.n	8006310 <HAL_DMA_Init+0x174>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a34      	ldr	r2, [pc, #208]	; (800635c <HAL_DMA_Init+0x1c0>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d040      	beq.n	8006310 <HAL_DMA_Init+0x174>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a33      	ldr	r2, [pc, #204]	; (8006360 <HAL_DMA_Init+0x1c4>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d03b      	beq.n	8006310 <HAL_DMA_Init+0x174>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a31      	ldr	r2, [pc, #196]	; (8006364 <HAL_DMA_Init+0x1c8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d036      	beq.n	8006310 <HAL_DMA_Init+0x174>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a30      	ldr	r2, [pc, #192]	; (8006368 <HAL_DMA_Init+0x1cc>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d031      	beq.n	8006310 <HAL_DMA_Init+0x174>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a2e      	ldr	r2, [pc, #184]	; (800636c <HAL_DMA_Init+0x1d0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d02c      	beq.n	8006310 <HAL_DMA_Init+0x174>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a2d      	ldr	r2, [pc, #180]	; (8006370 <HAL_DMA_Init+0x1d4>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d027      	beq.n	8006310 <HAL_DMA_Init+0x174>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a2b      	ldr	r2, [pc, #172]	; (8006374 <HAL_DMA_Init+0x1d8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d022      	beq.n	8006310 <HAL_DMA_Init+0x174>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a2a      	ldr	r2, [pc, #168]	; (8006378 <HAL_DMA_Init+0x1dc>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d01d      	beq.n	8006310 <HAL_DMA_Init+0x174>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a28      	ldr	r2, [pc, #160]	; (800637c <HAL_DMA_Init+0x1e0>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d018      	beq.n	8006310 <HAL_DMA_Init+0x174>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a27      	ldr	r2, [pc, #156]	; (8006380 <HAL_DMA_Init+0x1e4>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d013      	beq.n	8006310 <HAL_DMA_Init+0x174>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a25      	ldr	r2, [pc, #148]	; (8006384 <HAL_DMA_Init+0x1e8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d00e      	beq.n	8006310 <HAL_DMA_Init+0x174>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a24      	ldr	r2, [pc, #144]	; (8006388 <HAL_DMA_Init+0x1ec>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d009      	beq.n	8006310 <HAL_DMA_Init+0x174>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a22      	ldr	r2, [pc, #136]	; (800638c <HAL_DMA_Init+0x1f0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d004      	beq.n	8006310 <HAL_DMA_Init+0x174>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a21      	ldr	r2, [pc, #132]	; (8006390 <HAL_DMA_Init+0x1f4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d108      	bne.n	8006322 <HAL_DMA_Init+0x186>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0201 	bic.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	e007      	b.n	8006332 <HAL_DMA_Init+0x196>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0201 	bic.w	r2, r2, #1
 8006330:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006332:	e02f      	b.n	8006394 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006334:	f7fe fd2e 	bl	8004d94 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b05      	cmp	r3, #5
 8006340:	d928      	bls.n	8006394 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2220      	movs	r2, #32
 8006346:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2203      	movs	r2, #3
 800634c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e246      	b.n	80067e2 <HAL_DMA_Init+0x646>
 8006354:	40020010 	.word	0x40020010
 8006358:	40020028 	.word	0x40020028
 800635c:	40020040 	.word	0x40020040
 8006360:	40020058 	.word	0x40020058
 8006364:	40020070 	.word	0x40020070
 8006368:	40020088 	.word	0x40020088
 800636c:	400200a0 	.word	0x400200a0
 8006370:	400200b8 	.word	0x400200b8
 8006374:	40020410 	.word	0x40020410
 8006378:	40020428 	.word	0x40020428
 800637c:	40020440 	.word	0x40020440
 8006380:	40020458 	.word	0x40020458
 8006384:	40020470 	.word	0x40020470
 8006388:	40020488 	.word	0x40020488
 800638c:	400204a0 	.word	0x400204a0
 8006390:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1c8      	bne.n	8006334 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	4b83      	ldr	r3, [pc, #524]	; (80065bc <HAL_DMA_Init+0x420>)
 80063ae:	4013      	ands	r3, r2
 80063b0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80063ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063d2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	4313      	orrs	r3, r2
 80063de:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d107      	bne.n	80063f8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f0:	4313      	orrs	r3, r2
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80063f8:	4b71      	ldr	r3, [pc, #452]	; (80065c0 <HAL_DMA_Init+0x424>)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	4b71      	ldr	r3, [pc, #452]	; (80065c4 <HAL_DMA_Init+0x428>)
 80063fe:	4013      	ands	r3, r2
 8006400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006404:	d328      	bcc.n	8006458 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	2b28      	cmp	r3, #40	; 0x28
 800640c:	d903      	bls.n	8006416 <HAL_DMA_Init+0x27a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	2b2e      	cmp	r3, #46	; 0x2e
 8006414:	d917      	bls.n	8006446 <HAL_DMA_Init+0x2aa>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	2b3e      	cmp	r3, #62	; 0x3e
 800641c:	d903      	bls.n	8006426 <HAL_DMA_Init+0x28a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2b42      	cmp	r3, #66	; 0x42
 8006424:	d90f      	bls.n	8006446 <HAL_DMA_Init+0x2aa>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2b46      	cmp	r3, #70	; 0x46
 800642c:	d903      	bls.n	8006436 <HAL_DMA_Init+0x29a>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	2b48      	cmp	r3, #72	; 0x48
 8006434:	d907      	bls.n	8006446 <HAL_DMA_Init+0x2aa>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	2b4e      	cmp	r3, #78	; 0x4e
 800643c:	d905      	bls.n	800644a <HAL_DMA_Init+0x2ae>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	2b52      	cmp	r3, #82	; 0x52
 8006444:	d801      	bhi.n	800644a <HAL_DMA_Init+0x2ae>
 8006446:	2301      	movs	r3, #1
 8006448:	e000      	b.n	800644c <HAL_DMA_Init+0x2b0>
 800644a:	2300      	movs	r3, #0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d003      	beq.n	8006458 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006456:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f023 0307 	bic.w	r3, r3, #7
 800646e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	4313      	orrs	r3, r2
 8006478:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647e:	2b04      	cmp	r3, #4
 8006480:	d117      	bne.n	80064b2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	4313      	orrs	r3, r2
 800648a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00e      	beq.n	80064b2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f002 f821 	bl	80084dc <DMA_CheckFifoParam>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d008      	beq.n	80064b2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2240      	movs	r2, #64	; 0x40
 80064a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e197      	b.n	80067e2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f001 ff5c 	bl	8008378 <DMA_CalcBaseAndBitshift>
 80064c0:	4603      	mov	r3, r0
 80064c2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c8:	f003 031f 	and.w	r3, r3, #31
 80064cc:	223f      	movs	r2, #63	; 0x3f
 80064ce:	409a      	lsls	r2, r3
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	609a      	str	r2, [r3, #8]
 80064d4:	e0cd      	b.n	8006672 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a3b      	ldr	r2, [pc, #236]	; (80065c8 <HAL_DMA_Init+0x42c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d022      	beq.n	8006526 <HAL_DMA_Init+0x38a>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a39      	ldr	r2, [pc, #228]	; (80065cc <HAL_DMA_Init+0x430>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d01d      	beq.n	8006526 <HAL_DMA_Init+0x38a>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a38      	ldr	r2, [pc, #224]	; (80065d0 <HAL_DMA_Init+0x434>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d018      	beq.n	8006526 <HAL_DMA_Init+0x38a>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a36      	ldr	r2, [pc, #216]	; (80065d4 <HAL_DMA_Init+0x438>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d013      	beq.n	8006526 <HAL_DMA_Init+0x38a>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a35      	ldr	r2, [pc, #212]	; (80065d8 <HAL_DMA_Init+0x43c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d00e      	beq.n	8006526 <HAL_DMA_Init+0x38a>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a33      	ldr	r2, [pc, #204]	; (80065dc <HAL_DMA_Init+0x440>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d009      	beq.n	8006526 <HAL_DMA_Init+0x38a>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a32      	ldr	r2, [pc, #200]	; (80065e0 <HAL_DMA_Init+0x444>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d004      	beq.n	8006526 <HAL_DMA_Init+0x38a>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a30      	ldr	r2, [pc, #192]	; (80065e4 <HAL_DMA_Init+0x448>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d101      	bne.n	800652a <HAL_DMA_Init+0x38e>
 8006526:	2301      	movs	r3, #1
 8006528:	e000      	b.n	800652c <HAL_DMA_Init+0x390>
 800652a:	2300      	movs	r3, #0
 800652c:	2b00      	cmp	r3, #0
 800652e:	f000 8097 	beq.w	8006660 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a24      	ldr	r2, [pc, #144]	; (80065c8 <HAL_DMA_Init+0x42c>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d021      	beq.n	8006580 <HAL_DMA_Init+0x3e4>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a22      	ldr	r2, [pc, #136]	; (80065cc <HAL_DMA_Init+0x430>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d01c      	beq.n	8006580 <HAL_DMA_Init+0x3e4>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a21      	ldr	r2, [pc, #132]	; (80065d0 <HAL_DMA_Init+0x434>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d017      	beq.n	8006580 <HAL_DMA_Init+0x3e4>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a1f      	ldr	r2, [pc, #124]	; (80065d4 <HAL_DMA_Init+0x438>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d012      	beq.n	8006580 <HAL_DMA_Init+0x3e4>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a1e      	ldr	r2, [pc, #120]	; (80065d8 <HAL_DMA_Init+0x43c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00d      	beq.n	8006580 <HAL_DMA_Init+0x3e4>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a1c      	ldr	r2, [pc, #112]	; (80065dc <HAL_DMA_Init+0x440>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d008      	beq.n	8006580 <HAL_DMA_Init+0x3e4>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a1b      	ldr	r2, [pc, #108]	; (80065e0 <HAL_DMA_Init+0x444>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d003      	beq.n	8006580 <HAL_DMA_Init+0x3e4>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a19      	ldr	r2, [pc, #100]	; (80065e4 <HAL_DMA_Init+0x448>)
 800657e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	4b13      	ldr	r3, [pc, #76]	; (80065e8 <HAL_DMA_Init+0x44c>)
 800659c:	4013      	ands	r3, r2
 800659e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	2b40      	cmp	r3, #64	; 0x40
 80065a6:	d021      	beq.n	80065ec <HAL_DMA_Init+0x450>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	2b80      	cmp	r3, #128	; 0x80
 80065ae:	d102      	bne.n	80065b6 <HAL_DMA_Init+0x41a>
 80065b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80065b4:	e01b      	b.n	80065ee <HAL_DMA_Init+0x452>
 80065b6:	2300      	movs	r3, #0
 80065b8:	e019      	b.n	80065ee <HAL_DMA_Init+0x452>
 80065ba:	bf00      	nop
 80065bc:	fe10803f 	.word	0xfe10803f
 80065c0:	5c001000 	.word	0x5c001000
 80065c4:	ffff0000 	.word	0xffff0000
 80065c8:	58025408 	.word	0x58025408
 80065cc:	5802541c 	.word	0x5802541c
 80065d0:	58025430 	.word	0x58025430
 80065d4:	58025444 	.word	0x58025444
 80065d8:	58025458 	.word	0x58025458
 80065dc:	5802546c 	.word	0x5802546c
 80065e0:	58025480 	.word	0x58025480
 80065e4:	58025494 	.word	0x58025494
 80065e8:	fffe000f 	.word	0xfffe000f
 80065ec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	68d2      	ldr	r2, [r2, #12]
 80065f2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80065f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80065fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006604:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800660c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006614:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800661c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	4313      	orrs	r3, r2
 8006622:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	461a      	mov	r2, r3
 8006632:	4b6e      	ldr	r3, [pc, #440]	; (80067ec <HAL_DMA_Init+0x650>)
 8006634:	4413      	add	r3, r2
 8006636:	4a6e      	ldr	r2, [pc, #440]	; (80067f0 <HAL_DMA_Init+0x654>)
 8006638:	fba2 2303 	umull	r2, r3, r2, r3
 800663c:	091b      	lsrs	r3, r3, #4
 800663e:	009a      	lsls	r2, r3, #2
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 fe97 	bl	8008378 <DMA_CalcBaseAndBitshift>
 800664a:	4603      	mov	r3, r0
 800664c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006652:	f003 031f 	and.w	r3, r3, #31
 8006656:	2201      	movs	r2, #1
 8006658:	409a      	lsls	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	605a      	str	r2, [r3, #4]
 800665e:	e008      	b.n	8006672 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2240      	movs	r2, #64	; 0x40
 8006664:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2203      	movs	r2, #3
 800666a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e0b7      	b.n	80067e2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a5f      	ldr	r2, [pc, #380]	; (80067f4 <HAL_DMA_Init+0x658>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d072      	beq.n	8006762 <HAL_DMA_Init+0x5c6>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a5d      	ldr	r2, [pc, #372]	; (80067f8 <HAL_DMA_Init+0x65c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d06d      	beq.n	8006762 <HAL_DMA_Init+0x5c6>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a5c      	ldr	r2, [pc, #368]	; (80067fc <HAL_DMA_Init+0x660>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d068      	beq.n	8006762 <HAL_DMA_Init+0x5c6>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a5a      	ldr	r2, [pc, #360]	; (8006800 <HAL_DMA_Init+0x664>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d063      	beq.n	8006762 <HAL_DMA_Init+0x5c6>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a59      	ldr	r2, [pc, #356]	; (8006804 <HAL_DMA_Init+0x668>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d05e      	beq.n	8006762 <HAL_DMA_Init+0x5c6>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a57      	ldr	r2, [pc, #348]	; (8006808 <HAL_DMA_Init+0x66c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d059      	beq.n	8006762 <HAL_DMA_Init+0x5c6>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a56      	ldr	r2, [pc, #344]	; (800680c <HAL_DMA_Init+0x670>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d054      	beq.n	8006762 <HAL_DMA_Init+0x5c6>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a54      	ldr	r2, [pc, #336]	; (8006810 <HAL_DMA_Init+0x674>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d04f      	beq.n	8006762 <HAL_DMA_Init+0x5c6>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a53      	ldr	r2, [pc, #332]	; (8006814 <HAL_DMA_Init+0x678>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d04a      	beq.n	8006762 <HAL_DMA_Init+0x5c6>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a51      	ldr	r2, [pc, #324]	; (8006818 <HAL_DMA_Init+0x67c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d045      	beq.n	8006762 <HAL_DMA_Init+0x5c6>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a50      	ldr	r2, [pc, #320]	; (800681c <HAL_DMA_Init+0x680>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d040      	beq.n	8006762 <HAL_DMA_Init+0x5c6>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a4e      	ldr	r2, [pc, #312]	; (8006820 <HAL_DMA_Init+0x684>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d03b      	beq.n	8006762 <HAL_DMA_Init+0x5c6>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a4d      	ldr	r2, [pc, #308]	; (8006824 <HAL_DMA_Init+0x688>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d036      	beq.n	8006762 <HAL_DMA_Init+0x5c6>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a4b      	ldr	r2, [pc, #300]	; (8006828 <HAL_DMA_Init+0x68c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d031      	beq.n	8006762 <HAL_DMA_Init+0x5c6>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a4a      	ldr	r2, [pc, #296]	; (800682c <HAL_DMA_Init+0x690>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d02c      	beq.n	8006762 <HAL_DMA_Init+0x5c6>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a48      	ldr	r2, [pc, #288]	; (8006830 <HAL_DMA_Init+0x694>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d027      	beq.n	8006762 <HAL_DMA_Init+0x5c6>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a47      	ldr	r2, [pc, #284]	; (8006834 <HAL_DMA_Init+0x698>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d022      	beq.n	8006762 <HAL_DMA_Init+0x5c6>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a45      	ldr	r2, [pc, #276]	; (8006838 <HAL_DMA_Init+0x69c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d01d      	beq.n	8006762 <HAL_DMA_Init+0x5c6>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a44      	ldr	r2, [pc, #272]	; (800683c <HAL_DMA_Init+0x6a0>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d018      	beq.n	8006762 <HAL_DMA_Init+0x5c6>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a42      	ldr	r2, [pc, #264]	; (8006840 <HAL_DMA_Init+0x6a4>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d013      	beq.n	8006762 <HAL_DMA_Init+0x5c6>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a41      	ldr	r2, [pc, #260]	; (8006844 <HAL_DMA_Init+0x6a8>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d00e      	beq.n	8006762 <HAL_DMA_Init+0x5c6>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a3f      	ldr	r2, [pc, #252]	; (8006848 <HAL_DMA_Init+0x6ac>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d009      	beq.n	8006762 <HAL_DMA_Init+0x5c6>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a3e      	ldr	r2, [pc, #248]	; (800684c <HAL_DMA_Init+0x6b0>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d004      	beq.n	8006762 <HAL_DMA_Init+0x5c6>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a3c      	ldr	r2, [pc, #240]	; (8006850 <HAL_DMA_Init+0x6b4>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d101      	bne.n	8006766 <HAL_DMA_Init+0x5ca>
 8006762:	2301      	movs	r3, #1
 8006764:	e000      	b.n	8006768 <HAL_DMA_Init+0x5cc>
 8006766:	2300      	movs	r3, #0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d032      	beq.n	80067d2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f001 ff31 	bl	80085d4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	2b80      	cmp	r3, #128	; 0x80
 8006778:	d102      	bne.n	8006780 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006788:	b2d2      	uxtb	r2, r2
 800678a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006794:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d010      	beq.n	80067c0 <HAL_DMA_Init+0x624>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	2b08      	cmp	r3, #8
 80067a4:	d80c      	bhi.n	80067c0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f001 ffae 	bl	8008708 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80067bc:	605a      	str	r2, [r3, #4]
 80067be:	e008      	b.n	80067d2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	a7fdabf8 	.word	0xa7fdabf8
 80067f0:	cccccccd 	.word	0xcccccccd
 80067f4:	40020010 	.word	0x40020010
 80067f8:	40020028 	.word	0x40020028
 80067fc:	40020040 	.word	0x40020040
 8006800:	40020058 	.word	0x40020058
 8006804:	40020070 	.word	0x40020070
 8006808:	40020088 	.word	0x40020088
 800680c:	400200a0 	.word	0x400200a0
 8006810:	400200b8 	.word	0x400200b8
 8006814:	40020410 	.word	0x40020410
 8006818:	40020428 	.word	0x40020428
 800681c:	40020440 	.word	0x40020440
 8006820:	40020458 	.word	0x40020458
 8006824:	40020470 	.word	0x40020470
 8006828:	40020488 	.word	0x40020488
 800682c:	400204a0 	.word	0x400204a0
 8006830:	400204b8 	.word	0x400204b8
 8006834:	58025408 	.word	0x58025408
 8006838:	5802541c 	.word	0x5802541c
 800683c:	58025430 	.word	0x58025430
 8006840:	58025444 	.word	0x58025444
 8006844:	58025458 	.word	0x58025458
 8006848:	5802546c 	.word	0x5802546c
 800684c:	58025480 	.word	0x58025480
 8006850:	58025494 	.word	0x58025494

08006854 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
 8006860:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d101      	bne.n	8006870 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e226      	b.n	8006cbe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006876:	2b01      	cmp	r3, #1
 8006878:	d101      	bne.n	800687e <HAL_DMA_Start_IT+0x2a>
 800687a:	2302      	movs	r3, #2
 800687c:	e21f      	b.n	8006cbe <HAL_DMA_Start_IT+0x46a>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b01      	cmp	r3, #1
 8006890:	f040 820a 	bne.w	8006ca8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2202      	movs	r2, #2
 8006898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a68      	ldr	r2, [pc, #416]	; (8006a48 <HAL_DMA_Start_IT+0x1f4>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d04a      	beq.n	8006942 <HAL_DMA_Start_IT+0xee>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a66      	ldr	r2, [pc, #408]	; (8006a4c <HAL_DMA_Start_IT+0x1f8>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d045      	beq.n	8006942 <HAL_DMA_Start_IT+0xee>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a65      	ldr	r2, [pc, #404]	; (8006a50 <HAL_DMA_Start_IT+0x1fc>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d040      	beq.n	8006942 <HAL_DMA_Start_IT+0xee>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a63      	ldr	r2, [pc, #396]	; (8006a54 <HAL_DMA_Start_IT+0x200>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d03b      	beq.n	8006942 <HAL_DMA_Start_IT+0xee>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a62      	ldr	r2, [pc, #392]	; (8006a58 <HAL_DMA_Start_IT+0x204>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d036      	beq.n	8006942 <HAL_DMA_Start_IT+0xee>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a60      	ldr	r2, [pc, #384]	; (8006a5c <HAL_DMA_Start_IT+0x208>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d031      	beq.n	8006942 <HAL_DMA_Start_IT+0xee>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a5f      	ldr	r2, [pc, #380]	; (8006a60 <HAL_DMA_Start_IT+0x20c>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d02c      	beq.n	8006942 <HAL_DMA_Start_IT+0xee>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a5d      	ldr	r2, [pc, #372]	; (8006a64 <HAL_DMA_Start_IT+0x210>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d027      	beq.n	8006942 <HAL_DMA_Start_IT+0xee>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a5c      	ldr	r2, [pc, #368]	; (8006a68 <HAL_DMA_Start_IT+0x214>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d022      	beq.n	8006942 <HAL_DMA_Start_IT+0xee>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a5a      	ldr	r2, [pc, #360]	; (8006a6c <HAL_DMA_Start_IT+0x218>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d01d      	beq.n	8006942 <HAL_DMA_Start_IT+0xee>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a59      	ldr	r2, [pc, #356]	; (8006a70 <HAL_DMA_Start_IT+0x21c>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d018      	beq.n	8006942 <HAL_DMA_Start_IT+0xee>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a57      	ldr	r2, [pc, #348]	; (8006a74 <HAL_DMA_Start_IT+0x220>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d013      	beq.n	8006942 <HAL_DMA_Start_IT+0xee>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a56      	ldr	r2, [pc, #344]	; (8006a78 <HAL_DMA_Start_IT+0x224>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d00e      	beq.n	8006942 <HAL_DMA_Start_IT+0xee>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a54      	ldr	r2, [pc, #336]	; (8006a7c <HAL_DMA_Start_IT+0x228>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d009      	beq.n	8006942 <HAL_DMA_Start_IT+0xee>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a53      	ldr	r2, [pc, #332]	; (8006a80 <HAL_DMA_Start_IT+0x22c>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d004      	beq.n	8006942 <HAL_DMA_Start_IT+0xee>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a51      	ldr	r2, [pc, #324]	; (8006a84 <HAL_DMA_Start_IT+0x230>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d108      	bne.n	8006954 <HAL_DMA_Start_IT+0x100>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0201 	bic.w	r2, r2, #1
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	e007      	b.n	8006964 <HAL_DMA_Start_IT+0x110>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f022 0201 	bic.w	r2, r2, #1
 8006962:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	68b9      	ldr	r1, [r7, #8]
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f001 fb58 	bl	8008020 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a34      	ldr	r2, [pc, #208]	; (8006a48 <HAL_DMA_Start_IT+0x1f4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d04a      	beq.n	8006a10 <HAL_DMA_Start_IT+0x1bc>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a33      	ldr	r2, [pc, #204]	; (8006a4c <HAL_DMA_Start_IT+0x1f8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d045      	beq.n	8006a10 <HAL_DMA_Start_IT+0x1bc>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a31      	ldr	r2, [pc, #196]	; (8006a50 <HAL_DMA_Start_IT+0x1fc>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d040      	beq.n	8006a10 <HAL_DMA_Start_IT+0x1bc>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a30      	ldr	r2, [pc, #192]	; (8006a54 <HAL_DMA_Start_IT+0x200>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d03b      	beq.n	8006a10 <HAL_DMA_Start_IT+0x1bc>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a2e      	ldr	r2, [pc, #184]	; (8006a58 <HAL_DMA_Start_IT+0x204>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d036      	beq.n	8006a10 <HAL_DMA_Start_IT+0x1bc>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a2d      	ldr	r2, [pc, #180]	; (8006a5c <HAL_DMA_Start_IT+0x208>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d031      	beq.n	8006a10 <HAL_DMA_Start_IT+0x1bc>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a2b      	ldr	r2, [pc, #172]	; (8006a60 <HAL_DMA_Start_IT+0x20c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d02c      	beq.n	8006a10 <HAL_DMA_Start_IT+0x1bc>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a2a      	ldr	r2, [pc, #168]	; (8006a64 <HAL_DMA_Start_IT+0x210>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d027      	beq.n	8006a10 <HAL_DMA_Start_IT+0x1bc>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a28      	ldr	r2, [pc, #160]	; (8006a68 <HAL_DMA_Start_IT+0x214>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d022      	beq.n	8006a10 <HAL_DMA_Start_IT+0x1bc>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a27      	ldr	r2, [pc, #156]	; (8006a6c <HAL_DMA_Start_IT+0x218>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d01d      	beq.n	8006a10 <HAL_DMA_Start_IT+0x1bc>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a25      	ldr	r2, [pc, #148]	; (8006a70 <HAL_DMA_Start_IT+0x21c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d018      	beq.n	8006a10 <HAL_DMA_Start_IT+0x1bc>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a24      	ldr	r2, [pc, #144]	; (8006a74 <HAL_DMA_Start_IT+0x220>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d013      	beq.n	8006a10 <HAL_DMA_Start_IT+0x1bc>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a22      	ldr	r2, [pc, #136]	; (8006a78 <HAL_DMA_Start_IT+0x224>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d00e      	beq.n	8006a10 <HAL_DMA_Start_IT+0x1bc>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a21      	ldr	r2, [pc, #132]	; (8006a7c <HAL_DMA_Start_IT+0x228>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d009      	beq.n	8006a10 <HAL_DMA_Start_IT+0x1bc>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a1f      	ldr	r2, [pc, #124]	; (8006a80 <HAL_DMA_Start_IT+0x22c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d004      	beq.n	8006a10 <HAL_DMA_Start_IT+0x1bc>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a1e      	ldr	r2, [pc, #120]	; (8006a84 <HAL_DMA_Start_IT+0x230>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d101      	bne.n	8006a14 <HAL_DMA_Start_IT+0x1c0>
 8006a10:	2301      	movs	r3, #1
 8006a12:	e000      	b.n	8006a16 <HAL_DMA_Start_IT+0x1c2>
 8006a14:	2300      	movs	r3, #0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d036      	beq.n	8006a88 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f023 021e 	bic.w	r2, r3, #30
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f042 0216 	orr.w	r2, r2, #22
 8006a2c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d03e      	beq.n	8006ab4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f042 0208 	orr.w	r2, r2, #8
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	e035      	b.n	8006ab4 <HAL_DMA_Start_IT+0x260>
 8006a48:	40020010 	.word	0x40020010
 8006a4c:	40020028 	.word	0x40020028
 8006a50:	40020040 	.word	0x40020040
 8006a54:	40020058 	.word	0x40020058
 8006a58:	40020070 	.word	0x40020070
 8006a5c:	40020088 	.word	0x40020088
 8006a60:	400200a0 	.word	0x400200a0
 8006a64:	400200b8 	.word	0x400200b8
 8006a68:	40020410 	.word	0x40020410
 8006a6c:	40020428 	.word	0x40020428
 8006a70:	40020440 	.word	0x40020440
 8006a74:	40020458 	.word	0x40020458
 8006a78:	40020470 	.word	0x40020470
 8006a7c:	40020488 	.word	0x40020488
 8006a80:	400204a0 	.word	0x400204a0
 8006a84:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f023 020e 	bic.w	r2, r3, #14
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f042 020a 	orr.w	r2, r2, #10
 8006a9a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d007      	beq.n	8006ab4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f042 0204 	orr.w	r2, r2, #4
 8006ab2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a83      	ldr	r2, [pc, #524]	; (8006cc8 <HAL_DMA_Start_IT+0x474>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d072      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x350>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a82      	ldr	r2, [pc, #520]	; (8006ccc <HAL_DMA_Start_IT+0x478>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d06d      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x350>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a80      	ldr	r2, [pc, #512]	; (8006cd0 <HAL_DMA_Start_IT+0x47c>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d068      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x350>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a7f      	ldr	r2, [pc, #508]	; (8006cd4 <HAL_DMA_Start_IT+0x480>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d063      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x350>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a7d      	ldr	r2, [pc, #500]	; (8006cd8 <HAL_DMA_Start_IT+0x484>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d05e      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x350>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a7c      	ldr	r2, [pc, #496]	; (8006cdc <HAL_DMA_Start_IT+0x488>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d059      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x350>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a7a      	ldr	r2, [pc, #488]	; (8006ce0 <HAL_DMA_Start_IT+0x48c>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d054      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x350>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a79      	ldr	r2, [pc, #484]	; (8006ce4 <HAL_DMA_Start_IT+0x490>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d04f      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x350>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a77      	ldr	r2, [pc, #476]	; (8006ce8 <HAL_DMA_Start_IT+0x494>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d04a      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x350>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a76      	ldr	r2, [pc, #472]	; (8006cec <HAL_DMA_Start_IT+0x498>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d045      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x350>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a74      	ldr	r2, [pc, #464]	; (8006cf0 <HAL_DMA_Start_IT+0x49c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d040      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x350>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a73      	ldr	r2, [pc, #460]	; (8006cf4 <HAL_DMA_Start_IT+0x4a0>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d03b      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x350>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a71      	ldr	r2, [pc, #452]	; (8006cf8 <HAL_DMA_Start_IT+0x4a4>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d036      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x350>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a70      	ldr	r2, [pc, #448]	; (8006cfc <HAL_DMA_Start_IT+0x4a8>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d031      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x350>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a6e      	ldr	r2, [pc, #440]	; (8006d00 <HAL_DMA_Start_IT+0x4ac>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d02c      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x350>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a6d      	ldr	r2, [pc, #436]	; (8006d04 <HAL_DMA_Start_IT+0x4b0>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d027      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x350>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a6b      	ldr	r2, [pc, #428]	; (8006d08 <HAL_DMA_Start_IT+0x4b4>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d022      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x350>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a6a      	ldr	r2, [pc, #424]	; (8006d0c <HAL_DMA_Start_IT+0x4b8>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d01d      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x350>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a68      	ldr	r2, [pc, #416]	; (8006d10 <HAL_DMA_Start_IT+0x4bc>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d018      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x350>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a67      	ldr	r2, [pc, #412]	; (8006d14 <HAL_DMA_Start_IT+0x4c0>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d013      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x350>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a65      	ldr	r2, [pc, #404]	; (8006d18 <HAL_DMA_Start_IT+0x4c4>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d00e      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x350>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a64      	ldr	r2, [pc, #400]	; (8006d1c <HAL_DMA_Start_IT+0x4c8>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d009      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x350>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a62      	ldr	r2, [pc, #392]	; (8006d20 <HAL_DMA_Start_IT+0x4cc>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d004      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x350>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a61      	ldr	r2, [pc, #388]	; (8006d24 <HAL_DMA_Start_IT+0x4d0>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d101      	bne.n	8006ba8 <HAL_DMA_Start_IT+0x354>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e000      	b.n	8006baa <HAL_DMA_Start_IT+0x356>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d01a      	beq.n	8006be4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d007      	beq.n	8006bcc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d007      	beq.n	8006be4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006be2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a37      	ldr	r2, [pc, #220]	; (8006cc8 <HAL_DMA_Start_IT+0x474>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d04a      	beq.n	8006c84 <HAL_DMA_Start_IT+0x430>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a36      	ldr	r2, [pc, #216]	; (8006ccc <HAL_DMA_Start_IT+0x478>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d045      	beq.n	8006c84 <HAL_DMA_Start_IT+0x430>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a34      	ldr	r2, [pc, #208]	; (8006cd0 <HAL_DMA_Start_IT+0x47c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d040      	beq.n	8006c84 <HAL_DMA_Start_IT+0x430>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a33      	ldr	r2, [pc, #204]	; (8006cd4 <HAL_DMA_Start_IT+0x480>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d03b      	beq.n	8006c84 <HAL_DMA_Start_IT+0x430>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a31      	ldr	r2, [pc, #196]	; (8006cd8 <HAL_DMA_Start_IT+0x484>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d036      	beq.n	8006c84 <HAL_DMA_Start_IT+0x430>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a30      	ldr	r2, [pc, #192]	; (8006cdc <HAL_DMA_Start_IT+0x488>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d031      	beq.n	8006c84 <HAL_DMA_Start_IT+0x430>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a2e      	ldr	r2, [pc, #184]	; (8006ce0 <HAL_DMA_Start_IT+0x48c>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d02c      	beq.n	8006c84 <HAL_DMA_Start_IT+0x430>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a2d      	ldr	r2, [pc, #180]	; (8006ce4 <HAL_DMA_Start_IT+0x490>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d027      	beq.n	8006c84 <HAL_DMA_Start_IT+0x430>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a2b      	ldr	r2, [pc, #172]	; (8006ce8 <HAL_DMA_Start_IT+0x494>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d022      	beq.n	8006c84 <HAL_DMA_Start_IT+0x430>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a2a      	ldr	r2, [pc, #168]	; (8006cec <HAL_DMA_Start_IT+0x498>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d01d      	beq.n	8006c84 <HAL_DMA_Start_IT+0x430>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a28      	ldr	r2, [pc, #160]	; (8006cf0 <HAL_DMA_Start_IT+0x49c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d018      	beq.n	8006c84 <HAL_DMA_Start_IT+0x430>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a27      	ldr	r2, [pc, #156]	; (8006cf4 <HAL_DMA_Start_IT+0x4a0>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d013      	beq.n	8006c84 <HAL_DMA_Start_IT+0x430>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a25      	ldr	r2, [pc, #148]	; (8006cf8 <HAL_DMA_Start_IT+0x4a4>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d00e      	beq.n	8006c84 <HAL_DMA_Start_IT+0x430>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a24      	ldr	r2, [pc, #144]	; (8006cfc <HAL_DMA_Start_IT+0x4a8>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d009      	beq.n	8006c84 <HAL_DMA_Start_IT+0x430>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a22      	ldr	r2, [pc, #136]	; (8006d00 <HAL_DMA_Start_IT+0x4ac>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d004      	beq.n	8006c84 <HAL_DMA_Start_IT+0x430>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a21      	ldr	r2, [pc, #132]	; (8006d04 <HAL_DMA_Start_IT+0x4b0>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d108      	bne.n	8006c96 <HAL_DMA_Start_IT+0x442>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 0201 	orr.w	r2, r2, #1
 8006c92:	601a      	str	r2, [r3, #0]
 8006c94:	e012      	b.n	8006cbc <HAL_DMA_Start_IT+0x468>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f042 0201 	orr.w	r2, r2, #1
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	e009      	b.n	8006cbc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	40020010 	.word	0x40020010
 8006ccc:	40020028 	.word	0x40020028
 8006cd0:	40020040 	.word	0x40020040
 8006cd4:	40020058 	.word	0x40020058
 8006cd8:	40020070 	.word	0x40020070
 8006cdc:	40020088 	.word	0x40020088
 8006ce0:	400200a0 	.word	0x400200a0
 8006ce4:	400200b8 	.word	0x400200b8
 8006ce8:	40020410 	.word	0x40020410
 8006cec:	40020428 	.word	0x40020428
 8006cf0:	40020440 	.word	0x40020440
 8006cf4:	40020458 	.word	0x40020458
 8006cf8:	40020470 	.word	0x40020470
 8006cfc:	40020488 	.word	0x40020488
 8006d00:	400204a0 	.word	0x400204a0
 8006d04:	400204b8 	.word	0x400204b8
 8006d08:	58025408 	.word	0x58025408
 8006d0c:	5802541c 	.word	0x5802541c
 8006d10:	58025430 	.word	0x58025430
 8006d14:	58025444 	.word	0x58025444
 8006d18:	58025458 	.word	0x58025458
 8006d1c:	5802546c 	.word	0x5802546c
 8006d20:	58025480 	.word	0x58025480
 8006d24:	58025494 	.word	0x58025494

08006d28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e237      	b.n	80071aa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d004      	beq.n	8006d50 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2280      	movs	r2, #128	; 0x80
 8006d4a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e22c      	b.n	80071aa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a5c      	ldr	r2, [pc, #368]	; (8006ec8 <HAL_DMA_Abort_IT+0x1a0>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d04a      	beq.n	8006df0 <HAL_DMA_Abort_IT+0xc8>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a5b      	ldr	r2, [pc, #364]	; (8006ecc <HAL_DMA_Abort_IT+0x1a4>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d045      	beq.n	8006df0 <HAL_DMA_Abort_IT+0xc8>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a59      	ldr	r2, [pc, #356]	; (8006ed0 <HAL_DMA_Abort_IT+0x1a8>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d040      	beq.n	8006df0 <HAL_DMA_Abort_IT+0xc8>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a58      	ldr	r2, [pc, #352]	; (8006ed4 <HAL_DMA_Abort_IT+0x1ac>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d03b      	beq.n	8006df0 <HAL_DMA_Abort_IT+0xc8>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a56      	ldr	r2, [pc, #344]	; (8006ed8 <HAL_DMA_Abort_IT+0x1b0>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d036      	beq.n	8006df0 <HAL_DMA_Abort_IT+0xc8>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a55      	ldr	r2, [pc, #340]	; (8006edc <HAL_DMA_Abort_IT+0x1b4>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d031      	beq.n	8006df0 <HAL_DMA_Abort_IT+0xc8>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a53      	ldr	r2, [pc, #332]	; (8006ee0 <HAL_DMA_Abort_IT+0x1b8>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d02c      	beq.n	8006df0 <HAL_DMA_Abort_IT+0xc8>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a52      	ldr	r2, [pc, #328]	; (8006ee4 <HAL_DMA_Abort_IT+0x1bc>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d027      	beq.n	8006df0 <HAL_DMA_Abort_IT+0xc8>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a50      	ldr	r2, [pc, #320]	; (8006ee8 <HAL_DMA_Abort_IT+0x1c0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d022      	beq.n	8006df0 <HAL_DMA_Abort_IT+0xc8>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a4f      	ldr	r2, [pc, #316]	; (8006eec <HAL_DMA_Abort_IT+0x1c4>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d01d      	beq.n	8006df0 <HAL_DMA_Abort_IT+0xc8>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a4d      	ldr	r2, [pc, #308]	; (8006ef0 <HAL_DMA_Abort_IT+0x1c8>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d018      	beq.n	8006df0 <HAL_DMA_Abort_IT+0xc8>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a4c      	ldr	r2, [pc, #304]	; (8006ef4 <HAL_DMA_Abort_IT+0x1cc>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d013      	beq.n	8006df0 <HAL_DMA_Abort_IT+0xc8>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a4a      	ldr	r2, [pc, #296]	; (8006ef8 <HAL_DMA_Abort_IT+0x1d0>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d00e      	beq.n	8006df0 <HAL_DMA_Abort_IT+0xc8>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a49      	ldr	r2, [pc, #292]	; (8006efc <HAL_DMA_Abort_IT+0x1d4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d009      	beq.n	8006df0 <HAL_DMA_Abort_IT+0xc8>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a47      	ldr	r2, [pc, #284]	; (8006f00 <HAL_DMA_Abort_IT+0x1d8>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d004      	beq.n	8006df0 <HAL_DMA_Abort_IT+0xc8>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a46      	ldr	r2, [pc, #280]	; (8006f04 <HAL_DMA_Abort_IT+0x1dc>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d101      	bne.n	8006df4 <HAL_DMA_Abort_IT+0xcc>
 8006df0:	2301      	movs	r3, #1
 8006df2:	e000      	b.n	8006df6 <HAL_DMA_Abort_IT+0xce>
 8006df4:	2300      	movs	r3, #0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 8086 	beq.w	8006f08 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2204      	movs	r2, #4
 8006e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a2f      	ldr	r2, [pc, #188]	; (8006ec8 <HAL_DMA_Abort_IT+0x1a0>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d04a      	beq.n	8006ea4 <HAL_DMA_Abort_IT+0x17c>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a2e      	ldr	r2, [pc, #184]	; (8006ecc <HAL_DMA_Abort_IT+0x1a4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d045      	beq.n	8006ea4 <HAL_DMA_Abort_IT+0x17c>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a2c      	ldr	r2, [pc, #176]	; (8006ed0 <HAL_DMA_Abort_IT+0x1a8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d040      	beq.n	8006ea4 <HAL_DMA_Abort_IT+0x17c>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a2b      	ldr	r2, [pc, #172]	; (8006ed4 <HAL_DMA_Abort_IT+0x1ac>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d03b      	beq.n	8006ea4 <HAL_DMA_Abort_IT+0x17c>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a29      	ldr	r2, [pc, #164]	; (8006ed8 <HAL_DMA_Abort_IT+0x1b0>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d036      	beq.n	8006ea4 <HAL_DMA_Abort_IT+0x17c>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a28      	ldr	r2, [pc, #160]	; (8006edc <HAL_DMA_Abort_IT+0x1b4>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d031      	beq.n	8006ea4 <HAL_DMA_Abort_IT+0x17c>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a26      	ldr	r2, [pc, #152]	; (8006ee0 <HAL_DMA_Abort_IT+0x1b8>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d02c      	beq.n	8006ea4 <HAL_DMA_Abort_IT+0x17c>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a25      	ldr	r2, [pc, #148]	; (8006ee4 <HAL_DMA_Abort_IT+0x1bc>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d027      	beq.n	8006ea4 <HAL_DMA_Abort_IT+0x17c>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a23      	ldr	r2, [pc, #140]	; (8006ee8 <HAL_DMA_Abort_IT+0x1c0>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d022      	beq.n	8006ea4 <HAL_DMA_Abort_IT+0x17c>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a22      	ldr	r2, [pc, #136]	; (8006eec <HAL_DMA_Abort_IT+0x1c4>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d01d      	beq.n	8006ea4 <HAL_DMA_Abort_IT+0x17c>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a20      	ldr	r2, [pc, #128]	; (8006ef0 <HAL_DMA_Abort_IT+0x1c8>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d018      	beq.n	8006ea4 <HAL_DMA_Abort_IT+0x17c>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a1f      	ldr	r2, [pc, #124]	; (8006ef4 <HAL_DMA_Abort_IT+0x1cc>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d013      	beq.n	8006ea4 <HAL_DMA_Abort_IT+0x17c>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a1d      	ldr	r2, [pc, #116]	; (8006ef8 <HAL_DMA_Abort_IT+0x1d0>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d00e      	beq.n	8006ea4 <HAL_DMA_Abort_IT+0x17c>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a1c      	ldr	r2, [pc, #112]	; (8006efc <HAL_DMA_Abort_IT+0x1d4>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d009      	beq.n	8006ea4 <HAL_DMA_Abort_IT+0x17c>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a1a      	ldr	r2, [pc, #104]	; (8006f00 <HAL_DMA_Abort_IT+0x1d8>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d004      	beq.n	8006ea4 <HAL_DMA_Abort_IT+0x17c>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a19      	ldr	r2, [pc, #100]	; (8006f04 <HAL_DMA_Abort_IT+0x1dc>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d108      	bne.n	8006eb6 <HAL_DMA_Abort_IT+0x18e>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f022 0201 	bic.w	r2, r2, #1
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	e178      	b.n	80071a8 <HAL_DMA_Abort_IT+0x480>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 0201 	bic.w	r2, r2, #1
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	e16f      	b.n	80071a8 <HAL_DMA_Abort_IT+0x480>
 8006ec8:	40020010 	.word	0x40020010
 8006ecc:	40020028 	.word	0x40020028
 8006ed0:	40020040 	.word	0x40020040
 8006ed4:	40020058 	.word	0x40020058
 8006ed8:	40020070 	.word	0x40020070
 8006edc:	40020088 	.word	0x40020088
 8006ee0:	400200a0 	.word	0x400200a0
 8006ee4:	400200b8 	.word	0x400200b8
 8006ee8:	40020410 	.word	0x40020410
 8006eec:	40020428 	.word	0x40020428
 8006ef0:	40020440 	.word	0x40020440
 8006ef4:	40020458 	.word	0x40020458
 8006ef8:	40020470 	.word	0x40020470
 8006efc:	40020488 	.word	0x40020488
 8006f00:	400204a0 	.word	0x400204a0
 8006f04:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f022 020e 	bic.w	r2, r2, #14
 8006f16:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a6c      	ldr	r2, [pc, #432]	; (80070d0 <HAL_DMA_Abort_IT+0x3a8>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d04a      	beq.n	8006fb8 <HAL_DMA_Abort_IT+0x290>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a6b      	ldr	r2, [pc, #428]	; (80070d4 <HAL_DMA_Abort_IT+0x3ac>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d045      	beq.n	8006fb8 <HAL_DMA_Abort_IT+0x290>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a69      	ldr	r2, [pc, #420]	; (80070d8 <HAL_DMA_Abort_IT+0x3b0>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d040      	beq.n	8006fb8 <HAL_DMA_Abort_IT+0x290>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a68      	ldr	r2, [pc, #416]	; (80070dc <HAL_DMA_Abort_IT+0x3b4>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d03b      	beq.n	8006fb8 <HAL_DMA_Abort_IT+0x290>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a66      	ldr	r2, [pc, #408]	; (80070e0 <HAL_DMA_Abort_IT+0x3b8>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d036      	beq.n	8006fb8 <HAL_DMA_Abort_IT+0x290>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a65      	ldr	r2, [pc, #404]	; (80070e4 <HAL_DMA_Abort_IT+0x3bc>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d031      	beq.n	8006fb8 <HAL_DMA_Abort_IT+0x290>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a63      	ldr	r2, [pc, #396]	; (80070e8 <HAL_DMA_Abort_IT+0x3c0>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d02c      	beq.n	8006fb8 <HAL_DMA_Abort_IT+0x290>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a62      	ldr	r2, [pc, #392]	; (80070ec <HAL_DMA_Abort_IT+0x3c4>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d027      	beq.n	8006fb8 <HAL_DMA_Abort_IT+0x290>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a60      	ldr	r2, [pc, #384]	; (80070f0 <HAL_DMA_Abort_IT+0x3c8>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d022      	beq.n	8006fb8 <HAL_DMA_Abort_IT+0x290>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a5f      	ldr	r2, [pc, #380]	; (80070f4 <HAL_DMA_Abort_IT+0x3cc>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d01d      	beq.n	8006fb8 <HAL_DMA_Abort_IT+0x290>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a5d      	ldr	r2, [pc, #372]	; (80070f8 <HAL_DMA_Abort_IT+0x3d0>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d018      	beq.n	8006fb8 <HAL_DMA_Abort_IT+0x290>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a5c      	ldr	r2, [pc, #368]	; (80070fc <HAL_DMA_Abort_IT+0x3d4>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d013      	beq.n	8006fb8 <HAL_DMA_Abort_IT+0x290>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a5a      	ldr	r2, [pc, #360]	; (8007100 <HAL_DMA_Abort_IT+0x3d8>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d00e      	beq.n	8006fb8 <HAL_DMA_Abort_IT+0x290>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a59      	ldr	r2, [pc, #356]	; (8007104 <HAL_DMA_Abort_IT+0x3dc>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d009      	beq.n	8006fb8 <HAL_DMA_Abort_IT+0x290>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a57      	ldr	r2, [pc, #348]	; (8007108 <HAL_DMA_Abort_IT+0x3e0>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d004      	beq.n	8006fb8 <HAL_DMA_Abort_IT+0x290>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a56      	ldr	r2, [pc, #344]	; (800710c <HAL_DMA_Abort_IT+0x3e4>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d108      	bne.n	8006fca <HAL_DMA_Abort_IT+0x2a2>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0201 	bic.w	r2, r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]
 8006fc8:	e007      	b.n	8006fda <HAL_DMA_Abort_IT+0x2b2>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0201 	bic.w	r2, r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a3c      	ldr	r2, [pc, #240]	; (80070d0 <HAL_DMA_Abort_IT+0x3a8>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d072      	beq.n	80070ca <HAL_DMA_Abort_IT+0x3a2>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a3a      	ldr	r2, [pc, #232]	; (80070d4 <HAL_DMA_Abort_IT+0x3ac>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d06d      	beq.n	80070ca <HAL_DMA_Abort_IT+0x3a2>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a39      	ldr	r2, [pc, #228]	; (80070d8 <HAL_DMA_Abort_IT+0x3b0>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d068      	beq.n	80070ca <HAL_DMA_Abort_IT+0x3a2>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a37      	ldr	r2, [pc, #220]	; (80070dc <HAL_DMA_Abort_IT+0x3b4>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d063      	beq.n	80070ca <HAL_DMA_Abort_IT+0x3a2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a36      	ldr	r2, [pc, #216]	; (80070e0 <HAL_DMA_Abort_IT+0x3b8>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d05e      	beq.n	80070ca <HAL_DMA_Abort_IT+0x3a2>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a34      	ldr	r2, [pc, #208]	; (80070e4 <HAL_DMA_Abort_IT+0x3bc>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d059      	beq.n	80070ca <HAL_DMA_Abort_IT+0x3a2>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a33      	ldr	r2, [pc, #204]	; (80070e8 <HAL_DMA_Abort_IT+0x3c0>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d054      	beq.n	80070ca <HAL_DMA_Abort_IT+0x3a2>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a31      	ldr	r2, [pc, #196]	; (80070ec <HAL_DMA_Abort_IT+0x3c4>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d04f      	beq.n	80070ca <HAL_DMA_Abort_IT+0x3a2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a30      	ldr	r2, [pc, #192]	; (80070f0 <HAL_DMA_Abort_IT+0x3c8>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d04a      	beq.n	80070ca <HAL_DMA_Abort_IT+0x3a2>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a2e      	ldr	r2, [pc, #184]	; (80070f4 <HAL_DMA_Abort_IT+0x3cc>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d045      	beq.n	80070ca <HAL_DMA_Abort_IT+0x3a2>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a2d      	ldr	r2, [pc, #180]	; (80070f8 <HAL_DMA_Abort_IT+0x3d0>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d040      	beq.n	80070ca <HAL_DMA_Abort_IT+0x3a2>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a2b      	ldr	r2, [pc, #172]	; (80070fc <HAL_DMA_Abort_IT+0x3d4>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d03b      	beq.n	80070ca <HAL_DMA_Abort_IT+0x3a2>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a2a      	ldr	r2, [pc, #168]	; (8007100 <HAL_DMA_Abort_IT+0x3d8>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d036      	beq.n	80070ca <HAL_DMA_Abort_IT+0x3a2>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a28      	ldr	r2, [pc, #160]	; (8007104 <HAL_DMA_Abort_IT+0x3dc>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d031      	beq.n	80070ca <HAL_DMA_Abort_IT+0x3a2>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a27      	ldr	r2, [pc, #156]	; (8007108 <HAL_DMA_Abort_IT+0x3e0>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d02c      	beq.n	80070ca <HAL_DMA_Abort_IT+0x3a2>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a25      	ldr	r2, [pc, #148]	; (800710c <HAL_DMA_Abort_IT+0x3e4>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d027      	beq.n	80070ca <HAL_DMA_Abort_IT+0x3a2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a24      	ldr	r2, [pc, #144]	; (8007110 <HAL_DMA_Abort_IT+0x3e8>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d022      	beq.n	80070ca <HAL_DMA_Abort_IT+0x3a2>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a22      	ldr	r2, [pc, #136]	; (8007114 <HAL_DMA_Abort_IT+0x3ec>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d01d      	beq.n	80070ca <HAL_DMA_Abort_IT+0x3a2>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a21      	ldr	r2, [pc, #132]	; (8007118 <HAL_DMA_Abort_IT+0x3f0>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d018      	beq.n	80070ca <HAL_DMA_Abort_IT+0x3a2>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a1f      	ldr	r2, [pc, #124]	; (800711c <HAL_DMA_Abort_IT+0x3f4>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d013      	beq.n	80070ca <HAL_DMA_Abort_IT+0x3a2>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a1e      	ldr	r2, [pc, #120]	; (8007120 <HAL_DMA_Abort_IT+0x3f8>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d00e      	beq.n	80070ca <HAL_DMA_Abort_IT+0x3a2>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a1c      	ldr	r2, [pc, #112]	; (8007124 <HAL_DMA_Abort_IT+0x3fc>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d009      	beq.n	80070ca <HAL_DMA_Abort_IT+0x3a2>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a1b      	ldr	r2, [pc, #108]	; (8007128 <HAL_DMA_Abort_IT+0x400>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d004      	beq.n	80070ca <HAL_DMA_Abort_IT+0x3a2>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a19      	ldr	r2, [pc, #100]	; (800712c <HAL_DMA_Abort_IT+0x404>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d132      	bne.n	8007130 <HAL_DMA_Abort_IT+0x408>
 80070ca:	2301      	movs	r3, #1
 80070cc:	e031      	b.n	8007132 <HAL_DMA_Abort_IT+0x40a>
 80070ce:	bf00      	nop
 80070d0:	40020010 	.word	0x40020010
 80070d4:	40020028 	.word	0x40020028
 80070d8:	40020040 	.word	0x40020040
 80070dc:	40020058 	.word	0x40020058
 80070e0:	40020070 	.word	0x40020070
 80070e4:	40020088 	.word	0x40020088
 80070e8:	400200a0 	.word	0x400200a0
 80070ec:	400200b8 	.word	0x400200b8
 80070f0:	40020410 	.word	0x40020410
 80070f4:	40020428 	.word	0x40020428
 80070f8:	40020440 	.word	0x40020440
 80070fc:	40020458 	.word	0x40020458
 8007100:	40020470 	.word	0x40020470
 8007104:	40020488 	.word	0x40020488
 8007108:	400204a0 	.word	0x400204a0
 800710c:	400204b8 	.word	0x400204b8
 8007110:	58025408 	.word	0x58025408
 8007114:	5802541c 	.word	0x5802541c
 8007118:	58025430 	.word	0x58025430
 800711c:	58025444 	.word	0x58025444
 8007120:	58025458 	.word	0x58025458
 8007124:	5802546c 	.word	0x5802546c
 8007128:	58025480 	.word	0x58025480
 800712c:	58025494 	.word	0x58025494
 8007130:	2300      	movs	r3, #0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d028      	beq.n	8007188 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007140:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007144:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800714a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007150:	f003 031f 	and.w	r3, r3, #31
 8007154:	2201      	movs	r2, #1
 8007156:	409a      	lsls	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007164:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00c      	beq.n	8007188 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800717c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007186:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800719c:	2b00      	cmp	r3, #0
 800719e:	d003      	beq.n	80071a8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop

080071b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08a      	sub	sp, #40	; 0x28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80071c0:	4b67      	ldr	r3, [pc, #412]	; (8007360 <HAL_DMA_IRQHandler+0x1ac>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a67      	ldr	r2, [pc, #412]	; (8007364 <HAL_DMA_IRQHandler+0x1b0>)
 80071c6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ca:	0a9b      	lsrs	r3, r3, #10
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a5f      	ldr	r2, [pc, #380]	; (8007368 <HAL_DMA_IRQHandler+0x1b4>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d04a      	beq.n	8007286 <HAL_DMA_IRQHandler+0xd2>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a5d      	ldr	r2, [pc, #372]	; (800736c <HAL_DMA_IRQHandler+0x1b8>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d045      	beq.n	8007286 <HAL_DMA_IRQHandler+0xd2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a5c      	ldr	r2, [pc, #368]	; (8007370 <HAL_DMA_IRQHandler+0x1bc>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d040      	beq.n	8007286 <HAL_DMA_IRQHandler+0xd2>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a5a      	ldr	r2, [pc, #360]	; (8007374 <HAL_DMA_IRQHandler+0x1c0>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d03b      	beq.n	8007286 <HAL_DMA_IRQHandler+0xd2>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a59      	ldr	r2, [pc, #356]	; (8007378 <HAL_DMA_IRQHandler+0x1c4>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d036      	beq.n	8007286 <HAL_DMA_IRQHandler+0xd2>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a57      	ldr	r2, [pc, #348]	; (800737c <HAL_DMA_IRQHandler+0x1c8>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d031      	beq.n	8007286 <HAL_DMA_IRQHandler+0xd2>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a56      	ldr	r2, [pc, #344]	; (8007380 <HAL_DMA_IRQHandler+0x1cc>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d02c      	beq.n	8007286 <HAL_DMA_IRQHandler+0xd2>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a54      	ldr	r2, [pc, #336]	; (8007384 <HAL_DMA_IRQHandler+0x1d0>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d027      	beq.n	8007286 <HAL_DMA_IRQHandler+0xd2>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a53      	ldr	r2, [pc, #332]	; (8007388 <HAL_DMA_IRQHandler+0x1d4>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d022      	beq.n	8007286 <HAL_DMA_IRQHandler+0xd2>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a51      	ldr	r2, [pc, #324]	; (800738c <HAL_DMA_IRQHandler+0x1d8>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d01d      	beq.n	8007286 <HAL_DMA_IRQHandler+0xd2>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a50      	ldr	r2, [pc, #320]	; (8007390 <HAL_DMA_IRQHandler+0x1dc>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d018      	beq.n	8007286 <HAL_DMA_IRQHandler+0xd2>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a4e      	ldr	r2, [pc, #312]	; (8007394 <HAL_DMA_IRQHandler+0x1e0>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d013      	beq.n	8007286 <HAL_DMA_IRQHandler+0xd2>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a4d      	ldr	r2, [pc, #308]	; (8007398 <HAL_DMA_IRQHandler+0x1e4>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d00e      	beq.n	8007286 <HAL_DMA_IRQHandler+0xd2>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a4b      	ldr	r2, [pc, #300]	; (800739c <HAL_DMA_IRQHandler+0x1e8>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d009      	beq.n	8007286 <HAL_DMA_IRQHandler+0xd2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a4a      	ldr	r2, [pc, #296]	; (80073a0 <HAL_DMA_IRQHandler+0x1ec>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d004      	beq.n	8007286 <HAL_DMA_IRQHandler+0xd2>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a48      	ldr	r2, [pc, #288]	; (80073a4 <HAL_DMA_IRQHandler+0x1f0>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d101      	bne.n	800728a <HAL_DMA_IRQHandler+0xd6>
 8007286:	2301      	movs	r3, #1
 8007288:	e000      	b.n	800728c <HAL_DMA_IRQHandler+0xd8>
 800728a:	2300      	movs	r3, #0
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 842b 	beq.w	8007ae8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007296:	f003 031f 	and.w	r3, r3, #31
 800729a:	2208      	movs	r2, #8
 800729c:	409a      	lsls	r2, r3
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	4013      	ands	r3, r2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 80a2 	beq.w	80073ec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a2e      	ldr	r2, [pc, #184]	; (8007368 <HAL_DMA_IRQHandler+0x1b4>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d04a      	beq.n	8007348 <HAL_DMA_IRQHandler+0x194>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a2d      	ldr	r2, [pc, #180]	; (800736c <HAL_DMA_IRQHandler+0x1b8>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d045      	beq.n	8007348 <HAL_DMA_IRQHandler+0x194>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a2b      	ldr	r2, [pc, #172]	; (8007370 <HAL_DMA_IRQHandler+0x1bc>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d040      	beq.n	8007348 <HAL_DMA_IRQHandler+0x194>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a2a      	ldr	r2, [pc, #168]	; (8007374 <HAL_DMA_IRQHandler+0x1c0>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d03b      	beq.n	8007348 <HAL_DMA_IRQHandler+0x194>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a28      	ldr	r2, [pc, #160]	; (8007378 <HAL_DMA_IRQHandler+0x1c4>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d036      	beq.n	8007348 <HAL_DMA_IRQHandler+0x194>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a27      	ldr	r2, [pc, #156]	; (800737c <HAL_DMA_IRQHandler+0x1c8>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d031      	beq.n	8007348 <HAL_DMA_IRQHandler+0x194>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a25      	ldr	r2, [pc, #148]	; (8007380 <HAL_DMA_IRQHandler+0x1cc>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d02c      	beq.n	8007348 <HAL_DMA_IRQHandler+0x194>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a24      	ldr	r2, [pc, #144]	; (8007384 <HAL_DMA_IRQHandler+0x1d0>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d027      	beq.n	8007348 <HAL_DMA_IRQHandler+0x194>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a22      	ldr	r2, [pc, #136]	; (8007388 <HAL_DMA_IRQHandler+0x1d4>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d022      	beq.n	8007348 <HAL_DMA_IRQHandler+0x194>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a21      	ldr	r2, [pc, #132]	; (800738c <HAL_DMA_IRQHandler+0x1d8>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d01d      	beq.n	8007348 <HAL_DMA_IRQHandler+0x194>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a1f      	ldr	r2, [pc, #124]	; (8007390 <HAL_DMA_IRQHandler+0x1dc>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d018      	beq.n	8007348 <HAL_DMA_IRQHandler+0x194>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a1e      	ldr	r2, [pc, #120]	; (8007394 <HAL_DMA_IRQHandler+0x1e0>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d013      	beq.n	8007348 <HAL_DMA_IRQHandler+0x194>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a1c      	ldr	r2, [pc, #112]	; (8007398 <HAL_DMA_IRQHandler+0x1e4>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d00e      	beq.n	8007348 <HAL_DMA_IRQHandler+0x194>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a1b      	ldr	r2, [pc, #108]	; (800739c <HAL_DMA_IRQHandler+0x1e8>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d009      	beq.n	8007348 <HAL_DMA_IRQHandler+0x194>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a19      	ldr	r2, [pc, #100]	; (80073a0 <HAL_DMA_IRQHandler+0x1ec>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d004      	beq.n	8007348 <HAL_DMA_IRQHandler+0x194>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a18      	ldr	r2, [pc, #96]	; (80073a4 <HAL_DMA_IRQHandler+0x1f0>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d12f      	bne.n	80073a8 <HAL_DMA_IRQHandler+0x1f4>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0304 	and.w	r3, r3, #4
 8007352:	2b00      	cmp	r3, #0
 8007354:	bf14      	ite	ne
 8007356:	2301      	movne	r3, #1
 8007358:	2300      	moveq	r3, #0
 800735a:	b2db      	uxtb	r3, r3
 800735c:	e02e      	b.n	80073bc <HAL_DMA_IRQHandler+0x208>
 800735e:	bf00      	nop
 8007360:	24000474 	.word	0x24000474
 8007364:	1b4e81b5 	.word	0x1b4e81b5
 8007368:	40020010 	.word	0x40020010
 800736c:	40020028 	.word	0x40020028
 8007370:	40020040 	.word	0x40020040
 8007374:	40020058 	.word	0x40020058
 8007378:	40020070 	.word	0x40020070
 800737c:	40020088 	.word	0x40020088
 8007380:	400200a0 	.word	0x400200a0
 8007384:	400200b8 	.word	0x400200b8
 8007388:	40020410 	.word	0x40020410
 800738c:	40020428 	.word	0x40020428
 8007390:	40020440 	.word	0x40020440
 8007394:	40020458 	.word	0x40020458
 8007398:	40020470 	.word	0x40020470
 800739c:	40020488 	.word	0x40020488
 80073a0:	400204a0 	.word	0x400204a0
 80073a4:	400204b8 	.word	0x400204b8
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0308 	and.w	r3, r3, #8
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	bf14      	ite	ne
 80073b6:	2301      	movne	r3, #1
 80073b8:	2300      	moveq	r3, #0
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d015      	beq.n	80073ec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f022 0204 	bic.w	r2, r2, #4
 80073ce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073d4:	f003 031f 	and.w	r3, r3, #31
 80073d8:	2208      	movs	r2, #8
 80073da:	409a      	lsls	r2, r3
 80073dc:	6a3b      	ldr	r3, [r7, #32]
 80073de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e4:	f043 0201 	orr.w	r2, r3, #1
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f0:	f003 031f 	and.w	r3, r3, #31
 80073f4:	69ba      	ldr	r2, [r7, #24]
 80073f6:	fa22 f303 	lsr.w	r3, r2, r3
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d06e      	beq.n	80074e0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a69      	ldr	r2, [pc, #420]	; (80075ac <HAL_DMA_IRQHandler+0x3f8>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d04a      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x2ee>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a67      	ldr	r2, [pc, #412]	; (80075b0 <HAL_DMA_IRQHandler+0x3fc>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d045      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x2ee>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a66      	ldr	r2, [pc, #408]	; (80075b4 <HAL_DMA_IRQHandler+0x400>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d040      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x2ee>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a64      	ldr	r2, [pc, #400]	; (80075b8 <HAL_DMA_IRQHandler+0x404>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d03b      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x2ee>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a63      	ldr	r2, [pc, #396]	; (80075bc <HAL_DMA_IRQHandler+0x408>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d036      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x2ee>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a61      	ldr	r2, [pc, #388]	; (80075c0 <HAL_DMA_IRQHandler+0x40c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d031      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x2ee>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a60      	ldr	r2, [pc, #384]	; (80075c4 <HAL_DMA_IRQHandler+0x410>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d02c      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x2ee>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a5e      	ldr	r2, [pc, #376]	; (80075c8 <HAL_DMA_IRQHandler+0x414>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d027      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x2ee>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a5d      	ldr	r2, [pc, #372]	; (80075cc <HAL_DMA_IRQHandler+0x418>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d022      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x2ee>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a5b      	ldr	r2, [pc, #364]	; (80075d0 <HAL_DMA_IRQHandler+0x41c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d01d      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x2ee>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a5a      	ldr	r2, [pc, #360]	; (80075d4 <HAL_DMA_IRQHandler+0x420>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d018      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x2ee>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a58      	ldr	r2, [pc, #352]	; (80075d8 <HAL_DMA_IRQHandler+0x424>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d013      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x2ee>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a57      	ldr	r2, [pc, #348]	; (80075dc <HAL_DMA_IRQHandler+0x428>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d00e      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x2ee>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a55      	ldr	r2, [pc, #340]	; (80075e0 <HAL_DMA_IRQHandler+0x42c>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d009      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x2ee>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a54      	ldr	r2, [pc, #336]	; (80075e4 <HAL_DMA_IRQHandler+0x430>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d004      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x2ee>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a52      	ldr	r2, [pc, #328]	; (80075e8 <HAL_DMA_IRQHandler+0x434>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d10a      	bne.n	80074b8 <HAL_DMA_IRQHandler+0x304>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	bf14      	ite	ne
 80074b0:	2301      	movne	r3, #1
 80074b2:	2300      	moveq	r3, #0
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	e003      	b.n	80074c0 <HAL_DMA_IRQHandler+0x30c>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2300      	movs	r3, #0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00d      	beq.n	80074e0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c8:	f003 031f 	and.w	r3, r3, #31
 80074cc:	2201      	movs	r2, #1
 80074ce:	409a      	lsls	r2, r3
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d8:	f043 0202 	orr.w	r2, r3, #2
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074e4:	f003 031f 	and.w	r3, r3, #31
 80074e8:	2204      	movs	r2, #4
 80074ea:	409a      	lsls	r2, r3
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	4013      	ands	r3, r2
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f000 808f 	beq.w	8007614 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a2c      	ldr	r2, [pc, #176]	; (80075ac <HAL_DMA_IRQHandler+0x3f8>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d04a      	beq.n	8007596 <HAL_DMA_IRQHandler+0x3e2>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a2a      	ldr	r2, [pc, #168]	; (80075b0 <HAL_DMA_IRQHandler+0x3fc>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d045      	beq.n	8007596 <HAL_DMA_IRQHandler+0x3e2>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a29      	ldr	r2, [pc, #164]	; (80075b4 <HAL_DMA_IRQHandler+0x400>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d040      	beq.n	8007596 <HAL_DMA_IRQHandler+0x3e2>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a27      	ldr	r2, [pc, #156]	; (80075b8 <HAL_DMA_IRQHandler+0x404>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d03b      	beq.n	8007596 <HAL_DMA_IRQHandler+0x3e2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a26      	ldr	r2, [pc, #152]	; (80075bc <HAL_DMA_IRQHandler+0x408>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d036      	beq.n	8007596 <HAL_DMA_IRQHandler+0x3e2>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a24      	ldr	r2, [pc, #144]	; (80075c0 <HAL_DMA_IRQHandler+0x40c>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d031      	beq.n	8007596 <HAL_DMA_IRQHandler+0x3e2>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a23      	ldr	r2, [pc, #140]	; (80075c4 <HAL_DMA_IRQHandler+0x410>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d02c      	beq.n	8007596 <HAL_DMA_IRQHandler+0x3e2>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a21      	ldr	r2, [pc, #132]	; (80075c8 <HAL_DMA_IRQHandler+0x414>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d027      	beq.n	8007596 <HAL_DMA_IRQHandler+0x3e2>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a20      	ldr	r2, [pc, #128]	; (80075cc <HAL_DMA_IRQHandler+0x418>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d022      	beq.n	8007596 <HAL_DMA_IRQHandler+0x3e2>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a1e      	ldr	r2, [pc, #120]	; (80075d0 <HAL_DMA_IRQHandler+0x41c>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d01d      	beq.n	8007596 <HAL_DMA_IRQHandler+0x3e2>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a1d      	ldr	r2, [pc, #116]	; (80075d4 <HAL_DMA_IRQHandler+0x420>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d018      	beq.n	8007596 <HAL_DMA_IRQHandler+0x3e2>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a1b      	ldr	r2, [pc, #108]	; (80075d8 <HAL_DMA_IRQHandler+0x424>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d013      	beq.n	8007596 <HAL_DMA_IRQHandler+0x3e2>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a1a      	ldr	r2, [pc, #104]	; (80075dc <HAL_DMA_IRQHandler+0x428>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00e      	beq.n	8007596 <HAL_DMA_IRQHandler+0x3e2>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a18      	ldr	r2, [pc, #96]	; (80075e0 <HAL_DMA_IRQHandler+0x42c>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d009      	beq.n	8007596 <HAL_DMA_IRQHandler+0x3e2>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a17      	ldr	r2, [pc, #92]	; (80075e4 <HAL_DMA_IRQHandler+0x430>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d004      	beq.n	8007596 <HAL_DMA_IRQHandler+0x3e2>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a15      	ldr	r2, [pc, #84]	; (80075e8 <HAL_DMA_IRQHandler+0x434>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d12a      	bne.n	80075ec <HAL_DMA_IRQHandler+0x438>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0302 	and.w	r3, r3, #2
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	bf14      	ite	ne
 80075a4:	2301      	movne	r3, #1
 80075a6:	2300      	moveq	r3, #0
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	e023      	b.n	80075f4 <HAL_DMA_IRQHandler+0x440>
 80075ac:	40020010 	.word	0x40020010
 80075b0:	40020028 	.word	0x40020028
 80075b4:	40020040 	.word	0x40020040
 80075b8:	40020058 	.word	0x40020058
 80075bc:	40020070 	.word	0x40020070
 80075c0:	40020088 	.word	0x40020088
 80075c4:	400200a0 	.word	0x400200a0
 80075c8:	400200b8 	.word	0x400200b8
 80075cc:	40020410 	.word	0x40020410
 80075d0:	40020428 	.word	0x40020428
 80075d4:	40020440 	.word	0x40020440
 80075d8:	40020458 	.word	0x40020458
 80075dc:	40020470 	.word	0x40020470
 80075e0:	40020488 	.word	0x40020488
 80075e4:	400204a0 	.word	0x400204a0
 80075e8:	400204b8 	.word	0x400204b8
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2300      	movs	r3, #0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00d      	beq.n	8007614 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075fc:	f003 031f 	and.w	r3, r3, #31
 8007600:	2204      	movs	r2, #4
 8007602:	409a      	lsls	r2, r3
 8007604:	6a3b      	ldr	r3, [r7, #32]
 8007606:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800760c:	f043 0204 	orr.w	r2, r3, #4
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007618:	f003 031f 	and.w	r3, r3, #31
 800761c:	2210      	movs	r2, #16
 800761e:	409a      	lsls	r2, r3
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	4013      	ands	r3, r2
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 80a6 	beq.w	8007776 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a85      	ldr	r2, [pc, #532]	; (8007844 <HAL_DMA_IRQHandler+0x690>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d04a      	beq.n	80076ca <HAL_DMA_IRQHandler+0x516>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a83      	ldr	r2, [pc, #524]	; (8007848 <HAL_DMA_IRQHandler+0x694>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d045      	beq.n	80076ca <HAL_DMA_IRQHandler+0x516>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a82      	ldr	r2, [pc, #520]	; (800784c <HAL_DMA_IRQHandler+0x698>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d040      	beq.n	80076ca <HAL_DMA_IRQHandler+0x516>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a80      	ldr	r2, [pc, #512]	; (8007850 <HAL_DMA_IRQHandler+0x69c>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d03b      	beq.n	80076ca <HAL_DMA_IRQHandler+0x516>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a7f      	ldr	r2, [pc, #508]	; (8007854 <HAL_DMA_IRQHandler+0x6a0>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d036      	beq.n	80076ca <HAL_DMA_IRQHandler+0x516>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a7d      	ldr	r2, [pc, #500]	; (8007858 <HAL_DMA_IRQHandler+0x6a4>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d031      	beq.n	80076ca <HAL_DMA_IRQHandler+0x516>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a7c      	ldr	r2, [pc, #496]	; (800785c <HAL_DMA_IRQHandler+0x6a8>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d02c      	beq.n	80076ca <HAL_DMA_IRQHandler+0x516>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a7a      	ldr	r2, [pc, #488]	; (8007860 <HAL_DMA_IRQHandler+0x6ac>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d027      	beq.n	80076ca <HAL_DMA_IRQHandler+0x516>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a79      	ldr	r2, [pc, #484]	; (8007864 <HAL_DMA_IRQHandler+0x6b0>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d022      	beq.n	80076ca <HAL_DMA_IRQHandler+0x516>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a77      	ldr	r2, [pc, #476]	; (8007868 <HAL_DMA_IRQHandler+0x6b4>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d01d      	beq.n	80076ca <HAL_DMA_IRQHandler+0x516>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a76      	ldr	r2, [pc, #472]	; (800786c <HAL_DMA_IRQHandler+0x6b8>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d018      	beq.n	80076ca <HAL_DMA_IRQHandler+0x516>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a74      	ldr	r2, [pc, #464]	; (8007870 <HAL_DMA_IRQHandler+0x6bc>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d013      	beq.n	80076ca <HAL_DMA_IRQHandler+0x516>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a73      	ldr	r2, [pc, #460]	; (8007874 <HAL_DMA_IRQHandler+0x6c0>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d00e      	beq.n	80076ca <HAL_DMA_IRQHandler+0x516>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a71      	ldr	r2, [pc, #452]	; (8007878 <HAL_DMA_IRQHandler+0x6c4>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d009      	beq.n	80076ca <HAL_DMA_IRQHandler+0x516>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a70      	ldr	r2, [pc, #448]	; (800787c <HAL_DMA_IRQHandler+0x6c8>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d004      	beq.n	80076ca <HAL_DMA_IRQHandler+0x516>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a6e      	ldr	r2, [pc, #440]	; (8007880 <HAL_DMA_IRQHandler+0x6cc>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d10a      	bne.n	80076e0 <HAL_DMA_IRQHandler+0x52c>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0308 	and.w	r3, r3, #8
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	bf14      	ite	ne
 80076d8:	2301      	movne	r3, #1
 80076da:	2300      	moveq	r3, #0
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	e009      	b.n	80076f4 <HAL_DMA_IRQHandler+0x540>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 0304 	and.w	r3, r3, #4
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	bf14      	ite	ne
 80076ee:	2301      	movne	r3, #1
 80076f0:	2300      	moveq	r3, #0
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d03e      	beq.n	8007776 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076fc:	f003 031f 	and.w	r3, r3, #31
 8007700:	2210      	movs	r2, #16
 8007702:	409a      	lsls	r2, r3
 8007704:	6a3b      	ldr	r3, [r7, #32]
 8007706:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d018      	beq.n	8007748 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007720:	2b00      	cmp	r3, #0
 8007722:	d108      	bne.n	8007736 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007728:	2b00      	cmp	r3, #0
 800772a:	d024      	beq.n	8007776 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	4798      	blx	r3
 8007734:	e01f      	b.n	8007776 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800773a:	2b00      	cmp	r3, #0
 800773c:	d01b      	beq.n	8007776 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	4798      	blx	r3
 8007746:	e016      	b.n	8007776 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007752:	2b00      	cmp	r3, #0
 8007754:	d107      	bne.n	8007766 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 0208 	bic.w	r2, r2, #8
 8007764:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800777a:	f003 031f 	and.w	r3, r3, #31
 800777e:	2220      	movs	r2, #32
 8007780:	409a      	lsls	r2, r3
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	4013      	ands	r3, r2
 8007786:	2b00      	cmp	r3, #0
 8007788:	f000 8110 	beq.w	80079ac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a2c      	ldr	r2, [pc, #176]	; (8007844 <HAL_DMA_IRQHandler+0x690>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d04a      	beq.n	800782c <HAL_DMA_IRQHandler+0x678>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a2b      	ldr	r2, [pc, #172]	; (8007848 <HAL_DMA_IRQHandler+0x694>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d045      	beq.n	800782c <HAL_DMA_IRQHandler+0x678>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a29      	ldr	r2, [pc, #164]	; (800784c <HAL_DMA_IRQHandler+0x698>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d040      	beq.n	800782c <HAL_DMA_IRQHandler+0x678>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a28      	ldr	r2, [pc, #160]	; (8007850 <HAL_DMA_IRQHandler+0x69c>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d03b      	beq.n	800782c <HAL_DMA_IRQHandler+0x678>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a26      	ldr	r2, [pc, #152]	; (8007854 <HAL_DMA_IRQHandler+0x6a0>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d036      	beq.n	800782c <HAL_DMA_IRQHandler+0x678>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a25      	ldr	r2, [pc, #148]	; (8007858 <HAL_DMA_IRQHandler+0x6a4>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d031      	beq.n	800782c <HAL_DMA_IRQHandler+0x678>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a23      	ldr	r2, [pc, #140]	; (800785c <HAL_DMA_IRQHandler+0x6a8>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d02c      	beq.n	800782c <HAL_DMA_IRQHandler+0x678>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a22      	ldr	r2, [pc, #136]	; (8007860 <HAL_DMA_IRQHandler+0x6ac>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d027      	beq.n	800782c <HAL_DMA_IRQHandler+0x678>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a20      	ldr	r2, [pc, #128]	; (8007864 <HAL_DMA_IRQHandler+0x6b0>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d022      	beq.n	800782c <HAL_DMA_IRQHandler+0x678>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a1f      	ldr	r2, [pc, #124]	; (8007868 <HAL_DMA_IRQHandler+0x6b4>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d01d      	beq.n	800782c <HAL_DMA_IRQHandler+0x678>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a1d      	ldr	r2, [pc, #116]	; (800786c <HAL_DMA_IRQHandler+0x6b8>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d018      	beq.n	800782c <HAL_DMA_IRQHandler+0x678>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a1c      	ldr	r2, [pc, #112]	; (8007870 <HAL_DMA_IRQHandler+0x6bc>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d013      	beq.n	800782c <HAL_DMA_IRQHandler+0x678>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a1a      	ldr	r2, [pc, #104]	; (8007874 <HAL_DMA_IRQHandler+0x6c0>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d00e      	beq.n	800782c <HAL_DMA_IRQHandler+0x678>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a19      	ldr	r2, [pc, #100]	; (8007878 <HAL_DMA_IRQHandler+0x6c4>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d009      	beq.n	800782c <HAL_DMA_IRQHandler+0x678>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a17      	ldr	r2, [pc, #92]	; (800787c <HAL_DMA_IRQHandler+0x6c8>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d004      	beq.n	800782c <HAL_DMA_IRQHandler+0x678>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a16      	ldr	r2, [pc, #88]	; (8007880 <HAL_DMA_IRQHandler+0x6cc>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d12b      	bne.n	8007884 <HAL_DMA_IRQHandler+0x6d0>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0310 	and.w	r3, r3, #16
 8007836:	2b00      	cmp	r3, #0
 8007838:	bf14      	ite	ne
 800783a:	2301      	movne	r3, #1
 800783c:	2300      	moveq	r3, #0
 800783e:	b2db      	uxtb	r3, r3
 8007840:	e02a      	b.n	8007898 <HAL_DMA_IRQHandler+0x6e4>
 8007842:	bf00      	nop
 8007844:	40020010 	.word	0x40020010
 8007848:	40020028 	.word	0x40020028
 800784c:	40020040 	.word	0x40020040
 8007850:	40020058 	.word	0x40020058
 8007854:	40020070 	.word	0x40020070
 8007858:	40020088 	.word	0x40020088
 800785c:	400200a0 	.word	0x400200a0
 8007860:	400200b8 	.word	0x400200b8
 8007864:	40020410 	.word	0x40020410
 8007868:	40020428 	.word	0x40020428
 800786c:	40020440 	.word	0x40020440
 8007870:	40020458 	.word	0x40020458
 8007874:	40020470 	.word	0x40020470
 8007878:	40020488 	.word	0x40020488
 800787c:	400204a0 	.word	0x400204a0
 8007880:	400204b8 	.word	0x400204b8
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	2b00      	cmp	r3, #0
 8007890:	bf14      	ite	ne
 8007892:	2301      	movne	r3, #1
 8007894:	2300      	moveq	r3, #0
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	f000 8087 	beq.w	80079ac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078a2:	f003 031f 	and.w	r3, r3, #31
 80078a6:	2220      	movs	r2, #32
 80078a8:	409a      	lsls	r2, r3
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b04      	cmp	r3, #4
 80078b8:	d139      	bne.n	800792e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f022 0216 	bic.w	r2, r2, #22
 80078c8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	695a      	ldr	r2, [r3, #20]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078d8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d103      	bne.n	80078ea <HAL_DMA_IRQHandler+0x736>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d007      	beq.n	80078fa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f022 0208 	bic.w	r2, r2, #8
 80078f8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078fe:	f003 031f 	and.w	r3, r3, #31
 8007902:	223f      	movs	r2, #63	; 0x3f
 8007904:	409a      	lsls	r2, r3
 8007906:	6a3b      	ldr	r3, [r7, #32]
 8007908:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 834a 	beq.w	8007fb8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	4798      	blx	r3
          }
          return;
 800792c:	e344      	b.n	8007fb8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d018      	beq.n	800796e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d108      	bne.n	800795c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800794e:	2b00      	cmp	r3, #0
 8007950:	d02c      	beq.n	80079ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	4798      	blx	r3
 800795a:	e027      	b.n	80079ac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007960:	2b00      	cmp	r3, #0
 8007962:	d023      	beq.n	80079ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	4798      	blx	r3
 800796c:	e01e      	b.n	80079ac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10f      	bne.n	800799c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f022 0210 	bic.w	r2, r2, #16
 800798a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d003      	beq.n	80079ac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 8306 	beq.w	8007fc2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f000 8088 	beq.w	8007ad4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2204      	movs	r2, #4
 80079c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a7a      	ldr	r2, [pc, #488]	; (8007bbc <HAL_DMA_IRQHandler+0xa08>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d04a      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x8b8>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a79      	ldr	r2, [pc, #484]	; (8007bc0 <HAL_DMA_IRQHandler+0xa0c>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d045      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x8b8>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a77      	ldr	r2, [pc, #476]	; (8007bc4 <HAL_DMA_IRQHandler+0xa10>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d040      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x8b8>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a76      	ldr	r2, [pc, #472]	; (8007bc8 <HAL_DMA_IRQHandler+0xa14>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d03b      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x8b8>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a74      	ldr	r2, [pc, #464]	; (8007bcc <HAL_DMA_IRQHandler+0xa18>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d036      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x8b8>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a73      	ldr	r2, [pc, #460]	; (8007bd0 <HAL_DMA_IRQHandler+0xa1c>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d031      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x8b8>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a71      	ldr	r2, [pc, #452]	; (8007bd4 <HAL_DMA_IRQHandler+0xa20>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d02c      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x8b8>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a70      	ldr	r2, [pc, #448]	; (8007bd8 <HAL_DMA_IRQHandler+0xa24>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d027      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x8b8>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a6e      	ldr	r2, [pc, #440]	; (8007bdc <HAL_DMA_IRQHandler+0xa28>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d022      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x8b8>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a6d      	ldr	r2, [pc, #436]	; (8007be0 <HAL_DMA_IRQHandler+0xa2c>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d01d      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x8b8>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a6b      	ldr	r2, [pc, #428]	; (8007be4 <HAL_DMA_IRQHandler+0xa30>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d018      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x8b8>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a6a      	ldr	r2, [pc, #424]	; (8007be8 <HAL_DMA_IRQHandler+0xa34>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d013      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x8b8>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a68      	ldr	r2, [pc, #416]	; (8007bec <HAL_DMA_IRQHandler+0xa38>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d00e      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x8b8>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a67      	ldr	r2, [pc, #412]	; (8007bf0 <HAL_DMA_IRQHandler+0xa3c>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d009      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x8b8>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a65      	ldr	r2, [pc, #404]	; (8007bf4 <HAL_DMA_IRQHandler+0xa40>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d004      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x8b8>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a64      	ldr	r2, [pc, #400]	; (8007bf8 <HAL_DMA_IRQHandler+0xa44>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d108      	bne.n	8007a7e <HAL_DMA_IRQHandler+0x8ca>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f022 0201 	bic.w	r2, r2, #1
 8007a7a:	601a      	str	r2, [r3, #0]
 8007a7c:	e007      	b.n	8007a8e <HAL_DMA_IRQHandler+0x8da>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f022 0201 	bic.w	r2, r2, #1
 8007a8c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	3301      	adds	r3, #1
 8007a92:	60fb      	str	r3, [r7, #12]
 8007a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d307      	bcc.n	8007aaa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0301 	and.w	r3, r3, #1
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1f2      	bne.n	8007a8e <HAL_DMA_IRQHandler+0x8da>
 8007aa8:	e000      	b.n	8007aac <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007aaa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d004      	beq.n	8007ac4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2203      	movs	r2, #3
 8007abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007ac2:	e003      	b.n	8007acc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 8272 	beq.w	8007fc2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	4798      	blx	r3
 8007ae6:	e26c      	b.n	8007fc2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a43      	ldr	r2, [pc, #268]	; (8007bfc <HAL_DMA_IRQHandler+0xa48>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d022      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x984>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a42      	ldr	r2, [pc, #264]	; (8007c00 <HAL_DMA_IRQHandler+0xa4c>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d01d      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x984>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a40      	ldr	r2, [pc, #256]	; (8007c04 <HAL_DMA_IRQHandler+0xa50>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d018      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x984>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a3f      	ldr	r2, [pc, #252]	; (8007c08 <HAL_DMA_IRQHandler+0xa54>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d013      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x984>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a3d      	ldr	r2, [pc, #244]	; (8007c0c <HAL_DMA_IRQHandler+0xa58>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d00e      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x984>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a3c      	ldr	r2, [pc, #240]	; (8007c10 <HAL_DMA_IRQHandler+0xa5c>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d009      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x984>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a3a      	ldr	r2, [pc, #232]	; (8007c14 <HAL_DMA_IRQHandler+0xa60>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d004      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x984>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a39      	ldr	r2, [pc, #228]	; (8007c18 <HAL_DMA_IRQHandler+0xa64>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d101      	bne.n	8007b3c <HAL_DMA_IRQHandler+0x988>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e000      	b.n	8007b3e <HAL_DMA_IRQHandler+0x98a>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f000 823f 	beq.w	8007fc2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b50:	f003 031f 	and.w	r3, r3, #31
 8007b54:	2204      	movs	r2, #4
 8007b56:	409a      	lsls	r2, r3
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 80cd 	beq.w	8007cfc <HAL_DMA_IRQHandler+0xb48>
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	f003 0304 	and.w	r3, r3, #4
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 80c7 	beq.w	8007cfc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b72:	f003 031f 	and.w	r3, r3, #31
 8007b76:	2204      	movs	r2, #4
 8007b78:	409a      	lsls	r2, r3
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d049      	beq.n	8007c1c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d109      	bne.n	8007ba6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f000 8210 	beq.w	8007fbc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ba4:	e20a      	b.n	8007fbc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f000 8206 	beq.w	8007fbc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bb8:	e200      	b.n	8007fbc <HAL_DMA_IRQHandler+0xe08>
 8007bba:	bf00      	nop
 8007bbc:	40020010 	.word	0x40020010
 8007bc0:	40020028 	.word	0x40020028
 8007bc4:	40020040 	.word	0x40020040
 8007bc8:	40020058 	.word	0x40020058
 8007bcc:	40020070 	.word	0x40020070
 8007bd0:	40020088 	.word	0x40020088
 8007bd4:	400200a0 	.word	0x400200a0
 8007bd8:	400200b8 	.word	0x400200b8
 8007bdc:	40020410 	.word	0x40020410
 8007be0:	40020428 	.word	0x40020428
 8007be4:	40020440 	.word	0x40020440
 8007be8:	40020458 	.word	0x40020458
 8007bec:	40020470 	.word	0x40020470
 8007bf0:	40020488 	.word	0x40020488
 8007bf4:	400204a0 	.word	0x400204a0
 8007bf8:	400204b8 	.word	0x400204b8
 8007bfc:	58025408 	.word	0x58025408
 8007c00:	5802541c 	.word	0x5802541c
 8007c04:	58025430 	.word	0x58025430
 8007c08:	58025444 	.word	0x58025444
 8007c0c:	58025458 	.word	0x58025458
 8007c10:	5802546c 	.word	0x5802546c
 8007c14:	58025480 	.word	0x58025480
 8007c18:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	f003 0320 	and.w	r3, r3, #32
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d160      	bne.n	8007ce8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a7f      	ldr	r2, [pc, #508]	; (8007e28 <HAL_DMA_IRQHandler+0xc74>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d04a      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0xb12>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a7d      	ldr	r2, [pc, #500]	; (8007e2c <HAL_DMA_IRQHandler+0xc78>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d045      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0xb12>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a7c      	ldr	r2, [pc, #496]	; (8007e30 <HAL_DMA_IRQHandler+0xc7c>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d040      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0xb12>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a7a      	ldr	r2, [pc, #488]	; (8007e34 <HAL_DMA_IRQHandler+0xc80>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d03b      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0xb12>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a79      	ldr	r2, [pc, #484]	; (8007e38 <HAL_DMA_IRQHandler+0xc84>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d036      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0xb12>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a77      	ldr	r2, [pc, #476]	; (8007e3c <HAL_DMA_IRQHandler+0xc88>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d031      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0xb12>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a76      	ldr	r2, [pc, #472]	; (8007e40 <HAL_DMA_IRQHandler+0xc8c>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d02c      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0xb12>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a74      	ldr	r2, [pc, #464]	; (8007e44 <HAL_DMA_IRQHandler+0xc90>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d027      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0xb12>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a73      	ldr	r2, [pc, #460]	; (8007e48 <HAL_DMA_IRQHandler+0xc94>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d022      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0xb12>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a71      	ldr	r2, [pc, #452]	; (8007e4c <HAL_DMA_IRQHandler+0xc98>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d01d      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0xb12>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a70      	ldr	r2, [pc, #448]	; (8007e50 <HAL_DMA_IRQHandler+0xc9c>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d018      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0xb12>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a6e      	ldr	r2, [pc, #440]	; (8007e54 <HAL_DMA_IRQHandler+0xca0>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d013      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0xb12>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a6d      	ldr	r2, [pc, #436]	; (8007e58 <HAL_DMA_IRQHandler+0xca4>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d00e      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0xb12>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a6b      	ldr	r2, [pc, #428]	; (8007e5c <HAL_DMA_IRQHandler+0xca8>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d009      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0xb12>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a6a      	ldr	r2, [pc, #424]	; (8007e60 <HAL_DMA_IRQHandler+0xcac>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d004      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0xb12>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a68      	ldr	r2, [pc, #416]	; (8007e64 <HAL_DMA_IRQHandler+0xcb0>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d108      	bne.n	8007cd8 <HAL_DMA_IRQHandler+0xb24>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f022 0208 	bic.w	r2, r2, #8
 8007cd4:	601a      	str	r2, [r3, #0]
 8007cd6:	e007      	b.n	8007ce8 <HAL_DMA_IRQHandler+0xb34>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f022 0204 	bic.w	r2, r2, #4
 8007ce6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f000 8165 	beq.w	8007fbc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cfa:	e15f      	b.n	8007fbc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d00:	f003 031f 	and.w	r3, r3, #31
 8007d04:	2202      	movs	r2, #2
 8007d06:	409a      	lsls	r2, r3
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 80c5 	beq.w	8007e9c <HAL_DMA_IRQHandler+0xce8>
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f003 0302 	and.w	r3, r3, #2
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 80bf 	beq.w	8007e9c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d22:	f003 031f 	and.w	r3, r3, #31
 8007d26:	2202      	movs	r2, #2
 8007d28:	409a      	lsls	r2, r3
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d018      	beq.n	8007d6a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d109      	bne.n	8007d56 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 813a 	beq.w	8007fc0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d54:	e134      	b.n	8007fc0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f000 8130 	beq.w	8007fc0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d68:	e12a      	b.n	8007fc0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	f003 0320 	and.w	r3, r3, #32
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f040 8089 	bne.w	8007e88 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a2b      	ldr	r2, [pc, #172]	; (8007e28 <HAL_DMA_IRQHandler+0xc74>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d04a      	beq.n	8007e16 <HAL_DMA_IRQHandler+0xc62>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a29      	ldr	r2, [pc, #164]	; (8007e2c <HAL_DMA_IRQHandler+0xc78>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d045      	beq.n	8007e16 <HAL_DMA_IRQHandler+0xc62>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a28      	ldr	r2, [pc, #160]	; (8007e30 <HAL_DMA_IRQHandler+0xc7c>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d040      	beq.n	8007e16 <HAL_DMA_IRQHandler+0xc62>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a26      	ldr	r2, [pc, #152]	; (8007e34 <HAL_DMA_IRQHandler+0xc80>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d03b      	beq.n	8007e16 <HAL_DMA_IRQHandler+0xc62>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a25      	ldr	r2, [pc, #148]	; (8007e38 <HAL_DMA_IRQHandler+0xc84>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d036      	beq.n	8007e16 <HAL_DMA_IRQHandler+0xc62>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a23      	ldr	r2, [pc, #140]	; (8007e3c <HAL_DMA_IRQHandler+0xc88>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d031      	beq.n	8007e16 <HAL_DMA_IRQHandler+0xc62>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a22      	ldr	r2, [pc, #136]	; (8007e40 <HAL_DMA_IRQHandler+0xc8c>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d02c      	beq.n	8007e16 <HAL_DMA_IRQHandler+0xc62>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a20      	ldr	r2, [pc, #128]	; (8007e44 <HAL_DMA_IRQHandler+0xc90>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d027      	beq.n	8007e16 <HAL_DMA_IRQHandler+0xc62>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a1f      	ldr	r2, [pc, #124]	; (8007e48 <HAL_DMA_IRQHandler+0xc94>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d022      	beq.n	8007e16 <HAL_DMA_IRQHandler+0xc62>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a1d      	ldr	r2, [pc, #116]	; (8007e4c <HAL_DMA_IRQHandler+0xc98>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d01d      	beq.n	8007e16 <HAL_DMA_IRQHandler+0xc62>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a1c      	ldr	r2, [pc, #112]	; (8007e50 <HAL_DMA_IRQHandler+0xc9c>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d018      	beq.n	8007e16 <HAL_DMA_IRQHandler+0xc62>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a1a      	ldr	r2, [pc, #104]	; (8007e54 <HAL_DMA_IRQHandler+0xca0>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d013      	beq.n	8007e16 <HAL_DMA_IRQHandler+0xc62>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a19      	ldr	r2, [pc, #100]	; (8007e58 <HAL_DMA_IRQHandler+0xca4>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d00e      	beq.n	8007e16 <HAL_DMA_IRQHandler+0xc62>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a17      	ldr	r2, [pc, #92]	; (8007e5c <HAL_DMA_IRQHandler+0xca8>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d009      	beq.n	8007e16 <HAL_DMA_IRQHandler+0xc62>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a16      	ldr	r2, [pc, #88]	; (8007e60 <HAL_DMA_IRQHandler+0xcac>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d004      	beq.n	8007e16 <HAL_DMA_IRQHandler+0xc62>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a14      	ldr	r2, [pc, #80]	; (8007e64 <HAL_DMA_IRQHandler+0xcb0>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d128      	bne.n	8007e68 <HAL_DMA_IRQHandler+0xcb4>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f022 0214 	bic.w	r2, r2, #20
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	e027      	b.n	8007e78 <HAL_DMA_IRQHandler+0xcc4>
 8007e28:	40020010 	.word	0x40020010
 8007e2c:	40020028 	.word	0x40020028
 8007e30:	40020040 	.word	0x40020040
 8007e34:	40020058 	.word	0x40020058
 8007e38:	40020070 	.word	0x40020070
 8007e3c:	40020088 	.word	0x40020088
 8007e40:	400200a0 	.word	0x400200a0
 8007e44:	400200b8 	.word	0x400200b8
 8007e48:	40020410 	.word	0x40020410
 8007e4c:	40020428 	.word	0x40020428
 8007e50:	40020440 	.word	0x40020440
 8007e54:	40020458 	.word	0x40020458
 8007e58:	40020470 	.word	0x40020470
 8007e5c:	40020488 	.word	0x40020488
 8007e60:	400204a0 	.word	0x400204a0
 8007e64:	400204b8 	.word	0x400204b8
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f022 020a 	bic.w	r2, r2, #10
 8007e76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f000 8097 	beq.w	8007fc0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e9a:	e091      	b.n	8007fc0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ea0:	f003 031f 	and.w	r3, r3, #31
 8007ea4:	2208      	movs	r2, #8
 8007ea6:	409a      	lsls	r2, r3
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 8088 	beq.w	8007fc2 <HAL_DMA_IRQHandler+0xe0e>
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f003 0308 	and.w	r3, r3, #8
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 8082 	beq.w	8007fc2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a41      	ldr	r2, [pc, #260]	; (8007fc8 <HAL_DMA_IRQHandler+0xe14>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d04a      	beq.n	8007f5e <HAL_DMA_IRQHandler+0xdaa>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a3f      	ldr	r2, [pc, #252]	; (8007fcc <HAL_DMA_IRQHandler+0xe18>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d045      	beq.n	8007f5e <HAL_DMA_IRQHandler+0xdaa>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a3e      	ldr	r2, [pc, #248]	; (8007fd0 <HAL_DMA_IRQHandler+0xe1c>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d040      	beq.n	8007f5e <HAL_DMA_IRQHandler+0xdaa>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a3c      	ldr	r2, [pc, #240]	; (8007fd4 <HAL_DMA_IRQHandler+0xe20>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d03b      	beq.n	8007f5e <HAL_DMA_IRQHandler+0xdaa>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a3b      	ldr	r2, [pc, #236]	; (8007fd8 <HAL_DMA_IRQHandler+0xe24>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d036      	beq.n	8007f5e <HAL_DMA_IRQHandler+0xdaa>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a39      	ldr	r2, [pc, #228]	; (8007fdc <HAL_DMA_IRQHandler+0xe28>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d031      	beq.n	8007f5e <HAL_DMA_IRQHandler+0xdaa>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a38      	ldr	r2, [pc, #224]	; (8007fe0 <HAL_DMA_IRQHandler+0xe2c>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d02c      	beq.n	8007f5e <HAL_DMA_IRQHandler+0xdaa>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a36      	ldr	r2, [pc, #216]	; (8007fe4 <HAL_DMA_IRQHandler+0xe30>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d027      	beq.n	8007f5e <HAL_DMA_IRQHandler+0xdaa>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a35      	ldr	r2, [pc, #212]	; (8007fe8 <HAL_DMA_IRQHandler+0xe34>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d022      	beq.n	8007f5e <HAL_DMA_IRQHandler+0xdaa>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a33      	ldr	r2, [pc, #204]	; (8007fec <HAL_DMA_IRQHandler+0xe38>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d01d      	beq.n	8007f5e <HAL_DMA_IRQHandler+0xdaa>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a32      	ldr	r2, [pc, #200]	; (8007ff0 <HAL_DMA_IRQHandler+0xe3c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d018      	beq.n	8007f5e <HAL_DMA_IRQHandler+0xdaa>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a30      	ldr	r2, [pc, #192]	; (8007ff4 <HAL_DMA_IRQHandler+0xe40>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d013      	beq.n	8007f5e <HAL_DMA_IRQHandler+0xdaa>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a2f      	ldr	r2, [pc, #188]	; (8007ff8 <HAL_DMA_IRQHandler+0xe44>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d00e      	beq.n	8007f5e <HAL_DMA_IRQHandler+0xdaa>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a2d      	ldr	r2, [pc, #180]	; (8007ffc <HAL_DMA_IRQHandler+0xe48>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d009      	beq.n	8007f5e <HAL_DMA_IRQHandler+0xdaa>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a2c      	ldr	r2, [pc, #176]	; (8008000 <HAL_DMA_IRQHandler+0xe4c>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d004      	beq.n	8007f5e <HAL_DMA_IRQHandler+0xdaa>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a2a      	ldr	r2, [pc, #168]	; (8008004 <HAL_DMA_IRQHandler+0xe50>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d108      	bne.n	8007f70 <HAL_DMA_IRQHandler+0xdbc>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f022 021c 	bic.w	r2, r2, #28
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	e007      	b.n	8007f80 <HAL_DMA_IRQHandler+0xdcc>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f022 020e 	bic.w	r2, r2, #14
 8007f7e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f84:	f003 031f 	and.w	r3, r3, #31
 8007f88:	2201      	movs	r2, #1
 8007f8a:	409a      	lsls	r2, r3
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d009      	beq.n	8007fc2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	4798      	blx	r3
 8007fb6:	e004      	b.n	8007fc2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007fb8:	bf00      	nop
 8007fba:	e002      	b.n	8007fc2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007fbc:	bf00      	nop
 8007fbe:	e000      	b.n	8007fc2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007fc0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007fc2:	3728      	adds	r7, #40	; 0x28
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	40020010 	.word	0x40020010
 8007fcc:	40020028 	.word	0x40020028
 8007fd0:	40020040 	.word	0x40020040
 8007fd4:	40020058 	.word	0x40020058
 8007fd8:	40020070 	.word	0x40020070
 8007fdc:	40020088 	.word	0x40020088
 8007fe0:	400200a0 	.word	0x400200a0
 8007fe4:	400200b8 	.word	0x400200b8
 8007fe8:	40020410 	.word	0x40020410
 8007fec:	40020428 	.word	0x40020428
 8007ff0:	40020440 	.word	0x40020440
 8007ff4:	40020458 	.word	0x40020458
 8007ff8:	40020470 	.word	0x40020470
 8007ffc:	40020488 	.word	0x40020488
 8008000:	400204a0 	.word	0x400204a0
 8008004:	400204b8 	.word	0x400204b8

08008008 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008014:	4618      	mov	r0, r3
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008032:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008038:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a7f      	ldr	r2, [pc, #508]	; (800823c <DMA_SetConfig+0x21c>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d072      	beq.n	800812a <DMA_SetConfig+0x10a>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a7d      	ldr	r2, [pc, #500]	; (8008240 <DMA_SetConfig+0x220>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d06d      	beq.n	800812a <DMA_SetConfig+0x10a>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a7c      	ldr	r2, [pc, #496]	; (8008244 <DMA_SetConfig+0x224>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d068      	beq.n	800812a <DMA_SetConfig+0x10a>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a7a      	ldr	r2, [pc, #488]	; (8008248 <DMA_SetConfig+0x228>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d063      	beq.n	800812a <DMA_SetConfig+0x10a>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a79      	ldr	r2, [pc, #484]	; (800824c <DMA_SetConfig+0x22c>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d05e      	beq.n	800812a <DMA_SetConfig+0x10a>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a77      	ldr	r2, [pc, #476]	; (8008250 <DMA_SetConfig+0x230>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d059      	beq.n	800812a <DMA_SetConfig+0x10a>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a76      	ldr	r2, [pc, #472]	; (8008254 <DMA_SetConfig+0x234>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d054      	beq.n	800812a <DMA_SetConfig+0x10a>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a74      	ldr	r2, [pc, #464]	; (8008258 <DMA_SetConfig+0x238>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d04f      	beq.n	800812a <DMA_SetConfig+0x10a>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a73      	ldr	r2, [pc, #460]	; (800825c <DMA_SetConfig+0x23c>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d04a      	beq.n	800812a <DMA_SetConfig+0x10a>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a71      	ldr	r2, [pc, #452]	; (8008260 <DMA_SetConfig+0x240>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d045      	beq.n	800812a <DMA_SetConfig+0x10a>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a70      	ldr	r2, [pc, #448]	; (8008264 <DMA_SetConfig+0x244>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d040      	beq.n	800812a <DMA_SetConfig+0x10a>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a6e      	ldr	r2, [pc, #440]	; (8008268 <DMA_SetConfig+0x248>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d03b      	beq.n	800812a <DMA_SetConfig+0x10a>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a6d      	ldr	r2, [pc, #436]	; (800826c <DMA_SetConfig+0x24c>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d036      	beq.n	800812a <DMA_SetConfig+0x10a>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a6b      	ldr	r2, [pc, #428]	; (8008270 <DMA_SetConfig+0x250>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d031      	beq.n	800812a <DMA_SetConfig+0x10a>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a6a      	ldr	r2, [pc, #424]	; (8008274 <DMA_SetConfig+0x254>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d02c      	beq.n	800812a <DMA_SetConfig+0x10a>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a68      	ldr	r2, [pc, #416]	; (8008278 <DMA_SetConfig+0x258>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d027      	beq.n	800812a <DMA_SetConfig+0x10a>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a67      	ldr	r2, [pc, #412]	; (800827c <DMA_SetConfig+0x25c>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d022      	beq.n	800812a <DMA_SetConfig+0x10a>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a65      	ldr	r2, [pc, #404]	; (8008280 <DMA_SetConfig+0x260>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d01d      	beq.n	800812a <DMA_SetConfig+0x10a>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a64      	ldr	r2, [pc, #400]	; (8008284 <DMA_SetConfig+0x264>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d018      	beq.n	800812a <DMA_SetConfig+0x10a>
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a62      	ldr	r2, [pc, #392]	; (8008288 <DMA_SetConfig+0x268>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d013      	beq.n	800812a <DMA_SetConfig+0x10a>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a61      	ldr	r2, [pc, #388]	; (800828c <DMA_SetConfig+0x26c>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d00e      	beq.n	800812a <DMA_SetConfig+0x10a>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a5f      	ldr	r2, [pc, #380]	; (8008290 <DMA_SetConfig+0x270>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d009      	beq.n	800812a <DMA_SetConfig+0x10a>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a5e      	ldr	r2, [pc, #376]	; (8008294 <DMA_SetConfig+0x274>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d004      	beq.n	800812a <DMA_SetConfig+0x10a>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a5c      	ldr	r2, [pc, #368]	; (8008298 <DMA_SetConfig+0x278>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d101      	bne.n	800812e <DMA_SetConfig+0x10e>
 800812a:	2301      	movs	r3, #1
 800812c:	e000      	b.n	8008130 <DMA_SetConfig+0x110>
 800812e:	2300      	movs	r3, #0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00d      	beq.n	8008150 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800813c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008142:	2b00      	cmp	r3, #0
 8008144:	d004      	beq.n	8008150 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800814e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a39      	ldr	r2, [pc, #228]	; (800823c <DMA_SetConfig+0x21c>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d04a      	beq.n	80081f0 <DMA_SetConfig+0x1d0>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a38      	ldr	r2, [pc, #224]	; (8008240 <DMA_SetConfig+0x220>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d045      	beq.n	80081f0 <DMA_SetConfig+0x1d0>
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a36      	ldr	r2, [pc, #216]	; (8008244 <DMA_SetConfig+0x224>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d040      	beq.n	80081f0 <DMA_SetConfig+0x1d0>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a35      	ldr	r2, [pc, #212]	; (8008248 <DMA_SetConfig+0x228>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d03b      	beq.n	80081f0 <DMA_SetConfig+0x1d0>
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a33      	ldr	r2, [pc, #204]	; (800824c <DMA_SetConfig+0x22c>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d036      	beq.n	80081f0 <DMA_SetConfig+0x1d0>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a32      	ldr	r2, [pc, #200]	; (8008250 <DMA_SetConfig+0x230>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d031      	beq.n	80081f0 <DMA_SetConfig+0x1d0>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a30      	ldr	r2, [pc, #192]	; (8008254 <DMA_SetConfig+0x234>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d02c      	beq.n	80081f0 <DMA_SetConfig+0x1d0>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a2f      	ldr	r2, [pc, #188]	; (8008258 <DMA_SetConfig+0x238>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d027      	beq.n	80081f0 <DMA_SetConfig+0x1d0>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a2d      	ldr	r2, [pc, #180]	; (800825c <DMA_SetConfig+0x23c>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d022      	beq.n	80081f0 <DMA_SetConfig+0x1d0>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a2c      	ldr	r2, [pc, #176]	; (8008260 <DMA_SetConfig+0x240>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d01d      	beq.n	80081f0 <DMA_SetConfig+0x1d0>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a2a      	ldr	r2, [pc, #168]	; (8008264 <DMA_SetConfig+0x244>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d018      	beq.n	80081f0 <DMA_SetConfig+0x1d0>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a29      	ldr	r2, [pc, #164]	; (8008268 <DMA_SetConfig+0x248>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d013      	beq.n	80081f0 <DMA_SetConfig+0x1d0>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a27      	ldr	r2, [pc, #156]	; (800826c <DMA_SetConfig+0x24c>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d00e      	beq.n	80081f0 <DMA_SetConfig+0x1d0>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a26      	ldr	r2, [pc, #152]	; (8008270 <DMA_SetConfig+0x250>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d009      	beq.n	80081f0 <DMA_SetConfig+0x1d0>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a24      	ldr	r2, [pc, #144]	; (8008274 <DMA_SetConfig+0x254>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d004      	beq.n	80081f0 <DMA_SetConfig+0x1d0>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a23      	ldr	r2, [pc, #140]	; (8008278 <DMA_SetConfig+0x258>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d101      	bne.n	80081f4 <DMA_SetConfig+0x1d4>
 80081f0:	2301      	movs	r3, #1
 80081f2:	e000      	b.n	80081f6 <DMA_SetConfig+0x1d6>
 80081f4:	2300      	movs	r3, #0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d059      	beq.n	80082ae <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081fe:	f003 031f 	and.w	r3, r3, #31
 8008202:	223f      	movs	r2, #63	; 0x3f
 8008204:	409a      	lsls	r2, r3
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008218:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	2b40      	cmp	r3, #64	; 0x40
 8008228:	d138      	bne.n	800829c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800823a:	e086      	b.n	800834a <DMA_SetConfig+0x32a>
 800823c:	40020010 	.word	0x40020010
 8008240:	40020028 	.word	0x40020028
 8008244:	40020040 	.word	0x40020040
 8008248:	40020058 	.word	0x40020058
 800824c:	40020070 	.word	0x40020070
 8008250:	40020088 	.word	0x40020088
 8008254:	400200a0 	.word	0x400200a0
 8008258:	400200b8 	.word	0x400200b8
 800825c:	40020410 	.word	0x40020410
 8008260:	40020428 	.word	0x40020428
 8008264:	40020440 	.word	0x40020440
 8008268:	40020458 	.word	0x40020458
 800826c:	40020470 	.word	0x40020470
 8008270:	40020488 	.word	0x40020488
 8008274:	400204a0 	.word	0x400204a0
 8008278:	400204b8 	.word	0x400204b8
 800827c:	58025408 	.word	0x58025408
 8008280:	5802541c 	.word	0x5802541c
 8008284:	58025430 	.word	0x58025430
 8008288:	58025444 	.word	0x58025444
 800828c:	58025458 	.word	0x58025458
 8008290:	5802546c 	.word	0x5802546c
 8008294:	58025480 	.word	0x58025480
 8008298:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	60da      	str	r2, [r3, #12]
}
 80082ac:	e04d      	b.n	800834a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a29      	ldr	r2, [pc, #164]	; (8008358 <DMA_SetConfig+0x338>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d022      	beq.n	80082fe <DMA_SetConfig+0x2de>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a27      	ldr	r2, [pc, #156]	; (800835c <DMA_SetConfig+0x33c>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d01d      	beq.n	80082fe <DMA_SetConfig+0x2de>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a26      	ldr	r2, [pc, #152]	; (8008360 <DMA_SetConfig+0x340>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d018      	beq.n	80082fe <DMA_SetConfig+0x2de>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a24      	ldr	r2, [pc, #144]	; (8008364 <DMA_SetConfig+0x344>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d013      	beq.n	80082fe <DMA_SetConfig+0x2de>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a23      	ldr	r2, [pc, #140]	; (8008368 <DMA_SetConfig+0x348>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d00e      	beq.n	80082fe <DMA_SetConfig+0x2de>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a21      	ldr	r2, [pc, #132]	; (800836c <DMA_SetConfig+0x34c>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d009      	beq.n	80082fe <DMA_SetConfig+0x2de>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a20      	ldr	r2, [pc, #128]	; (8008370 <DMA_SetConfig+0x350>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d004      	beq.n	80082fe <DMA_SetConfig+0x2de>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a1e      	ldr	r2, [pc, #120]	; (8008374 <DMA_SetConfig+0x354>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d101      	bne.n	8008302 <DMA_SetConfig+0x2e2>
 80082fe:	2301      	movs	r3, #1
 8008300:	e000      	b.n	8008304 <DMA_SetConfig+0x2e4>
 8008302:	2300      	movs	r3, #0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d020      	beq.n	800834a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800830c:	f003 031f 	and.w	r3, r3, #31
 8008310:	2201      	movs	r2, #1
 8008312:	409a      	lsls	r2, r3
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	683a      	ldr	r2, [r7, #0]
 800831e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	2b40      	cmp	r3, #64	; 0x40
 8008326:	d108      	bne.n	800833a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68ba      	ldr	r2, [r7, #8]
 8008336:	60da      	str	r2, [r3, #12]
}
 8008338:	e007      	b.n	800834a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	60da      	str	r2, [r3, #12]
}
 800834a:	bf00      	nop
 800834c:	371c      	adds	r7, #28
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	58025408 	.word	0x58025408
 800835c:	5802541c 	.word	0x5802541c
 8008360:	58025430 	.word	0x58025430
 8008364:	58025444 	.word	0x58025444
 8008368:	58025458 	.word	0x58025458
 800836c:	5802546c 	.word	0x5802546c
 8008370:	58025480 	.word	0x58025480
 8008374:	58025494 	.word	0x58025494

08008378 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a42      	ldr	r2, [pc, #264]	; (8008490 <DMA_CalcBaseAndBitshift+0x118>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d04a      	beq.n	8008420 <DMA_CalcBaseAndBitshift+0xa8>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a41      	ldr	r2, [pc, #260]	; (8008494 <DMA_CalcBaseAndBitshift+0x11c>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d045      	beq.n	8008420 <DMA_CalcBaseAndBitshift+0xa8>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a3f      	ldr	r2, [pc, #252]	; (8008498 <DMA_CalcBaseAndBitshift+0x120>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d040      	beq.n	8008420 <DMA_CalcBaseAndBitshift+0xa8>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a3e      	ldr	r2, [pc, #248]	; (800849c <DMA_CalcBaseAndBitshift+0x124>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d03b      	beq.n	8008420 <DMA_CalcBaseAndBitshift+0xa8>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a3c      	ldr	r2, [pc, #240]	; (80084a0 <DMA_CalcBaseAndBitshift+0x128>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d036      	beq.n	8008420 <DMA_CalcBaseAndBitshift+0xa8>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a3b      	ldr	r2, [pc, #236]	; (80084a4 <DMA_CalcBaseAndBitshift+0x12c>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d031      	beq.n	8008420 <DMA_CalcBaseAndBitshift+0xa8>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a39      	ldr	r2, [pc, #228]	; (80084a8 <DMA_CalcBaseAndBitshift+0x130>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d02c      	beq.n	8008420 <DMA_CalcBaseAndBitshift+0xa8>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a38      	ldr	r2, [pc, #224]	; (80084ac <DMA_CalcBaseAndBitshift+0x134>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d027      	beq.n	8008420 <DMA_CalcBaseAndBitshift+0xa8>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a36      	ldr	r2, [pc, #216]	; (80084b0 <DMA_CalcBaseAndBitshift+0x138>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d022      	beq.n	8008420 <DMA_CalcBaseAndBitshift+0xa8>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a35      	ldr	r2, [pc, #212]	; (80084b4 <DMA_CalcBaseAndBitshift+0x13c>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d01d      	beq.n	8008420 <DMA_CalcBaseAndBitshift+0xa8>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a33      	ldr	r2, [pc, #204]	; (80084b8 <DMA_CalcBaseAndBitshift+0x140>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d018      	beq.n	8008420 <DMA_CalcBaseAndBitshift+0xa8>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a32      	ldr	r2, [pc, #200]	; (80084bc <DMA_CalcBaseAndBitshift+0x144>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d013      	beq.n	8008420 <DMA_CalcBaseAndBitshift+0xa8>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a30      	ldr	r2, [pc, #192]	; (80084c0 <DMA_CalcBaseAndBitshift+0x148>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d00e      	beq.n	8008420 <DMA_CalcBaseAndBitshift+0xa8>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a2f      	ldr	r2, [pc, #188]	; (80084c4 <DMA_CalcBaseAndBitshift+0x14c>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d009      	beq.n	8008420 <DMA_CalcBaseAndBitshift+0xa8>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a2d      	ldr	r2, [pc, #180]	; (80084c8 <DMA_CalcBaseAndBitshift+0x150>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d004      	beq.n	8008420 <DMA_CalcBaseAndBitshift+0xa8>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a2c      	ldr	r2, [pc, #176]	; (80084cc <DMA_CalcBaseAndBitshift+0x154>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d101      	bne.n	8008424 <DMA_CalcBaseAndBitshift+0xac>
 8008420:	2301      	movs	r3, #1
 8008422:	e000      	b.n	8008426 <DMA_CalcBaseAndBitshift+0xae>
 8008424:	2300      	movs	r3, #0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d024      	beq.n	8008474 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	b2db      	uxtb	r3, r3
 8008430:	3b10      	subs	r3, #16
 8008432:	4a27      	ldr	r2, [pc, #156]	; (80084d0 <DMA_CalcBaseAndBitshift+0x158>)
 8008434:	fba2 2303 	umull	r2, r3, r2, r3
 8008438:	091b      	lsrs	r3, r3, #4
 800843a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f003 0307 	and.w	r3, r3, #7
 8008442:	4a24      	ldr	r2, [pc, #144]	; (80084d4 <DMA_CalcBaseAndBitshift+0x15c>)
 8008444:	5cd3      	ldrb	r3, [r2, r3]
 8008446:	461a      	mov	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2b03      	cmp	r3, #3
 8008450:	d908      	bls.n	8008464 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	461a      	mov	r2, r3
 8008458:	4b1f      	ldr	r3, [pc, #124]	; (80084d8 <DMA_CalcBaseAndBitshift+0x160>)
 800845a:	4013      	ands	r3, r2
 800845c:	1d1a      	adds	r2, r3, #4
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	659a      	str	r2, [r3, #88]	; 0x58
 8008462:	e00d      	b.n	8008480 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	461a      	mov	r2, r3
 800846a:	4b1b      	ldr	r3, [pc, #108]	; (80084d8 <DMA_CalcBaseAndBitshift+0x160>)
 800846c:	4013      	ands	r3, r2
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	6593      	str	r3, [r2, #88]	; 0x58
 8008472:	e005      	b.n	8008480 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008484:	4618      	mov	r0, r3
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr
 8008490:	40020010 	.word	0x40020010
 8008494:	40020028 	.word	0x40020028
 8008498:	40020040 	.word	0x40020040
 800849c:	40020058 	.word	0x40020058
 80084a0:	40020070 	.word	0x40020070
 80084a4:	40020088 	.word	0x40020088
 80084a8:	400200a0 	.word	0x400200a0
 80084ac:	400200b8 	.word	0x400200b8
 80084b0:	40020410 	.word	0x40020410
 80084b4:	40020428 	.word	0x40020428
 80084b8:	40020440 	.word	0x40020440
 80084bc:	40020458 	.word	0x40020458
 80084c0:	40020470 	.word	0x40020470
 80084c4:	40020488 	.word	0x40020488
 80084c8:	400204a0 	.word	0x400204a0
 80084cc:	400204b8 	.word	0x400204b8
 80084d0:	aaaaaaab 	.word	0xaaaaaaab
 80084d4:	08012634 	.word	0x08012634
 80084d8:	fffffc00 	.word	0xfffffc00

080084dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084e4:	2300      	movs	r3, #0
 80084e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d120      	bne.n	8008532 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f4:	2b03      	cmp	r3, #3
 80084f6:	d858      	bhi.n	80085aa <DMA_CheckFifoParam+0xce>
 80084f8:	a201      	add	r2, pc, #4	; (adr r2, 8008500 <DMA_CheckFifoParam+0x24>)
 80084fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fe:	bf00      	nop
 8008500:	08008511 	.word	0x08008511
 8008504:	08008523 	.word	0x08008523
 8008508:	08008511 	.word	0x08008511
 800850c:	080085ab 	.word	0x080085ab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008514:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d048      	beq.n	80085ae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008520:	e045      	b.n	80085ae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008526:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800852a:	d142      	bne.n	80085b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008530:	e03f      	b.n	80085b2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800853a:	d123      	bne.n	8008584 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008540:	2b03      	cmp	r3, #3
 8008542:	d838      	bhi.n	80085b6 <DMA_CheckFifoParam+0xda>
 8008544:	a201      	add	r2, pc, #4	; (adr r2, 800854c <DMA_CheckFifoParam+0x70>)
 8008546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854a:	bf00      	nop
 800854c:	0800855d 	.word	0x0800855d
 8008550:	08008563 	.word	0x08008563
 8008554:	0800855d 	.word	0x0800855d
 8008558:	08008575 	.word	0x08008575
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	73fb      	strb	r3, [r7, #15]
        break;
 8008560:	e030      	b.n	80085c4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008566:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d025      	beq.n	80085ba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008572:	e022      	b.n	80085ba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800857c:	d11f      	bne.n	80085be <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008582:	e01c      	b.n	80085be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008588:	2b02      	cmp	r3, #2
 800858a:	d902      	bls.n	8008592 <DMA_CheckFifoParam+0xb6>
 800858c:	2b03      	cmp	r3, #3
 800858e:	d003      	beq.n	8008598 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008590:	e018      	b.n	80085c4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	73fb      	strb	r3, [r7, #15]
        break;
 8008596:	e015      	b.n	80085c4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00e      	beq.n	80085c2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	73fb      	strb	r3, [r7, #15]
    break;
 80085a8:	e00b      	b.n	80085c2 <DMA_CheckFifoParam+0xe6>
        break;
 80085aa:	bf00      	nop
 80085ac:	e00a      	b.n	80085c4 <DMA_CheckFifoParam+0xe8>
        break;
 80085ae:	bf00      	nop
 80085b0:	e008      	b.n	80085c4 <DMA_CheckFifoParam+0xe8>
        break;
 80085b2:	bf00      	nop
 80085b4:	e006      	b.n	80085c4 <DMA_CheckFifoParam+0xe8>
        break;
 80085b6:	bf00      	nop
 80085b8:	e004      	b.n	80085c4 <DMA_CheckFifoParam+0xe8>
        break;
 80085ba:	bf00      	nop
 80085bc:	e002      	b.n	80085c4 <DMA_CheckFifoParam+0xe8>
        break;
 80085be:	bf00      	nop
 80085c0:	e000      	b.n	80085c4 <DMA_CheckFifoParam+0xe8>
    break;
 80085c2:	bf00      	nop
    }
  }

  return status;
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3714      	adds	r7, #20
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop

080085d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a38      	ldr	r2, [pc, #224]	; (80086c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d022      	beq.n	8008632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a36      	ldr	r2, [pc, #216]	; (80086cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d01d      	beq.n	8008632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a35      	ldr	r2, [pc, #212]	; (80086d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d018      	beq.n	8008632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a33      	ldr	r2, [pc, #204]	; (80086d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d013      	beq.n	8008632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a32      	ldr	r2, [pc, #200]	; (80086d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d00e      	beq.n	8008632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a30      	ldr	r2, [pc, #192]	; (80086dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d009      	beq.n	8008632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a2f      	ldr	r2, [pc, #188]	; (80086e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d004      	beq.n	8008632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a2d      	ldr	r2, [pc, #180]	; (80086e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d101      	bne.n	8008636 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008632:	2301      	movs	r3, #1
 8008634:	e000      	b.n	8008638 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008636:	2300      	movs	r3, #0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d01a      	beq.n	8008672 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	b2db      	uxtb	r3, r3
 8008642:	3b08      	subs	r3, #8
 8008644:	4a28      	ldr	r2, [pc, #160]	; (80086e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008646:	fba2 2303 	umull	r2, r3, r2, r3
 800864a:	091b      	lsrs	r3, r3, #4
 800864c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	4b26      	ldr	r3, [pc, #152]	; (80086ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008652:	4413      	add	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	461a      	mov	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a24      	ldr	r2, [pc, #144]	; (80086f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008660:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f003 031f 	and.w	r3, r3, #31
 8008668:	2201      	movs	r2, #1
 800866a:	409a      	lsls	r2, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008670:	e024      	b.n	80086bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	b2db      	uxtb	r3, r3
 8008678:	3b10      	subs	r3, #16
 800867a:	4a1e      	ldr	r2, [pc, #120]	; (80086f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800867c:	fba2 2303 	umull	r2, r3, r2, r3
 8008680:	091b      	lsrs	r3, r3, #4
 8008682:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	4a1c      	ldr	r2, [pc, #112]	; (80086f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d806      	bhi.n	800869a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	4a1b      	ldr	r2, [pc, #108]	; (80086fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d902      	bls.n	800869a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	3308      	adds	r3, #8
 8008698:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	4b18      	ldr	r3, [pc, #96]	; (8008700 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800869e:	4413      	add	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	461a      	mov	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a16      	ldr	r2, [pc, #88]	; (8008704 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80086ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f003 031f 	and.w	r3, r3, #31
 80086b4:	2201      	movs	r2, #1
 80086b6:	409a      	lsls	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	669a      	str	r2, [r3, #104]	; 0x68
}
 80086bc:	bf00      	nop
 80086be:	3714      	adds	r7, #20
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr
 80086c8:	58025408 	.word	0x58025408
 80086cc:	5802541c 	.word	0x5802541c
 80086d0:	58025430 	.word	0x58025430
 80086d4:	58025444 	.word	0x58025444
 80086d8:	58025458 	.word	0x58025458
 80086dc:	5802546c 	.word	0x5802546c
 80086e0:	58025480 	.word	0x58025480
 80086e4:	58025494 	.word	0x58025494
 80086e8:	cccccccd 	.word	0xcccccccd
 80086ec:	16009600 	.word	0x16009600
 80086f0:	58025880 	.word	0x58025880
 80086f4:	aaaaaaab 	.word	0xaaaaaaab
 80086f8:	400204b8 	.word	0x400204b8
 80086fc:	4002040f 	.word	0x4002040f
 8008700:	10008200 	.word	0x10008200
 8008704:	40020880 	.word	0x40020880

08008708 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	b2db      	uxtb	r3, r3
 8008716:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d04a      	beq.n	80087b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2b08      	cmp	r3, #8
 8008722:	d847      	bhi.n	80087b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a25      	ldr	r2, [pc, #148]	; (80087c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d022      	beq.n	8008774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a24      	ldr	r2, [pc, #144]	; (80087c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d01d      	beq.n	8008774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a22      	ldr	r2, [pc, #136]	; (80087c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d018      	beq.n	8008774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a21      	ldr	r2, [pc, #132]	; (80087cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d013      	beq.n	8008774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a1f      	ldr	r2, [pc, #124]	; (80087d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d00e      	beq.n	8008774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a1e      	ldr	r2, [pc, #120]	; (80087d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d009      	beq.n	8008774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a1c      	ldr	r2, [pc, #112]	; (80087d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d004      	beq.n	8008774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a1b      	ldr	r2, [pc, #108]	; (80087dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d101      	bne.n	8008778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008774:	2301      	movs	r3, #1
 8008776:	e000      	b.n	800877a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008778:	2300      	movs	r3, #0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00a      	beq.n	8008794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	4b17      	ldr	r3, [pc, #92]	; (80087e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008782:	4413      	add	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	461a      	mov	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a15      	ldr	r2, [pc, #84]	; (80087e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008790:	671a      	str	r2, [r3, #112]	; 0x70
 8008792:	e009      	b.n	80087a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	4b14      	ldr	r3, [pc, #80]	; (80087e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008798:	4413      	add	r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	461a      	mov	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a11      	ldr	r2, [pc, #68]	; (80087ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80087a6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	3b01      	subs	r3, #1
 80087ac:	2201      	movs	r2, #1
 80087ae:	409a      	lsls	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80087b4:	bf00      	nop
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr
 80087c0:	58025408 	.word	0x58025408
 80087c4:	5802541c 	.word	0x5802541c
 80087c8:	58025430 	.word	0x58025430
 80087cc:	58025444 	.word	0x58025444
 80087d0:	58025458 	.word	0x58025458
 80087d4:	5802546c 	.word	0x5802546c
 80087d8:	58025480 	.word	0x58025480
 80087dc:	58025494 	.word	0x58025494
 80087e0:	1600963f 	.word	0x1600963f
 80087e4:	58025940 	.word	0x58025940
 80087e8:	1000823f 	.word	0x1000823f
 80087ec:	40020940 	.word	0x40020940

080087f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d101      	bne.n	8008802 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e0cf      	b.n	80089a2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008808:	2b00      	cmp	r3, #0
 800880a:	d106      	bne.n	800881a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2223      	movs	r2, #35	; 0x23
 8008810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7fb f92b 	bl	8003a70 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800881a:	4b64      	ldr	r3, [pc, #400]	; (80089ac <HAL_ETH_Init+0x1bc>)
 800881c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008820:	4a62      	ldr	r2, [pc, #392]	; (80089ac <HAL_ETH_Init+0x1bc>)
 8008822:	f043 0302 	orr.w	r3, r3, #2
 8008826:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800882a:	4b60      	ldr	r3, [pc, #384]	; (80089ac <HAL_ETH_Init+0x1bc>)
 800882c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008830:	f003 0302 	and.w	r3, r3, #2
 8008834:	60bb      	str	r3, [r7, #8]
 8008836:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	7a1b      	ldrb	r3, [r3, #8]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d103      	bne.n	8008848 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8008840:	2000      	movs	r0, #0
 8008842:	f7fc fae3 	bl	8004e0c <HAL_SYSCFG_ETHInterfaceSelect>
 8008846:	e003      	b.n	8008850 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8008848:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800884c:	f7fc fade 	bl	8004e0c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8008850:	4b57      	ldr	r3, [pc, #348]	; (80089b0 <HAL_ETH_Init+0x1c0>)
 8008852:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	6812      	ldr	r2, [r2, #0]
 8008862:	f043 0301 	orr.w	r3, r3, #1
 8008866:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800886a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800886c:	f7fc fa92 	bl	8004d94 <HAL_GetTick>
 8008870:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8008872:	e011      	b.n	8008898 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8008874:	f7fc fa8e 	bl	8004d94 <HAL_GetTick>
 8008878:	4602      	mov	r2, r0
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008882:	d909      	bls.n	8008898 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2204      	movs	r2, #4
 8008888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	22e0      	movs	r2, #224	; 0xe0
 8008890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	e084      	b.n	80089a2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1e4      	bne.n	8008874 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f886 	bl	80089bc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80088b0:	f003 fc9c 	bl	800c1ec <HAL_RCC_GetHCLKFreq>
 80088b4:	4603      	mov	r3, r0
 80088b6:	4a3f      	ldr	r2, [pc, #252]	; (80089b4 <HAL_ETH_Init+0x1c4>)
 80088b8:	fba2 2303 	umull	r2, r3, r2, r3
 80088bc:	0c9a      	lsrs	r2, r3, #18
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	3a01      	subs	r2, #1
 80088c4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fa71 	bl	8008db0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80088da:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	6812      	ldr	r2, [r2, #0]
 80088e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80088ea:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	f003 0303 	and.w	r3, r3, #3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d009      	beq.n	800890e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	22e0      	movs	r2, #224	; 0xe0
 8008906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	e049      	b.n	80089a2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008916:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800891a:	4b27      	ldr	r3, [pc, #156]	; (80089b8 <HAL_ETH_Init+0x1c8>)
 800891c:	4013      	ands	r3, r2
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	6952      	ldr	r2, [r2, #20]
 8008922:	0051      	lsls	r1, r2, #1
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	6812      	ldr	r2, [r2, #0]
 8008928:	430b      	orrs	r3, r1
 800892a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800892e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fad9 	bl	8008eea <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fb1f 	bl	8008f7c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	3305      	adds	r3, #5
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	021a      	lsls	r2, r3, #8
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	3304      	adds	r3, #4
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	4619      	mov	r1, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	430a      	orrs	r2, r1
 8008958:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	3303      	adds	r3, #3
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	061a      	lsls	r2, r3, #24
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	3302      	adds	r3, #2
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	041b      	lsls	r3, r3, #16
 8008970:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	3301      	adds	r3, #1
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800897c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800898a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800898c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2210      	movs	r2, #16
 800899c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	58024400 	.word	0x58024400
 80089b0:	58000400 	.word	0x58000400
 80089b4:	431bde83 	.word	0x431bde83
 80089b8:	ffff8001 	.word	0xffff8001

080089bc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80089cc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80089d4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80089d6:	f003 fc09 	bl	800c1ec <HAL_RCC_GetHCLKFreq>
 80089da:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	4a1e      	ldr	r2, [pc, #120]	; (8008a58 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d908      	bls.n	80089f6 <HAL_ETH_SetMDIOClockRange+0x3a>
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	4a1d      	ldr	r2, [pc, #116]	; (8008a5c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d804      	bhi.n	80089f6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80089f2:	60fb      	str	r3, [r7, #12]
 80089f4:	e027      	b.n	8008a46 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	4a18      	ldr	r2, [pc, #96]	; (8008a5c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d908      	bls.n	8008a10 <HAL_ETH_SetMDIOClockRange+0x54>
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	4a17      	ldr	r2, [pc, #92]	; (8008a60 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d204      	bcs.n	8008a10 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008a0c:	60fb      	str	r3, [r7, #12]
 8008a0e:	e01a      	b.n	8008a46 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	4a13      	ldr	r2, [pc, #76]	; (8008a60 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d303      	bcc.n	8008a20 <HAL_ETH_SetMDIOClockRange+0x64>
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	4a12      	ldr	r2, [pc, #72]	; (8008a64 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d911      	bls.n	8008a44 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	4a10      	ldr	r2, [pc, #64]	; (8008a64 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d908      	bls.n	8008a3a <HAL_ETH_SetMDIOClockRange+0x7e>
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	4a0f      	ldr	r2, [pc, #60]	; (8008a68 <HAL_ETH_SetMDIOClockRange+0xac>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d804      	bhi.n	8008a3a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a36:	60fb      	str	r3, [r7, #12]
 8008a38:	e005      	b.n	8008a46 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a40:	60fb      	str	r3, [r7, #12]
 8008a42:	e000      	b.n	8008a46 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8008a44:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8008a50:	bf00      	nop
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	01312cff 	.word	0x01312cff
 8008a5c:	02160ebf 	.word	0x02160ebf
 8008a60:	03938700 	.word	0x03938700
 8008a64:	05f5e0ff 	.word	0x05f5e0ff
 8008a68:	08f0d17f 	.word	0x08f0d17f

08008a6c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8008a7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	791b      	ldrb	r3, [r3, #4]
 8008a84:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8008a86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	7b1b      	ldrb	r3, [r3, #12]
 8008a8c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8008a8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	7b5b      	ldrb	r3, [r3, #13]
 8008a94:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8008a96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	7b9b      	ldrb	r3, [r3, #14]
 8008a9c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8008a9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	7bdb      	ldrb	r3, [r3, #15]
 8008aa4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8008aa6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8008aa8:	683a      	ldr	r2, [r7, #0]
 8008aaa:	7c12      	ldrb	r2, [r2, #16]
 8008aac:	2a00      	cmp	r2, #0
 8008aae:	d102      	bne.n	8008ab6 <ETH_SetMACConfig+0x4a>
 8008ab0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008ab4:	e000      	b.n	8008ab8 <ETH_SetMACConfig+0x4c>
 8008ab6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8008ab8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	7c52      	ldrb	r2, [r2, #17]
 8008abe:	2a00      	cmp	r2, #0
 8008ac0:	d102      	bne.n	8008ac8 <ETH_SetMACConfig+0x5c>
 8008ac2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008ac6:	e000      	b.n	8008aca <ETH_SetMACConfig+0x5e>
 8008ac8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8008aca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	7c9b      	ldrb	r3, [r3, #18]
 8008ad0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8008ad2:	431a      	orrs	r2, r3
               macconf->Speed |
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8008ad8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8008ade:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	7f1b      	ldrb	r3, [r3, #28]
 8008ae4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8008ae6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	7f5b      	ldrb	r3, [r3, #29]
 8008aec:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8008aee:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	7f92      	ldrb	r2, [r2, #30]
 8008af4:	2a00      	cmp	r2, #0
 8008af6:	d102      	bne.n	8008afe <ETH_SetMACConfig+0x92>
 8008af8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008afc:	e000      	b.n	8008b00 <ETH_SetMACConfig+0x94>
 8008afe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8008b00:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	7fdb      	ldrb	r3, [r3, #31]
 8008b06:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8008b08:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008b10:	2a00      	cmp	r2, #0
 8008b12:	d102      	bne.n	8008b1a <ETH_SetMACConfig+0xae>
 8008b14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b18:	e000      	b.n	8008b1c <ETH_SetMACConfig+0xb0>
 8008b1a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8008b1c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8008b22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b2a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8008b2c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8008b32:	4313      	orrs	r3, r2
 8008b34:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	4b56      	ldr	r3, [pc, #344]	; (8008c98 <ETH_SetMACConfig+0x22c>)
 8008b3e:	4013      	ands	r3, r2
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	6812      	ldr	r2, [r2, #0]
 8008b44:	68f9      	ldr	r1, [r7, #12]
 8008b46:	430b      	orrs	r3, r1
 8008b48:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b4e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b56:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8008b58:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b60:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8008b62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008b6a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8008b6c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8008b74:	2a00      	cmp	r2, #0
 8008b76:	d102      	bne.n	8008b7e <ETH_SetMACConfig+0x112>
 8008b78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008b7c:	e000      	b.n	8008b80 <ETH_SetMACConfig+0x114>
 8008b7e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8008b80:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8008b86:	4313      	orrs	r3, r2
 8008b88:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	685a      	ldr	r2, [r3, #4]
 8008b90:	4b42      	ldr	r3, [pc, #264]	; (8008c9c <ETH_SetMACConfig+0x230>)
 8008b92:	4013      	ands	r3, r2
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	6812      	ldr	r2, [r2, #0]
 8008b98:	68f9      	ldr	r1, [r7, #12]
 8008b9a:	430b      	orrs	r3, r1
 8008b9c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ba4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8008baa:	4313      	orrs	r3, r2
 8008bac:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68da      	ldr	r2, [r3, #12]
 8008bb4:	4b3a      	ldr	r3, [pc, #232]	; (8008ca0 <ETH_SetMACConfig+0x234>)
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	6812      	ldr	r2, [r2, #0]
 8008bbc:	68f9      	ldr	r1, [r7, #12]
 8008bbe:	430b      	orrs	r3, r1
 8008bc0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008bc8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008bce:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8008bd0:	683a      	ldr	r2, [r7, #0]
 8008bd2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8008bd6:	2a00      	cmp	r2, #0
 8008bd8:	d101      	bne.n	8008bde <ETH_SetMACConfig+0x172>
 8008bda:	2280      	movs	r2, #128	; 0x80
 8008bdc:	e000      	b.n	8008be0 <ETH_SetMACConfig+0x174>
 8008bde:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8008be0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008be6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008be8:	4313      	orrs	r3, r2
 8008bea:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008bf2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	6812      	ldr	r2, [r2, #0]
 8008bfc:	68f9      	ldr	r1, [r7, #12]
 8008bfe:	430b      	orrs	r3, r1
 8008c00:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008c08:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8008c10:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8008c12:	4313      	orrs	r3, r2
 8008c14:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c1e:	f023 0103 	bic.w	r1, r3, #3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	430a      	orrs	r2, r1
 8008c2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8008c36:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	430a      	orrs	r2, r1
 8008c44:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8008c4c:	683a      	ldr	r2, [r7, #0]
 8008c4e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8008c52:	2a00      	cmp	r2, #0
 8008c54:	d101      	bne.n	8008c5a <ETH_SetMACConfig+0x1ee>
 8008c56:	2240      	movs	r2, #64	; 0x40
 8008c58:	e000      	b.n	8008c5c <ETH_SetMACConfig+0x1f0>
 8008c5a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8008c5c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008c64:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8008c66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008c6e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8008c70:	4313      	orrs	r3, r2
 8008c72:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8008c7c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	430a      	orrs	r2, r1
 8008c88:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8008c8c:	bf00      	nop
 8008c8e:	3714      	adds	r7, #20
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr
 8008c98:	00048083 	.word	0x00048083
 8008c9c:	c0f88000 	.word	0xc0f88000
 8008ca0:	fffffef0 	.word	0xfffffef0

08008ca4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	4b38      	ldr	r3, [pc, #224]	; (8008d9c <ETH_SetDMAConfig+0xf8>)
 8008cba:	4013      	ands	r3, r2
 8008cbc:	683a      	ldr	r2, [r7, #0]
 8008cbe:	6811      	ldr	r1, [r2, #0]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	6812      	ldr	r2, [r2, #0]
 8008cc4:	430b      	orrs	r3, r1
 8008cc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008cca:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	791b      	ldrb	r3, [r3, #4]
 8008cd0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008cd6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	7b1b      	ldrb	r3, [r3, #12]
 8008cdc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	4b2c      	ldr	r3, [pc, #176]	; (8008da0 <ETH_SetDMAConfig+0xfc>)
 8008cee:	4013      	ands	r3, r2
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	6812      	ldr	r2, [r2, #0]
 8008cf4:	68f9      	ldr	r1, [r7, #12]
 8008cf6:	430b      	orrs	r3, r1
 8008cf8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008cfc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	7b5b      	ldrb	r3, [r3, #13]
 8008d02:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d14:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8008d18:	4b22      	ldr	r3, [pc, #136]	; (8008da4 <ETH_SetDMAConfig+0x100>)
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	6812      	ldr	r2, [r2, #0]
 8008d20:	68f9      	ldr	r1, [r7, #12]
 8008d22:	430b      	orrs	r3, r1
 8008d24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d28:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	7d1b      	ldrb	r3, [r3, #20]
 8008d34:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8008d36:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	7f5b      	ldrb	r3, [r3, #29]
 8008d3c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d4a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8008d4e:	4b16      	ldr	r3, [pc, #88]	; (8008da8 <ETH_SetDMAConfig+0x104>)
 8008d50:	4013      	ands	r3, r2
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	6812      	ldr	r2, [r2, #0]
 8008d56:	68f9      	ldr	r1, [r7, #12]
 8008d58:	430b      	orrs	r3, r1
 8008d5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d5e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	7f1b      	ldrb	r3, [r3, #28]
 8008d66:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d78:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8008d7c:	4b0b      	ldr	r3, [pc, #44]	; (8008dac <ETH_SetDMAConfig+0x108>)
 8008d7e:	4013      	ands	r3, r2
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	6812      	ldr	r2, [r2, #0]
 8008d84:	68f9      	ldr	r1, [r7, #12]
 8008d86:	430b      	orrs	r3, r1
 8008d88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d8c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8008d90:	bf00      	nop
 8008d92:	3714      	adds	r7, #20
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	ffff87fd 	.word	0xffff87fd
 8008da0:	ffff2ffe 	.word	0xffff2ffe
 8008da4:	fffec000 	.word	0xfffec000
 8008da8:	ffc0efef 	.word	0xffc0efef
 8008dac:	7fc0ffff 	.word	0x7fc0ffff

08008db0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b0a4      	sub	sp, #144	; 0x90
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8008db8:	2301      	movs	r3, #1
 8008dba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8008de0:	2300      	movs	r3, #0
 8008de2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8008de6:	2301      	movs	r3, #1
 8008de8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8008dec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008df0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8008df2:	2300      	movs	r3, #0
 8008df4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8008e02:	2300      	movs	r3, #0
 8008e04:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8008e08:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8008e0c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8008e14:	2300      	movs	r3, #0
 8008e16:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8008e24:	2300      	movs	r3, #0
 8008e26:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8008e32:	2300      	movs	r3, #0
 8008e34:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8008e36:	2300      	movs	r3, #0
 8008e38:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8008e42:	2301      	movs	r3, #1
 8008e44:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8008e48:	2320      	movs	r3, #32
 8008e4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8008e54:	2300      	movs	r3, #0
 8008e56:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8008e5a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8008e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8008e60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008e64:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8008e66:	2300      	movs	r3, #0
 8008e68:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8008e72:	2300      	movs	r3, #0
 8008e74:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8008e84:	2301      	movs	r3, #1
 8008e86:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8008e94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e98:	4619      	mov	r1, r3
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f7ff fde6 	bl	8008a6c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8008eac:	2300      	movs	r3, #0
 8008eae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008eba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008ebe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008ec4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008ec8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8008ed0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8008ed4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8008ed6:	f107 0308 	add.w	r3, r7, #8
 8008eda:	4619      	mov	r1, r3
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f7ff fee1 	bl	8008ca4 <ETH_SetDMAConfig>
}
 8008ee2:	bf00      	nop
 8008ee4:	3790      	adds	r7, #144	; 0x90
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8008eea:	b480      	push	{r7}
 8008eec:	b085      	sub	sp, #20
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	60fb      	str	r3, [r7, #12]
 8008ef6:	e01d      	b.n	8008f34 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	68d9      	ldr	r1, [r3, #12]
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	4613      	mov	r3, r2
 8008f00:	005b      	lsls	r3, r3, #1
 8008f02:	4413      	add	r3, r2
 8008f04:	00db      	lsls	r3, r3, #3
 8008f06:	440b      	add	r3, r1
 8008f08:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	2200      	movs	r2, #0
 8008f14:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8008f22:	68b9      	ldr	r1, [r7, #8]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	3206      	adds	r2, #6
 8008f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	3301      	adds	r3, #1
 8008f32:	60fb      	str	r3, [r7, #12]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2b03      	cmp	r3, #3
 8008f38:	d9de      	bls.n	8008ef8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f48:	461a      	mov	r2, r3
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	68da      	ldr	r2, [r3, #12]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f5c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	68da      	ldr	r2, [r3, #12]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f6c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8008f70:	bf00      	nop
 8008f72:	3714      	adds	r7, #20
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008f84:	2300      	movs	r3, #0
 8008f86:	60fb      	str	r3, [r7, #12]
 8008f88:	e023      	b.n	8008fd2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6919      	ldr	r1, [r3, #16]
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	4613      	mov	r3, r2
 8008f92:	005b      	lsls	r3, r3, #1
 8008f94:	4413      	add	r3, r2
 8008f96:	00db      	lsls	r3, r3, #3
 8008f98:	440b      	add	r3, r1
 8008f9a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2200      	movs	r2, #0
 8008fac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8008fc0:	68b9      	ldr	r1, [r7, #8]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	3212      	adds	r2, #18
 8008fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	60fb      	str	r3, [r7, #12]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2b03      	cmp	r3, #3
 8008fd6:	d9d8      	bls.n	8008f8a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ffe:	461a      	mov	r2, r3
 8009000:	2303      	movs	r3, #3
 8009002:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	691a      	ldr	r2, [r3, #16]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009012:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009026:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800902a:	bf00      	nop
 800902c:	3714      	adds	r7, #20
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
	...

08009038 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b098      	sub	sp, #96	; 0x60
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8009040:	4a84      	ldr	r2, [pc, #528]	; (8009254 <HAL_FDCAN_Init+0x21c>)
 8009042:	f107 030c 	add.w	r3, r7, #12
 8009046:	4611      	mov	r1, r2
 8009048:	224c      	movs	r2, #76	; 0x4c
 800904a:	4618      	mov	r0, r3
 800904c:	f008 fdd6 	bl	8011bfc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	e1c6      	b.n	80093e8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a7e      	ldr	r2, [pc, #504]	; (8009258 <HAL_FDCAN_Init+0x220>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d106      	bne.n	8009072 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800906c:	461a      	mov	r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009078:	b2db      	uxtb	r3, r3
 800907a:	2b00      	cmp	r3, #0
 800907c:	d106      	bne.n	800908c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f7fa fe22 	bl	8003cd0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	699a      	ldr	r2, [r3, #24]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f022 0210 	bic.w	r2, r2, #16
 800909a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800909c:	f7fb fe7a 	bl	8004d94 <HAL_GetTick>
 80090a0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80090a2:	e014      	b.n	80090ce <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80090a4:	f7fb fe76 	bl	8004d94 <HAL_GetTick>
 80090a8:	4602      	mov	r2, r0
 80090aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	2b0a      	cmp	r3, #10
 80090b0:	d90d      	bls.n	80090ce <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80090b8:	f043 0201 	orr.w	r2, r3, #1
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2203      	movs	r2, #3
 80090c6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e18c      	b.n	80093e8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	f003 0308 	and.w	r3, r3, #8
 80090d8:	2b08      	cmp	r3, #8
 80090da:	d0e3      	beq.n	80090a4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	699a      	ldr	r2, [r3, #24]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f042 0201 	orr.w	r2, r2, #1
 80090ea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80090ec:	f7fb fe52 	bl	8004d94 <HAL_GetTick>
 80090f0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80090f2:	e014      	b.n	800911e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80090f4:	f7fb fe4e 	bl	8004d94 <HAL_GetTick>
 80090f8:	4602      	mov	r2, r0
 80090fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	2b0a      	cmp	r3, #10
 8009100:	d90d      	bls.n	800911e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009108:	f043 0201 	orr.w	r2, r3, #1
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2203      	movs	r2, #3
 8009116:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e164      	b.n	80093e8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	f003 0301 	and.w	r3, r3, #1
 8009128:	2b00      	cmp	r3, #0
 800912a:	d0e3      	beq.n	80090f4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	699a      	ldr	r2, [r3, #24]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f042 0202 	orr.w	r2, r2, #2
 800913a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	7c1b      	ldrb	r3, [r3, #16]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d108      	bne.n	8009156 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	699a      	ldr	r2, [r3, #24]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009152:	619a      	str	r2, [r3, #24]
 8009154:	e007      	b.n	8009166 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	699a      	ldr	r2, [r3, #24]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009164:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	7c5b      	ldrb	r3, [r3, #17]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d108      	bne.n	8009180 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	699a      	ldr	r2, [r3, #24]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800917c:	619a      	str	r2, [r3, #24]
 800917e:	e007      	b.n	8009190 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	699a      	ldr	r2, [r3, #24]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800918e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	7c9b      	ldrb	r3, [r3, #18]
 8009194:	2b01      	cmp	r3, #1
 8009196:	d108      	bne.n	80091aa <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	699a      	ldr	r2, [r3, #24]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80091a6:	619a      	str	r2, [r3, #24]
 80091a8:	e007      	b.n	80091ba <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	699a      	ldr	r2, [r3, #24]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80091b8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	689a      	ldr	r2, [r3, #8]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	430a      	orrs	r2, r1
 80091ce:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	699a      	ldr	r2, [r3, #24]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80091de:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	691a      	ldr	r2, [r3, #16]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f022 0210 	bic.w	r2, r2, #16
 80091ee:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d108      	bne.n	800920a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	699a      	ldr	r2, [r3, #24]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f042 0204 	orr.w	r2, r2, #4
 8009206:	619a      	str	r2, [r3, #24]
 8009208:	e030      	b.n	800926c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d02c      	beq.n	800926c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	2b02      	cmp	r3, #2
 8009218:	d020      	beq.n	800925c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	699a      	ldr	r2, [r3, #24]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009228:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	691a      	ldr	r2, [r3, #16]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f042 0210 	orr.w	r2, r2, #16
 8009238:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	2b03      	cmp	r3, #3
 8009240:	d114      	bne.n	800926c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	699a      	ldr	r2, [r3, #24]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f042 0220 	orr.w	r2, r2, #32
 8009250:	619a      	str	r2, [r3, #24]
 8009252:	e00b      	b.n	800926c <HAL_FDCAN_Init+0x234>
 8009254:	08012520 	.word	0x08012520
 8009258:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	699a      	ldr	r2, [r3, #24]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f042 0220 	orr.w	r2, r2, #32
 800926a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	699b      	ldr	r3, [r3, #24]
 8009270:	3b01      	subs	r3, #1
 8009272:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	69db      	ldr	r3, [r3, #28]
 8009278:	3b01      	subs	r3, #1
 800927a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800927c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009284:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	695b      	ldr	r3, [r3, #20]
 800928c:	3b01      	subs	r3, #1
 800928e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009294:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009296:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092a0:	d115      	bne.n	80092ce <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ac:	3b01      	subs	r3, #1
 80092ae:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80092b0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b6:	3b01      	subs	r3, #1
 80092b8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80092ba:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c2:	3b01      	subs	r3, #1
 80092c4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80092ca:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80092cc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00a      	beq.n	80092ec <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	430a      	orrs	r2, r1
 80092e8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092f4:	4413      	add	r3, r2
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d011      	beq.n	800931e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8009302:	f023 0107 	bic.w	r1, r3, #7
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	3360      	adds	r3, #96	; 0x60
 800930e:	443b      	add	r3, r7
 8009310:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	430a      	orrs	r2, r1
 800931a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009322:	2b00      	cmp	r3, #0
 8009324:	d011      	beq.n	800934a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800932e:	f023 0107 	bic.w	r1, r3, #7
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	3360      	adds	r3, #96	; 0x60
 800933a:	443b      	add	r3, r7
 800933c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	430a      	orrs	r2, r1
 8009346:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800934e:	2b00      	cmp	r3, #0
 8009350:	d012      	beq.n	8009378 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800935a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	3360      	adds	r3, #96	; 0x60
 8009366:	443b      	add	r3, r7
 8009368:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800936c:	011a      	lsls	r2, r3, #4
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	430a      	orrs	r2, r1
 8009374:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800937c:	2b00      	cmp	r3, #0
 800937e:	d012      	beq.n	80093a6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009388:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	3360      	adds	r3, #96	; 0x60
 8009394:	443b      	add	r3, r7
 8009396:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800939a:	021a      	lsls	r2, r3, #8
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	430a      	orrs	r2, r1
 80093a2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a11      	ldr	r2, [pc, #68]	; (80093f0 <HAL_FDCAN_Init+0x3b8>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d107      	bne.n	80093c0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	689a      	ldr	r2, [r3, #8]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	f022 0203 	bic.w	r2, r2, #3
 80093be:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f80b 	bl	80093f4 <FDCAN_CalcultateRamBlockAddresses>
 80093de:	4603      	mov	r3, r0
 80093e0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80093e4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3760      	adds	r7, #96	; 0x60
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	4000a000 	.word	0x4000a000

080093f4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009400:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800940a:	4ba7      	ldr	r3, [pc, #668]	; (80096a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800940c:	4013      	ands	r3, r2
 800940e:	68ba      	ldr	r2, [r7, #8]
 8009410:	0091      	lsls	r1, r2, #2
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	6812      	ldr	r2, [r2, #0]
 8009416:	430b      	orrs	r3, r1
 8009418:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009424:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942c:	041a      	lsls	r2, r3, #16
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	430a      	orrs	r2, r1
 8009434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	4413      	add	r3, r2
 8009440:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800944a:	4b97      	ldr	r3, [pc, #604]	; (80096a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800944c:	4013      	ands	r3, r2
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	0091      	lsls	r1, r2, #2
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	6812      	ldr	r2, [r2, #0]
 8009456:	430b      	orrs	r3, r1
 8009458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009464:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800946c:	041a      	lsls	r2, r3, #16
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	430a      	orrs	r2, r1
 8009474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800947c:	005b      	lsls	r3, r3, #1
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	4413      	add	r3, r2
 8009482:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800948c:	4b86      	ldr	r3, [pc, #536]	; (80096a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800948e:	4013      	ands	r3, r2
 8009490:	68ba      	ldr	r2, [r7, #8]
 8009492:	0091      	lsls	r1, r2, #2
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	6812      	ldr	r2, [r2, #0]
 8009498:	430b      	orrs	r3, r1
 800949a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80094a6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ae:	041a      	lsls	r2, r3, #16
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	430a      	orrs	r2, r1
 80094b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80094c2:	fb02 f303 	mul.w	r3, r2, r3
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	4413      	add	r3, r2
 80094ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80094d4:	4b74      	ldr	r3, [pc, #464]	; (80096a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80094d6:	4013      	ands	r3, r2
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	0091      	lsls	r1, r2, #2
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	6812      	ldr	r2, [r2, #0]
 80094e0:	430b      	orrs	r3, r1
 80094e2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80094ee:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094f6:	041a      	lsls	r2, r3, #16
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	430a      	orrs	r2, r1
 80094fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800950a:	fb02 f303 	mul.w	r3, r2, r3
 800950e:	68ba      	ldr	r2, [r7, #8]
 8009510:	4413      	add	r3, r2
 8009512:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800951c:	4b62      	ldr	r3, [pc, #392]	; (80096a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800951e:	4013      	ands	r3, r2
 8009520:	68ba      	ldr	r2, [r7, #8]
 8009522:	0091      	lsls	r1, r2, #2
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	6812      	ldr	r2, [r2, #0]
 8009528:	430b      	orrs	r3, r1
 800952a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009536:	fb02 f303 	mul.w	r3, r2, r3
 800953a:	68ba      	ldr	r2, [r7, #8]
 800953c:	4413      	add	r3, r2
 800953e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8009548:	4b57      	ldr	r3, [pc, #348]	; (80096a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800954a:	4013      	ands	r3, r2
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	0091      	lsls	r1, r2, #2
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	6812      	ldr	r2, [r2, #0]
 8009554:	430b      	orrs	r3, r1
 8009556:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009562:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800956a:	041a      	lsls	r2, r3, #16
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	430a      	orrs	r2, r1
 8009572:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800957a:	005b      	lsls	r3, r3, #1
 800957c:	68ba      	ldr	r2, [r7, #8]
 800957e:	4413      	add	r3, r2
 8009580:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800958a:	4b47      	ldr	r3, [pc, #284]	; (80096a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800958c:	4013      	ands	r3, r2
 800958e:	68ba      	ldr	r2, [r7, #8]
 8009590:	0091      	lsls	r1, r2, #2
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	6812      	ldr	r2, [r2, #0]
 8009596:	430b      	orrs	r3, r1
 8009598:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80095a4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095ac:	041a      	lsls	r2, r3, #16
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	430a      	orrs	r2, r1
 80095b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80095c0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095c8:	061a      	lsls	r2, r3, #24
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	430a      	orrs	r2, r1
 80095d0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095d8:	4b34      	ldr	r3, [pc, #208]	; (80096ac <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80095da:	4413      	add	r3, r2
 80095dc:	009a      	lsls	r2, r3, #2
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	441a      	add	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095fa:	00db      	lsls	r3, r3, #3
 80095fc:	441a      	add	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960a:	6879      	ldr	r1, [r7, #4]
 800960c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800960e:	fb01 f303 	mul.w	r3, r1, r3
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	441a      	add	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009622:	6879      	ldr	r1, [r7, #4]
 8009624:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8009626:	fb01 f303 	mul.w	r3, r1, r3
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	441a      	add	r2, r3
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800963a:	6879      	ldr	r1, [r7, #4]
 800963c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800963e:	fb01 f303 	mul.w	r3, r1, r3
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	441a      	add	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009656:	00db      	lsls	r3, r3, #3
 8009658:	441a      	add	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800966a:	6879      	ldr	r1, [r7, #4]
 800966c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800966e:	fb01 f303 	mul.w	r3, r1, r3
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	441a      	add	r2, r3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009686:	6879      	ldr	r1, [r7, #4]
 8009688:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800968a:	fb01 f303 	mul.w	r3, r1, r3
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	441a      	add	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800969e:	4a04      	ldr	r2, [pc, #16]	; (80096b0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d915      	bls.n	80096d0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80096a4:	e006      	b.n	80096b4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80096a6:	bf00      	nop
 80096a8:	ffff0003 	.word	0xffff0003
 80096ac:	10002b00 	.word	0x10002b00
 80096b0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80096ba:	f043 0220 	orr.w	r2, r3, #32
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2203      	movs	r2, #3
 80096c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	e010      	b.n	80096f2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096d4:	60fb      	str	r3, [r7, #12]
 80096d6:	e005      	b.n	80096e4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3304      	adds	r3, #4
 80096e2:	60fb      	str	r3, [r7, #12]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d3f3      	bcc.n	80096d8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3714      	adds	r7, #20
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop

08009700 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009700:	b480      	push	{r7}
 8009702:	b089      	sub	sp, #36	; 0x24
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800970a:	2300      	movs	r3, #0
 800970c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800970e:	4b89      	ldr	r3, [pc, #548]	; (8009934 <HAL_GPIO_Init+0x234>)
 8009710:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009712:	e194      	b.n	8009a3e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	2101      	movs	r1, #1
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	fa01 f303 	lsl.w	r3, r1, r3
 8009720:	4013      	ands	r3, r2
 8009722:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	2b00      	cmp	r3, #0
 8009728:	f000 8186 	beq.w	8009a38 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	f003 0303 	and.w	r3, r3, #3
 8009734:	2b01      	cmp	r3, #1
 8009736:	d005      	beq.n	8009744 <HAL_GPIO_Init+0x44>
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	f003 0303 	and.w	r3, r3, #3
 8009740:	2b02      	cmp	r3, #2
 8009742:	d130      	bne.n	80097a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	005b      	lsls	r3, r3, #1
 800974e:	2203      	movs	r2, #3
 8009750:	fa02 f303 	lsl.w	r3, r2, r3
 8009754:	43db      	mvns	r3, r3
 8009756:	69ba      	ldr	r2, [r7, #24]
 8009758:	4013      	ands	r3, r2
 800975a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	68da      	ldr	r2, [r3, #12]
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	005b      	lsls	r3, r3, #1
 8009764:	fa02 f303 	lsl.w	r3, r2, r3
 8009768:	69ba      	ldr	r2, [r7, #24]
 800976a:	4313      	orrs	r3, r2
 800976c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	69ba      	ldr	r2, [r7, #24]
 8009772:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800977a:	2201      	movs	r2, #1
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	fa02 f303 	lsl.w	r3, r2, r3
 8009782:	43db      	mvns	r3, r3
 8009784:	69ba      	ldr	r2, [r7, #24]
 8009786:	4013      	ands	r3, r2
 8009788:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	091b      	lsrs	r3, r3, #4
 8009790:	f003 0201 	and.w	r2, r3, #1
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	fa02 f303 	lsl.w	r3, r2, r3
 800979a:	69ba      	ldr	r2, [r7, #24]
 800979c:	4313      	orrs	r3, r2
 800979e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	69ba      	ldr	r2, [r7, #24]
 80097a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	f003 0303 	and.w	r3, r3, #3
 80097ae:	2b03      	cmp	r3, #3
 80097b0:	d017      	beq.n	80097e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	005b      	lsls	r3, r3, #1
 80097bc:	2203      	movs	r2, #3
 80097be:	fa02 f303 	lsl.w	r3, r2, r3
 80097c2:	43db      	mvns	r3, r3
 80097c4:	69ba      	ldr	r2, [r7, #24]
 80097c6:	4013      	ands	r3, r2
 80097c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	689a      	ldr	r2, [r3, #8]
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	005b      	lsls	r3, r3, #1
 80097d2:	fa02 f303 	lsl.w	r3, r2, r3
 80097d6:	69ba      	ldr	r2, [r7, #24]
 80097d8:	4313      	orrs	r3, r2
 80097da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	69ba      	ldr	r2, [r7, #24]
 80097e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	f003 0303 	and.w	r3, r3, #3
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	d123      	bne.n	8009836 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	08da      	lsrs	r2, r3, #3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	3208      	adds	r2, #8
 80097f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	f003 0307 	and.w	r3, r3, #7
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	220f      	movs	r2, #15
 8009806:	fa02 f303 	lsl.w	r3, r2, r3
 800980a:	43db      	mvns	r3, r3
 800980c:	69ba      	ldr	r2, [r7, #24]
 800980e:	4013      	ands	r3, r2
 8009810:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	691a      	ldr	r2, [r3, #16]
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	f003 0307 	and.w	r3, r3, #7
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	fa02 f303 	lsl.w	r3, r2, r3
 8009822:	69ba      	ldr	r2, [r7, #24]
 8009824:	4313      	orrs	r3, r2
 8009826:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	08da      	lsrs	r2, r3, #3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	3208      	adds	r2, #8
 8009830:	69b9      	ldr	r1, [r7, #24]
 8009832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	005b      	lsls	r3, r3, #1
 8009840:	2203      	movs	r2, #3
 8009842:	fa02 f303 	lsl.w	r3, r2, r3
 8009846:	43db      	mvns	r3, r3
 8009848:	69ba      	ldr	r2, [r7, #24]
 800984a:	4013      	ands	r3, r2
 800984c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	f003 0203 	and.w	r2, r3, #3
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	005b      	lsls	r3, r3, #1
 800985a:	fa02 f303 	lsl.w	r3, r2, r3
 800985e:	69ba      	ldr	r2, [r7, #24]
 8009860:	4313      	orrs	r3, r2
 8009862:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	69ba      	ldr	r2, [r7, #24]
 8009868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009872:	2b00      	cmp	r3, #0
 8009874:	f000 80e0 	beq.w	8009a38 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009878:	4b2f      	ldr	r3, [pc, #188]	; (8009938 <HAL_GPIO_Init+0x238>)
 800987a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800987e:	4a2e      	ldr	r2, [pc, #184]	; (8009938 <HAL_GPIO_Init+0x238>)
 8009880:	f043 0302 	orr.w	r3, r3, #2
 8009884:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009888:	4b2b      	ldr	r3, [pc, #172]	; (8009938 <HAL_GPIO_Init+0x238>)
 800988a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	60fb      	str	r3, [r7, #12]
 8009894:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009896:	4a29      	ldr	r2, [pc, #164]	; (800993c <HAL_GPIO_Init+0x23c>)
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	089b      	lsrs	r3, r3, #2
 800989c:	3302      	adds	r3, #2
 800989e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	f003 0303 	and.w	r3, r3, #3
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	220f      	movs	r2, #15
 80098ae:	fa02 f303 	lsl.w	r3, r2, r3
 80098b2:	43db      	mvns	r3, r3
 80098b4:	69ba      	ldr	r2, [r7, #24]
 80098b6:	4013      	ands	r3, r2
 80098b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a20      	ldr	r2, [pc, #128]	; (8009940 <HAL_GPIO_Init+0x240>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d052      	beq.n	8009968 <HAL_GPIO_Init+0x268>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a1f      	ldr	r2, [pc, #124]	; (8009944 <HAL_GPIO_Init+0x244>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d031      	beq.n	800992e <HAL_GPIO_Init+0x22e>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a1e      	ldr	r2, [pc, #120]	; (8009948 <HAL_GPIO_Init+0x248>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d02b      	beq.n	800992a <HAL_GPIO_Init+0x22a>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a1d      	ldr	r2, [pc, #116]	; (800994c <HAL_GPIO_Init+0x24c>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d025      	beq.n	8009926 <HAL_GPIO_Init+0x226>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a1c      	ldr	r2, [pc, #112]	; (8009950 <HAL_GPIO_Init+0x250>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d01f      	beq.n	8009922 <HAL_GPIO_Init+0x222>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a1b      	ldr	r2, [pc, #108]	; (8009954 <HAL_GPIO_Init+0x254>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d019      	beq.n	800991e <HAL_GPIO_Init+0x21e>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a1a      	ldr	r2, [pc, #104]	; (8009958 <HAL_GPIO_Init+0x258>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d013      	beq.n	800991a <HAL_GPIO_Init+0x21a>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a19      	ldr	r2, [pc, #100]	; (800995c <HAL_GPIO_Init+0x25c>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d00d      	beq.n	8009916 <HAL_GPIO_Init+0x216>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a18      	ldr	r2, [pc, #96]	; (8009960 <HAL_GPIO_Init+0x260>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d007      	beq.n	8009912 <HAL_GPIO_Init+0x212>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a17      	ldr	r2, [pc, #92]	; (8009964 <HAL_GPIO_Init+0x264>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d101      	bne.n	800990e <HAL_GPIO_Init+0x20e>
 800990a:	2309      	movs	r3, #9
 800990c:	e02d      	b.n	800996a <HAL_GPIO_Init+0x26a>
 800990e:	230a      	movs	r3, #10
 8009910:	e02b      	b.n	800996a <HAL_GPIO_Init+0x26a>
 8009912:	2308      	movs	r3, #8
 8009914:	e029      	b.n	800996a <HAL_GPIO_Init+0x26a>
 8009916:	2307      	movs	r3, #7
 8009918:	e027      	b.n	800996a <HAL_GPIO_Init+0x26a>
 800991a:	2306      	movs	r3, #6
 800991c:	e025      	b.n	800996a <HAL_GPIO_Init+0x26a>
 800991e:	2305      	movs	r3, #5
 8009920:	e023      	b.n	800996a <HAL_GPIO_Init+0x26a>
 8009922:	2304      	movs	r3, #4
 8009924:	e021      	b.n	800996a <HAL_GPIO_Init+0x26a>
 8009926:	2303      	movs	r3, #3
 8009928:	e01f      	b.n	800996a <HAL_GPIO_Init+0x26a>
 800992a:	2302      	movs	r3, #2
 800992c:	e01d      	b.n	800996a <HAL_GPIO_Init+0x26a>
 800992e:	2301      	movs	r3, #1
 8009930:	e01b      	b.n	800996a <HAL_GPIO_Init+0x26a>
 8009932:	bf00      	nop
 8009934:	58000080 	.word	0x58000080
 8009938:	58024400 	.word	0x58024400
 800993c:	58000400 	.word	0x58000400
 8009940:	58020000 	.word	0x58020000
 8009944:	58020400 	.word	0x58020400
 8009948:	58020800 	.word	0x58020800
 800994c:	58020c00 	.word	0x58020c00
 8009950:	58021000 	.word	0x58021000
 8009954:	58021400 	.word	0x58021400
 8009958:	58021800 	.word	0x58021800
 800995c:	58021c00 	.word	0x58021c00
 8009960:	58022000 	.word	0x58022000
 8009964:	58022400 	.word	0x58022400
 8009968:	2300      	movs	r3, #0
 800996a:	69fa      	ldr	r2, [r7, #28]
 800996c:	f002 0203 	and.w	r2, r2, #3
 8009970:	0092      	lsls	r2, r2, #2
 8009972:	4093      	lsls	r3, r2
 8009974:	69ba      	ldr	r2, [r7, #24]
 8009976:	4313      	orrs	r3, r2
 8009978:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800997a:	4938      	ldr	r1, [pc, #224]	; (8009a5c <HAL_GPIO_Init+0x35c>)
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	089b      	lsrs	r3, r3, #2
 8009980:	3302      	adds	r3, #2
 8009982:	69ba      	ldr	r2, [r7, #24]
 8009984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	43db      	mvns	r3, r3
 8009994:	69ba      	ldr	r2, [r7, #24]
 8009996:	4013      	ands	r3, r2
 8009998:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d003      	beq.n	80099ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80099a6:	69ba      	ldr	r2, [r7, #24]
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	4313      	orrs	r3, r2
 80099ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80099ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80099b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	43db      	mvns	r3, r3
 80099c2:	69ba      	ldr	r2, [r7, #24]
 80099c4:	4013      	ands	r3, r2
 80099c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d003      	beq.n	80099dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80099d4:	69ba      	ldr	r2, [r7, #24]
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	4313      	orrs	r3, r2
 80099da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80099dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	43db      	mvns	r3, r3
 80099ee:	69ba      	ldr	r2, [r7, #24]
 80099f0:	4013      	ands	r3, r2
 80099f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d003      	beq.n	8009a08 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009a00:	69ba      	ldr	r2, [r7, #24]
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	4313      	orrs	r3, r2
 8009a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	69ba      	ldr	r2, [r7, #24]
 8009a0c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	43db      	mvns	r3, r3
 8009a18:	69ba      	ldr	r2, [r7, #24]
 8009a1a:	4013      	ands	r3, r2
 8009a1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d003      	beq.n	8009a32 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009a2a:	69ba      	ldr	r2, [r7, #24]
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	69ba      	ldr	r2, [r7, #24]
 8009a36:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	fa22 f303 	lsr.w	r3, r2, r3
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f47f ae63 	bne.w	8009714 <HAL_GPIO_Init+0x14>
  }
}
 8009a4e:	bf00      	nop
 8009a50:	bf00      	nop
 8009a52:	3724      	adds	r7, #36	; 0x24
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr
 8009a5c:	58000400 	.word	0x58000400

08009a60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	691a      	ldr	r2, [r3, #16]
 8009a70:	887b      	ldrh	r3, [r7, #2]
 8009a72:	4013      	ands	r3, r2
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d002      	beq.n	8009a7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	73fb      	strb	r3, [r7, #15]
 8009a7c:	e001      	b.n	8009a82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3714      	adds	r7, #20
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	460b      	mov	r3, r1
 8009a9a:	807b      	strh	r3, [r7, #2]
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009aa0:	787b      	ldrb	r3, [r7, #1]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d003      	beq.n	8009aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009aa6:	887a      	ldrh	r2, [r7, #2]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009aac:	e003      	b.n	8009ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009aae:	887b      	ldrh	r3, [r7, #2]
 8009ab0:	041a      	lsls	r2, r3, #16
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	619a      	str	r2, [r3, #24]
}
 8009ab6:	bf00      	nop
 8009ab8:	370c      	adds	r7, #12
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr
	...

08009ac4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d101      	bne.n	8009ad6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e07f      	b.n	8009bd6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d106      	bne.n	8009af0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7fa f9c0 	bl	8003e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2224      	movs	r2, #36	; 0x24
 8009af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f022 0201 	bic.w	r2, r2, #1
 8009b06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	685a      	ldr	r2, [r3, #4]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009b14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	689a      	ldr	r2, [r3, #8]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009b24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d107      	bne.n	8009b3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	689a      	ldr	r2, [r3, #8]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b3a:	609a      	str	r2, [r3, #8]
 8009b3c:	e006      	b.n	8009b4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	689a      	ldr	r2, [r3, #8]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009b4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d104      	bne.n	8009b5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	6859      	ldr	r1, [r3, #4]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	4b1d      	ldr	r3, [pc, #116]	; (8009be0 <HAL_I2C_Init+0x11c>)
 8009b6a:	430b      	orrs	r3, r1
 8009b6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	68da      	ldr	r2, [r3, #12]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009b7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	691a      	ldr	r2, [r3, #16]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	695b      	ldr	r3, [r3, #20]
 8009b86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	699b      	ldr	r3, [r3, #24]
 8009b8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	430a      	orrs	r2, r1
 8009b96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	69d9      	ldr	r1, [r3, #28]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6a1a      	ldr	r2, [r3, #32]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	430a      	orrs	r2, r1
 8009ba6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f042 0201 	orr.w	r2, r2, #1
 8009bb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2220      	movs	r2, #32
 8009bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3708      	adds	r7, #8
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	02008000 	.word	0x02008000

08009be4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b088      	sub	sp, #32
 8009be8:	af02      	add	r7, sp, #8
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	4608      	mov	r0, r1
 8009bee:	4611      	mov	r1, r2
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	817b      	strh	r3, [r7, #10]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	813b      	strh	r3, [r7, #8]
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	2b20      	cmp	r3, #32
 8009c08:	f040 80f9 	bne.w	8009dfe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c0c:	6a3b      	ldr	r3, [r7, #32]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d002      	beq.n	8009c18 <HAL_I2C_Mem_Write+0x34>
 8009c12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d105      	bne.n	8009c24 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	e0ed      	b.n	8009e00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d101      	bne.n	8009c32 <HAL_I2C_Mem_Write+0x4e>
 8009c2e:	2302      	movs	r3, #2
 8009c30:	e0e6      	b.n	8009e00 <HAL_I2C_Mem_Write+0x21c>
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009c3a:	f7fb f8ab 	bl	8004d94 <HAL_GetTick>
 8009c3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	2319      	movs	r3, #25
 8009c46:	2201      	movs	r2, #1
 8009c48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f000 fbcb 	bl	800a3e8 <I2C_WaitOnFlagUntilTimeout>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d001      	beq.n	8009c5c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e0d1      	b.n	8009e00 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2221      	movs	r2, #33	; 0x21
 8009c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2240      	movs	r2, #64	; 0x40
 8009c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6a3a      	ldr	r2, [r7, #32]
 8009c76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2200      	movs	r2, #0
 8009c82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009c84:	88f8      	ldrh	r0, [r7, #6]
 8009c86:	893a      	ldrh	r2, [r7, #8]
 8009c88:	8979      	ldrh	r1, [r7, #10]
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	9301      	str	r3, [sp, #4]
 8009c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	4603      	mov	r3, r0
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f000 fadb 	bl	800a250 <I2C_RequestMemoryWrite>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d005      	beq.n	8009cac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e0a9      	b.n	8009e00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	2bff      	cmp	r3, #255	; 0xff
 8009cb4:	d90e      	bls.n	8009cd4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	22ff      	movs	r2, #255	; 0xff
 8009cba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cc0:	b2da      	uxtb	r2, r3
 8009cc2:	8979      	ldrh	r1, [r7, #10]
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	9300      	str	r3, [sp, #0]
 8009cc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ccc:	68f8      	ldr	r0, [r7, #12]
 8009cce:	f000 fd45 	bl	800a75c <I2C_TransferConfig>
 8009cd2:	e00f      	b.n	8009cf4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cd8:	b29a      	uxth	r2, r3
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ce2:	b2da      	uxtb	r2, r3
 8009ce4:	8979      	ldrh	r1, [r7, #10]
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	9300      	str	r3, [sp, #0]
 8009cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	f000 fd34 	bl	800a75c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009cf4:	697a      	ldr	r2, [r7, #20]
 8009cf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f000 fbc4 	bl	800a486 <I2C_WaitOnTXISFlagUntilTimeout>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d001      	beq.n	8009d08 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	e07b      	b.n	8009e00 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0c:	781a      	ldrb	r2, [r3, #0]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d18:	1c5a      	adds	r2, r3, #1
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	3b01      	subs	r3, #1
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d30:	3b01      	subs	r3, #1
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d034      	beq.n	8009dac <HAL_I2C_Mem_Write+0x1c8>
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d130      	bne.n	8009dac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d50:	2200      	movs	r2, #0
 8009d52:	2180      	movs	r1, #128	; 0x80
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f000 fb47 	bl	800a3e8 <I2C_WaitOnFlagUntilTimeout>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	e04d      	b.n	8009e00 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	2bff      	cmp	r3, #255	; 0xff
 8009d6c:	d90e      	bls.n	8009d8c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	22ff      	movs	r2, #255	; 0xff
 8009d72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d78:	b2da      	uxtb	r2, r3
 8009d7a:	8979      	ldrh	r1, [r7, #10]
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d84:	68f8      	ldr	r0, [r7, #12]
 8009d86:	f000 fce9 	bl	800a75c <I2C_TransferConfig>
 8009d8a:	e00f      	b.n	8009dac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d9a:	b2da      	uxtb	r2, r3
 8009d9c:	8979      	ldrh	r1, [r7, #10]
 8009d9e:	2300      	movs	r3, #0
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f000 fcd8 	bl	800a75c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d19e      	bne.n	8009cf4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009db6:	697a      	ldr	r2, [r7, #20]
 8009db8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f000 fbaa 	bl	800a514 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d001      	beq.n	8009dca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e01a      	b.n	8009e00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2220      	movs	r2, #32
 8009dd0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	6859      	ldr	r1, [r3, #4]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	4b0a      	ldr	r3, [pc, #40]	; (8009e08 <HAL_I2C_Mem_Write+0x224>)
 8009dde:	400b      	ands	r3, r1
 8009de0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2220      	movs	r2, #32
 8009de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	e000      	b.n	8009e00 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009dfe:	2302      	movs	r3, #2
  }
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3718      	adds	r7, #24
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	fe00e800 	.word	0xfe00e800

08009e0c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b088      	sub	sp, #32
 8009e10:	af02      	add	r7, sp, #8
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	4608      	mov	r0, r1
 8009e16:	4611      	mov	r1, r2
 8009e18:	461a      	mov	r2, r3
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	817b      	strh	r3, [r7, #10]
 8009e1e:	460b      	mov	r3, r1
 8009e20:	813b      	strh	r3, [r7, #8]
 8009e22:	4613      	mov	r3, r2
 8009e24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	2b20      	cmp	r3, #32
 8009e30:	f040 80fd 	bne.w	800a02e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e34:	6a3b      	ldr	r3, [r7, #32]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d002      	beq.n	8009e40 <HAL_I2C_Mem_Read+0x34>
 8009e3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d105      	bne.n	8009e4c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e0f1      	b.n	800a030 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d101      	bne.n	8009e5a <HAL_I2C_Mem_Read+0x4e>
 8009e56:	2302      	movs	r3, #2
 8009e58:	e0ea      	b.n	800a030 <HAL_I2C_Mem_Read+0x224>
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009e62:	f7fa ff97 	bl	8004d94 <HAL_GetTick>
 8009e66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	9300      	str	r3, [sp, #0]
 8009e6c:	2319      	movs	r3, #25
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009e74:	68f8      	ldr	r0, [r7, #12]
 8009e76:	f000 fab7 	bl	800a3e8 <I2C_WaitOnFlagUntilTimeout>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d001      	beq.n	8009e84 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	e0d5      	b.n	800a030 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2222      	movs	r2, #34	; 0x22
 8009e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2240      	movs	r2, #64	; 0x40
 8009e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6a3a      	ldr	r2, [r7, #32]
 8009e9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009eac:	88f8      	ldrh	r0, [r7, #6]
 8009eae:	893a      	ldrh	r2, [r7, #8]
 8009eb0:	8979      	ldrh	r1, [r7, #10]
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	9301      	str	r3, [sp, #4]
 8009eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb8:	9300      	str	r3, [sp, #0]
 8009eba:	4603      	mov	r3, r0
 8009ebc:	68f8      	ldr	r0, [r7, #12]
 8009ebe:	f000 fa1b 	bl	800a2f8 <I2C_RequestMemoryRead>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d005      	beq.n	8009ed4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e0ad      	b.n	800a030 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	2bff      	cmp	r3, #255	; 0xff
 8009edc:	d90e      	bls.n	8009efc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	22ff      	movs	r2, #255	; 0xff
 8009ee2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ee8:	b2da      	uxtb	r2, r3
 8009eea:	8979      	ldrh	r1, [r7, #10]
 8009eec:	4b52      	ldr	r3, [pc, #328]	; (800a038 <HAL_I2C_Mem_Read+0x22c>)
 8009eee:	9300      	str	r3, [sp, #0]
 8009ef0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f000 fc31 	bl	800a75c <I2C_TransferConfig>
 8009efa:	e00f      	b.n	8009f1c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f00:	b29a      	uxth	r2, r3
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f0a:	b2da      	uxtb	r2, r3
 8009f0c:	8979      	ldrh	r1, [r7, #10]
 8009f0e:	4b4a      	ldr	r3, [pc, #296]	; (800a038 <HAL_I2C_Mem_Read+0x22c>)
 8009f10:	9300      	str	r3, [sp, #0]
 8009f12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f000 fc20 	bl	800a75c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	9300      	str	r3, [sp, #0]
 8009f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f22:	2200      	movs	r2, #0
 8009f24:	2104      	movs	r1, #4
 8009f26:	68f8      	ldr	r0, [r7, #12]
 8009f28:	f000 fa5e 	bl	800a3e8 <I2C_WaitOnFlagUntilTimeout>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d001      	beq.n	8009f36 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e07c      	b.n	800a030 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f40:	b2d2      	uxtb	r2, r2
 8009f42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f48:	1c5a      	adds	r2, r3, #1
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f52:	3b01      	subs	r3, #1
 8009f54:	b29a      	uxth	r2, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	3b01      	subs	r3, #1
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d034      	beq.n	8009fdc <HAL_I2C_Mem_Read+0x1d0>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d130      	bne.n	8009fdc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	9300      	str	r3, [sp, #0]
 8009f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f80:	2200      	movs	r2, #0
 8009f82:	2180      	movs	r1, #128	; 0x80
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f000 fa2f 	bl	800a3e8 <I2C_WaitOnFlagUntilTimeout>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d001      	beq.n	8009f94 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009f90:	2301      	movs	r3, #1
 8009f92:	e04d      	b.n	800a030 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	2bff      	cmp	r3, #255	; 0xff
 8009f9c:	d90e      	bls.n	8009fbc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	22ff      	movs	r2, #255	; 0xff
 8009fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fa8:	b2da      	uxtb	r2, r3
 8009faa:	8979      	ldrh	r1, [r7, #10]
 8009fac:	2300      	movs	r3, #0
 8009fae:	9300      	str	r3, [sp, #0]
 8009fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f000 fbd1 	bl	800a75c <I2C_TransferConfig>
 8009fba:	e00f      	b.n	8009fdc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fc0:	b29a      	uxth	r2, r3
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fca:	b2da      	uxtb	r2, r3
 8009fcc:	8979      	ldrh	r1, [r7, #10]
 8009fce:	2300      	movs	r3, #0
 8009fd0:	9300      	str	r3, [sp, #0]
 8009fd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f000 fbc0 	bl	800a75c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d19a      	bne.n	8009f1c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009fe6:	697a      	ldr	r2, [r7, #20]
 8009fe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f000 fa92 	bl	800a514 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d001      	beq.n	8009ffa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e01a      	b.n	800a030 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2220      	movs	r2, #32
 800a000:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	6859      	ldr	r1, [r3, #4]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	4b0b      	ldr	r3, [pc, #44]	; (800a03c <HAL_I2C_Mem_Read+0x230>)
 800a00e:	400b      	ands	r3, r1
 800a010:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2220      	movs	r2, #32
 800a016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	e000      	b.n	800a030 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a02e:	2302      	movs	r3, #2
  }
}
 800a030:	4618      	mov	r0, r3
 800a032:	3718      	adds	r7, #24
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	80002400 	.word	0x80002400
 800a03c:	fe00e800 	.word	0xfe00e800

0800a040 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b08a      	sub	sp, #40	; 0x28
 800a044:	af02      	add	r7, sp, #8
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	607a      	str	r2, [r7, #4]
 800a04a:	603b      	str	r3, [r7, #0]
 800a04c:	460b      	mov	r3, r1
 800a04e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800a050:	2300      	movs	r3, #0
 800a052:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	2b20      	cmp	r3, #32
 800a05e:	f040 80ef 	bne.w	800a240 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	699b      	ldr	r3, [r3, #24]
 800a068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a06c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a070:	d101      	bne.n	800a076 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800a072:	2302      	movs	r3, #2
 800a074:	e0e5      	b.n	800a242 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d101      	bne.n	800a084 <HAL_I2C_IsDeviceReady+0x44>
 800a080:	2302      	movs	r3, #2
 800a082:	e0de      	b.n	800a242 <HAL_I2C_IsDeviceReady+0x202>
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2201      	movs	r2, #1
 800a088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2224      	movs	r2, #36	; 0x24
 800a090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2200      	movs	r2, #0
 800a098:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d105      	bne.n	800a0ae <HAL_I2C_IsDeviceReady+0x6e>
 800a0a2:	897b      	ldrh	r3, [r7, #10]
 800a0a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a0a8:	4b68      	ldr	r3, [pc, #416]	; (800a24c <HAL_I2C_IsDeviceReady+0x20c>)
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	e004      	b.n	800a0b8 <HAL_I2C_IsDeviceReady+0x78>
 800a0ae:	897b      	ldrh	r3, [r7, #10]
 800a0b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0b4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	6812      	ldr	r2, [r2, #0]
 800a0bc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800a0be:	f7fa fe69 	bl	8004d94 <HAL_GetTick>
 800a0c2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	f003 0320 	and.w	r3, r3, #32
 800a0ce:	2b20      	cmp	r3, #32
 800a0d0:	bf0c      	ite	eq
 800a0d2:	2301      	moveq	r3, #1
 800a0d4:	2300      	movne	r3, #0
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	699b      	ldr	r3, [r3, #24]
 800a0e0:	f003 0310 	and.w	r3, r3, #16
 800a0e4:	2b10      	cmp	r3, #16
 800a0e6:	bf0c      	ite	eq
 800a0e8:	2301      	moveq	r3, #1
 800a0ea:	2300      	movne	r3, #0
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800a0f0:	e034      	b.n	800a15c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f8:	d01a      	beq.n	800a130 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a0fa:	f7fa fe4b 	bl	8004d94 <HAL_GetTick>
 800a0fe:	4602      	mov	r2, r0
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	683a      	ldr	r2, [r7, #0]
 800a106:	429a      	cmp	r2, r3
 800a108:	d302      	bcc.n	800a110 <HAL_I2C_IsDeviceReady+0xd0>
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d10f      	bne.n	800a130 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2220      	movs	r2, #32
 800a114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a11c:	f043 0220 	orr.w	r2, r3, #32
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2200      	movs	r2, #0
 800a128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	e088      	b.n	800a242 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	699b      	ldr	r3, [r3, #24]
 800a136:	f003 0320 	and.w	r3, r3, #32
 800a13a:	2b20      	cmp	r3, #32
 800a13c:	bf0c      	ite	eq
 800a13e:	2301      	moveq	r3, #1
 800a140:	2300      	movne	r3, #0
 800a142:	b2db      	uxtb	r3, r3
 800a144:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	699b      	ldr	r3, [r3, #24]
 800a14c:	f003 0310 	and.w	r3, r3, #16
 800a150:	2b10      	cmp	r3, #16
 800a152:	bf0c      	ite	eq
 800a154:	2301      	moveq	r3, #1
 800a156:	2300      	movne	r3, #0
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800a15c:	7ffb      	ldrb	r3, [r7, #31]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d102      	bne.n	800a168 <HAL_I2C_IsDeviceReady+0x128>
 800a162:	7fbb      	ldrb	r3, [r7, #30]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d0c4      	beq.n	800a0f2 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	699b      	ldr	r3, [r3, #24]
 800a16e:	f003 0310 	and.w	r3, r3, #16
 800a172:	2b10      	cmp	r3, #16
 800a174:	d01a      	beq.n	800a1ac <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	2200      	movs	r2, #0
 800a17e:	2120      	movs	r1, #32
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f000 f931 	bl	800a3e8 <I2C_WaitOnFlagUntilTimeout>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	e058      	b.n	800a242 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2220      	movs	r2, #32
 800a196:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2220      	movs	r2, #32
 800a19c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	e04a      	b.n	800a242 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a1ac:	69bb      	ldr	r3, [r7, #24]
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	2120      	movs	r1, #32
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f000 f916 	bl	800a3e8 <I2C_WaitOnFlagUntilTimeout>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e03d      	b.n	800a242 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2210      	movs	r2, #16
 800a1cc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2220      	movs	r2, #32
 800a1d4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d118      	bne.n	800a210 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	685a      	ldr	r2, [r3, #4]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1ec:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	2120      	movs	r1, #32
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 f8f5 	bl	800a3e8 <I2C_WaitOnFlagUntilTimeout>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d001      	beq.n	800a208 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	e01c      	b.n	800a242 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2220      	movs	r2, #32
 800a20e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	3301      	adds	r3, #1
 800a214:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	f63f af3d 	bhi.w	800a09a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2220      	movs	r2, #32
 800a224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a22c:	f043 0220 	orr.w	r2, r3, #32
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2200      	movs	r2, #0
 800a238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a23c:	2301      	movs	r3, #1
 800a23e:	e000      	b.n	800a242 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 800a240:	2302      	movs	r3, #2
  }
}
 800a242:	4618      	mov	r0, r3
 800a244:	3720      	adds	r7, #32
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	02002000 	.word	0x02002000

0800a250 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af02      	add	r7, sp, #8
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	4608      	mov	r0, r1
 800a25a:	4611      	mov	r1, r2
 800a25c:	461a      	mov	r2, r3
 800a25e:	4603      	mov	r3, r0
 800a260:	817b      	strh	r3, [r7, #10]
 800a262:	460b      	mov	r3, r1
 800a264:	813b      	strh	r3, [r7, #8]
 800a266:	4613      	mov	r3, r2
 800a268:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a26a:	88fb      	ldrh	r3, [r7, #6]
 800a26c:	b2da      	uxtb	r2, r3
 800a26e:	8979      	ldrh	r1, [r7, #10]
 800a270:	4b20      	ldr	r3, [pc, #128]	; (800a2f4 <I2C_RequestMemoryWrite+0xa4>)
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f000 fa6f 	bl	800a75c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a27e:	69fa      	ldr	r2, [r7, #28]
 800a280:	69b9      	ldr	r1, [r7, #24]
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f000 f8ff 	bl	800a486 <I2C_WaitOnTXISFlagUntilTimeout>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d001      	beq.n	800a292 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	e02c      	b.n	800a2ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a292:	88fb      	ldrh	r3, [r7, #6]
 800a294:	2b01      	cmp	r3, #1
 800a296:	d105      	bne.n	800a2a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a298:	893b      	ldrh	r3, [r7, #8]
 800a29a:	b2da      	uxtb	r2, r3
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	629a      	str	r2, [r3, #40]	; 0x28
 800a2a2:	e015      	b.n	800a2d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a2a4:	893b      	ldrh	r3, [r7, #8]
 800a2a6:	0a1b      	lsrs	r3, r3, #8
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	b2da      	uxtb	r2, r3
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2b2:	69fa      	ldr	r2, [r7, #28]
 800a2b4:	69b9      	ldr	r1, [r7, #24]
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f000 f8e5 	bl	800a486 <I2C_WaitOnTXISFlagUntilTimeout>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d001      	beq.n	800a2c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e012      	b.n	800a2ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a2c6:	893b      	ldrh	r3, [r7, #8]
 800a2c8:	b2da      	uxtb	r2, r3
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	9300      	str	r3, [sp, #0]
 800a2d4:	69bb      	ldr	r3, [r7, #24]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	2180      	movs	r1, #128	; 0x80
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f000 f884 	bl	800a3e8 <I2C_WaitOnFlagUntilTimeout>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e000      	b.n	800a2ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a2ea:	2300      	movs	r3, #0
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	80002000 	.word	0x80002000

0800a2f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b086      	sub	sp, #24
 800a2fc:	af02      	add	r7, sp, #8
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	4608      	mov	r0, r1
 800a302:	4611      	mov	r1, r2
 800a304:	461a      	mov	r2, r3
 800a306:	4603      	mov	r3, r0
 800a308:	817b      	strh	r3, [r7, #10]
 800a30a:	460b      	mov	r3, r1
 800a30c:	813b      	strh	r3, [r7, #8]
 800a30e:	4613      	mov	r3, r2
 800a310:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a312:	88fb      	ldrh	r3, [r7, #6]
 800a314:	b2da      	uxtb	r2, r3
 800a316:	8979      	ldrh	r1, [r7, #10]
 800a318:	4b20      	ldr	r3, [pc, #128]	; (800a39c <I2C_RequestMemoryRead+0xa4>)
 800a31a:	9300      	str	r3, [sp, #0]
 800a31c:	2300      	movs	r3, #0
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f000 fa1c 	bl	800a75c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a324:	69fa      	ldr	r2, [r7, #28]
 800a326:	69b9      	ldr	r1, [r7, #24]
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f000 f8ac 	bl	800a486 <I2C_WaitOnTXISFlagUntilTimeout>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d001      	beq.n	800a338 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a334:	2301      	movs	r3, #1
 800a336:	e02c      	b.n	800a392 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a338:	88fb      	ldrh	r3, [r7, #6]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d105      	bne.n	800a34a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a33e:	893b      	ldrh	r3, [r7, #8]
 800a340:	b2da      	uxtb	r2, r3
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	629a      	str	r2, [r3, #40]	; 0x28
 800a348:	e015      	b.n	800a376 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a34a:	893b      	ldrh	r3, [r7, #8]
 800a34c:	0a1b      	lsrs	r3, r3, #8
 800a34e:	b29b      	uxth	r3, r3
 800a350:	b2da      	uxtb	r2, r3
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a358:	69fa      	ldr	r2, [r7, #28]
 800a35a:	69b9      	ldr	r1, [r7, #24]
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f000 f892 	bl	800a486 <I2C_WaitOnTXISFlagUntilTimeout>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d001      	beq.n	800a36c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a368:	2301      	movs	r3, #1
 800a36a:	e012      	b.n	800a392 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a36c:	893b      	ldrh	r3, [r7, #8]
 800a36e:	b2da      	uxtb	r2, r3
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a376:	69fb      	ldr	r3, [r7, #28]
 800a378:	9300      	str	r3, [sp, #0]
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	2200      	movs	r2, #0
 800a37e:	2140      	movs	r1, #64	; 0x40
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f000 f831 	bl	800a3e8 <I2C_WaitOnFlagUntilTimeout>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d001      	beq.n	800a390 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	e000      	b.n	800a392 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3710      	adds	r7, #16
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	80002000 	.word	0x80002000

0800a3a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	699b      	ldr	r3, [r3, #24]
 800a3ae:	f003 0302 	and.w	r3, r3, #2
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d103      	bne.n	800a3be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	f003 0301 	and.w	r3, r3, #1
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d007      	beq.n	800a3dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	699a      	ldr	r2, [r3, #24]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f042 0201 	orr.w	r2, r2, #1
 800a3da:	619a      	str	r2, [r3, #24]
  }
}
 800a3dc:	bf00      	nop
 800a3de:	370c      	adds	r7, #12
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	603b      	str	r3, [r7, #0]
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3f8:	e031      	b.n	800a45e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a400:	d02d      	beq.n	800a45e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a402:	f7fa fcc7 	bl	8004d94 <HAL_GetTick>
 800a406:	4602      	mov	r2, r0
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	1ad3      	subs	r3, r2, r3
 800a40c:	683a      	ldr	r2, [r7, #0]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d302      	bcc.n	800a418 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d122      	bne.n	800a45e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	699a      	ldr	r2, [r3, #24]
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	4013      	ands	r3, r2
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	429a      	cmp	r2, r3
 800a426:	bf0c      	ite	eq
 800a428:	2301      	moveq	r3, #1
 800a42a:	2300      	movne	r3, #0
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	461a      	mov	r2, r3
 800a430:	79fb      	ldrb	r3, [r7, #7]
 800a432:	429a      	cmp	r2, r3
 800a434:	d113      	bne.n	800a45e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a43a:	f043 0220 	orr.w	r2, r3, #32
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2220      	movs	r2, #32
 800a446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2200      	movs	r2, #0
 800a456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	e00f      	b.n	800a47e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	699a      	ldr	r2, [r3, #24]
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	4013      	ands	r3, r2
 800a468:	68ba      	ldr	r2, [r7, #8]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	bf0c      	ite	eq
 800a46e:	2301      	moveq	r3, #1
 800a470:	2300      	movne	r3, #0
 800a472:	b2db      	uxtb	r3, r3
 800a474:	461a      	mov	r2, r3
 800a476:	79fb      	ldrb	r3, [r7, #7]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d0be      	beq.n	800a3fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b084      	sub	sp, #16
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	60f8      	str	r0, [r7, #12]
 800a48e:	60b9      	str	r1, [r7, #8]
 800a490:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a492:	e033      	b.n	800a4fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	68b9      	ldr	r1, [r7, #8]
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f000 f87f 	bl	800a59c <I2C_IsErrorOccurred>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d001      	beq.n	800a4a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e031      	b.n	800a50c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ae:	d025      	beq.n	800a4fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4b0:	f7fa fc70 	bl	8004d94 <HAL_GetTick>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	68ba      	ldr	r2, [r7, #8]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d302      	bcc.n	800a4c6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d11a      	bne.n	800a4fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	699b      	ldr	r3, [r3, #24]
 800a4cc:	f003 0302 	and.w	r3, r3, #2
 800a4d0:	2b02      	cmp	r3, #2
 800a4d2:	d013      	beq.n	800a4fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4d8:	f043 0220 	orr.w	r2, r3, #32
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2220      	movs	r2, #32
 800a4e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e007      	b.n	800a50c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	699b      	ldr	r3, [r3, #24]
 800a502:	f003 0302 	and.w	r3, r3, #2
 800a506:	2b02      	cmp	r3, #2
 800a508:	d1c4      	bne.n	800a494 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3710      	adds	r7, #16
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b084      	sub	sp, #16
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a520:	e02f      	b.n	800a582 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	68b9      	ldr	r1, [r7, #8]
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f000 f838 	bl	800a59c <I2C_IsErrorOccurred>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d001      	beq.n	800a536 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	e02d      	b.n	800a592 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a536:	f7fa fc2d 	bl	8004d94 <HAL_GetTick>
 800a53a:	4602      	mov	r2, r0
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	68ba      	ldr	r2, [r7, #8]
 800a542:	429a      	cmp	r2, r3
 800a544:	d302      	bcc.n	800a54c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d11a      	bne.n	800a582 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	699b      	ldr	r3, [r3, #24]
 800a552:	f003 0320 	and.w	r3, r3, #32
 800a556:	2b20      	cmp	r3, #32
 800a558:	d013      	beq.n	800a582 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a55e:	f043 0220 	orr.w	r2, r3, #32
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2220      	movs	r2, #32
 800a56a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2200      	movs	r2, #0
 800a572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2200      	movs	r2, #0
 800a57a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	e007      	b.n	800a592 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	699b      	ldr	r3, [r3, #24]
 800a588:	f003 0320 	and.w	r3, r3, #32
 800a58c:	2b20      	cmp	r3, #32
 800a58e:	d1c8      	bne.n	800a522 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a590:	2300      	movs	r3, #0
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
	...

0800a59c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b08a      	sub	sp, #40	; 0x28
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	699b      	ldr	r3, [r3, #24]
 800a5b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	f003 0310 	and.w	r3, r3, #16
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d068      	beq.n	800a69a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2210      	movs	r2, #16
 800a5ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a5d0:	e049      	b.n	800a666 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5d8:	d045      	beq.n	800a666 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a5da:	f7fa fbdb 	bl	8004d94 <HAL_GetTick>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d302      	bcc.n	800a5f0 <I2C_IsErrorOccurred+0x54>
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d13a      	bne.n	800a666 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a602:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	699b      	ldr	r3, [r3, #24]
 800a60a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a60e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a612:	d121      	bne.n	800a658 <I2C_IsErrorOccurred+0xbc>
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a61a:	d01d      	beq.n	800a658 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a61c:	7cfb      	ldrb	r3, [r7, #19]
 800a61e:	2b20      	cmp	r3, #32
 800a620:	d01a      	beq.n	800a658 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	685a      	ldr	r2, [r3, #4]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a630:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a632:	f7fa fbaf 	bl	8004d94 <HAL_GetTick>
 800a636:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a638:	e00e      	b.n	800a658 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a63a:	f7fa fbab 	bl	8004d94 <HAL_GetTick>
 800a63e:	4602      	mov	r2, r0
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	1ad3      	subs	r3, r2, r3
 800a644:	2b19      	cmp	r3, #25
 800a646:	d907      	bls.n	800a658 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a648:	6a3b      	ldr	r3, [r7, #32]
 800a64a:	f043 0320 	orr.w	r3, r3, #32
 800a64e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800a656:	e006      	b.n	800a666 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	f003 0320 	and.w	r3, r3, #32
 800a662:	2b20      	cmp	r3, #32
 800a664:	d1e9      	bne.n	800a63a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	699b      	ldr	r3, [r3, #24]
 800a66c:	f003 0320 	and.w	r3, r3, #32
 800a670:	2b20      	cmp	r3, #32
 800a672:	d003      	beq.n	800a67c <I2C_IsErrorOccurred+0xe0>
 800a674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d0aa      	beq.n	800a5d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a67c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a680:	2b00      	cmp	r3, #0
 800a682:	d103      	bne.n	800a68c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2220      	movs	r2, #32
 800a68a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a68c:	6a3b      	ldr	r3, [r7, #32]
 800a68e:	f043 0304 	orr.w	r3, r3, #4
 800a692:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d00b      	beq.n	800a6c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a6ac:	6a3b      	ldr	r3, [r7, #32]
 800a6ae:	f043 0301 	orr.w	r3, r3, #1
 800a6b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a6bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a6c4:	69bb      	ldr	r3, [r7, #24]
 800a6c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00b      	beq.n	800a6e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a6ce:	6a3b      	ldr	r3, [r7, #32]
 800a6d0:	f043 0308 	orr.w	r3, r3, #8
 800a6d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a6de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d00b      	beq.n	800a708 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a6f0:	6a3b      	ldr	r3, [r7, #32]
 800a6f2:	f043 0302 	orr.w	r3, r3, #2
 800a6f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a700:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a702:	2301      	movs	r3, #1
 800a704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d01c      	beq.n	800a74a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f7ff fe45 	bl	800a3a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	6859      	ldr	r1, [r3, #4]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	4b0d      	ldr	r3, [pc, #52]	; (800a758 <I2C_IsErrorOccurred+0x1bc>)
 800a722:	400b      	ands	r3, r1
 800a724:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a72a:	6a3b      	ldr	r3, [r7, #32]
 800a72c:	431a      	orrs	r2, r3
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2220      	movs	r2, #32
 800a736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2200      	movs	r2, #0
 800a73e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a74a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3728      	adds	r7, #40	; 0x28
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	fe00e800 	.word	0xfe00e800

0800a75c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b087      	sub	sp, #28
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	607b      	str	r3, [r7, #4]
 800a766:	460b      	mov	r3, r1
 800a768:	817b      	strh	r3, [r7, #10]
 800a76a:	4613      	mov	r3, r2
 800a76c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a76e:	897b      	ldrh	r3, [r7, #10]
 800a770:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a774:	7a7b      	ldrb	r3, [r7, #9]
 800a776:	041b      	lsls	r3, r3, #16
 800a778:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a77c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a782:	6a3b      	ldr	r3, [r7, #32]
 800a784:	4313      	orrs	r3, r2
 800a786:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a78a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	685a      	ldr	r2, [r3, #4]
 800a792:	6a3b      	ldr	r3, [r7, #32]
 800a794:	0d5b      	lsrs	r3, r3, #21
 800a796:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a79a:	4b08      	ldr	r3, [pc, #32]	; (800a7bc <I2C_TransferConfig+0x60>)
 800a79c:	430b      	orrs	r3, r1
 800a79e:	43db      	mvns	r3, r3
 800a7a0:	ea02 0103 	and.w	r1, r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	697a      	ldr	r2, [r7, #20]
 800a7aa:	430a      	orrs	r2, r1
 800a7ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a7ae:	bf00      	nop
 800a7b0:	371c      	adds	r7, #28
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr
 800a7ba:	bf00      	nop
 800a7bc:	03ff63ff 	.word	0x03ff63ff

0800a7c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	2b20      	cmp	r3, #32
 800a7d4:	d138      	bne.n	800a848 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d101      	bne.n	800a7e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a7e0:	2302      	movs	r3, #2
 800a7e2:	e032      	b.n	800a84a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2224      	movs	r2, #36	; 0x24
 800a7f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f022 0201 	bic.w	r2, r2, #1
 800a802:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a812:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	6819      	ldr	r1, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	683a      	ldr	r2, [r7, #0]
 800a820:	430a      	orrs	r2, r1
 800a822:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f042 0201 	orr.w	r2, r2, #1
 800a832:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2220      	movs	r2, #32
 800a838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a844:	2300      	movs	r3, #0
 800a846:	e000      	b.n	800a84a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a848:	2302      	movs	r3, #2
  }
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	370c      	adds	r7, #12
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a856:	b480      	push	{r7}
 800a858:	b085      	sub	sp, #20
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
 800a85e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a866:	b2db      	uxtb	r3, r3
 800a868:	2b20      	cmp	r3, #32
 800a86a:	d139      	bne.n	800a8e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a872:	2b01      	cmp	r3, #1
 800a874:	d101      	bne.n	800a87a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a876:	2302      	movs	r3, #2
 800a878:	e033      	b.n	800a8e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2224      	movs	r2, #36	; 0x24
 800a886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f022 0201 	bic.w	r2, r2, #1
 800a898:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a8a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	021b      	lsls	r3, r3, #8
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f042 0201 	orr.w	r2, r2, #1
 800a8ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2220      	movs	r2, #32
 800a8d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	e000      	b.n	800a8e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a8e0:	2302      	movs	r3, #2
  }
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3714      	adds	r7, #20
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
	...

0800a8f0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d101      	bne.n	800a902 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	e0bf      	b.n	800aa82 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d106      	bne.n	800a91c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f7f9 fb14 	bl	8003f44 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2202      	movs	r2, #2
 800a920:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	699a      	ldr	r2, [r3, #24]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800a932:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	6999      	ldr	r1, [r3, #24]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	685a      	ldr	r2, [r3, #4]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a948:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	430a      	orrs	r2, r1
 800a956:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	6899      	ldr	r1, [r3, #8]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	4b4a      	ldr	r3, [pc, #296]	; (800aa8c <HAL_LTDC_Init+0x19c>)
 800a964:	400b      	ands	r3, r1
 800a966:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	695b      	ldr	r3, [r3, #20]
 800a96c:	041b      	lsls	r3, r3, #16
 800a96e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	6899      	ldr	r1, [r3, #8]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	699a      	ldr	r2, [r3, #24]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	431a      	orrs	r2, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	430a      	orrs	r2, r1
 800a984:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68d9      	ldr	r1, [r3, #12]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	4b3e      	ldr	r3, [pc, #248]	; (800aa8c <HAL_LTDC_Init+0x19c>)
 800a992:	400b      	ands	r3, r1
 800a994:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	69db      	ldr	r3, [r3, #28]
 800a99a:	041b      	lsls	r3, r3, #16
 800a99c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68d9      	ldr	r1, [r3, #12]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a1a      	ldr	r2, [r3, #32]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	431a      	orrs	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	430a      	orrs	r2, r1
 800a9b2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	6919      	ldr	r1, [r3, #16]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681a      	ldr	r2, [r3, #0]
 800a9be:	4b33      	ldr	r3, [pc, #204]	; (800aa8c <HAL_LTDC_Init+0x19c>)
 800a9c0:	400b      	ands	r3, r1
 800a9c2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c8:	041b      	lsls	r3, r3, #16
 800a9ca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	6919      	ldr	r1, [r3, #16]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	431a      	orrs	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	430a      	orrs	r2, r1
 800a9e0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	6959      	ldr	r1, [r3, #20]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	4b27      	ldr	r3, [pc, #156]	; (800aa8c <HAL_LTDC_Init+0x19c>)
 800a9ee:	400b      	ands	r3, r1
 800a9f0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f6:	041b      	lsls	r3, r3, #16
 800a9f8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	6959      	ldr	r1, [r3, #20]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	431a      	orrs	r2, r3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	430a      	orrs	r2, r1
 800aa0e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa16:	021b      	lsls	r3, r3, #8
 800aa18:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800aa20:	041b      	lsls	r3, r3, #16
 800aa22:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800aa32:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800aa3a:	68ba      	ldr	r2, [r7, #8]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800aa46:	431a      	orrs	r2, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	430a      	orrs	r2, r1
 800aa4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f042 0206 	orr.w	r2, r2, #6
 800aa5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	699a      	ldr	r2, [r3, #24]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f042 0201 	orr.w	r2, r2, #1
 800aa6e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	f000f800 	.word	0xf000f800

0800aa90 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800aa90:	b5b0      	push	{r4, r5, r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d101      	bne.n	800aaaa <HAL_LTDC_ConfigLayer+0x1a>
 800aaa6:	2302      	movs	r3, #2
 800aaa8:	e02c      	b.n	800ab04 <HAL_LTDC_ConfigLayer+0x74>
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2201      	movs	r2, #1
 800aaae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2202      	movs	r2, #2
 800aab6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2134      	movs	r1, #52	; 0x34
 800aac0:	fb01 f303 	mul.w	r3, r1, r3
 800aac4:	4413      	add	r3, r2
 800aac6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	4614      	mov	r4, r2
 800aace:	461d      	mov	r5, r3
 800aad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aadc:	682b      	ldr	r3, [r5, #0]
 800aade:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	68b9      	ldr	r1, [r7, #8]
 800aae4:	68f8      	ldr	r0, [r7, #12]
 800aae6:	f000 f811 	bl	800ab0c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2200      	movs	r2, #0
 800aafe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800ab02:	2300      	movs	r3, #0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bdb0      	pop	{r4, r5, r7, pc}

0800ab0c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b089      	sub	sp, #36	; 0x24
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	685a      	ldr	r2, [r3, #4]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	0c1b      	lsrs	r3, r3, #16
 800ab24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab28:	4413      	add	r3, r2
 800ab2a:	041b      	lsls	r3, r3, #16
 800ab2c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	461a      	mov	r2, r3
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	01db      	lsls	r3, r3, #7
 800ab38:	4413      	add	r3, r2
 800ab3a:	3384      	adds	r3, #132	; 0x84
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	6812      	ldr	r2, [r2, #0]
 800ab42:	4611      	mov	r1, r2
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	01d2      	lsls	r2, r2, #7
 800ab48:	440a      	add	r2, r1
 800ab4a:	3284      	adds	r2, #132	; 0x84
 800ab4c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ab50:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	68db      	ldr	r3, [r3, #12]
 800ab5c:	0c1b      	lsrs	r3, r3, #16
 800ab5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ab62:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ab64:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	01db      	lsls	r3, r3, #7
 800ab70:	440b      	add	r3, r1
 800ab72:	3384      	adds	r3, #132	; 0x84
 800ab74:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ab76:	69fb      	ldr	r3, [r7, #28]
 800ab78:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ab7a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	68da      	ldr	r2, [r3, #12]
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ab8a:	4413      	add	r3, r2
 800ab8c:	041b      	lsls	r3, r3, #16
 800ab8e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	461a      	mov	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	01db      	lsls	r3, r3, #7
 800ab9a:	4413      	add	r3, r2
 800ab9c:	3384      	adds	r3, #132	; 0x84
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	6812      	ldr	r2, [r2, #0]
 800aba4:	4611      	mov	r1, r2
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	01d2      	lsls	r2, r2, #7
 800abaa:	440a      	add	r2, r1
 800abac:	3284      	adds	r2, #132	; 0x84
 800abae:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800abb2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	689a      	ldr	r2, [r3, #8]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800abc2:	4413      	add	r3, r2
 800abc4:	1c5a      	adds	r2, r3, #1
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4619      	mov	r1, r3
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	01db      	lsls	r3, r3, #7
 800abd0:	440b      	add	r3, r1
 800abd2:	3384      	adds	r3, #132	; 0x84
 800abd4:	4619      	mov	r1, r3
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	4313      	orrs	r3, r2
 800abda:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	461a      	mov	r2, r3
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	01db      	lsls	r3, r3, #7
 800abe6:	4413      	add	r3, r2
 800abe8:	3384      	adds	r3, #132	; 0x84
 800abea:	691b      	ldr	r3, [r3, #16]
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	6812      	ldr	r2, [r2, #0]
 800abf0:	4611      	mov	r1, r2
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	01d2      	lsls	r2, r2, #7
 800abf6:	440a      	add	r2, r1
 800abf8:	3284      	adds	r2, #132	; 0x84
 800abfa:	f023 0307 	bic.w	r3, r3, #7
 800abfe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	461a      	mov	r2, r3
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	01db      	lsls	r3, r3, #7
 800ac0a:	4413      	add	r3, r2
 800ac0c:	3384      	adds	r3, #132	; 0x84
 800ac0e:	461a      	mov	r2, r3
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ac1c:	021b      	lsls	r3, r3, #8
 800ac1e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ac26:	041b      	lsls	r3, r3, #16
 800ac28:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	699b      	ldr	r3, [r3, #24]
 800ac2e:	061b      	lsls	r3, r3, #24
 800ac30:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	461a      	mov	r2, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	01db      	lsls	r3, r3, #7
 800ac3c:	4413      	add	r3, r2
 800ac3e:	3384      	adds	r3, #132	; 0x84
 800ac40:	699b      	ldr	r3, [r3, #24]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	461a      	mov	r2, r3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	01db      	lsls	r3, r3, #7
 800ac4c:	4413      	add	r3, r2
 800ac4e:	3384      	adds	r3, #132	; 0x84
 800ac50:	461a      	mov	r2, r3
 800ac52:	2300      	movs	r3, #0
 800ac54:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	431a      	orrs	r2, r3
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	431a      	orrs	r2, r3
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	01db      	lsls	r3, r3, #7
 800ac70:	440b      	add	r3, r1
 800ac72:	3384      	adds	r3, #132	; 0x84
 800ac74:	4619      	mov	r1, r3
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	461a      	mov	r2, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	01db      	lsls	r3, r3, #7
 800ac86:	4413      	add	r3, r2
 800ac88:	3384      	adds	r3, #132	; 0x84
 800ac8a:	695b      	ldr	r3, [r3, #20]
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	6812      	ldr	r2, [r2, #0]
 800ac90:	4611      	mov	r1, r2
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	01d2      	lsls	r2, r2, #7
 800ac96:	440a      	add	r2, r1
 800ac98:	3284      	adds	r2, #132	; 0x84
 800ac9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ac9e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	461a      	mov	r2, r3
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	01db      	lsls	r3, r3, #7
 800acaa:	4413      	add	r3, r2
 800acac:	3384      	adds	r3, #132	; 0x84
 800acae:	461a      	mov	r2, r3
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	695b      	ldr	r3, [r3, #20]
 800acb4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	461a      	mov	r2, r3
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	01db      	lsls	r3, r3, #7
 800acc0:	4413      	add	r3, r2
 800acc2:	3384      	adds	r3, #132	; 0x84
 800acc4:	69da      	ldr	r2, [r3, #28]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4619      	mov	r1, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	01db      	lsls	r3, r3, #7
 800acd0:	440b      	add	r3, r1
 800acd2:	3384      	adds	r3, #132	; 0x84
 800acd4:	4619      	mov	r1, r3
 800acd6:	4b58      	ldr	r3, [pc, #352]	; (800ae38 <LTDC_SetConfig+0x32c>)
 800acd8:	4013      	ands	r3, r2
 800acda:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	69da      	ldr	r2, [r3, #28]
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	6a1b      	ldr	r3, [r3, #32]
 800ace4:	68f9      	ldr	r1, [r7, #12]
 800ace6:	6809      	ldr	r1, [r1, #0]
 800ace8:	4608      	mov	r0, r1
 800acea:	6879      	ldr	r1, [r7, #4]
 800acec:	01c9      	lsls	r1, r1, #7
 800acee:	4401      	add	r1, r0
 800acf0:	3184      	adds	r1, #132	; 0x84
 800acf2:	4313      	orrs	r3, r2
 800acf4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	461a      	mov	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	01db      	lsls	r3, r3, #7
 800ad00:	4413      	add	r3, r2
 800ad02:	3384      	adds	r3, #132	; 0x84
 800ad04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	01db      	lsls	r3, r3, #7
 800ad10:	4413      	add	r3, r2
 800ad12:	3384      	adds	r3, #132	; 0x84
 800ad14:	461a      	mov	r2, r3
 800ad16:	2300      	movs	r3, #0
 800ad18:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	01db      	lsls	r3, r3, #7
 800ad24:	4413      	add	r3, r2
 800ad26:	3384      	adds	r3, #132	; 0x84
 800ad28:	461a      	mov	r2, r3
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	691b      	ldr	r3, [r3, #16]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d102      	bne.n	800ad3e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800ad38:	2304      	movs	r3, #4
 800ad3a:	61fb      	str	r3, [r7, #28]
 800ad3c:	e01b      	b.n	800ad76 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	691b      	ldr	r3, [r3, #16]
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d102      	bne.n	800ad4c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800ad46:	2303      	movs	r3, #3
 800ad48:	61fb      	str	r3, [r7, #28]
 800ad4a:	e014      	b.n	800ad76 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	691b      	ldr	r3, [r3, #16]
 800ad50:	2b04      	cmp	r3, #4
 800ad52:	d00b      	beq.n	800ad6c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ad58:	2b02      	cmp	r3, #2
 800ad5a:	d007      	beq.n	800ad6c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ad60:	2b03      	cmp	r3, #3
 800ad62:	d003      	beq.n	800ad6c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ad68:	2b07      	cmp	r3, #7
 800ad6a:	d102      	bne.n	800ad72 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800ad6c:	2302      	movs	r3, #2
 800ad6e:	61fb      	str	r3, [r7, #28]
 800ad70:	e001      	b.n	800ad76 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800ad72:	2301      	movs	r3, #1
 800ad74:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	01db      	lsls	r3, r3, #7
 800ad80:	4413      	add	r3, r2
 800ad82:	3384      	adds	r3, #132	; 0x84
 800ad84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad86:	68fa      	ldr	r2, [r7, #12]
 800ad88:	6812      	ldr	r2, [r2, #0]
 800ad8a:	4611      	mov	r1, r2
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	01d2      	lsls	r2, r2, #7
 800ad90:	440a      	add	r2, r1
 800ad92:	3284      	adds	r2, #132	; 0x84
 800ad94:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800ad98:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad9e:	69fa      	ldr	r2, [r7, #28]
 800ada0:	fb02 f303 	mul.w	r3, r2, r3
 800ada4:	041a      	lsls	r2, r3, #16
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	6859      	ldr	r1, [r3, #4]
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	1acb      	subs	r3, r1, r3
 800adb0:	69f9      	ldr	r1, [r7, #28]
 800adb2:	fb01 f303 	mul.w	r3, r1, r3
 800adb6:	3307      	adds	r3, #7
 800adb8:	68f9      	ldr	r1, [r7, #12]
 800adba:	6809      	ldr	r1, [r1, #0]
 800adbc:	4608      	mov	r0, r1
 800adbe:	6879      	ldr	r1, [r7, #4]
 800adc0:	01c9      	lsls	r1, r1, #7
 800adc2:	4401      	add	r1, r0
 800adc4:	3184      	adds	r1, #132	; 0x84
 800adc6:	4313      	orrs	r3, r2
 800adc8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	461a      	mov	r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	01db      	lsls	r3, r3, #7
 800add4:	4413      	add	r3, r2
 800add6:	3384      	adds	r3, #132	; 0x84
 800add8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4619      	mov	r1, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	01db      	lsls	r3, r3, #7
 800ade4:	440b      	add	r3, r1
 800ade6:	3384      	adds	r3, #132	; 0x84
 800ade8:	4619      	mov	r1, r3
 800adea:	4b14      	ldr	r3, [pc, #80]	; (800ae3c <LTDC_SetConfig+0x330>)
 800adec:	4013      	ands	r3, r2
 800adee:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	461a      	mov	r2, r3
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	01db      	lsls	r3, r3, #7
 800adfa:	4413      	add	r3, r2
 800adfc:	3384      	adds	r3, #132	; 0x84
 800adfe:	461a      	mov	r2, r3
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae04:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	01db      	lsls	r3, r3, #7
 800ae10:	4413      	add	r3, r2
 800ae12:	3384      	adds	r3, #132	; 0x84
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	68fa      	ldr	r2, [r7, #12]
 800ae18:	6812      	ldr	r2, [r2, #0]
 800ae1a:	4611      	mov	r1, r2
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	01d2      	lsls	r2, r2, #7
 800ae20:	440a      	add	r2, r1
 800ae22:	3284      	adds	r2, #132	; 0x84
 800ae24:	f043 0301 	orr.w	r3, r3, #1
 800ae28:	6013      	str	r3, [r2, #0]
}
 800ae2a:	bf00      	nop
 800ae2c:	3724      	adds	r7, #36	; 0x24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	fffff8f8 	.word	0xfffff8f8
 800ae3c:	fffff800 	.word	0xfffff800

0800ae40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ae40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae42:	b08f      	sub	sp, #60	; 0x3c
 800ae44:	af0a      	add	r7, sp, #40	; 0x28
 800ae46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d101      	bne.n	800ae52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e116      	b.n	800b080 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d106      	bne.n	800ae72 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f7f9 fbf5 	bl	800465c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2203      	movs	r2, #3
 800ae76:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d102      	bne.n	800ae8c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4618      	mov	r0, r3
 800ae92:	f006 fb8f 	bl	80115b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	603b      	str	r3, [r7, #0]
 800ae9c:	687e      	ldr	r6, [r7, #4]
 800ae9e:	466d      	mov	r5, sp
 800aea0:	f106 0410 	add.w	r4, r6, #16
 800aea4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aea6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aea8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aeaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aeac:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aeb0:	e885 0003 	stmia.w	r5, {r0, r1}
 800aeb4:	1d33      	adds	r3, r6, #4
 800aeb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aeb8:	6838      	ldr	r0, [r7, #0]
 800aeba:	f006 fb0d 	bl	80114d8 <USB_CoreInit>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d005      	beq.n	800aed0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2202      	movs	r2, #2
 800aec8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	e0d7      	b.n	800b080 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2100      	movs	r1, #0
 800aed6:	4618      	mov	r0, r3
 800aed8:	f006 fb7d 	bl	80115d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aedc:	2300      	movs	r3, #0
 800aede:	73fb      	strb	r3, [r7, #15]
 800aee0:	e04a      	b.n	800af78 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800aee2:	7bfa      	ldrb	r2, [r7, #15]
 800aee4:	6879      	ldr	r1, [r7, #4]
 800aee6:	4613      	mov	r3, r2
 800aee8:	00db      	lsls	r3, r3, #3
 800aeea:	4413      	add	r3, r2
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	440b      	add	r3, r1
 800aef0:	333d      	adds	r3, #61	; 0x3d
 800aef2:	2201      	movs	r2, #1
 800aef4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800aef6:	7bfa      	ldrb	r2, [r7, #15]
 800aef8:	6879      	ldr	r1, [r7, #4]
 800aefa:	4613      	mov	r3, r2
 800aefc:	00db      	lsls	r3, r3, #3
 800aefe:	4413      	add	r3, r2
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	440b      	add	r3, r1
 800af04:	333c      	adds	r3, #60	; 0x3c
 800af06:	7bfa      	ldrb	r2, [r7, #15]
 800af08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800af0a:	7bfa      	ldrb	r2, [r7, #15]
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
 800af0e:	b298      	uxth	r0, r3
 800af10:	6879      	ldr	r1, [r7, #4]
 800af12:	4613      	mov	r3, r2
 800af14:	00db      	lsls	r3, r3, #3
 800af16:	4413      	add	r3, r2
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	440b      	add	r3, r1
 800af1c:	3356      	adds	r3, #86	; 0x56
 800af1e:	4602      	mov	r2, r0
 800af20:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800af22:	7bfa      	ldrb	r2, [r7, #15]
 800af24:	6879      	ldr	r1, [r7, #4]
 800af26:	4613      	mov	r3, r2
 800af28:	00db      	lsls	r3, r3, #3
 800af2a:	4413      	add	r3, r2
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	440b      	add	r3, r1
 800af30:	3340      	adds	r3, #64	; 0x40
 800af32:	2200      	movs	r2, #0
 800af34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800af36:	7bfa      	ldrb	r2, [r7, #15]
 800af38:	6879      	ldr	r1, [r7, #4]
 800af3a:	4613      	mov	r3, r2
 800af3c:	00db      	lsls	r3, r3, #3
 800af3e:	4413      	add	r3, r2
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	440b      	add	r3, r1
 800af44:	3344      	adds	r3, #68	; 0x44
 800af46:	2200      	movs	r2, #0
 800af48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800af4a:	7bfa      	ldrb	r2, [r7, #15]
 800af4c:	6879      	ldr	r1, [r7, #4]
 800af4e:	4613      	mov	r3, r2
 800af50:	00db      	lsls	r3, r3, #3
 800af52:	4413      	add	r3, r2
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	440b      	add	r3, r1
 800af58:	3348      	adds	r3, #72	; 0x48
 800af5a:	2200      	movs	r2, #0
 800af5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800af5e:	7bfa      	ldrb	r2, [r7, #15]
 800af60:	6879      	ldr	r1, [r7, #4]
 800af62:	4613      	mov	r3, r2
 800af64:	00db      	lsls	r3, r3, #3
 800af66:	4413      	add	r3, r2
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	440b      	add	r3, r1
 800af6c:	334c      	adds	r3, #76	; 0x4c
 800af6e:	2200      	movs	r2, #0
 800af70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800af72:	7bfb      	ldrb	r3, [r7, #15]
 800af74:	3301      	adds	r3, #1
 800af76:	73fb      	strb	r3, [r7, #15]
 800af78:	7bfa      	ldrb	r2, [r7, #15]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d3af      	bcc.n	800aee2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800af82:	2300      	movs	r3, #0
 800af84:	73fb      	strb	r3, [r7, #15]
 800af86:	e044      	b.n	800b012 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800af88:	7bfa      	ldrb	r2, [r7, #15]
 800af8a:	6879      	ldr	r1, [r7, #4]
 800af8c:	4613      	mov	r3, r2
 800af8e:	00db      	lsls	r3, r3, #3
 800af90:	4413      	add	r3, r2
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	440b      	add	r3, r1
 800af96:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800af9a:	2200      	movs	r2, #0
 800af9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800af9e:	7bfa      	ldrb	r2, [r7, #15]
 800afa0:	6879      	ldr	r1, [r7, #4]
 800afa2:	4613      	mov	r3, r2
 800afa4:	00db      	lsls	r3, r3, #3
 800afa6:	4413      	add	r3, r2
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	440b      	add	r3, r1
 800afac:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800afb0:	7bfa      	ldrb	r2, [r7, #15]
 800afb2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800afb4:	7bfa      	ldrb	r2, [r7, #15]
 800afb6:	6879      	ldr	r1, [r7, #4]
 800afb8:	4613      	mov	r3, r2
 800afba:	00db      	lsls	r3, r3, #3
 800afbc:	4413      	add	r3, r2
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	440b      	add	r3, r1
 800afc2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800afc6:	2200      	movs	r2, #0
 800afc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800afca:	7bfa      	ldrb	r2, [r7, #15]
 800afcc:	6879      	ldr	r1, [r7, #4]
 800afce:	4613      	mov	r3, r2
 800afd0:	00db      	lsls	r3, r3, #3
 800afd2:	4413      	add	r3, r2
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	440b      	add	r3, r1
 800afd8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800afdc:	2200      	movs	r2, #0
 800afde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800afe0:	7bfa      	ldrb	r2, [r7, #15]
 800afe2:	6879      	ldr	r1, [r7, #4]
 800afe4:	4613      	mov	r3, r2
 800afe6:	00db      	lsls	r3, r3, #3
 800afe8:	4413      	add	r3, r2
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	440b      	add	r3, r1
 800afee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800aff2:	2200      	movs	r2, #0
 800aff4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800aff6:	7bfa      	ldrb	r2, [r7, #15]
 800aff8:	6879      	ldr	r1, [r7, #4]
 800affa:	4613      	mov	r3, r2
 800affc:	00db      	lsls	r3, r3, #3
 800affe:	4413      	add	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	440b      	add	r3, r1
 800b004:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b008:	2200      	movs	r2, #0
 800b00a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b00c:	7bfb      	ldrb	r3, [r7, #15]
 800b00e:	3301      	adds	r3, #1
 800b010:	73fb      	strb	r3, [r7, #15]
 800b012:	7bfa      	ldrb	r2, [r7, #15]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d3b5      	bcc.n	800af88 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	603b      	str	r3, [r7, #0]
 800b022:	687e      	ldr	r6, [r7, #4]
 800b024:	466d      	mov	r5, sp
 800b026:	f106 0410 	add.w	r4, r6, #16
 800b02a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b02c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b02e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b032:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b036:	e885 0003 	stmia.w	r5, {r0, r1}
 800b03a:	1d33      	adds	r3, r6, #4
 800b03c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b03e:	6838      	ldr	r0, [r7, #0]
 800b040:	f006 fb16 	bl	8011670 <USB_DevInit>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d005      	beq.n	800b056 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2202      	movs	r2, #2
 800b04e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800b052:	2301      	movs	r3, #1
 800b054:	e014      	b.n	800b080 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2201      	movs	r2, #1
 800b062:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d102      	bne.n	800b074 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 f80a 	bl	800b088 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4618      	mov	r0, r3
 800b07a:	f006 fcd4 	bl	8011a26 <USB_DevDisconnect>

  return HAL_OK;
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	3714      	adds	r7, #20
 800b084:	46bd      	mov	sp, r7
 800b086:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b088 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2201      	movs	r2, #1
 800b09a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	699b      	ldr	r3, [r3, #24]
 800b0aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0b6:	4b05      	ldr	r3, [pc, #20]	; (800b0cc <HAL_PCDEx_ActivateLPM+0x44>)
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	68fa      	ldr	r2, [r7, #12]
 800b0bc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800b0be:	2300      	movs	r3, #0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3714      	adds	r7, #20
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr
 800b0cc:	10000003 	.word	0x10000003

0800b0d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b0d8:	4b19      	ldr	r3, [pc, #100]	; (800b140 <HAL_PWREx_ConfigSupply+0x70>)
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	f003 0304 	and.w	r3, r3, #4
 800b0e0:	2b04      	cmp	r3, #4
 800b0e2:	d00a      	beq.n	800b0fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b0e4:	4b16      	ldr	r3, [pc, #88]	; (800b140 <HAL_PWREx_ConfigSupply+0x70>)
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	f003 0307 	and.w	r3, r3, #7
 800b0ec:	687a      	ldr	r2, [r7, #4]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d001      	beq.n	800b0f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e01f      	b.n	800b136 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	e01d      	b.n	800b136 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b0fa:	4b11      	ldr	r3, [pc, #68]	; (800b140 <HAL_PWREx_ConfigSupply+0x70>)
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	f023 0207 	bic.w	r2, r3, #7
 800b102:	490f      	ldr	r1, [pc, #60]	; (800b140 <HAL_PWREx_ConfigSupply+0x70>)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4313      	orrs	r3, r2
 800b108:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b10a:	f7f9 fe43 	bl	8004d94 <HAL_GetTick>
 800b10e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b110:	e009      	b.n	800b126 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b112:	f7f9 fe3f 	bl	8004d94 <HAL_GetTick>
 800b116:	4602      	mov	r2, r0
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	1ad3      	subs	r3, r2, r3
 800b11c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b120:	d901      	bls.n	800b126 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b122:	2301      	movs	r3, #1
 800b124:	e007      	b.n	800b136 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b126:	4b06      	ldr	r3, [pc, #24]	; (800b140 <HAL_PWREx_ConfigSupply+0x70>)
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b12e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b132:	d1ee      	bne.n	800b112 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b134:	2300      	movs	r3, #0
}
 800b136:	4618      	mov	r0, r3
 800b138:	3710      	adds	r7, #16
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	58024800 	.word	0x58024800

0800b144 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800b144:	b480      	push	{r7}
 800b146:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800b148:	4b05      	ldr	r3, [pc, #20]	; (800b160 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	4a04      	ldr	r2, [pc, #16]	; (800b160 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b14e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b152:	60d3      	str	r3, [r2, #12]
}
 800b154:	bf00      	nop
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	58024800 	.word	0x58024800

0800b164 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b086      	sub	sp, #24
 800b168:	af02      	add	r7, sp, #8
 800b16a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b16c:	f7f9 fe12 	bl	8004d94 <HAL_GetTick>
 800b170:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d101      	bne.n	800b17c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800b178:	2301      	movs	r3, #1
 800b17a:	e05f      	b.n	800b23c <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b182:	b2db      	uxtb	r3, r3
 800b184:	2b00      	cmp	r3, #0
 800b186:	d107      	bne.n	800b198 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f7f8 ffc9 	bl	8004120 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800b18e:	f241 3188 	movw	r1, #5000	; 0x1388
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 f85a 	bl	800b24c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	689b      	ldr	r3, [r3, #8]
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	021a      	lsls	r2, r3, #8
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	430a      	orrs	r2, r1
 800b1b0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	2120      	movs	r1, #32
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 f852 	bl	800b268 <QSPI_WaitFlagStateUntilTimeout>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800b1c8:	7afb      	ldrb	r3, [r7, #11]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d135      	bne.n	800b23a <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	4b1b      	ldr	r3, [pc, #108]	; (800b244 <HAL_QSPI_Init+0xe0>)
 800b1d6:	4013      	ands	r3, r2
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	6852      	ldr	r2, [r2, #4]
 800b1dc:	0611      	lsls	r1, r2, #24
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	68d2      	ldr	r2, [r2, #12]
 800b1e2:	4311      	orrs	r1, r2
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	69d2      	ldr	r2, [r2, #28]
 800b1e8:	4311      	orrs	r1, r2
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	6a12      	ldr	r2, [r2, #32]
 800b1ee:	4311      	orrs	r1, r2
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	6812      	ldr	r2, [r2, #0]
 800b1f4:	430b      	orrs	r3, r1
 800b1f6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	685a      	ldr	r2, [r3, #4]
 800b1fe:	4b12      	ldr	r3, [pc, #72]	; (800b248 <HAL_QSPI_Init+0xe4>)
 800b200:	4013      	ands	r3, r2
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	6912      	ldr	r2, [r2, #16]
 800b206:	0411      	lsls	r1, r2, #16
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	6952      	ldr	r2, [r2, #20]
 800b20c:	4311      	orrs	r1, r2
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	6992      	ldr	r2, [r2, #24]
 800b212:	4311      	orrs	r1, r2
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	6812      	ldr	r2, [r2, #0]
 800b218:	430b      	orrs	r3, r1
 800b21a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f042 0201 	orr.w	r2, r2, #1
 800b22a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2201      	movs	r2, #1
 800b236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800b23a:	7afb      	ldrb	r3, [r7, #11]
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3710      	adds	r7, #16
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	00ffff2f 	.word	0x00ffff2f
 800b248:	ffe0f8fe 	.word	0xffe0f8fe

0800b24c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	683a      	ldr	r2, [r7, #0]
 800b25a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800b25c:	bf00      	nop
 800b25e:	370c      	adds	r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr

0800b268 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	603b      	str	r3, [r7, #0]
 800b274:	4613      	mov	r3, r2
 800b276:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b278:	e01a      	b.n	800b2b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b27a:	69bb      	ldr	r3, [r7, #24]
 800b27c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b280:	d016      	beq.n	800b2b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b282:	f7f9 fd87 	bl	8004d94 <HAL_GetTick>
 800b286:	4602      	mov	r2, r0
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	1ad3      	subs	r3, r2, r3
 800b28c:	69ba      	ldr	r2, [r7, #24]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d302      	bcc.n	800b298 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d10b      	bne.n	800b2b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2204      	movs	r2, #4
 800b29c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2a4:	f043 0201 	orr.w	r2, r3, #1
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	e00e      	b.n	800b2ce <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	689a      	ldr	r2, [r3, #8]
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	4013      	ands	r3, r2
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	bf14      	ite	ne
 800b2be:	2301      	movne	r3, #1
 800b2c0:	2300      	moveq	r3, #0
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	79fb      	ldrb	r3, [r7, #7]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d1d6      	bne.n	800b27a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
	...

0800b2d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b08c      	sub	sp, #48	; 0x30
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d102      	bne.n	800b2ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	f000 bc48 	b.w	800bb7c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f003 0301 	and.w	r3, r3, #1
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	f000 8088 	beq.w	800b40a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b2fa:	4b99      	ldr	r3, [pc, #612]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b302:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b304:	4b96      	ldr	r3, [pc, #600]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b308:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b30c:	2b10      	cmp	r3, #16
 800b30e:	d007      	beq.n	800b320 <HAL_RCC_OscConfig+0x48>
 800b310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b312:	2b18      	cmp	r3, #24
 800b314:	d111      	bne.n	800b33a <HAL_RCC_OscConfig+0x62>
 800b316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b318:	f003 0303 	and.w	r3, r3, #3
 800b31c:	2b02      	cmp	r3, #2
 800b31e:	d10c      	bne.n	800b33a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b320:	4b8f      	ldr	r3, [pc, #572]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d06d      	beq.n	800b408 <HAL_RCC_OscConfig+0x130>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d169      	bne.n	800b408 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	f000 bc21 	b.w	800bb7c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b342:	d106      	bne.n	800b352 <HAL_RCC_OscConfig+0x7a>
 800b344:	4b86      	ldr	r3, [pc, #536]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a85      	ldr	r2, [pc, #532]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b34a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b34e:	6013      	str	r3, [r2, #0]
 800b350:	e02e      	b.n	800b3b0 <HAL_RCC_OscConfig+0xd8>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d10c      	bne.n	800b374 <HAL_RCC_OscConfig+0x9c>
 800b35a:	4b81      	ldr	r3, [pc, #516]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a80      	ldr	r2, [pc, #512]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b364:	6013      	str	r3, [r2, #0]
 800b366:	4b7e      	ldr	r3, [pc, #504]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4a7d      	ldr	r2, [pc, #500]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b36c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b370:	6013      	str	r3, [r2, #0]
 800b372:	e01d      	b.n	800b3b0 <HAL_RCC_OscConfig+0xd8>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b37c:	d10c      	bne.n	800b398 <HAL_RCC_OscConfig+0xc0>
 800b37e:	4b78      	ldr	r3, [pc, #480]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a77      	ldr	r2, [pc, #476]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b388:	6013      	str	r3, [r2, #0]
 800b38a:	4b75      	ldr	r3, [pc, #468]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4a74      	ldr	r2, [pc, #464]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b394:	6013      	str	r3, [r2, #0]
 800b396:	e00b      	b.n	800b3b0 <HAL_RCC_OscConfig+0xd8>
 800b398:	4b71      	ldr	r3, [pc, #452]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a70      	ldr	r2, [pc, #448]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b39e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3a2:	6013      	str	r3, [r2, #0]
 800b3a4:	4b6e      	ldr	r3, [pc, #440]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a6d      	ldr	r2, [pc, #436]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b3aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b3ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d013      	beq.n	800b3e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3b8:	f7f9 fcec 	bl	8004d94 <HAL_GetTick>
 800b3bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b3be:	e008      	b.n	800b3d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b3c0:	f7f9 fce8 	bl	8004d94 <HAL_GetTick>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c8:	1ad3      	subs	r3, r2, r3
 800b3ca:	2b64      	cmp	r3, #100	; 0x64
 800b3cc:	d901      	bls.n	800b3d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b3ce:	2303      	movs	r3, #3
 800b3d0:	e3d4      	b.n	800bb7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b3d2:	4b63      	ldr	r3, [pc, #396]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d0f0      	beq.n	800b3c0 <HAL_RCC_OscConfig+0xe8>
 800b3de:	e014      	b.n	800b40a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3e0:	f7f9 fcd8 	bl	8004d94 <HAL_GetTick>
 800b3e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b3e6:	e008      	b.n	800b3fa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b3e8:	f7f9 fcd4 	bl	8004d94 <HAL_GetTick>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f0:	1ad3      	subs	r3, r2, r3
 800b3f2:	2b64      	cmp	r3, #100	; 0x64
 800b3f4:	d901      	bls.n	800b3fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b3f6:	2303      	movs	r3, #3
 800b3f8:	e3c0      	b.n	800bb7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b3fa:	4b59      	ldr	r3, [pc, #356]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b402:	2b00      	cmp	r3, #0
 800b404:	d1f0      	bne.n	800b3e8 <HAL_RCC_OscConfig+0x110>
 800b406:	e000      	b.n	800b40a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f003 0302 	and.w	r3, r3, #2
 800b412:	2b00      	cmp	r3, #0
 800b414:	f000 80ca 	beq.w	800b5ac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b418:	4b51      	ldr	r3, [pc, #324]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b41a:	691b      	ldr	r3, [r3, #16]
 800b41c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b420:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b422:	4b4f      	ldr	r3, [pc, #316]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b426:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b428:	6a3b      	ldr	r3, [r7, #32]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d007      	beq.n	800b43e <HAL_RCC_OscConfig+0x166>
 800b42e:	6a3b      	ldr	r3, [r7, #32]
 800b430:	2b18      	cmp	r3, #24
 800b432:	d156      	bne.n	800b4e2 <HAL_RCC_OscConfig+0x20a>
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	f003 0303 	and.w	r3, r3, #3
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d151      	bne.n	800b4e2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b43e:	4b48      	ldr	r3, [pc, #288]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f003 0304 	and.w	r3, r3, #4
 800b446:	2b00      	cmp	r3, #0
 800b448:	d005      	beq.n	800b456 <HAL_RCC_OscConfig+0x17e>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d101      	bne.n	800b456 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800b452:	2301      	movs	r3, #1
 800b454:	e392      	b.n	800bb7c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b456:	4b42      	ldr	r3, [pc, #264]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f023 0219 	bic.w	r2, r3, #25
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	68db      	ldr	r3, [r3, #12]
 800b462:	493f      	ldr	r1, [pc, #252]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b464:	4313      	orrs	r3, r2
 800b466:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b468:	f7f9 fc94 	bl	8004d94 <HAL_GetTick>
 800b46c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b46e:	e008      	b.n	800b482 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b470:	f7f9 fc90 	bl	8004d94 <HAL_GetTick>
 800b474:	4602      	mov	r2, r0
 800b476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b478:	1ad3      	subs	r3, r2, r3
 800b47a:	2b02      	cmp	r3, #2
 800b47c:	d901      	bls.n	800b482 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b47e:	2303      	movs	r3, #3
 800b480:	e37c      	b.n	800bb7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b482:	4b37      	ldr	r3, [pc, #220]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f003 0304 	and.w	r3, r3, #4
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d0f0      	beq.n	800b470 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b48e:	f7f9 fcb1 	bl	8004df4 <HAL_GetREVID>
 800b492:	4603      	mov	r3, r0
 800b494:	f241 0203 	movw	r2, #4099	; 0x1003
 800b498:	4293      	cmp	r3, r2
 800b49a:	d817      	bhi.n	800b4cc <HAL_RCC_OscConfig+0x1f4>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	691b      	ldr	r3, [r3, #16]
 800b4a0:	2b40      	cmp	r3, #64	; 0x40
 800b4a2:	d108      	bne.n	800b4b6 <HAL_RCC_OscConfig+0x1de>
 800b4a4:	4b2e      	ldr	r3, [pc, #184]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b4ac:	4a2c      	ldr	r2, [pc, #176]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b4ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4b2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b4b4:	e07a      	b.n	800b5ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b4b6:	4b2a      	ldr	r3, [pc, #168]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	031b      	lsls	r3, r3, #12
 800b4c4:	4926      	ldr	r1, [pc, #152]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b4ca:	e06f      	b.n	800b5ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b4cc:	4b24      	ldr	r3, [pc, #144]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	691b      	ldr	r3, [r3, #16]
 800b4d8:	061b      	lsls	r3, r3, #24
 800b4da:	4921      	ldr	r1, [pc, #132]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b4e0:	e064      	b.n	800b5ac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d047      	beq.n	800b57a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b4ea:	4b1d      	ldr	r3, [pc, #116]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f023 0219 	bic.w	r2, r3, #25
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	491a      	ldr	r1, [pc, #104]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4fc:	f7f9 fc4a 	bl	8004d94 <HAL_GetTick>
 800b500:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b502:	e008      	b.n	800b516 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b504:	f7f9 fc46 	bl	8004d94 <HAL_GetTick>
 800b508:	4602      	mov	r2, r0
 800b50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50c:	1ad3      	subs	r3, r2, r3
 800b50e:	2b02      	cmp	r3, #2
 800b510:	d901      	bls.n	800b516 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800b512:	2303      	movs	r3, #3
 800b514:	e332      	b.n	800bb7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b516:	4b12      	ldr	r3, [pc, #72]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f003 0304 	and.w	r3, r3, #4
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d0f0      	beq.n	800b504 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b522:	f7f9 fc67 	bl	8004df4 <HAL_GetREVID>
 800b526:	4603      	mov	r3, r0
 800b528:	f241 0203 	movw	r2, #4099	; 0x1003
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d819      	bhi.n	800b564 <HAL_RCC_OscConfig+0x28c>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	691b      	ldr	r3, [r3, #16]
 800b534:	2b40      	cmp	r3, #64	; 0x40
 800b536:	d108      	bne.n	800b54a <HAL_RCC_OscConfig+0x272>
 800b538:	4b09      	ldr	r3, [pc, #36]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b540:	4a07      	ldr	r2, [pc, #28]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b546:	6053      	str	r3, [r2, #4]
 800b548:	e030      	b.n	800b5ac <HAL_RCC_OscConfig+0x2d4>
 800b54a:	4b05      	ldr	r3, [pc, #20]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	031b      	lsls	r3, r3, #12
 800b558:	4901      	ldr	r1, [pc, #4]	; (800b560 <HAL_RCC_OscConfig+0x288>)
 800b55a:	4313      	orrs	r3, r2
 800b55c:	604b      	str	r3, [r1, #4]
 800b55e:	e025      	b.n	800b5ac <HAL_RCC_OscConfig+0x2d4>
 800b560:	58024400 	.word	0x58024400
 800b564:	4b9a      	ldr	r3, [pc, #616]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	691b      	ldr	r3, [r3, #16]
 800b570:	061b      	lsls	r3, r3, #24
 800b572:	4997      	ldr	r1, [pc, #604]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b574:	4313      	orrs	r3, r2
 800b576:	604b      	str	r3, [r1, #4]
 800b578:	e018      	b.n	800b5ac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b57a:	4b95      	ldr	r3, [pc, #596]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a94      	ldr	r2, [pc, #592]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b580:	f023 0301 	bic.w	r3, r3, #1
 800b584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b586:	f7f9 fc05 	bl	8004d94 <HAL_GetTick>
 800b58a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b58c:	e008      	b.n	800b5a0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b58e:	f7f9 fc01 	bl	8004d94 <HAL_GetTick>
 800b592:	4602      	mov	r2, r0
 800b594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b596:	1ad3      	subs	r3, r2, r3
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d901      	bls.n	800b5a0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800b59c:	2303      	movs	r3, #3
 800b59e:	e2ed      	b.n	800bb7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b5a0:	4b8b      	ldr	r3, [pc, #556]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f003 0304 	and.w	r3, r3, #4
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d1f0      	bne.n	800b58e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f003 0310 	and.w	r3, r3, #16
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	f000 80a9 	beq.w	800b70c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b5ba:	4b85      	ldr	r3, [pc, #532]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b5c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b5c4:	4b82      	ldr	r3, [pc, #520]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b5c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b5ca:	69bb      	ldr	r3, [r7, #24]
 800b5cc:	2b08      	cmp	r3, #8
 800b5ce:	d007      	beq.n	800b5e0 <HAL_RCC_OscConfig+0x308>
 800b5d0:	69bb      	ldr	r3, [r7, #24]
 800b5d2:	2b18      	cmp	r3, #24
 800b5d4:	d13a      	bne.n	800b64c <HAL_RCC_OscConfig+0x374>
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	f003 0303 	and.w	r3, r3, #3
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d135      	bne.n	800b64c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b5e0:	4b7b      	ldr	r3, [pc, #492]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d005      	beq.n	800b5f8 <HAL_RCC_OscConfig+0x320>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	69db      	ldr	r3, [r3, #28]
 800b5f0:	2b80      	cmp	r3, #128	; 0x80
 800b5f2:	d001      	beq.n	800b5f8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	e2c1      	b.n	800bb7c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b5f8:	f7f9 fbfc 	bl	8004df4 <HAL_GetREVID>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	f241 0203 	movw	r2, #4099	; 0x1003
 800b602:	4293      	cmp	r3, r2
 800b604:	d817      	bhi.n	800b636 <HAL_RCC_OscConfig+0x35e>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6a1b      	ldr	r3, [r3, #32]
 800b60a:	2b20      	cmp	r3, #32
 800b60c:	d108      	bne.n	800b620 <HAL_RCC_OscConfig+0x348>
 800b60e:	4b70      	ldr	r3, [pc, #448]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b616:	4a6e      	ldr	r2, [pc, #440]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b618:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b61c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b61e:	e075      	b.n	800b70c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b620:	4b6b      	ldr	r3, [pc, #428]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6a1b      	ldr	r3, [r3, #32]
 800b62c:	069b      	lsls	r3, r3, #26
 800b62e:	4968      	ldr	r1, [pc, #416]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b630:	4313      	orrs	r3, r2
 800b632:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b634:	e06a      	b.n	800b70c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b636:	4b66      	ldr	r3, [pc, #408]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a1b      	ldr	r3, [r3, #32]
 800b642:	061b      	lsls	r3, r3, #24
 800b644:	4962      	ldr	r1, [pc, #392]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b646:	4313      	orrs	r3, r2
 800b648:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b64a:	e05f      	b.n	800b70c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	69db      	ldr	r3, [r3, #28]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d042      	beq.n	800b6da <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b654:	4b5e      	ldr	r3, [pc, #376]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4a5d      	ldr	r2, [pc, #372]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b65a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b65e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b660:	f7f9 fb98 	bl	8004d94 <HAL_GetTick>
 800b664:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b666:	e008      	b.n	800b67a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b668:	f7f9 fb94 	bl	8004d94 <HAL_GetTick>
 800b66c:	4602      	mov	r2, r0
 800b66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b670:	1ad3      	subs	r3, r2, r3
 800b672:	2b02      	cmp	r3, #2
 800b674:	d901      	bls.n	800b67a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800b676:	2303      	movs	r3, #3
 800b678:	e280      	b.n	800bb7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b67a:	4b55      	ldr	r3, [pc, #340]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b682:	2b00      	cmp	r3, #0
 800b684:	d0f0      	beq.n	800b668 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b686:	f7f9 fbb5 	bl	8004df4 <HAL_GetREVID>
 800b68a:	4603      	mov	r3, r0
 800b68c:	f241 0203 	movw	r2, #4099	; 0x1003
 800b690:	4293      	cmp	r3, r2
 800b692:	d817      	bhi.n	800b6c4 <HAL_RCC_OscConfig+0x3ec>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6a1b      	ldr	r3, [r3, #32]
 800b698:	2b20      	cmp	r3, #32
 800b69a:	d108      	bne.n	800b6ae <HAL_RCC_OscConfig+0x3d6>
 800b69c:	4b4c      	ldr	r3, [pc, #304]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b6a4:	4a4a      	ldr	r2, [pc, #296]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b6a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b6aa:	6053      	str	r3, [r2, #4]
 800b6ac:	e02e      	b.n	800b70c <HAL_RCC_OscConfig+0x434>
 800b6ae:	4b48      	ldr	r3, [pc, #288]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6a1b      	ldr	r3, [r3, #32]
 800b6ba:	069b      	lsls	r3, r3, #26
 800b6bc:	4944      	ldr	r1, [pc, #272]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	604b      	str	r3, [r1, #4]
 800b6c2:	e023      	b.n	800b70c <HAL_RCC_OscConfig+0x434>
 800b6c4:	4b42      	ldr	r3, [pc, #264]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6a1b      	ldr	r3, [r3, #32]
 800b6d0:	061b      	lsls	r3, r3, #24
 800b6d2:	493f      	ldr	r1, [pc, #252]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	60cb      	str	r3, [r1, #12]
 800b6d8:	e018      	b.n	800b70c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b6da:	4b3d      	ldr	r3, [pc, #244]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a3c      	ldr	r2, [pc, #240]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b6e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6e6:	f7f9 fb55 	bl	8004d94 <HAL_GetTick>
 800b6ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b6ec:	e008      	b.n	800b700 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b6ee:	f7f9 fb51 	bl	8004d94 <HAL_GetTick>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f6:	1ad3      	subs	r3, r2, r3
 800b6f8:	2b02      	cmp	r3, #2
 800b6fa:	d901      	bls.n	800b700 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b6fc:	2303      	movs	r3, #3
 800b6fe:	e23d      	b.n	800bb7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b700:	4b33      	ldr	r3, [pc, #204]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d1f0      	bne.n	800b6ee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f003 0308 	and.w	r3, r3, #8
 800b714:	2b00      	cmp	r3, #0
 800b716:	d036      	beq.n	800b786 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	695b      	ldr	r3, [r3, #20]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d019      	beq.n	800b754 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b720:	4b2b      	ldr	r3, [pc, #172]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b724:	4a2a      	ldr	r2, [pc, #168]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b726:	f043 0301 	orr.w	r3, r3, #1
 800b72a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b72c:	f7f9 fb32 	bl	8004d94 <HAL_GetTick>
 800b730:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b732:	e008      	b.n	800b746 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b734:	f7f9 fb2e 	bl	8004d94 <HAL_GetTick>
 800b738:	4602      	mov	r2, r0
 800b73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73c:	1ad3      	subs	r3, r2, r3
 800b73e:	2b02      	cmp	r3, #2
 800b740:	d901      	bls.n	800b746 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800b742:	2303      	movs	r3, #3
 800b744:	e21a      	b.n	800bb7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b746:	4b22      	ldr	r3, [pc, #136]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b74a:	f003 0302 	and.w	r3, r3, #2
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d0f0      	beq.n	800b734 <HAL_RCC_OscConfig+0x45c>
 800b752:	e018      	b.n	800b786 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b754:	4b1e      	ldr	r3, [pc, #120]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b758:	4a1d      	ldr	r2, [pc, #116]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b75a:	f023 0301 	bic.w	r3, r3, #1
 800b75e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b760:	f7f9 fb18 	bl	8004d94 <HAL_GetTick>
 800b764:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b766:	e008      	b.n	800b77a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b768:	f7f9 fb14 	bl	8004d94 <HAL_GetTick>
 800b76c:	4602      	mov	r2, r0
 800b76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b770:	1ad3      	subs	r3, r2, r3
 800b772:	2b02      	cmp	r3, #2
 800b774:	d901      	bls.n	800b77a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800b776:	2303      	movs	r3, #3
 800b778:	e200      	b.n	800bb7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b77a:	4b15      	ldr	r3, [pc, #84]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b77c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b77e:	f003 0302 	and.w	r3, r3, #2
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1f0      	bne.n	800b768 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f003 0320 	and.w	r3, r3, #32
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d039      	beq.n	800b806 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	699b      	ldr	r3, [r3, #24]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d01c      	beq.n	800b7d4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b79a:	4b0d      	ldr	r3, [pc, #52]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a0c      	ldr	r2, [pc, #48]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b7a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b7a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b7a6:	f7f9 faf5 	bl	8004d94 <HAL_GetTick>
 800b7aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b7ac:	e008      	b.n	800b7c0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b7ae:	f7f9 faf1 	bl	8004d94 <HAL_GetTick>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b6:	1ad3      	subs	r3, r2, r3
 800b7b8:	2b02      	cmp	r3, #2
 800b7ba:	d901      	bls.n	800b7c0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800b7bc:	2303      	movs	r3, #3
 800b7be:	e1dd      	b.n	800bb7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b7c0:	4b03      	ldr	r3, [pc, #12]	; (800b7d0 <HAL_RCC_OscConfig+0x4f8>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d0f0      	beq.n	800b7ae <HAL_RCC_OscConfig+0x4d6>
 800b7cc:	e01b      	b.n	800b806 <HAL_RCC_OscConfig+0x52e>
 800b7ce:	bf00      	nop
 800b7d0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b7d4:	4b9b      	ldr	r3, [pc, #620]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	4a9a      	ldr	r2, [pc, #616]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b7da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b7e0:	f7f9 fad8 	bl	8004d94 <HAL_GetTick>
 800b7e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b7e6:	e008      	b.n	800b7fa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b7e8:	f7f9 fad4 	bl	8004d94 <HAL_GetTick>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f0:	1ad3      	subs	r3, r2, r3
 800b7f2:	2b02      	cmp	r3, #2
 800b7f4:	d901      	bls.n	800b7fa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800b7f6:	2303      	movs	r3, #3
 800b7f8:	e1c0      	b.n	800bb7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b7fa:	4b92      	ldr	r3, [pc, #584]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b802:	2b00      	cmp	r3, #0
 800b804:	d1f0      	bne.n	800b7e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f003 0304 	and.w	r3, r3, #4
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f000 8081 	beq.w	800b916 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b814:	4b8c      	ldr	r3, [pc, #560]	; (800ba48 <HAL_RCC_OscConfig+0x770>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a8b      	ldr	r2, [pc, #556]	; (800ba48 <HAL_RCC_OscConfig+0x770>)
 800b81a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b81e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b820:	f7f9 fab8 	bl	8004d94 <HAL_GetTick>
 800b824:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b826:	e008      	b.n	800b83a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b828:	f7f9 fab4 	bl	8004d94 <HAL_GetTick>
 800b82c:	4602      	mov	r2, r0
 800b82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b830:	1ad3      	subs	r3, r2, r3
 800b832:	2b64      	cmp	r3, #100	; 0x64
 800b834:	d901      	bls.n	800b83a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800b836:	2303      	movs	r3, #3
 800b838:	e1a0      	b.n	800bb7c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b83a:	4b83      	ldr	r3, [pc, #524]	; (800ba48 <HAL_RCC_OscConfig+0x770>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b842:	2b00      	cmp	r3, #0
 800b844:	d0f0      	beq.n	800b828 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	d106      	bne.n	800b85c <HAL_RCC_OscConfig+0x584>
 800b84e:	4b7d      	ldr	r3, [pc, #500]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b852:	4a7c      	ldr	r2, [pc, #496]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b854:	f043 0301 	orr.w	r3, r3, #1
 800b858:	6713      	str	r3, [r2, #112]	; 0x70
 800b85a:	e02d      	b.n	800b8b8 <HAL_RCC_OscConfig+0x5e0>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d10c      	bne.n	800b87e <HAL_RCC_OscConfig+0x5a6>
 800b864:	4b77      	ldr	r3, [pc, #476]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b868:	4a76      	ldr	r2, [pc, #472]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b86a:	f023 0301 	bic.w	r3, r3, #1
 800b86e:	6713      	str	r3, [r2, #112]	; 0x70
 800b870:	4b74      	ldr	r3, [pc, #464]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b874:	4a73      	ldr	r2, [pc, #460]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b876:	f023 0304 	bic.w	r3, r3, #4
 800b87a:	6713      	str	r3, [r2, #112]	; 0x70
 800b87c:	e01c      	b.n	800b8b8 <HAL_RCC_OscConfig+0x5e0>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	689b      	ldr	r3, [r3, #8]
 800b882:	2b05      	cmp	r3, #5
 800b884:	d10c      	bne.n	800b8a0 <HAL_RCC_OscConfig+0x5c8>
 800b886:	4b6f      	ldr	r3, [pc, #444]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b88a:	4a6e      	ldr	r2, [pc, #440]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b88c:	f043 0304 	orr.w	r3, r3, #4
 800b890:	6713      	str	r3, [r2, #112]	; 0x70
 800b892:	4b6c      	ldr	r3, [pc, #432]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b896:	4a6b      	ldr	r2, [pc, #428]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b898:	f043 0301 	orr.w	r3, r3, #1
 800b89c:	6713      	str	r3, [r2, #112]	; 0x70
 800b89e:	e00b      	b.n	800b8b8 <HAL_RCC_OscConfig+0x5e0>
 800b8a0:	4b68      	ldr	r3, [pc, #416]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b8a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8a4:	4a67      	ldr	r2, [pc, #412]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b8a6:	f023 0301 	bic.w	r3, r3, #1
 800b8aa:	6713      	str	r3, [r2, #112]	; 0x70
 800b8ac:	4b65      	ldr	r3, [pc, #404]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b8ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8b0:	4a64      	ldr	r2, [pc, #400]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b8b2:	f023 0304 	bic.w	r3, r3, #4
 800b8b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d015      	beq.n	800b8ec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8c0:	f7f9 fa68 	bl	8004d94 <HAL_GetTick>
 800b8c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b8c6:	e00a      	b.n	800b8de <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b8c8:	f7f9 fa64 	bl	8004d94 <HAL_GetTick>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d901      	bls.n	800b8de <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800b8da:	2303      	movs	r3, #3
 800b8dc:	e14e      	b.n	800bb7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b8de:	4b59      	ldr	r3, [pc, #356]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b8e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8e2:	f003 0302 	and.w	r3, r3, #2
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d0ee      	beq.n	800b8c8 <HAL_RCC_OscConfig+0x5f0>
 800b8ea:	e014      	b.n	800b916 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8ec:	f7f9 fa52 	bl	8004d94 <HAL_GetTick>
 800b8f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b8f2:	e00a      	b.n	800b90a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b8f4:	f7f9 fa4e 	bl	8004d94 <HAL_GetTick>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fc:	1ad3      	subs	r3, r2, r3
 800b8fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800b902:	4293      	cmp	r3, r2
 800b904:	d901      	bls.n	800b90a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800b906:	2303      	movs	r3, #3
 800b908:	e138      	b.n	800bb7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b90a:	4b4e      	ldr	r3, [pc, #312]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b90c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b90e:	f003 0302 	and.w	r3, r3, #2
 800b912:	2b00      	cmp	r3, #0
 800b914:	d1ee      	bne.n	800b8f4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	f000 812d 	beq.w	800bb7a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b920:	4b48      	ldr	r3, [pc, #288]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b922:	691b      	ldr	r3, [r3, #16]
 800b924:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b928:	2b18      	cmp	r3, #24
 800b92a:	f000 80bd 	beq.w	800baa8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b932:	2b02      	cmp	r3, #2
 800b934:	f040 809e 	bne.w	800ba74 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b938:	4b42      	ldr	r3, [pc, #264]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4a41      	ldr	r2, [pc, #260]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b93e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b944:	f7f9 fa26 	bl	8004d94 <HAL_GetTick>
 800b948:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b94a:	e008      	b.n	800b95e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b94c:	f7f9 fa22 	bl	8004d94 <HAL_GetTick>
 800b950:	4602      	mov	r2, r0
 800b952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b954:	1ad3      	subs	r3, r2, r3
 800b956:	2b02      	cmp	r3, #2
 800b958:	d901      	bls.n	800b95e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800b95a:	2303      	movs	r3, #3
 800b95c:	e10e      	b.n	800bb7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b95e:	4b39      	ldr	r3, [pc, #228]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1f0      	bne.n	800b94c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b96a:	4b36      	ldr	r3, [pc, #216]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b96c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b96e:	4b37      	ldr	r3, [pc, #220]	; (800ba4c <HAL_RCC_OscConfig+0x774>)
 800b970:	4013      	ands	r3, r2
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b97a:	0112      	lsls	r2, r2, #4
 800b97c:	430a      	orrs	r2, r1
 800b97e:	4931      	ldr	r1, [pc, #196]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b980:	4313      	orrs	r3, r2
 800b982:	628b      	str	r3, [r1, #40]	; 0x28
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b988:	3b01      	subs	r3, #1
 800b98a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b992:	3b01      	subs	r3, #1
 800b994:	025b      	lsls	r3, r3, #9
 800b996:	b29b      	uxth	r3, r3
 800b998:	431a      	orrs	r2, r3
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b99e:	3b01      	subs	r3, #1
 800b9a0:	041b      	lsls	r3, r3, #16
 800b9a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b9a6:	431a      	orrs	r2, r3
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ac:	3b01      	subs	r3, #1
 800b9ae:	061b      	lsls	r3, r3, #24
 800b9b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b9b4:	4923      	ldr	r1, [pc, #140]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b9ba:	4b22      	ldr	r3, [pc, #136]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9be:	4a21      	ldr	r2, [pc, #132]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b9c0:	f023 0301 	bic.w	r3, r3, #1
 800b9c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b9c6:	4b1f      	ldr	r3, [pc, #124]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b9c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9ca:	4b21      	ldr	r3, [pc, #132]	; (800ba50 <HAL_RCC_OscConfig+0x778>)
 800b9cc:	4013      	ands	r3, r2
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b9d2:	00d2      	lsls	r2, r2, #3
 800b9d4:	491b      	ldr	r1, [pc, #108]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b9da:	4b1a      	ldr	r3, [pc, #104]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9de:	f023 020c 	bic.w	r2, r3, #12
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9e6:	4917      	ldr	r1, [pc, #92]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b9ec:	4b15      	ldr	r3, [pc, #84]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f0:	f023 0202 	bic.w	r2, r3, #2
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9f8:	4912      	ldr	r1, [pc, #72]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b9fe:	4b11      	ldr	r3, [pc, #68]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800ba00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba02:	4a10      	ldr	r2, [pc, #64]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800ba04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba0a:	4b0e      	ldr	r3, [pc, #56]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800ba0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba0e:	4a0d      	ldr	r2, [pc, #52]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800ba10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ba16:	4b0b      	ldr	r3, [pc, #44]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800ba18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba1a:	4a0a      	ldr	r2, [pc, #40]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800ba1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ba20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ba22:	4b08      	ldr	r3, [pc, #32]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800ba24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba26:	4a07      	ldr	r2, [pc, #28]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800ba28:	f043 0301 	orr.w	r3, r3, #1
 800ba2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ba2e:	4b05      	ldr	r3, [pc, #20]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4a04      	ldr	r2, [pc, #16]	; (800ba44 <HAL_RCC_OscConfig+0x76c>)
 800ba34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ba38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba3a:	f7f9 f9ab 	bl	8004d94 <HAL_GetTick>
 800ba3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ba40:	e011      	b.n	800ba66 <HAL_RCC_OscConfig+0x78e>
 800ba42:	bf00      	nop
 800ba44:	58024400 	.word	0x58024400
 800ba48:	58024800 	.word	0x58024800
 800ba4c:	fffffc0c 	.word	0xfffffc0c
 800ba50:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba54:	f7f9 f99e 	bl	8004d94 <HAL_GetTick>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5c:	1ad3      	subs	r3, r2, r3
 800ba5e:	2b02      	cmp	r3, #2
 800ba60:	d901      	bls.n	800ba66 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800ba62:	2303      	movs	r3, #3
 800ba64:	e08a      	b.n	800bb7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ba66:	4b47      	ldr	r3, [pc, #284]	; (800bb84 <HAL_RCC_OscConfig+0x8ac>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d0f0      	beq.n	800ba54 <HAL_RCC_OscConfig+0x77c>
 800ba72:	e082      	b.n	800bb7a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba74:	4b43      	ldr	r3, [pc, #268]	; (800bb84 <HAL_RCC_OscConfig+0x8ac>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a42      	ldr	r2, [pc, #264]	; (800bb84 <HAL_RCC_OscConfig+0x8ac>)
 800ba7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba80:	f7f9 f988 	bl	8004d94 <HAL_GetTick>
 800ba84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ba86:	e008      	b.n	800ba9a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba88:	f7f9 f984 	bl	8004d94 <HAL_GetTick>
 800ba8c:	4602      	mov	r2, r0
 800ba8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba90:	1ad3      	subs	r3, r2, r3
 800ba92:	2b02      	cmp	r3, #2
 800ba94:	d901      	bls.n	800ba9a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800ba96:	2303      	movs	r3, #3
 800ba98:	e070      	b.n	800bb7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ba9a:	4b3a      	ldr	r3, [pc, #232]	; (800bb84 <HAL_RCC_OscConfig+0x8ac>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d1f0      	bne.n	800ba88 <HAL_RCC_OscConfig+0x7b0>
 800baa6:	e068      	b.n	800bb7a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800baa8:	4b36      	ldr	r3, [pc, #216]	; (800bb84 <HAL_RCC_OscConfig+0x8ac>)
 800baaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800baae:	4b35      	ldr	r3, [pc, #212]	; (800bb84 <HAL_RCC_OscConfig+0x8ac>)
 800bab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d031      	beq.n	800bb20 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	f003 0203 	and.w	r2, r3, #3
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d12a      	bne.n	800bb20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	091b      	lsrs	r3, r3, #4
 800bace:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d122      	bne.n	800bb20 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bae4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d11a      	bne.n	800bb20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	0a5b      	lsrs	r3, r3, #9
 800baee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baf6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d111      	bne.n	800bb20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	0c1b      	lsrs	r3, r3, #16
 800bb00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb08:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d108      	bne.n	800bb20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	0e1b      	lsrs	r3, r3, #24
 800bb12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb1a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d001      	beq.n	800bb24 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800bb20:	2301      	movs	r3, #1
 800bb22:	e02b      	b.n	800bb7c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800bb24:	4b17      	ldr	r3, [pc, #92]	; (800bb84 <HAL_RCC_OscConfig+0x8ac>)
 800bb26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb28:	08db      	lsrs	r3, r3, #3
 800bb2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb2e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb34:	693a      	ldr	r2, [r7, #16]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d01f      	beq.n	800bb7a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800bb3a:	4b12      	ldr	r3, [pc, #72]	; (800bb84 <HAL_RCC_OscConfig+0x8ac>)
 800bb3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb3e:	4a11      	ldr	r2, [pc, #68]	; (800bb84 <HAL_RCC_OscConfig+0x8ac>)
 800bb40:	f023 0301 	bic.w	r3, r3, #1
 800bb44:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bb46:	f7f9 f925 	bl	8004d94 <HAL_GetTick>
 800bb4a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800bb4c:	bf00      	nop
 800bb4e:	f7f9 f921 	bl	8004d94 <HAL_GetTick>
 800bb52:	4602      	mov	r2, r0
 800bb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d0f9      	beq.n	800bb4e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bb5a:	4b0a      	ldr	r3, [pc, #40]	; (800bb84 <HAL_RCC_OscConfig+0x8ac>)
 800bb5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb5e:	4b0a      	ldr	r3, [pc, #40]	; (800bb88 <HAL_RCC_OscConfig+0x8b0>)
 800bb60:	4013      	ands	r3, r2
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bb66:	00d2      	lsls	r2, r2, #3
 800bb68:	4906      	ldr	r1, [pc, #24]	; (800bb84 <HAL_RCC_OscConfig+0x8ac>)
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800bb6e:	4b05      	ldr	r3, [pc, #20]	; (800bb84 <HAL_RCC_OscConfig+0x8ac>)
 800bb70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb72:	4a04      	ldr	r2, [pc, #16]	; (800bb84 <HAL_RCC_OscConfig+0x8ac>)
 800bb74:	f043 0301 	orr.w	r3, r3, #1
 800bb78:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3730      	adds	r7, #48	; 0x30
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	58024400 	.word	0x58024400
 800bb88:	ffff0007 	.word	0xffff0007

0800bb8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b086      	sub	sp, #24
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d101      	bne.n	800bba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	e19c      	b.n	800beda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bba0:	4b8a      	ldr	r3, [pc, #552]	; (800bdcc <HAL_RCC_ClockConfig+0x240>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f003 030f 	and.w	r3, r3, #15
 800bba8:	683a      	ldr	r2, [r7, #0]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d910      	bls.n	800bbd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bbae:	4b87      	ldr	r3, [pc, #540]	; (800bdcc <HAL_RCC_ClockConfig+0x240>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f023 020f 	bic.w	r2, r3, #15
 800bbb6:	4985      	ldr	r1, [pc, #532]	; (800bdcc <HAL_RCC_ClockConfig+0x240>)
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bbbe:	4b83      	ldr	r3, [pc, #524]	; (800bdcc <HAL_RCC_ClockConfig+0x240>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f003 030f 	and.w	r3, r3, #15
 800bbc6:	683a      	ldr	r2, [r7, #0]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d001      	beq.n	800bbd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	e184      	b.n	800beda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f003 0304 	and.w	r3, r3, #4
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d010      	beq.n	800bbfe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	691a      	ldr	r2, [r3, #16]
 800bbe0:	4b7b      	ldr	r3, [pc, #492]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bbe2:	699b      	ldr	r3, [r3, #24]
 800bbe4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d908      	bls.n	800bbfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bbec:	4b78      	ldr	r3, [pc, #480]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bbee:	699b      	ldr	r3, [r3, #24]
 800bbf0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	4975      	ldr	r1, [pc, #468]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f003 0308 	and.w	r3, r3, #8
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d010      	beq.n	800bc2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	695a      	ldr	r2, [r3, #20]
 800bc0e:	4b70      	ldr	r3, [pc, #448]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bc10:	69db      	ldr	r3, [r3, #28]
 800bc12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d908      	bls.n	800bc2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bc1a:	4b6d      	ldr	r3, [pc, #436]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bc1c:	69db      	ldr	r3, [r3, #28]
 800bc1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	695b      	ldr	r3, [r3, #20]
 800bc26:	496a      	ldr	r1, [pc, #424]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f003 0310 	and.w	r3, r3, #16
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d010      	beq.n	800bc5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	699a      	ldr	r2, [r3, #24]
 800bc3c:	4b64      	ldr	r3, [pc, #400]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bc3e:	69db      	ldr	r3, [r3, #28]
 800bc40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d908      	bls.n	800bc5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bc48:	4b61      	ldr	r3, [pc, #388]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bc4a:	69db      	ldr	r3, [r3, #28]
 800bc4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	699b      	ldr	r3, [r3, #24]
 800bc54:	495e      	ldr	r1, [pc, #376]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bc56:	4313      	orrs	r3, r2
 800bc58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f003 0320 	and.w	r3, r3, #32
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d010      	beq.n	800bc88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	69da      	ldr	r2, [r3, #28]
 800bc6a:	4b59      	ldr	r3, [pc, #356]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bc6c:	6a1b      	ldr	r3, [r3, #32]
 800bc6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d908      	bls.n	800bc88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800bc76:	4b56      	ldr	r3, [pc, #344]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bc78:	6a1b      	ldr	r3, [r3, #32]
 800bc7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	69db      	ldr	r3, [r3, #28]
 800bc82:	4953      	ldr	r1, [pc, #332]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bc84:	4313      	orrs	r3, r2
 800bc86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f003 0302 	and.w	r3, r3, #2
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d010      	beq.n	800bcb6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	68da      	ldr	r2, [r3, #12]
 800bc98:	4b4d      	ldr	r3, [pc, #308]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bc9a:	699b      	ldr	r3, [r3, #24]
 800bc9c:	f003 030f 	and.w	r3, r3, #15
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d908      	bls.n	800bcb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bca4:	4b4a      	ldr	r3, [pc, #296]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bca6:	699b      	ldr	r3, [r3, #24]
 800bca8:	f023 020f 	bic.w	r2, r3, #15
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	4947      	ldr	r1, [pc, #284]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f003 0301 	and.w	r3, r3, #1
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d055      	beq.n	800bd6e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bcc2:	4b43      	ldr	r3, [pc, #268]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bcc4:	699b      	ldr	r3, [r3, #24]
 800bcc6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	689b      	ldr	r3, [r3, #8]
 800bcce:	4940      	ldr	r1, [pc, #256]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	2b02      	cmp	r3, #2
 800bcda:	d107      	bne.n	800bcec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bcdc:	4b3c      	ldr	r3, [pc, #240]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d121      	bne.n	800bd2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bce8:	2301      	movs	r3, #1
 800bcea:	e0f6      	b.n	800beda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	2b03      	cmp	r3, #3
 800bcf2:	d107      	bne.n	800bd04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bcf4:	4b36      	ldr	r3, [pc, #216]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d115      	bne.n	800bd2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bd00:	2301      	movs	r3, #1
 800bd02:	e0ea      	b.n	800beda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d107      	bne.n	800bd1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bd0c:	4b30      	ldr	r3, [pc, #192]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d109      	bne.n	800bd2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	e0de      	b.n	800beda <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bd1c:	4b2c      	ldr	r3, [pc, #176]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f003 0304 	and.w	r3, r3, #4
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d101      	bne.n	800bd2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e0d6      	b.n	800beda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bd2c:	4b28      	ldr	r3, [pc, #160]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bd2e:	691b      	ldr	r3, [r3, #16]
 800bd30:	f023 0207 	bic.w	r2, r3, #7
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	4925      	ldr	r1, [pc, #148]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd3e:	f7f9 f829 	bl	8004d94 <HAL_GetTick>
 800bd42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd44:	e00a      	b.n	800bd5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bd46:	f7f9 f825 	bl	8004d94 <HAL_GetTick>
 800bd4a:	4602      	mov	r2, r0
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	1ad3      	subs	r3, r2, r3
 800bd50:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d901      	bls.n	800bd5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800bd58:	2303      	movs	r3, #3
 800bd5a:	e0be      	b.n	800beda <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd5c:	4b1c      	ldr	r3, [pc, #112]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	00db      	lsls	r3, r3, #3
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d1eb      	bne.n	800bd46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f003 0302 	and.w	r3, r3, #2
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d010      	beq.n	800bd9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	68da      	ldr	r2, [r3, #12]
 800bd7e:	4b14      	ldr	r3, [pc, #80]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bd80:	699b      	ldr	r3, [r3, #24]
 800bd82:	f003 030f 	and.w	r3, r3, #15
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d208      	bcs.n	800bd9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bd8a:	4b11      	ldr	r3, [pc, #68]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bd8c:	699b      	ldr	r3, [r3, #24]
 800bd8e:	f023 020f 	bic.w	r2, r3, #15
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	68db      	ldr	r3, [r3, #12]
 800bd96:	490e      	ldr	r1, [pc, #56]	; (800bdd0 <HAL_RCC_ClockConfig+0x244>)
 800bd98:	4313      	orrs	r3, r2
 800bd9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bd9c:	4b0b      	ldr	r3, [pc, #44]	; (800bdcc <HAL_RCC_ClockConfig+0x240>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f003 030f 	and.w	r3, r3, #15
 800bda4:	683a      	ldr	r2, [r7, #0]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d214      	bcs.n	800bdd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdaa:	4b08      	ldr	r3, [pc, #32]	; (800bdcc <HAL_RCC_ClockConfig+0x240>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f023 020f 	bic.w	r2, r3, #15
 800bdb2:	4906      	ldr	r1, [pc, #24]	; (800bdcc <HAL_RCC_ClockConfig+0x240>)
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdba:	4b04      	ldr	r3, [pc, #16]	; (800bdcc <HAL_RCC_ClockConfig+0x240>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f003 030f 	and.w	r3, r3, #15
 800bdc2:	683a      	ldr	r2, [r7, #0]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d005      	beq.n	800bdd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	e086      	b.n	800beda <HAL_RCC_ClockConfig+0x34e>
 800bdcc:	52002000 	.word	0x52002000
 800bdd0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f003 0304 	and.w	r3, r3, #4
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d010      	beq.n	800be02 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	691a      	ldr	r2, [r3, #16]
 800bde4:	4b3f      	ldr	r3, [pc, #252]	; (800bee4 <HAL_RCC_ClockConfig+0x358>)
 800bde6:	699b      	ldr	r3, [r3, #24]
 800bde8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d208      	bcs.n	800be02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bdf0:	4b3c      	ldr	r3, [pc, #240]	; (800bee4 <HAL_RCC_ClockConfig+0x358>)
 800bdf2:	699b      	ldr	r3, [r3, #24]
 800bdf4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	691b      	ldr	r3, [r3, #16]
 800bdfc:	4939      	ldr	r1, [pc, #228]	; (800bee4 <HAL_RCC_ClockConfig+0x358>)
 800bdfe:	4313      	orrs	r3, r2
 800be00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f003 0308 	and.w	r3, r3, #8
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d010      	beq.n	800be30 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	695a      	ldr	r2, [r3, #20]
 800be12:	4b34      	ldr	r3, [pc, #208]	; (800bee4 <HAL_RCC_ClockConfig+0x358>)
 800be14:	69db      	ldr	r3, [r3, #28]
 800be16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d208      	bcs.n	800be30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800be1e:	4b31      	ldr	r3, [pc, #196]	; (800bee4 <HAL_RCC_ClockConfig+0x358>)
 800be20:	69db      	ldr	r3, [r3, #28]
 800be22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	695b      	ldr	r3, [r3, #20]
 800be2a:	492e      	ldr	r1, [pc, #184]	; (800bee4 <HAL_RCC_ClockConfig+0x358>)
 800be2c:	4313      	orrs	r3, r2
 800be2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f003 0310 	and.w	r3, r3, #16
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d010      	beq.n	800be5e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	699a      	ldr	r2, [r3, #24]
 800be40:	4b28      	ldr	r3, [pc, #160]	; (800bee4 <HAL_RCC_ClockConfig+0x358>)
 800be42:	69db      	ldr	r3, [r3, #28]
 800be44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800be48:	429a      	cmp	r2, r3
 800be4a:	d208      	bcs.n	800be5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800be4c:	4b25      	ldr	r3, [pc, #148]	; (800bee4 <HAL_RCC_ClockConfig+0x358>)
 800be4e:	69db      	ldr	r3, [r3, #28]
 800be50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	699b      	ldr	r3, [r3, #24]
 800be58:	4922      	ldr	r1, [pc, #136]	; (800bee4 <HAL_RCC_ClockConfig+0x358>)
 800be5a:	4313      	orrs	r3, r2
 800be5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f003 0320 	and.w	r3, r3, #32
 800be66:	2b00      	cmp	r3, #0
 800be68:	d010      	beq.n	800be8c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	69da      	ldr	r2, [r3, #28]
 800be6e:	4b1d      	ldr	r3, [pc, #116]	; (800bee4 <HAL_RCC_ClockConfig+0x358>)
 800be70:	6a1b      	ldr	r3, [r3, #32]
 800be72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800be76:	429a      	cmp	r2, r3
 800be78:	d208      	bcs.n	800be8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800be7a:	4b1a      	ldr	r3, [pc, #104]	; (800bee4 <HAL_RCC_ClockConfig+0x358>)
 800be7c:	6a1b      	ldr	r3, [r3, #32]
 800be7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	69db      	ldr	r3, [r3, #28]
 800be86:	4917      	ldr	r1, [pc, #92]	; (800bee4 <HAL_RCC_ClockConfig+0x358>)
 800be88:	4313      	orrs	r3, r2
 800be8a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800be8c:	f000 f834 	bl	800bef8 <HAL_RCC_GetSysClockFreq>
 800be90:	4602      	mov	r2, r0
 800be92:	4b14      	ldr	r3, [pc, #80]	; (800bee4 <HAL_RCC_ClockConfig+0x358>)
 800be94:	699b      	ldr	r3, [r3, #24]
 800be96:	0a1b      	lsrs	r3, r3, #8
 800be98:	f003 030f 	and.w	r3, r3, #15
 800be9c:	4912      	ldr	r1, [pc, #72]	; (800bee8 <HAL_RCC_ClockConfig+0x35c>)
 800be9e:	5ccb      	ldrb	r3, [r1, r3]
 800bea0:	f003 031f 	and.w	r3, r3, #31
 800bea4:	fa22 f303 	lsr.w	r3, r2, r3
 800bea8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800beaa:	4b0e      	ldr	r3, [pc, #56]	; (800bee4 <HAL_RCC_ClockConfig+0x358>)
 800beac:	699b      	ldr	r3, [r3, #24]
 800beae:	f003 030f 	and.w	r3, r3, #15
 800beb2:	4a0d      	ldr	r2, [pc, #52]	; (800bee8 <HAL_RCC_ClockConfig+0x35c>)
 800beb4:	5cd3      	ldrb	r3, [r2, r3]
 800beb6:	f003 031f 	and.w	r3, r3, #31
 800beba:	693a      	ldr	r2, [r7, #16]
 800bebc:	fa22 f303 	lsr.w	r3, r2, r3
 800bec0:	4a0a      	ldr	r2, [pc, #40]	; (800beec <HAL_RCC_ClockConfig+0x360>)
 800bec2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bec4:	4a0a      	ldr	r2, [pc, #40]	; (800bef0 <HAL_RCC_ClockConfig+0x364>)
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800beca:	4b0a      	ldr	r3, [pc, #40]	; (800bef4 <HAL_RCC_ClockConfig+0x368>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4618      	mov	r0, r3
 800bed0:	f7f8 ff16 	bl	8004d00 <HAL_InitTick>
 800bed4:	4603      	mov	r3, r0
 800bed6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800bed8:	7bfb      	ldrb	r3, [r7, #15]
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3718      	adds	r7, #24
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	58024400 	.word	0x58024400
 800bee8:	08012624 	.word	0x08012624
 800beec:	24000478 	.word	0x24000478
 800bef0:	24000474 	.word	0x24000474
 800bef4:	2400047c 	.word	0x2400047c

0800bef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bef8:	b480      	push	{r7}
 800befa:	b089      	sub	sp, #36	; 0x24
 800befc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800befe:	4bb3      	ldr	r3, [pc, #716]	; (800c1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf00:	691b      	ldr	r3, [r3, #16]
 800bf02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bf06:	2b18      	cmp	r3, #24
 800bf08:	f200 8155 	bhi.w	800c1b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800bf0c:	a201      	add	r2, pc, #4	; (adr r2, 800bf14 <HAL_RCC_GetSysClockFreq+0x1c>)
 800bf0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf12:	bf00      	nop
 800bf14:	0800bf79 	.word	0x0800bf79
 800bf18:	0800c1b7 	.word	0x0800c1b7
 800bf1c:	0800c1b7 	.word	0x0800c1b7
 800bf20:	0800c1b7 	.word	0x0800c1b7
 800bf24:	0800c1b7 	.word	0x0800c1b7
 800bf28:	0800c1b7 	.word	0x0800c1b7
 800bf2c:	0800c1b7 	.word	0x0800c1b7
 800bf30:	0800c1b7 	.word	0x0800c1b7
 800bf34:	0800bf9f 	.word	0x0800bf9f
 800bf38:	0800c1b7 	.word	0x0800c1b7
 800bf3c:	0800c1b7 	.word	0x0800c1b7
 800bf40:	0800c1b7 	.word	0x0800c1b7
 800bf44:	0800c1b7 	.word	0x0800c1b7
 800bf48:	0800c1b7 	.word	0x0800c1b7
 800bf4c:	0800c1b7 	.word	0x0800c1b7
 800bf50:	0800c1b7 	.word	0x0800c1b7
 800bf54:	0800bfa5 	.word	0x0800bfa5
 800bf58:	0800c1b7 	.word	0x0800c1b7
 800bf5c:	0800c1b7 	.word	0x0800c1b7
 800bf60:	0800c1b7 	.word	0x0800c1b7
 800bf64:	0800c1b7 	.word	0x0800c1b7
 800bf68:	0800c1b7 	.word	0x0800c1b7
 800bf6c:	0800c1b7 	.word	0x0800c1b7
 800bf70:	0800c1b7 	.word	0x0800c1b7
 800bf74:	0800bfab 	.word	0x0800bfab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf78:	4b94      	ldr	r3, [pc, #592]	; (800c1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f003 0320 	and.w	r3, r3, #32
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d009      	beq.n	800bf98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf84:	4b91      	ldr	r3, [pc, #580]	; (800c1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	08db      	lsrs	r3, r3, #3
 800bf8a:	f003 0303 	and.w	r3, r3, #3
 800bf8e:	4a90      	ldr	r2, [pc, #576]	; (800c1d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bf90:	fa22 f303 	lsr.w	r3, r2, r3
 800bf94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800bf96:	e111      	b.n	800c1bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800bf98:	4b8d      	ldr	r3, [pc, #564]	; (800c1d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bf9a:	61bb      	str	r3, [r7, #24]
      break;
 800bf9c:	e10e      	b.n	800c1bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800bf9e:	4b8d      	ldr	r3, [pc, #564]	; (800c1d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bfa0:	61bb      	str	r3, [r7, #24]
      break;
 800bfa2:	e10b      	b.n	800c1bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800bfa4:	4b8c      	ldr	r3, [pc, #560]	; (800c1d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800bfa6:	61bb      	str	r3, [r7, #24]
      break;
 800bfa8:	e108      	b.n	800c1bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bfaa:	4b88      	ldr	r3, [pc, #544]	; (800c1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfae:	f003 0303 	and.w	r3, r3, #3
 800bfb2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800bfb4:	4b85      	ldr	r3, [pc, #532]	; (800c1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfb8:	091b      	lsrs	r3, r3, #4
 800bfba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bfbe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bfc0:	4b82      	ldr	r3, [pc, #520]	; (800c1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc4:	f003 0301 	and.w	r3, r3, #1
 800bfc8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bfca:	4b80      	ldr	r3, [pc, #512]	; (800c1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfce:	08db      	lsrs	r3, r3, #3
 800bfd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	fb02 f303 	mul.w	r3, r2, r3
 800bfda:	ee07 3a90 	vmov	s15, r3
 800bfde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfe2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	f000 80e1 	beq.w	800c1b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	2b02      	cmp	r3, #2
 800bff2:	f000 8083 	beq.w	800c0fc <HAL_RCC_GetSysClockFreq+0x204>
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	2b02      	cmp	r3, #2
 800bffa:	f200 80a1 	bhi.w	800c140 <HAL_RCC_GetSysClockFreq+0x248>
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d003      	beq.n	800c00c <HAL_RCC_GetSysClockFreq+0x114>
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	2b01      	cmp	r3, #1
 800c008:	d056      	beq.n	800c0b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c00a:	e099      	b.n	800c140 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c00c:	4b6f      	ldr	r3, [pc, #444]	; (800c1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f003 0320 	and.w	r3, r3, #32
 800c014:	2b00      	cmp	r3, #0
 800c016:	d02d      	beq.n	800c074 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c018:	4b6c      	ldr	r3, [pc, #432]	; (800c1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	08db      	lsrs	r3, r3, #3
 800c01e:	f003 0303 	and.w	r3, r3, #3
 800c022:	4a6b      	ldr	r2, [pc, #428]	; (800c1d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c024:	fa22 f303 	lsr.w	r3, r2, r3
 800c028:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	ee07 3a90 	vmov	s15, r3
 800c030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	ee07 3a90 	vmov	s15, r3
 800c03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c03e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c042:	4b62      	ldr	r3, [pc, #392]	; (800c1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c04a:	ee07 3a90 	vmov	s15, r3
 800c04e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c052:	ed97 6a02 	vldr	s12, [r7, #8]
 800c056:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c1dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800c05a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c05e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c06a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c06e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c072:	e087      	b.n	800c184 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	ee07 3a90 	vmov	s15, r3
 800c07a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c07e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c1e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c086:	4b51      	ldr	r3, [pc, #324]	; (800c1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c08e:	ee07 3a90 	vmov	s15, r3
 800c092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c096:	ed97 6a02 	vldr	s12, [r7, #8]
 800c09a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c1dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800c09e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c0b6:	e065      	b.n	800c184 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	ee07 3a90 	vmov	s15, r3
 800c0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c1e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c0c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0ca:	4b40      	ldr	r3, [pc, #256]	; (800c1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0d2:	ee07 3a90 	vmov	s15, r3
 800c0d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0da:	ed97 6a02 	vldr	s12, [r7, #8]
 800c0de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c1dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800c0e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c0fa:	e043      	b.n	800c184 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	ee07 3a90 	vmov	s15, r3
 800c102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c106:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c1e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c10a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c10e:	4b2f      	ldr	r3, [pc, #188]	; (800c1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c116:	ee07 3a90 	vmov	s15, r3
 800c11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c11e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c122:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c1dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800c126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c12e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c13a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c13e:	e021      	b.n	800c184 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	ee07 3a90 	vmov	s15, r3
 800c146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c14a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c1e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c14e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c152:	4b1e      	ldr	r3, [pc, #120]	; (800c1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c15a:	ee07 3a90 	vmov	s15, r3
 800c15e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c162:	ed97 6a02 	vldr	s12, [r7, #8]
 800c166:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c1dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800c16a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c16e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c17a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c17e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c182:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c184:	4b11      	ldr	r3, [pc, #68]	; (800c1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c188:	0a5b      	lsrs	r3, r3, #9
 800c18a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c18e:	3301      	adds	r3, #1
 800c190:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	ee07 3a90 	vmov	s15, r3
 800c198:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c19c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1a8:	ee17 3a90 	vmov	r3, s15
 800c1ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c1ae:	e005      	b.n	800c1bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	61bb      	str	r3, [r7, #24]
      break;
 800c1b4:	e002      	b.n	800c1bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c1b6:	4b07      	ldr	r3, [pc, #28]	; (800c1d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c1b8:	61bb      	str	r3, [r7, #24]
      break;
 800c1ba:	bf00      	nop
  }

  return sysclockfreq;
 800c1bc:	69bb      	ldr	r3, [r7, #24]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3724      	adds	r7, #36	; 0x24
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop
 800c1cc:	58024400 	.word	0x58024400
 800c1d0:	03d09000 	.word	0x03d09000
 800c1d4:	003d0900 	.word	0x003d0900
 800c1d8:	017d7840 	.word	0x017d7840
 800c1dc:	46000000 	.word	0x46000000
 800c1e0:	4c742400 	.word	0x4c742400
 800c1e4:	4a742400 	.word	0x4a742400
 800c1e8:	4bbebc20 	.word	0x4bbebc20

0800c1ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c1f2:	f7ff fe81 	bl	800bef8 <HAL_RCC_GetSysClockFreq>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	4b10      	ldr	r3, [pc, #64]	; (800c23c <HAL_RCC_GetHCLKFreq+0x50>)
 800c1fa:	699b      	ldr	r3, [r3, #24]
 800c1fc:	0a1b      	lsrs	r3, r3, #8
 800c1fe:	f003 030f 	and.w	r3, r3, #15
 800c202:	490f      	ldr	r1, [pc, #60]	; (800c240 <HAL_RCC_GetHCLKFreq+0x54>)
 800c204:	5ccb      	ldrb	r3, [r1, r3]
 800c206:	f003 031f 	and.w	r3, r3, #31
 800c20a:	fa22 f303 	lsr.w	r3, r2, r3
 800c20e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c210:	4b0a      	ldr	r3, [pc, #40]	; (800c23c <HAL_RCC_GetHCLKFreq+0x50>)
 800c212:	699b      	ldr	r3, [r3, #24]
 800c214:	f003 030f 	and.w	r3, r3, #15
 800c218:	4a09      	ldr	r2, [pc, #36]	; (800c240 <HAL_RCC_GetHCLKFreq+0x54>)
 800c21a:	5cd3      	ldrb	r3, [r2, r3]
 800c21c:	f003 031f 	and.w	r3, r3, #31
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	fa22 f303 	lsr.w	r3, r2, r3
 800c226:	4a07      	ldr	r2, [pc, #28]	; (800c244 <HAL_RCC_GetHCLKFreq+0x58>)
 800c228:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c22a:	4a07      	ldr	r2, [pc, #28]	; (800c248 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c230:	4b04      	ldr	r3, [pc, #16]	; (800c244 <HAL_RCC_GetHCLKFreq+0x58>)
 800c232:	681b      	ldr	r3, [r3, #0]
}
 800c234:	4618      	mov	r0, r3
 800c236:	3708      	adds	r7, #8
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	58024400 	.word	0x58024400
 800c240:	08012624 	.word	0x08012624
 800c244:	24000478 	.word	0x24000478
 800c248:	24000474 	.word	0x24000474

0800c24c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c250:	f7ff ffcc 	bl	800c1ec <HAL_RCC_GetHCLKFreq>
 800c254:	4602      	mov	r2, r0
 800c256:	4b06      	ldr	r3, [pc, #24]	; (800c270 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c258:	69db      	ldr	r3, [r3, #28]
 800c25a:	091b      	lsrs	r3, r3, #4
 800c25c:	f003 0307 	and.w	r3, r3, #7
 800c260:	4904      	ldr	r1, [pc, #16]	; (800c274 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c262:	5ccb      	ldrb	r3, [r1, r3]
 800c264:	f003 031f 	and.w	r3, r3, #31
 800c268:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	58024400 	.word	0x58024400
 800c274:	08012624 	.word	0x08012624

0800c278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c27c:	f7ff ffb6 	bl	800c1ec <HAL_RCC_GetHCLKFreq>
 800c280:	4602      	mov	r2, r0
 800c282:	4b06      	ldr	r3, [pc, #24]	; (800c29c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c284:	69db      	ldr	r3, [r3, #28]
 800c286:	0a1b      	lsrs	r3, r3, #8
 800c288:	f003 0307 	and.w	r3, r3, #7
 800c28c:	4904      	ldr	r1, [pc, #16]	; (800c2a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c28e:	5ccb      	ldrb	r3, [r1, r3]
 800c290:	f003 031f 	and.w	r3, r3, #31
 800c294:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c298:	4618      	mov	r0, r3
 800c29a:	bd80      	pop	{r7, pc}
 800c29c:	58024400 	.word	0x58024400
 800c2a0:	08012624 	.word	0x08012624

0800c2a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c2a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c2a8:	b0ca      	sub	sp, #296	; 0x128
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c2bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800c2c8:	2500      	movs	r5, #0
 800c2ca:	ea54 0305 	orrs.w	r3, r4, r5
 800c2ce:	d049      	beq.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c2d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c2da:	d02f      	beq.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c2dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c2e0:	d828      	bhi.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c2e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2e6:	d01a      	beq.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c2e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2ec:	d822      	bhi.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d003      	beq.n	800c2fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c2f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2f6:	d007      	beq.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c2f8:	e01c      	b.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2fa:	4bb8      	ldr	r3, [pc, #736]	; (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2fe:	4ab7      	ldr	r2, [pc, #732]	; (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c304:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c306:	e01a      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c30c:	3308      	adds	r3, #8
 800c30e:	2102      	movs	r1, #2
 800c310:	4618      	mov	r0, r3
 800c312:	f002 fb61 	bl	800e9d8 <RCCEx_PLL2_Config>
 800c316:	4603      	mov	r3, r0
 800c318:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c31c:	e00f      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c31e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c322:	3328      	adds	r3, #40	; 0x28
 800c324:	2102      	movs	r1, #2
 800c326:	4618      	mov	r0, r3
 800c328:	f002 fc08 	bl	800eb3c <RCCEx_PLL3_Config>
 800c32c:	4603      	mov	r3, r0
 800c32e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c332:	e004      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c334:	2301      	movs	r3, #1
 800c336:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c33a:	e000      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c33c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c33e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c342:	2b00      	cmp	r3, #0
 800c344:	d10a      	bne.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c346:	4ba5      	ldr	r3, [pc, #660]	; (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c34a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c34e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c354:	4aa1      	ldr	r2, [pc, #644]	; (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c356:	430b      	orrs	r3, r1
 800c358:	6513      	str	r3, [r2, #80]	; 0x50
 800c35a:	e003      	b.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c35c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c360:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800c370:	f04f 0900 	mov.w	r9, #0
 800c374:	ea58 0309 	orrs.w	r3, r8, r9
 800c378:	d047      	beq.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c37e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c380:	2b04      	cmp	r3, #4
 800c382:	d82a      	bhi.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c384:	a201      	add	r2, pc, #4	; (adr r2, 800c38c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c38a:	bf00      	nop
 800c38c:	0800c3a1 	.word	0x0800c3a1
 800c390:	0800c3af 	.word	0x0800c3af
 800c394:	0800c3c5 	.word	0x0800c3c5
 800c398:	0800c3e3 	.word	0x0800c3e3
 800c39c:	0800c3e3 	.word	0x0800c3e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3a0:	4b8e      	ldr	r3, [pc, #568]	; (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a4:	4a8d      	ldr	r2, [pc, #564]	; (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c3a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c3ac:	e01a      	b.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3b2:	3308      	adds	r3, #8
 800c3b4:	2100      	movs	r1, #0
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f002 fb0e 	bl	800e9d8 <RCCEx_PLL2_Config>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c3c2:	e00f      	b.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c3c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3c8:	3328      	adds	r3, #40	; 0x28
 800c3ca:	2100      	movs	r1, #0
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f002 fbb5 	bl	800eb3c <RCCEx_PLL3_Config>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c3d8:	e004      	b.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3da:	2301      	movs	r3, #1
 800c3dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c3e0:	e000      	b.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c3e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d10a      	bne.n	800c402 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c3ec:	4b7b      	ldr	r3, [pc, #492]	; (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c3ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3f0:	f023 0107 	bic.w	r1, r3, #7
 800c3f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3fa:	4a78      	ldr	r2, [pc, #480]	; (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c3fc:	430b      	orrs	r3, r1
 800c3fe:	6513      	str	r3, [r2, #80]	; 0x50
 800c400:	e003      	b.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c402:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c406:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c40a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c412:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800c416:	f04f 0b00 	mov.w	fp, #0
 800c41a:	ea5a 030b 	orrs.w	r3, sl, fp
 800c41e:	d04c      	beq.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800c420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c42a:	d030      	beq.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800c42c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c430:	d829      	bhi.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c432:	2bc0      	cmp	r3, #192	; 0xc0
 800c434:	d02d      	beq.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c436:	2bc0      	cmp	r3, #192	; 0xc0
 800c438:	d825      	bhi.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c43a:	2b80      	cmp	r3, #128	; 0x80
 800c43c:	d018      	beq.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800c43e:	2b80      	cmp	r3, #128	; 0x80
 800c440:	d821      	bhi.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c442:	2b00      	cmp	r3, #0
 800c444:	d002      	beq.n	800c44c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800c446:	2b40      	cmp	r3, #64	; 0x40
 800c448:	d007      	beq.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800c44a:	e01c      	b.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c44c:	4b63      	ldr	r3, [pc, #396]	; (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c450:	4a62      	ldr	r2, [pc, #392]	; (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c456:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c458:	e01c      	b.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c45e:	3308      	adds	r3, #8
 800c460:	2100      	movs	r1, #0
 800c462:	4618      	mov	r0, r3
 800c464:	f002 fab8 	bl	800e9d8 <RCCEx_PLL2_Config>
 800c468:	4603      	mov	r3, r0
 800c46a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c46e:	e011      	b.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c474:	3328      	adds	r3, #40	; 0x28
 800c476:	2100      	movs	r1, #0
 800c478:	4618      	mov	r0, r3
 800c47a:	f002 fb5f 	bl	800eb3c <RCCEx_PLL3_Config>
 800c47e:	4603      	mov	r3, r0
 800c480:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c484:	e006      	b.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c486:	2301      	movs	r3, #1
 800c488:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c48c:	e002      	b.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800c48e:	bf00      	nop
 800c490:	e000      	b.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800c492:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c494:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d10a      	bne.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800c49c:	4b4f      	ldr	r3, [pc, #316]	; (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c49e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4a0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800c4a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4aa:	4a4c      	ldr	r2, [pc, #304]	; (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c4ac:	430b      	orrs	r3, r1
 800c4ae:	6513      	str	r3, [r2, #80]	; 0x50
 800c4b0:	e003      	b.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c4ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800c4c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c4d0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	d053      	beq.n	800c582 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800c4da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c4e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c4e6:	d035      	beq.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800c4e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c4ec:	d82e      	bhi.n	800c54c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c4ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c4f2:	d031      	beq.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800c4f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c4f8:	d828      	bhi.n	800c54c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c4fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4fe:	d01a      	beq.n	800c536 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800c500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c504:	d822      	bhi.n	800c54c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c506:	2b00      	cmp	r3, #0
 800c508:	d003      	beq.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800c50a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c50e:	d007      	beq.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800c510:	e01c      	b.n	800c54c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c512:	4b32      	ldr	r3, [pc, #200]	; (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c516:	4a31      	ldr	r2, [pc, #196]	; (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c51c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c51e:	e01c      	b.n	800c55a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c524:	3308      	adds	r3, #8
 800c526:	2100      	movs	r1, #0
 800c528:	4618      	mov	r0, r3
 800c52a:	f002 fa55 	bl	800e9d8 <RCCEx_PLL2_Config>
 800c52e:	4603      	mov	r3, r0
 800c530:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c534:	e011      	b.n	800c55a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c53a:	3328      	adds	r3, #40	; 0x28
 800c53c:	2100      	movs	r1, #0
 800c53e:	4618      	mov	r0, r3
 800c540:	f002 fafc 	bl	800eb3c <RCCEx_PLL3_Config>
 800c544:	4603      	mov	r3, r0
 800c546:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c54a:	e006      	b.n	800c55a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c54c:	2301      	movs	r3, #1
 800c54e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c552:	e002      	b.n	800c55a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800c554:	bf00      	nop
 800c556:	e000      	b.n	800c55a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800c558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c55a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d10b      	bne.n	800c57a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c562:	4b1e      	ldr	r3, [pc, #120]	; (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c566:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800c56a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c56e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c572:	4a1a      	ldr	r2, [pc, #104]	; (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c574:	430b      	orrs	r3, r1
 800c576:	6593      	str	r3, [r2, #88]	; 0x58
 800c578:	e003      	b.n	800c582 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c57a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c57e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800c58e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c592:	2300      	movs	r3, #0
 800c594:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c598:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800c59c:	460b      	mov	r3, r1
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	d056      	beq.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800c5a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c5aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c5ae:	d038      	beq.n	800c622 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800c5b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c5b4:	d831      	bhi.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c5b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c5ba:	d034      	beq.n	800c626 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800c5bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c5c0:	d82b      	bhi.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c5c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5c6:	d01d      	beq.n	800c604 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800c5c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5cc:	d825      	bhi.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d006      	beq.n	800c5e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800c5d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c5d6:	d00a      	beq.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800c5d8:	e01f      	b.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c5da:	bf00      	nop
 800c5dc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5e0:	4ba2      	ldr	r3, [pc, #648]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e4:	4aa1      	ldr	r2, [pc, #644]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c5e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c5ec:	e01c      	b.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c5ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5f2:	3308      	adds	r3, #8
 800c5f4:	2100      	movs	r1, #0
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f002 f9ee 	bl	800e9d8 <RCCEx_PLL2_Config>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c602:	e011      	b.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c608:	3328      	adds	r3, #40	; 0x28
 800c60a:	2100      	movs	r1, #0
 800c60c:	4618      	mov	r0, r3
 800c60e:	f002 fa95 	bl	800eb3c <RCCEx_PLL3_Config>
 800c612:	4603      	mov	r3, r0
 800c614:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c618:	e006      	b.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c61a:	2301      	movs	r3, #1
 800c61c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c620:	e002      	b.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800c622:	bf00      	nop
 800c624:	e000      	b.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800c626:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c628:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d10b      	bne.n	800c648 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c630:	4b8e      	ldr	r3, [pc, #568]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c634:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800c638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c63c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c640:	4a8a      	ldr	r2, [pc, #552]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c642:	430b      	orrs	r3, r1
 800c644:	6593      	str	r3, [r2, #88]	; 0x58
 800c646:	e003      	b.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c648:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c64c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c658:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800c65c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c660:	2300      	movs	r3, #0
 800c662:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c666:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800c66a:	460b      	mov	r3, r1
 800c66c:	4313      	orrs	r3, r2
 800c66e:	d03a      	beq.n	800c6e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800c670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c676:	2b30      	cmp	r3, #48	; 0x30
 800c678:	d01f      	beq.n	800c6ba <HAL_RCCEx_PeriphCLKConfig+0x416>
 800c67a:	2b30      	cmp	r3, #48	; 0x30
 800c67c:	d819      	bhi.n	800c6b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800c67e:	2b20      	cmp	r3, #32
 800c680:	d00c      	beq.n	800c69c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800c682:	2b20      	cmp	r3, #32
 800c684:	d815      	bhi.n	800c6b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800c686:	2b00      	cmp	r3, #0
 800c688:	d019      	beq.n	800c6be <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800c68a:	2b10      	cmp	r3, #16
 800c68c:	d111      	bne.n	800c6b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c68e:	4b77      	ldr	r3, [pc, #476]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c692:	4a76      	ldr	r2, [pc, #472]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c698:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800c69a:	e011      	b.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c69c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6a0:	3308      	adds	r3, #8
 800c6a2:	2102      	movs	r1, #2
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f002 f997 	bl	800e9d8 <RCCEx_PLL2_Config>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800c6b0:	e006      	b.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c6b8:	e002      	b.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800c6ba:	bf00      	nop
 800c6bc:	e000      	b.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800c6be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d10a      	bne.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c6c8:	4b68      	ldr	r3, [pc, #416]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c6ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6cc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800c6d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6d6:	4a65      	ldr	r2, [pc, #404]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c6d8:	430b      	orrs	r3, r1
 800c6da:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c6dc:	e003      	b.n	800c6e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c6e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c6e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ee:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800c6f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c6fc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800c700:	460b      	mov	r3, r1
 800c702:	4313      	orrs	r3, r2
 800c704:	d051      	beq.n	800c7aa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800c706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c70a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c70c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c710:	d035      	beq.n	800c77e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800c712:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c716:	d82e      	bhi.n	800c776 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800c718:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c71c:	d031      	beq.n	800c782 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800c71e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c722:	d828      	bhi.n	800c776 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800c724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c728:	d01a      	beq.n	800c760 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800c72a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c72e:	d822      	bhi.n	800c776 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800c730:	2b00      	cmp	r3, #0
 800c732:	d003      	beq.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800c734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c738:	d007      	beq.n	800c74a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800c73a:	e01c      	b.n	800c776 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c73c:	4b4b      	ldr	r3, [pc, #300]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c740:	4a4a      	ldr	r2, [pc, #296]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c746:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c748:	e01c      	b.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c74a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c74e:	3308      	adds	r3, #8
 800c750:	2100      	movs	r1, #0
 800c752:	4618      	mov	r0, r3
 800c754:	f002 f940 	bl	800e9d8 <RCCEx_PLL2_Config>
 800c758:	4603      	mov	r3, r0
 800c75a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c75e:	e011      	b.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c764:	3328      	adds	r3, #40	; 0x28
 800c766:	2100      	movs	r1, #0
 800c768:	4618      	mov	r0, r3
 800c76a:	f002 f9e7 	bl	800eb3c <RCCEx_PLL3_Config>
 800c76e:	4603      	mov	r3, r0
 800c770:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c774:	e006      	b.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c776:	2301      	movs	r3, #1
 800c778:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c77c:	e002      	b.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800c77e:	bf00      	nop
 800c780:	e000      	b.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800c782:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c784:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d10a      	bne.n	800c7a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c78c:	4b37      	ldr	r3, [pc, #220]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c78e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c790:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800c794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c79a:	4a34      	ldr	r2, [pc, #208]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c79c:	430b      	orrs	r3, r1
 800c79e:	6513      	str	r3, [r2, #80]	; 0x50
 800c7a0:	e003      	b.n	800c7aa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c7a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800c7b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c7c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	d056      	beq.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800c7ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c7d4:	d033      	beq.n	800c83e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800c7d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c7da:	d82c      	bhi.n	800c836 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800c7dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c7e0:	d02f      	beq.n	800c842 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800c7e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c7e6:	d826      	bhi.n	800c836 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800c7e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c7ec:	d02b      	beq.n	800c846 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800c7ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c7f2:	d820      	bhi.n	800c836 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800c7f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7f8:	d012      	beq.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800c7fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7fe:	d81a      	bhi.n	800c836 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800c800:	2b00      	cmp	r3, #0
 800c802:	d022      	beq.n	800c84a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800c804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c808:	d115      	bne.n	800c836 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c80a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c80e:	3308      	adds	r3, #8
 800c810:	2101      	movs	r1, #1
 800c812:	4618      	mov	r0, r3
 800c814:	f002 f8e0 	bl	800e9d8 <RCCEx_PLL2_Config>
 800c818:	4603      	mov	r3, r0
 800c81a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c81e:	e015      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c824:	3328      	adds	r3, #40	; 0x28
 800c826:	2101      	movs	r1, #1
 800c828:	4618      	mov	r0, r3
 800c82a:	f002 f987 	bl	800eb3c <RCCEx_PLL3_Config>
 800c82e:	4603      	mov	r3, r0
 800c830:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c834:	e00a      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c836:	2301      	movs	r3, #1
 800c838:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c83c:	e006      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800c83e:	bf00      	nop
 800c840:	e004      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800c842:	bf00      	nop
 800c844:	e002      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800c846:	bf00      	nop
 800c848:	e000      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800c84a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c84c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c850:	2b00      	cmp	r3, #0
 800c852:	d10d      	bne.n	800c870 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c854:	4b05      	ldr	r3, [pc, #20]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c858:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800c85c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c862:	4a02      	ldr	r2, [pc, #8]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c864:	430b      	orrs	r3, r1
 800c866:	6513      	str	r3, [r2, #80]	; 0x50
 800c868:	e006      	b.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c86a:	bf00      	nop
 800c86c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c870:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c874:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c880:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800c884:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c888:	2300      	movs	r3, #0
 800c88a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c88e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800c892:	460b      	mov	r3, r1
 800c894:	4313      	orrs	r3, r2
 800c896:	d055      	beq.n	800c944 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c89c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c8a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c8a4:	d033      	beq.n	800c90e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800c8a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c8aa:	d82c      	bhi.n	800c906 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800c8ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8b0:	d02f      	beq.n	800c912 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800c8b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8b6:	d826      	bhi.n	800c906 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800c8b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c8bc:	d02b      	beq.n	800c916 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800c8be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c8c2:	d820      	bhi.n	800c906 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800c8c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8c8:	d012      	beq.n	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800c8ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8ce:	d81a      	bhi.n	800c906 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d022      	beq.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800c8d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8d8:	d115      	bne.n	800c906 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c8da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8de:	3308      	adds	r3, #8
 800c8e0:	2101      	movs	r1, #1
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f002 f878 	bl	800e9d8 <RCCEx_PLL2_Config>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c8ee:	e015      	b.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c8f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8f4:	3328      	adds	r3, #40	; 0x28
 800c8f6:	2101      	movs	r1, #1
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f002 f91f 	bl	800eb3c <RCCEx_PLL3_Config>
 800c8fe:	4603      	mov	r3, r0
 800c900:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c904:	e00a      	b.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c906:	2301      	movs	r3, #1
 800c908:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c90c:	e006      	b.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c90e:	bf00      	nop
 800c910:	e004      	b.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c912:	bf00      	nop
 800c914:	e002      	b.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c916:	bf00      	nop
 800c918:	e000      	b.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c91a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c91c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c920:	2b00      	cmp	r3, #0
 800c922:	d10b      	bne.n	800c93c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c924:	4ba3      	ldr	r3, [pc, #652]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c928:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c92c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c930:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c934:	4a9f      	ldr	r2, [pc, #636]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c936:	430b      	orrs	r3, r1
 800c938:	6593      	str	r3, [r2, #88]	; 0x58
 800c93a:	e003      	b.n	800c944 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c93c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c940:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800c950:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c954:	2300      	movs	r3, #0
 800c956:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c95a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c95e:	460b      	mov	r3, r1
 800c960:	4313      	orrs	r3, r2
 800c962:	d037      	beq.n	800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c96a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c96e:	d00e      	beq.n	800c98e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800c970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c974:	d816      	bhi.n	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800c976:	2b00      	cmp	r3, #0
 800c978:	d018      	beq.n	800c9ac <HAL_RCCEx_PeriphCLKConfig+0x708>
 800c97a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c97e:	d111      	bne.n	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c980:	4b8c      	ldr	r3, [pc, #560]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c984:	4a8b      	ldr	r2, [pc, #556]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c98a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c98c:	e00f      	b.n	800c9ae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c98e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c992:	3308      	adds	r3, #8
 800c994:	2101      	movs	r1, #1
 800c996:	4618      	mov	r0, r3
 800c998:	f002 f81e 	bl	800e9d8 <RCCEx_PLL2_Config>
 800c99c:	4603      	mov	r3, r0
 800c99e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c9a2:	e004      	b.n	800c9ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c9aa:	e000      	b.n	800c9ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800c9ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d10a      	bne.n	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c9b6:	4b7f      	ldr	r3, [pc, #508]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c9b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9ba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c9be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9c4:	4a7b      	ldr	r2, [pc, #492]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c9c6:	430b      	orrs	r3, r1
 800c9c8:	6513      	str	r3, [r2, #80]	; 0x50
 800c9ca:	e003      	b.n	800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c9d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c9d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9dc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800c9e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c9ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	d039      	beq.n	800ca68 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c9f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9fa:	2b03      	cmp	r3, #3
 800c9fc:	d81c      	bhi.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800c9fe:	a201      	add	r2, pc, #4	; (adr r2, 800ca04 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800ca00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca04:	0800ca41 	.word	0x0800ca41
 800ca08:	0800ca15 	.word	0x0800ca15
 800ca0c:	0800ca23 	.word	0x0800ca23
 800ca10:	0800ca41 	.word	0x0800ca41
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca14:	4b67      	ldr	r3, [pc, #412]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ca16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca18:	4a66      	ldr	r2, [pc, #408]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ca1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ca20:	e00f      	b.n	800ca42 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ca22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca26:	3308      	adds	r3, #8
 800ca28:	2102      	movs	r1, #2
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f001 ffd4 	bl	800e9d8 <RCCEx_PLL2_Config>
 800ca30:	4603      	mov	r3, r0
 800ca32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ca36:	e004      	b.n	800ca42 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ca3e:	e000      	b.n	800ca42 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800ca40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d10a      	bne.n	800ca60 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ca4a:	4b5a      	ldr	r3, [pc, #360]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ca4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca4e:	f023 0103 	bic.w	r1, r3, #3
 800ca52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca58:	4a56      	ldr	r2, [pc, #344]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ca5a:	430b      	orrs	r3, r1
 800ca5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ca5e:	e003      	b.n	800ca68 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ca68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca70:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800ca74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ca78:	2300      	movs	r3, #0
 800ca7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ca7e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ca82:	460b      	mov	r3, r1
 800ca84:	4313      	orrs	r3, r2
 800ca86:	f000 809f 	beq.w	800cbc8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ca8a:	4b4b      	ldr	r3, [pc, #300]	; (800cbb8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4a4a      	ldr	r2, [pc, #296]	; (800cbb8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ca90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ca96:	f7f8 f97d 	bl	8004d94 <HAL_GetTick>
 800ca9a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ca9e:	e00b      	b.n	800cab8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800caa0:	f7f8 f978 	bl	8004d94 <HAL_GetTick>
 800caa4:	4602      	mov	r2, r0
 800caa6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800caaa:	1ad3      	subs	r3, r2, r3
 800caac:	2b64      	cmp	r3, #100	; 0x64
 800caae:	d903      	bls.n	800cab8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800cab0:	2303      	movs	r3, #3
 800cab2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cab6:	e005      	b.n	800cac4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cab8:	4b3f      	ldr	r3, [pc, #252]	; (800cbb8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d0ed      	beq.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800cac4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d179      	bne.n	800cbc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800cacc:	4b39      	ldr	r3, [pc, #228]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cace:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cad4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cad8:	4053      	eors	r3, r2
 800cada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d015      	beq.n	800cb0e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cae2:	4b34      	ldr	r3, [pc, #208]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800caea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800caee:	4b31      	ldr	r3, [pc, #196]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800caf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caf2:	4a30      	ldr	r2, [pc, #192]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800caf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800caf8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cafa:	4b2e      	ldr	r3, [pc, #184]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cafc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cafe:	4a2d      	ldr	r2, [pc, #180]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cb00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cb04:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800cb06:	4a2b      	ldr	r2, [pc, #172]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cb08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800cb0c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800cb0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cb16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb1a:	d118      	bne.n	800cb4e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb1c:	f7f8 f93a 	bl	8004d94 <HAL_GetTick>
 800cb20:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cb24:	e00d      	b.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cb26:	f7f8 f935 	bl	8004d94 <HAL_GetTick>
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800cb30:	1ad2      	subs	r2, r2, r3
 800cb32:	f241 3388 	movw	r3, #5000	; 0x1388
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d903      	bls.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800cb3a:	2303      	movs	r3, #3
 800cb3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800cb40:	e005      	b.n	800cb4e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cb42:	4b1c      	ldr	r3, [pc, #112]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cb44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb46:	f003 0302 	and.w	r3, r3, #2
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d0eb      	beq.n	800cb26 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800cb4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d129      	bne.n	800cbaa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cb56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cb5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb66:	d10e      	bne.n	800cb86 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800cb68:	4b12      	ldr	r3, [pc, #72]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cb6a:	691b      	ldr	r3, [r3, #16]
 800cb6c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800cb70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cb78:	091a      	lsrs	r2, r3, #4
 800cb7a:	4b10      	ldr	r3, [pc, #64]	; (800cbbc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800cb7c:	4013      	ands	r3, r2
 800cb7e:	4a0d      	ldr	r2, [pc, #52]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cb80:	430b      	orrs	r3, r1
 800cb82:	6113      	str	r3, [r2, #16]
 800cb84:	e005      	b.n	800cb92 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800cb86:	4b0b      	ldr	r3, [pc, #44]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cb88:	691b      	ldr	r3, [r3, #16]
 800cb8a:	4a0a      	ldr	r2, [pc, #40]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cb8c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cb90:	6113      	str	r3, [r2, #16]
 800cb92:	4b08      	ldr	r3, [pc, #32]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cb94:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800cb96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cb9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cba2:	4a04      	ldr	r2, [pc, #16]	; (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cba4:	430b      	orrs	r3, r1
 800cba6:	6713      	str	r3, [r2, #112]	; 0x70
 800cba8:	e00e      	b.n	800cbc8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cbaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cbae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800cbb2:	e009      	b.n	800cbc8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800cbb4:	58024400 	.word	0x58024400
 800cbb8:	58024800 	.word	0x58024800
 800cbbc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cbc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800cbc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd0:	f002 0301 	and.w	r3, r2, #1
 800cbd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cbd8:	2300      	movs	r3, #0
 800cbda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cbde:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	f000 8089 	beq.w	800ccfc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800cbea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cbee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbf0:	2b28      	cmp	r3, #40	; 0x28
 800cbf2:	d86b      	bhi.n	800cccc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800cbf4:	a201      	add	r2, pc, #4	; (adr r2, 800cbfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800cbf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbfa:	bf00      	nop
 800cbfc:	0800ccd5 	.word	0x0800ccd5
 800cc00:	0800cccd 	.word	0x0800cccd
 800cc04:	0800cccd 	.word	0x0800cccd
 800cc08:	0800cccd 	.word	0x0800cccd
 800cc0c:	0800cccd 	.word	0x0800cccd
 800cc10:	0800cccd 	.word	0x0800cccd
 800cc14:	0800cccd 	.word	0x0800cccd
 800cc18:	0800cccd 	.word	0x0800cccd
 800cc1c:	0800cca1 	.word	0x0800cca1
 800cc20:	0800cccd 	.word	0x0800cccd
 800cc24:	0800cccd 	.word	0x0800cccd
 800cc28:	0800cccd 	.word	0x0800cccd
 800cc2c:	0800cccd 	.word	0x0800cccd
 800cc30:	0800cccd 	.word	0x0800cccd
 800cc34:	0800cccd 	.word	0x0800cccd
 800cc38:	0800cccd 	.word	0x0800cccd
 800cc3c:	0800ccb7 	.word	0x0800ccb7
 800cc40:	0800cccd 	.word	0x0800cccd
 800cc44:	0800cccd 	.word	0x0800cccd
 800cc48:	0800cccd 	.word	0x0800cccd
 800cc4c:	0800cccd 	.word	0x0800cccd
 800cc50:	0800cccd 	.word	0x0800cccd
 800cc54:	0800cccd 	.word	0x0800cccd
 800cc58:	0800cccd 	.word	0x0800cccd
 800cc5c:	0800ccd5 	.word	0x0800ccd5
 800cc60:	0800cccd 	.word	0x0800cccd
 800cc64:	0800cccd 	.word	0x0800cccd
 800cc68:	0800cccd 	.word	0x0800cccd
 800cc6c:	0800cccd 	.word	0x0800cccd
 800cc70:	0800cccd 	.word	0x0800cccd
 800cc74:	0800cccd 	.word	0x0800cccd
 800cc78:	0800cccd 	.word	0x0800cccd
 800cc7c:	0800ccd5 	.word	0x0800ccd5
 800cc80:	0800cccd 	.word	0x0800cccd
 800cc84:	0800cccd 	.word	0x0800cccd
 800cc88:	0800cccd 	.word	0x0800cccd
 800cc8c:	0800cccd 	.word	0x0800cccd
 800cc90:	0800cccd 	.word	0x0800cccd
 800cc94:	0800cccd 	.word	0x0800cccd
 800cc98:	0800cccd 	.word	0x0800cccd
 800cc9c:	0800ccd5 	.word	0x0800ccd5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cca4:	3308      	adds	r3, #8
 800cca6:	2101      	movs	r1, #1
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f001 fe95 	bl	800e9d8 <RCCEx_PLL2_Config>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ccb4:	e00f      	b.n	800ccd6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ccb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccba:	3328      	adds	r3, #40	; 0x28
 800ccbc:	2101      	movs	r1, #1
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f001 ff3c 	bl	800eb3c <RCCEx_PLL3_Config>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ccca:	e004      	b.n	800ccd6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cccc:	2301      	movs	r3, #1
 800ccce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ccd2:	e000      	b.n	800ccd6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800ccd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d10a      	bne.n	800ccf4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ccde:	4bbf      	ldr	r3, [pc, #764]	; (800cfdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cce2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800cce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccec:	4abb      	ldr	r2, [pc, #748]	; (800cfdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ccee:	430b      	orrs	r3, r1
 800ccf0:	6553      	str	r3, [r2, #84]	; 0x54
 800ccf2:	e003      	b.n	800ccfc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ccf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ccfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd04:	f002 0302 	and.w	r3, r2, #2
 800cd08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800cd12:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800cd16:	460b      	mov	r3, r1
 800cd18:	4313      	orrs	r3, r2
 800cd1a:	d041      	beq.n	800cda0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800cd1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd22:	2b05      	cmp	r3, #5
 800cd24:	d824      	bhi.n	800cd70 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800cd26:	a201      	add	r2, pc, #4	; (adr r2, 800cd2c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800cd28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd2c:	0800cd79 	.word	0x0800cd79
 800cd30:	0800cd45 	.word	0x0800cd45
 800cd34:	0800cd5b 	.word	0x0800cd5b
 800cd38:	0800cd79 	.word	0x0800cd79
 800cd3c:	0800cd79 	.word	0x0800cd79
 800cd40:	0800cd79 	.word	0x0800cd79
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cd44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd48:	3308      	adds	r3, #8
 800cd4a:	2101      	movs	r1, #1
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f001 fe43 	bl	800e9d8 <RCCEx_PLL2_Config>
 800cd52:	4603      	mov	r3, r0
 800cd54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cd58:	e00f      	b.n	800cd7a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cd5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd5e:	3328      	adds	r3, #40	; 0x28
 800cd60:	2101      	movs	r1, #1
 800cd62:	4618      	mov	r0, r3
 800cd64:	f001 feea 	bl	800eb3c <RCCEx_PLL3_Config>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cd6e:	e004      	b.n	800cd7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cd70:	2301      	movs	r3, #1
 800cd72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cd76:	e000      	b.n	800cd7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800cd78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d10a      	bne.n	800cd98 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cd82:	4b96      	ldr	r3, [pc, #600]	; (800cfdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cd84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd86:	f023 0107 	bic.w	r1, r3, #7
 800cd8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd90:	4a92      	ldr	r2, [pc, #584]	; (800cfdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cd92:	430b      	orrs	r3, r1
 800cd94:	6553      	str	r3, [r2, #84]	; 0x54
 800cd96:	e003      	b.n	800cda0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cda0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda8:	f002 0304 	and.w	r3, r2, #4
 800cdac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cdb6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800cdba:	460b      	mov	r3, r1
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	d044      	beq.n	800ce4a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800cdc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cdc8:	2b05      	cmp	r3, #5
 800cdca:	d825      	bhi.n	800ce18 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800cdcc:	a201      	add	r2, pc, #4	; (adr r2, 800cdd4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800cdce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd2:	bf00      	nop
 800cdd4:	0800ce21 	.word	0x0800ce21
 800cdd8:	0800cded 	.word	0x0800cded
 800cddc:	0800ce03 	.word	0x0800ce03
 800cde0:	0800ce21 	.word	0x0800ce21
 800cde4:	0800ce21 	.word	0x0800ce21
 800cde8:	0800ce21 	.word	0x0800ce21
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cdec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdf0:	3308      	adds	r3, #8
 800cdf2:	2101      	movs	r1, #1
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f001 fdef 	bl	800e9d8 <RCCEx_PLL2_Config>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ce00:	e00f      	b.n	800ce22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ce02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce06:	3328      	adds	r3, #40	; 0x28
 800ce08:	2101      	movs	r1, #1
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f001 fe96 	bl	800eb3c <RCCEx_PLL3_Config>
 800ce10:	4603      	mov	r3, r0
 800ce12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ce16:	e004      	b.n	800ce22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce18:	2301      	movs	r3, #1
 800ce1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ce1e:	e000      	b.n	800ce22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800ce20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d10b      	bne.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ce2a:	4b6c      	ldr	r3, [pc, #432]	; (800cfdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ce2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce2e:	f023 0107 	bic.w	r1, r3, #7
 800ce32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ce3a:	4a68      	ldr	r2, [pc, #416]	; (800cfdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ce3c:	430b      	orrs	r3, r1
 800ce3e:	6593      	str	r3, [r2, #88]	; 0x58
 800ce40:	e003      	b.n	800ce4a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ce4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce52:	f002 0320 	and.w	r3, r2, #32
 800ce56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ce60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ce64:	460b      	mov	r3, r1
 800ce66:	4313      	orrs	r3, r2
 800ce68:	d055      	beq.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ce6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce76:	d033      	beq.n	800cee0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800ce78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce7c:	d82c      	bhi.n	800ced8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ce7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce82:	d02f      	beq.n	800cee4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800ce84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce88:	d826      	bhi.n	800ced8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ce8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce8e:	d02b      	beq.n	800cee8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800ce90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce94:	d820      	bhi.n	800ced8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ce96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce9a:	d012      	beq.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ce9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cea0:	d81a      	bhi.n	800ced8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d022      	beq.n	800ceec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800cea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ceaa:	d115      	bne.n	800ced8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ceac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ceb0:	3308      	adds	r3, #8
 800ceb2:	2100      	movs	r1, #0
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f001 fd8f 	bl	800e9d8 <RCCEx_PLL2_Config>
 800ceba:	4603      	mov	r3, r0
 800cebc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800cec0:	e015      	b.n	800ceee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cec6:	3328      	adds	r3, #40	; 0x28
 800cec8:	2102      	movs	r1, #2
 800ceca:	4618      	mov	r0, r3
 800cecc:	f001 fe36 	bl	800eb3c <RCCEx_PLL3_Config>
 800ced0:	4603      	mov	r3, r0
 800ced2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ced6:	e00a      	b.n	800ceee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ced8:	2301      	movs	r3, #1
 800ceda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cede:	e006      	b.n	800ceee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800cee0:	bf00      	nop
 800cee2:	e004      	b.n	800ceee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800cee4:	bf00      	nop
 800cee6:	e002      	b.n	800ceee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800cee8:	bf00      	nop
 800ceea:	e000      	b.n	800ceee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ceec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ceee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d10b      	bne.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cef6:	4b39      	ldr	r3, [pc, #228]	; (800cfdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cefa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800cefe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf06:	4a35      	ldr	r2, [pc, #212]	; (800cfdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cf08:	430b      	orrs	r3, r1
 800cf0a:	6553      	str	r3, [r2, #84]	; 0x54
 800cf0c:	e003      	b.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cf12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800cf16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800cf22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cf26:	2300      	movs	r3, #0
 800cf28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cf2c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800cf30:	460b      	mov	r3, r1
 800cf32:	4313      	orrs	r3, r2
 800cf34:	d058      	beq.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800cf36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cf3e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cf42:	d033      	beq.n	800cfac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800cf44:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cf48:	d82c      	bhi.n	800cfa4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800cf4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf4e:	d02f      	beq.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800cf50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf54:	d826      	bhi.n	800cfa4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800cf56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cf5a:	d02b      	beq.n	800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800cf5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cf60:	d820      	bhi.n	800cfa4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800cf62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf66:	d012      	beq.n	800cf8e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800cf68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf6c:	d81a      	bhi.n	800cfa4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d022      	beq.n	800cfb8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800cf72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf76:	d115      	bne.n	800cfa4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cf78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf7c:	3308      	adds	r3, #8
 800cf7e:	2100      	movs	r1, #0
 800cf80:	4618      	mov	r0, r3
 800cf82:	f001 fd29 	bl	800e9d8 <RCCEx_PLL2_Config>
 800cf86:	4603      	mov	r3, r0
 800cf88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800cf8c:	e015      	b.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cf8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf92:	3328      	adds	r3, #40	; 0x28
 800cf94:	2102      	movs	r1, #2
 800cf96:	4618      	mov	r0, r3
 800cf98:	f001 fdd0 	bl	800eb3c <RCCEx_PLL3_Config>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800cfa2:	e00a      	b.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cfaa:	e006      	b.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800cfac:	bf00      	nop
 800cfae:	e004      	b.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800cfb0:	bf00      	nop
 800cfb2:	e002      	b.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800cfb4:	bf00      	nop
 800cfb6:	e000      	b.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800cfb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cfba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d10e      	bne.n	800cfe0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cfc2:	4b06      	ldr	r3, [pc, #24]	; (800cfdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cfc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfc6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800cfca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cfd2:	4a02      	ldr	r2, [pc, #8]	; (800cfdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cfd4:	430b      	orrs	r3, r1
 800cfd6:	6593      	str	r3, [r2, #88]	; 0x58
 800cfd8:	e006      	b.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800cfda:	bf00      	nop
 800cfdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfe0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cfe4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800cfe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800cff4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cff8:	2300      	movs	r3, #0
 800cffa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cffe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d002:	460b      	mov	r3, r1
 800d004:	4313      	orrs	r3, r2
 800d006:	d055      	beq.n	800d0b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d00c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d010:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d014:	d033      	beq.n	800d07e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800d016:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d01a:	d82c      	bhi.n	800d076 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d01c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d020:	d02f      	beq.n	800d082 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800d022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d026:	d826      	bhi.n	800d076 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d028:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d02c:	d02b      	beq.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800d02e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d032:	d820      	bhi.n	800d076 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d034:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d038:	d012      	beq.n	800d060 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800d03a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d03e:	d81a      	bhi.n	800d076 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d040:	2b00      	cmp	r3, #0
 800d042:	d022      	beq.n	800d08a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800d044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d048:	d115      	bne.n	800d076 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d04e:	3308      	adds	r3, #8
 800d050:	2100      	movs	r1, #0
 800d052:	4618      	mov	r0, r3
 800d054:	f001 fcc0 	bl	800e9d8 <RCCEx_PLL2_Config>
 800d058:	4603      	mov	r3, r0
 800d05a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d05e:	e015      	b.n	800d08c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d064:	3328      	adds	r3, #40	; 0x28
 800d066:	2102      	movs	r1, #2
 800d068:	4618      	mov	r0, r3
 800d06a:	f001 fd67 	bl	800eb3c <RCCEx_PLL3_Config>
 800d06e:	4603      	mov	r3, r0
 800d070:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d074:	e00a      	b.n	800d08c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d076:	2301      	movs	r3, #1
 800d078:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d07c:	e006      	b.n	800d08c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d07e:	bf00      	nop
 800d080:	e004      	b.n	800d08c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d082:	bf00      	nop
 800d084:	e002      	b.n	800d08c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d086:	bf00      	nop
 800d088:	e000      	b.n	800d08c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d08a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d08c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d090:	2b00      	cmp	r3, #0
 800d092:	d10b      	bne.n	800d0ac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d094:	4ba1      	ldr	r3, [pc, #644]	; (800d31c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d098:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800d09c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d0a4:	4a9d      	ldr	r2, [pc, #628]	; (800d31c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d0a6:	430b      	orrs	r3, r1
 800d0a8:	6593      	str	r3, [r2, #88]	; 0x58
 800d0aa:	e003      	b.n	800d0b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d0b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d0b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0bc:	f002 0308 	and.w	r3, r2, #8
 800d0c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d0ca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800d0ce:	460b      	mov	r3, r1
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	d01e      	beq.n	800d112 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d0d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0e0:	d10c      	bne.n	800d0fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0e6:	3328      	adds	r3, #40	; 0x28
 800d0e8:	2102      	movs	r1, #2
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f001 fd26 	bl	800eb3c <RCCEx_PLL3_Config>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d002      	beq.n	800d0fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d0fc:	4b87      	ldr	r3, [pc, #540]	; (800d31c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d0fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d100:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d10c:	4a83      	ldr	r2, [pc, #524]	; (800d31c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d10e:	430b      	orrs	r3, r1
 800d110:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11a:	f002 0310 	and.w	r3, r2, #16
 800d11e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d122:	2300      	movs	r3, #0
 800d124:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d128:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800d12c:	460b      	mov	r3, r1
 800d12e:	4313      	orrs	r3, r2
 800d130:	d01e      	beq.n	800d170 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d136:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d13a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d13e:	d10c      	bne.n	800d15a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d144:	3328      	adds	r3, #40	; 0x28
 800d146:	2102      	movs	r1, #2
 800d148:	4618      	mov	r0, r3
 800d14a:	f001 fcf7 	bl	800eb3c <RCCEx_PLL3_Config>
 800d14e:	4603      	mov	r3, r0
 800d150:	2b00      	cmp	r3, #0
 800d152:	d002      	beq.n	800d15a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800d154:	2301      	movs	r3, #1
 800d156:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d15a:	4b70      	ldr	r3, [pc, #448]	; (800d31c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d15c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d15e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d166:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d16a:	4a6c      	ldr	r2, [pc, #432]	; (800d31c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d16c:	430b      	orrs	r3, r1
 800d16e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d178:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800d17c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d180:	2300      	movs	r3, #0
 800d182:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d186:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800d18a:	460b      	mov	r3, r1
 800d18c:	4313      	orrs	r3, r2
 800d18e:	d03e      	beq.n	800d20e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d194:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d198:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d19c:	d022      	beq.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800d19e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d1a2:	d81b      	bhi.n	800d1dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d003      	beq.n	800d1b0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800d1a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1ac:	d00b      	beq.n	800d1c6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800d1ae:	e015      	b.n	800d1dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d1b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1b4:	3308      	adds	r3, #8
 800d1b6:	2100      	movs	r1, #0
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f001 fc0d 	bl	800e9d8 <RCCEx_PLL2_Config>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d1c4:	e00f      	b.n	800d1e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1ca:	3328      	adds	r3, #40	; 0x28
 800d1cc:	2102      	movs	r1, #2
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f001 fcb4 	bl	800eb3c <RCCEx_PLL3_Config>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d1da:	e004      	b.n	800d1e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d1dc:	2301      	movs	r3, #1
 800d1de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d1e2:	e000      	b.n	800d1e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800d1e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d10b      	bne.n	800d206 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d1ee:	4b4b      	ldr	r3, [pc, #300]	; (800d31c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d1f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1f2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800d1f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d1fe:	4a47      	ldr	r2, [pc, #284]	; (800d31c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d200:	430b      	orrs	r3, r1
 800d202:	6593      	str	r3, [r2, #88]	; 0x58
 800d204:	e003      	b.n	800d20e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d206:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d20a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d20e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d216:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800d21a:	67bb      	str	r3, [r7, #120]	; 0x78
 800d21c:	2300      	movs	r3, #0
 800d21e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d220:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800d224:	460b      	mov	r3, r1
 800d226:	4313      	orrs	r3, r2
 800d228:	d03b      	beq.n	800d2a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d22a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d22e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d232:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d236:	d01f      	beq.n	800d278 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800d238:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d23c:	d818      	bhi.n	800d270 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800d23e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d242:	d003      	beq.n	800d24c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800d244:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d248:	d007      	beq.n	800d25a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800d24a:	e011      	b.n	800d270 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d24c:	4b33      	ldr	r3, [pc, #204]	; (800d31c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d250:	4a32      	ldr	r2, [pc, #200]	; (800d31c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d256:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d258:	e00f      	b.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d25e:	3328      	adds	r3, #40	; 0x28
 800d260:	2101      	movs	r1, #1
 800d262:	4618      	mov	r0, r3
 800d264:	f001 fc6a 	bl	800eb3c <RCCEx_PLL3_Config>
 800d268:	4603      	mov	r3, r0
 800d26a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800d26e:	e004      	b.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d270:	2301      	movs	r3, #1
 800d272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d276:	e000      	b.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800d278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d27a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d10b      	bne.n	800d29a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d282:	4b26      	ldr	r3, [pc, #152]	; (800d31c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d286:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d28e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d292:	4a22      	ldr	r2, [pc, #136]	; (800d31c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d294:	430b      	orrs	r3, r1
 800d296:	6553      	str	r3, [r2, #84]	; 0x54
 800d298:	e003      	b.n	800d2a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d29a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d29e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d2a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2aa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800d2ae:	673b      	str	r3, [r7, #112]	; 0x70
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	677b      	str	r3, [r7, #116]	; 0x74
 800d2b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	4313      	orrs	r3, r2
 800d2bc:	d034      	beq.n	800d328 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d2be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d003      	beq.n	800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800d2c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2cc:	d007      	beq.n	800d2de <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800d2ce:	e011      	b.n	800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d2d0:	4b12      	ldr	r3, [pc, #72]	; (800d31c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d4:	4a11      	ldr	r2, [pc, #68]	; (800d31c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d2d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d2da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d2dc:	e00e      	b.n	800d2fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d2de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2e2:	3308      	adds	r3, #8
 800d2e4:	2102      	movs	r1, #2
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f001 fb76 	bl	800e9d8 <RCCEx_PLL2_Config>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d2f2:	e003      	b.n	800d2fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d2fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d300:	2b00      	cmp	r3, #0
 800d302:	d10d      	bne.n	800d320 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d304:	4b05      	ldr	r3, [pc, #20]	; (800d31c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d308:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d30c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d312:	4a02      	ldr	r2, [pc, #8]	; (800d31c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d314:	430b      	orrs	r3, r1
 800d316:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d318:	e006      	b.n	800d328 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800d31a:	bf00      	nop
 800d31c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d320:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d324:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d330:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800d334:	66bb      	str	r3, [r7, #104]	; 0x68
 800d336:	2300      	movs	r3, #0
 800d338:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d33a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800d33e:	460b      	mov	r3, r1
 800d340:	4313      	orrs	r3, r2
 800d342:	d00c      	beq.n	800d35e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d348:	3328      	adds	r3, #40	; 0x28
 800d34a:	2102      	movs	r1, #2
 800d34c:	4618      	mov	r0, r3
 800d34e:	f001 fbf5 	bl	800eb3c <RCCEx_PLL3_Config>
 800d352:	4603      	mov	r3, r0
 800d354:	2b00      	cmp	r3, #0
 800d356:	d002      	beq.n	800d35e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800d358:	2301      	movs	r3, #1
 800d35a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d35e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d366:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800d36a:	663b      	str	r3, [r7, #96]	; 0x60
 800d36c:	2300      	movs	r3, #0
 800d36e:	667b      	str	r3, [r7, #100]	; 0x64
 800d370:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800d374:	460b      	mov	r3, r1
 800d376:	4313      	orrs	r3, r2
 800d378:	d038      	beq.n	800d3ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d37e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d382:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d386:	d018      	beq.n	800d3ba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800d388:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d38c:	d811      	bhi.n	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800d38e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d392:	d014      	beq.n	800d3be <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800d394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d398:	d80b      	bhi.n	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d011      	beq.n	800d3c2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800d39e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3a2:	d106      	bne.n	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d3a4:	4bc3      	ldr	r3, [pc, #780]	; (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a8:	4ac2      	ldr	r2, [pc, #776]	; (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d3aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d3ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d3b0:	e008      	b.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d3b8:	e004      	b.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d3ba:	bf00      	nop
 800d3bc:	e002      	b.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d3be:	bf00      	nop
 800d3c0:	e000      	b.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d3c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d3c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d10b      	bne.n	800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d3cc:	4bb9      	ldr	r3, [pc, #740]	; (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d3ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3d0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d3d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3dc:	4ab5      	ldr	r2, [pc, #724]	; (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d3de:	430b      	orrs	r3, r1
 800d3e0:	6553      	str	r3, [r2, #84]	; 0x54
 800d3e2:	e003      	b.n	800d3ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d3e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d3ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800d3f8:	65bb      	str	r3, [r7, #88]	; 0x58
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d3fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800d402:	460b      	mov	r3, r1
 800d404:	4313      	orrs	r3, r2
 800d406:	d009      	beq.n	800d41c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d408:	4baa      	ldr	r3, [pc, #680]	; (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d40a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d40c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d416:	4aa7      	ldr	r2, [pc, #668]	; (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d418:	430b      	orrs	r3, r1
 800d41a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800d41c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d424:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800d428:	653b      	str	r3, [r7, #80]	; 0x50
 800d42a:	2300      	movs	r3, #0
 800d42c:	657b      	str	r3, [r7, #84]	; 0x54
 800d42e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800d432:	460b      	mov	r3, r1
 800d434:	4313      	orrs	r3, r2
 800d436:	d00a      	beq.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800d438:	4b9e      	ldr	r3, [pc, #632]	; (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d43a:	691b      	ldr	r3, [r3, #16]
 800d43c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800d440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d444:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d448:	4a9a      	ldr	r2, [pc, #616]	; (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d44a:	430b      	orrs	r3, r1
 800d44c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d44e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d456:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800d45a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d45c:	2300      	movs	r3, #0
 800d45e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d460:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800d464:	460b      	mov	r3, r1
 800d466:	4313      	orrs	r3, r2
 800d468:	d009      	beq.n	800d47e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d46a:	4b92      	ldr	r3, [pc, #584]	; (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d46c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d46e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800d472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d478:	4a8e      	ldr	r2, [pc, #568]	; (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d47a:	430b      	orrs	r3, r1
 800d47c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d47e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d486:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800d48a:	643b      	str	r3, [r7, #64]	; 0x40
 800d48c:	2300      	movs	r3, #0
 800d48e:	647b      	str	r3, [r7, #68]	; 0x44
 800d490:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800d494:	460b      	mov	r3, r1
 800d496:	4313      	orrs	r3, r2
 800d498:	d00e      	beq.n	800d4b8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d49a:	4b86      	ldr	r3, [pc, #536]	; (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d49c:	691b      	ldr	r3, [r3, #16]
 800d49e:	4a85      	ldr	r2, [pc, #532]	; (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d4a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d4a4:	6113      	str	r3, [r2, #16]
 800d4a6:	4b83      	ldr	r3, [pc, #524]	; (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d4a8:	6919      	ldr	r1, [r3, #16]
 800d4aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d4b2:	4a80      	ldr	r2, [pc, #512]	; (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d4b4:	430b      	orrs	r3, r1
 800d4b6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d4b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800d4c4:	63bb      	str	r3, [r7, #56]	; 0x38
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d4ca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d4ce:	460b      	mov	r3, r1
 800d4d0:	4313      	orrs	r3, r2
 800d4d2:	d009      	beq.n	800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d4d4:	4b77      	ldr	r3, [pc, #476]	; (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d4d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4d8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800d4dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4e2:	4a74      	ldr	r2, [pc, #464]	; (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d4e4:	430b      	orrs	r3, r1
 800d4e6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d4e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800d4f4:	633b      	str	r3, [r7, #48]	; 0x30
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	637b      	str	r3, [r7, #52]	; 0x34
 800d4fa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800d4fe:	460b      	mov	r3, r1
 800d500:	4313      	orrs	r3, r2
 800d502:	d00a      	beq.n	800d51a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d504:	4b6b      	ldr	r3, [pc, #428]	; (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d508:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800d50c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d514:	4a67      	ldr	r2, [pc, #412]	; (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d516:	430b      	orrs	r3, r1
 800d518:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d522:	2100      	movs	r1, #0
 800d524:	62b9      	str	r1, [r7, #40]	; 0x28
 800d526:	f003 0301 	and.w	r3, r3, #1
 800d52a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d52c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800d530:	460b      	mov	r3, r1
 800d532:	4313      	orrs	r3, r2
 800d534:	d011      	beq.n	800d55a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d53a:	3308      	adds	r3, #8
 800d53c:	2100      	movs	r1, #0
 800d53e:	4618      	mov	r0, r3
 800d540:	f001 fa4a 	bl	800e9d8 <RCCEx_PLL2_Config>
 800d544:	4603      	mov	r3, r0
 800d546:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d54a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d003      	beq.n	800d55a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d552:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d556:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d55a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d562:	2100      	movs	r1, #0
 800d564:	6239      	str	r1, [r7, #32]
 800d566:	f003 0302 	and.w	r3, r3, #2
 800d56a:	627b      	str	r3, [r7, #36]	; 0x24
 800d56c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d570:	460b      	mov	r3, r1
 800d572:	4313      	orrs	r3, r2
 800d574:	d011      	beq.n	800d59a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d57a:	3308      	adds	r3, #8
 800d57c:	2101      	movs	r1, #1
 800d57e:	4618      	mov	r0, r3
 800d580:	f001 fa2a 	bl	800e9d8 <RCCEx_PLL2_Config>
 800d584:	4603      	mov	r3, r0
 800d586:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d58a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d003      	beq.n	800d59a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d592:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d596:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d59a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a2:	2100      	movs	r1, #0
 800d5a4:	61b9      	str	r1, [r7, #24]
 800d5a6:	f003 0304 	and.w	r3, r3, #4
 800d5aa:	61fb      	str	r3, [r7, #28]
 800d5ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	4313      	orrs	r3, r2
 800d5b4:	d011      	beq.n	800d5da <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d5b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5ba:	3308      	adds	r3, #8
 800d5bc:	2102      	movs	r1, #2
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f001 fa0a 	bl	800e9d8 <RCCEx_PLL2_Config>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d5ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d003      	beq.n	800d5da <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d5d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d5da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e2:	2100      	movs	r1, #0
 800d5e4:	6139      	str	r1, [r7, #16]
 800d5e6:	f003 0308 	and.w	r3, r3, #8
 800d5ea:	617b      	str	r3, [r7, #20]
 800d5ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d5f0:	460b      	mov	r3, r1
 800d5f2:	4313      	orrs	r3, r2
 800d5f4:	d011      	beq.n	800d61a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d5f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5fa:	3328      	adds	r3, #40	; 0x28
 800d5fc:	2100      	movs	r1, #0
 800d5fe:	4618      	mov	r0, r3
 800d600:	f001 fa9c 	bl	800eb3c <RCCEx_PLL3_Config>
 800d604:	4603      	mov	r3, r0
 800d606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800d60a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d003      	beq.n	800d61a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d612:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d616:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d61a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d622:	2100      	movs	r1, #0
 800d624:	60b9      	str	r1, [r7, #8]
 800d626:	f003 0310 	and.w	r3, r3, #16
 800d62a:	60fb      	str	r3, [r7, #12]
 800d62c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d630:	460b      	mov	r3, r1
 800d632:	4313      	orrs	r3, r2
 800d634:	d011      	beq.n	800d65a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d63a:	3328      	adds	r3, #40	; 0x28
 800d63c:	2101      	movs	r1, #1
 800d63e:	4618      	mov	r0, r3
 800d640:	f001 fa7c 	bl	800eb3c <RCCEx_PLL3_Config>
 800d644:	4603      	mov	r3, r0
 800d646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d64a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d003      	beq.n	800d65a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d652:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d656:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d65a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d662:	2100      	movs	r1, #0
 800d664:	6039      	str	r1, [r7, #0]
 800d666:	f003 0320 	and.w	r3, r3, #32
 800d66a:	607b      	str	r3, [r7, #4]
 800d66c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d670:	460b      	mov	r3, r1
 800d672:	4313      	orrs	r3, r2
 800d674:	d011      	beq.n	800d69a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d67a:	3328      	adds	r3, #40	; 0x28
 800d67c:	2102      	movs	r1, #2
 800d67e:	4618      	mov	r0, r3
 800d680:	f001 fa5c 	bl	800eb3c <RCCEx_PLL3_Config>
 800d684:	4603      	mov	r3, r0
 800d686:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d68a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d003      	beq.n	800d69a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d692:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d696:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800d69a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d101      	bne.n	800d6a6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	e000      	b.n	800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800d6a6:	2301      	movs	r3, #1
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d6b4:	58024400 	.word	0x58024400

0800d6b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b090      	sub	sp, #64	; 0x40
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d6c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6c6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800d6ca:	430b      	orrs	r3, r1
 800d6cc:	f040 8094 	bne.w	800d7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800d6d0:	4b9e      	ldr	r3, [pc, #632]	; (800d94c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d6d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6d4:	f003 0307 	and.w	r3, r3, #7
 800d6d8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800d6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6dc:	2b04      	cmp	r3, #4
 800d6de:	f200 8087 	bhi.w	800d7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800d6e2:	a201      	add	r2, pc, #4	; (adr r2, 800d6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800d6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e8:	0800d6fd 	.word	0x0800d6fd
 800d6ec:	0800d725 	.word	0x0800d725
 800d6f0:	0800d74d 	.word	0x0800d74d
 800d6f4:	0800d7e9 	.word	0x0800d7e9
 800d6f8:	0800d775 	.word	0x0800d775
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d6fc:	4b93      	ldr	r3, [pc, #588]	; (800d94c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d704:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d708:	d108      	bne.n	800d71c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d70a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d70e:	4618      	mov	r0, r3
 800d710:	f001 f810 	bl	800e734 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d716:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d718:	f000 bd45 	b.w	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d71c:	2300      	movs	r3, #0
 800d71e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d720:	f000 bd41 	b.w	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d724:	4b89      	ldr	r3, [pc, #548]	; (800d94c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d72c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d730:	d108      	bne.n	800d744 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d732:	f107 0318 	add.w	r3, r7, #24
 800d736:	4618      	mov	r0, r3
 800d738:	f000 fd54 	bl	800e1e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d73c:	69bb      	ldr	r3, [r7, #24]
 800d73e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d740:	f000 bd31 	b.w	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d744:	2300      	movs	r3, #0
 800d746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d748:	f000 bd2d 	b.w	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d74c:	4b7f      	ldr	r3, [pc, #508]	; (800d94c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d758:	d108      	bne.n	800d76c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d75a:	f107 030c 	add.w	r3, r7, #12
 800d75e:	4618      	mov	r0, r3
 800d760:	f000 fe94 	bl	800e48c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d768:	f000 bd1d 	b.w	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d76c:	2300      	movs	r3, #0
 800d76e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d770:	f000 bd19 	b.w	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d774:	4b75      	ldr	r3, [pc, #468]	; (800d94c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d778:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d77c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d77e:	4b73      	ldr	r3, [pc, #460]	; (800d94c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f003 0304 	and.w	r3, r3, #4
 800d786:	2b04      	cmp	r3, #4
 800d788:	d10c      	bne.n	800d7a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800d78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d109      	bne.n	800d7a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d790:	4b6e      	ldr	r3, [pc, #440]	; (800d94c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	08db      	lsrs	r3, r3, #3
 800d796:	f003 0303 	and.w	r3, r3, #3
 800d79a:	4a6d      	ldr	r2, [pc, #436]	; (800d950 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d79c:	fa22 f303 	lsr.w	r3, r2, r3
 800d7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7a2:	e01f      	b.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d7a4:	4b69      	ldr	r3, [pc, #420]	; (800d94c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7b0:	d106      	bne.n	800d7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800d7b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d7b8:	d102      	bne.n	800d7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d7ba:	4b66      	ldr	r3, [pc, #408]	; (800d954 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800d7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7be:	e011      	b.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d7c0:	4b62      	ldr	r3, [pc, #392]	; (800d94c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d7c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d7cc:	d106      	bne.n	800d7dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800d7ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d7d4:	d102      	bne.n	800d7dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d7d6:	4b60      	ldr	r3, [pc, #384]	; (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800d7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7da:	e003      	b.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d7dc:	2300      	movs	r3, #0
 800d7de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d7e0:	f000 bce1 	b.w	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d7e4:	f000 bcdf 	b.w	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d7e8:	4b5c      	ldr	r3, [pc, #368]	; (800d95c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800d7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7ec:	f000 bcdb 	b.w	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7f4:	f000 bcd7 	b.w	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800d7f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d7fc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800d800:	430b      	orrs	r3, r1
 800d802:	f040 80ad 	bne.w	800d960 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800d806:	4b51      	ldr	r3, [pc, #324]	; (800d94c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d80a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800d80e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800d810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d816:	d056      	beq.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800d818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d81a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d81e:	f200 8090 	bhi.w	800d942 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800d822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d824:	2bc0      	cmp	r3, #192	; 0xc0
 800d826:	f000 8088 	beq.w	800d93a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800d82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d82c:	2bc0      	cmp	r3, #192	; 0xc0
 800d82e:	f200 8088 	bhi.w	800d942 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800d832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d834:	2b80      	cmp	r3, #128	; 0x80
 800d836:	d032      	beq.n	800d89e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800d838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d83a:	2b80      	cmp	r3, #128	; 0x80
 800d83c:	f200 8081 	bhi.w	800d942 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800d840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d842:	2b00      	cmp	r3, #0
 800d844:	d003      	beq.n	800d84e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800d846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d848:	2b40      	cmp	r3, #64	; 0x40
 800d84a:	d014      	beq.n	800d876 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800d84c:	e079      	b.n	800d942 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d84e:	4b3f      	ldr	r3, [pc, #252]	; (800d94c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d856:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d85a:	d108      	bne.n	800d86e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d85c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d860:	4618      	mov	r0, r3
 800d862:	f000 ff67 	bl	800e734 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d868:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d86a:	f000 bc9c 	b.w	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d86e:	2300      	movs	r3, #0
 800d870:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d872:	f000 bc98 	b.w	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d876:	4b35      	ldr	r3, [pc, #212]	; (800d94c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d87e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d882:	d108      	bne.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d884:	f107 0318 	add.w	r3, r7, #24
 800d888:	4618      	mov	r0, r3
 800d88a:	f000 fcab 	bl	800e1e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d88e:	69bb      	ldr	r3, [r7, #24]
 800d890:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d892:	f000 bc88 	b.w	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d896:	2300      	movs	r3, #0
 800d898:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d89a:	f000 bc84 	b.w	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d89e:	4b2b      	ldr	r3, [pc, #172]	; (800d94c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d8a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d8aa:	d108      	bne.n	800d8be <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d8ac:	f107 030c 	add.w	r3, r7, #12
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f000 fdeb 	bl	800e48c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d8ba:	f000 bc74 	b.w	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8c2:	f000 bc70 	b.w	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d8c6:	4b21      	ldr	r3, [pc, #132]	; (800d94c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d8c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d8ce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d8d0:	4b1e      	ldr	r3, [pc, #120]	; (800d94c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f003 0304 	and.w	r3, r3, #4
 800d8d8:	2b04      	cmp	r3, #4
 800d8da:	d10c      	bne.n	800d8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800d8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d109      	bne.n	800d8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d8e2:	4b1a      	ldr	r3, [pc, #104]	; (800d94c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	08db      	lsrs	r3, r3, #3
 800d8e8:	f003 0303 	and.w	r3, r3, #3
 800d8ec:	4a18      	ldr	r2, [pc, #96]	; (800d950 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d8ee:	fa22 f303 	lsr.w	r3, r2, r3
 800d8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d8f4:	e01f      	b.n	800d936 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d8f6:	4b15      	ldr	r3, [pc, #84]	; (800d94c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d902:	d106      	bne.n	800d912 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800d904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d906:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d90a:	d102      	bne.n	800d912 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d90c:	4b11      	ldr	r3, [pc, #68]	; (800d954 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800d90e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d910:	e011      	b.n	800d936 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d912:	4b0e      	ldr	r3, [pc, #56]	; (800d94c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d91a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d91e:	d106      	bne.n	800d92e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800d920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d926:	d102      	bne.n	800d92e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d928:	4b0b      	ldr	r3, [pc, #44]	; (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800d92a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d92c:	e003      	b.n	800d936 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d92e:	2300      	movs	r3, #0
 800d930:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d932:	f000 bc38 	b.w	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d936:	f000 bc36 	b.w	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d93a:	4b08      	ldr	r3, [pc, #32]	; (800d95c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800d93c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d93e:	f000 bc32 	b.w	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800d942:	2300      	movs	r3, #0
 800d944:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d946:	f000 bc2e 	b.w	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d94a:	bf00      	nop
 800d94c:	58024400 	.word	0x58024400
 800d950:	03d09000 	.word	0x03d09000
 800d954:	003d0900 	.word	0x003d0900
 800d958:	017d7840 	.word	0x017d7840
 800d95c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800d960:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d964:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800d968:	430b      	orrs	r3, r1
 800d96a:	f040 809c 	bne.w	800daa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800d96e:	4b9e      	ldr	r3, [pc, #632]	; (800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d972:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800d976:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800d978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d97e:	d054      	beq.n	800da2a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800d980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d982:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d986:	f200 808b 	bhi.w	800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800d98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d990:	f000 8083 	beq.w	800da9a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800d994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d996:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d99a:	f200 8081 	bhi.w	800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800d99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d9a4:	d02f      	beq.n	800da06 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800d9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d9ac:	d878      	bhi.n	800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800d9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d004      	beq.n	800d9be <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800d9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d9ba:	d012      	beq.n	800d9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800d9bc:	e070      	b.n	800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d9be:	4b8a      	ldr	r3, [pc, #552]	; (800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d9c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d9ca:	d107      	bne.n	800d9dc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d9cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f000 feaf 	bl	800e734 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d9da:	e3e4      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9e0:	e3e1      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d9e2:	4b81      	ldr	r3, [pc, #516]	; (800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d9ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d9ee:	d107      	bne.n	800da00 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d9f0:	f107 0318 	add.w	r3, r7, #24
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f000 fbf5 	bl	800e1e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d9fe:	e3d2      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800da00:	2300      	movs	r3, #0
 800da02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da04:	e3cf      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800da06:	4b78      	ldr	r3, [pc, #480]	; (800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800da12:	d107      	bne.n	800da24 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da14:	f107 030c 	add.w	r3, r7, #12
 800da18:	4618      	mov	r0, r3
 800da1a:	f000 fd37 	bl	800e48c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800da22:	e3c0      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800da24:	2300      	movs	r3, #0
 800da26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da28:	e3bd      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800da2a:	4b6f      	ldr	r3, [pc, #444]	; (800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800da2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800da32:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800da34:	4b6c      	ldr	r3, [pc, #432]	; (800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f003 0304 	and.w	r3, r3, #4
 800da3c:	2b04      	cmp	r3, #4
 800da3e:	d10c      	bne.n	800da5a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800da40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da42:	2b00      	cmp	r3, #0
 800da44:	d109      	bne.n	800da5a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800da46:	4b68      	ldr	r3, [pc, #416]	; (800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	08db      	lsrs	r3, r3, #3
 800da4c:	f003 0303 	and.w	r3, r3, #3
 800da50:	4a66      	ldr	r2, [pc, #408]	; (800dbec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800da52:	fa22 f303 	lsr.w	r3, r2, r3
 800da56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da58:	e01e      	b.n	800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800da5a:	4b63      	ldr	r3, [pc, #396]	; (800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da66:	d106      	bne.n	800da76 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800da68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800da6e:	d102      	bne.n	800da76 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800da70:	4b5f      	ldr	r3, [pc, #380]	; (800dbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800da72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da74:	e010      	b.n	800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800da76:	4b5c      	ldr	r3, [pc, #368]	; (800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800da82:	d106      	bne.n	800da92 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800da84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800da8a:	d102      	bne.n	800da92 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800da8c:	4b59      	ldr	r3, [pc, #356]	; (800dbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800da8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da90:	e002      	b.n	800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800da92:	2300      	movs	r3, #0
 800da94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800da96:	e386      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800da98:	e385      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800da9a:	4b57      	ldr	r3, [pc, #348]	; (800dbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800da9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da9e:	e382      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800daa0:	2300      	movs	r3, #0
 800daa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800daa4:	e37f      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800daa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800daaa:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800daae:	430b      	orrs	r3, r1
 800dab0:	f040 80a7 	bne.w	800dc02 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800dab4:	4b4c      	ldr	r3, [pc, #304]	; (800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dab8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800dabc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800dabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dac4:	d055      	beq.n	800db72 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800dac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dacc:	f200 8096 	bhi.w	800dbfc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800dad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800dad6:	f000 8084 	beq.w	800dbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800dada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dadc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800dae0:	f200 808c 	bhi.w	800dbfc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800dae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800daea:	d030      	beq.n	800db4e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800daec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800daf2:	f200 8083 	bhi.w	800dbfc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800daf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d004      	beq.n	800db06 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800dafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dafe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800db02:	d012      	beq.n	800db2a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800db04:	e07a      	b.n	800dbfc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800db06:	4b38      	ldr	r3, [pc, #224]	; (800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800db12:	d107      	bne.n	800db24 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800db14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db18:	4618      	mov	r0, r3
 800db1a:	f000 fe0b 	bl	800e734 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800db1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db22:	e340      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800db24:	2300      	movs	r3, #0
 800db26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db28:	e33d      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800db2a:	4b2f      	ldr	r3, [pc, #188]	; (800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800db32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800db36:	d107      	bne.n	800db48 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db38:	f107 0318 	add.w	r3, r7, #24
 800db3c:	4618      	mov	r0, r3
 800db3e:	f000 fb51 	bl	800e1e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800db42:	69bb      	ldr	r3, [r7, #24]
 800db44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db46:	e32e      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800db48:	2300      	movs	r3, #0
 800db4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db4c:	e32b      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800db4e:	4b26      	ldr	r3, [pc, #152]	; (800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800db56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800db5a:	d107      	bne.n	800db6c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db5c:	f107 030c 	add.w	r3, r7, #12
 800db60:	4618      	mov	r0, r3
 800db62:	f000 fc93 	bl	800e48c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db6a:	e31c      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800db6c:	2300      	movs	r3, #0
 800db6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db70:	e319      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800db72:	4b1d      	ldr	r3, [pc, #116]	; (800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800db74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800db7a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800db7c:	4b1a      	ldr	r3, [pc, #104]	; (800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	f003 0304 	and.w	r3, r3, #4
 800db84:	2b04      	cmp	r3, #4
 800db86:	d10c      	bne.n	800dba2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800db88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d109      	bne.n	800dba2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800db8e:	4b16      	ldr	r3, [pc, #88]	; (800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	08db      	lsrs	r3, r3, #3
 800db94:	f003 0303 	and.w	r3, r3, #3
 800db98:	4a14      	ldr	r2, [pc, #80]	; (800dbec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800db9a:	fa22 f303 	lsr.w	r3, r2, r3
 800db9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dba0:	e01e      	b.n	800dbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dba2:	4b11      	ldr	r3, [pc, #68]	; (800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dbae:	d106      	bne.n	800dbbe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800dbb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dbb6:	d102      	bne.n	800dbbe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dbb8:	4b0d      	ldr	r3, [pc, #52]	; (800dbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800dbba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dbbc:	e010      	b.n	800dbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dbbe:	4b0a      	ldr	r3, [pc, #40]	; (800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dbc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dbca:	d106      	bne.n	800dbda <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800dbcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dbd2:	d102      	bne.n	800dbda <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dbd4:	4b07      	ldr	r3, [pc, #28]	; (800dbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800dbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dbd8:	e002      	b.n	800dbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800dbde:	e2e2      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800dbe0:	e2e1      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800dbe2:	4b05      	ldr	r3, [pc, #20]	; (800dbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800dbe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbe6:	e2de      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800dbe8:	58024400 	.word	0x58024400
 800dbec:	03d09000 	.word	0x03d09000
 800dbf0:	003d0900 	.word	0x003d0900
 800dbf4:	017d7840 	.word	0x017d7840
 800dbf8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc00:	e2d1      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800dc02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc06:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800dc0a:	430b      	orrs	r3, r1
 800dc0c:	f040 809c 	bne.w	800dd48 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800dc10:	4b93      	ldr	r3, [pc, #588]	; (800de60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dc12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc14:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800dc18:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800dc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dc20:	d054      	beq.n	800dccc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800dc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dc28:	f200 808b 	bhi.w	800dd42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800dc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800dc32:	f000 8083 	beq.w	800dd3c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800dc36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800dc3c:	f200 8081 	bhi.w	800dd42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800dc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc46:	d02f      	beq.n	800dca8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800dc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc4e:	d878      	bhi.n	800dd42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800dc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d004      	beq.n	800dc60 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800dc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc5c:	d012      	beq.n	800dc84 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800dc5e:	e070      	b.n	800dd42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dc60:	4b7f      	ldr	r3, [pc, #508]	; (800de60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dc6c:	d107      	bne.n	800dc7e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dc6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dc72:	4618      	mov	r0, r3
 800dc74:	f000 fd5e 	bl	800e734 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc7c:	e293      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc82:	e290      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dc84:	4b76      	ldr	r3, [pc, #472]	; (800de60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dc90:	d107      	bne.n	800dca2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc92:	f107 0318 	add.w	r3, r7, #24
 800dc96:	4618      	mov	r0, r3
 800dc98:	f000 faa4 	bl	800e1e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dc9c:	69bb      	ldr	r3, [r7, #24]
 800dc9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dca0:	e281      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dca2:	2300      	movs	r3, #0
 800dca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dca6:	e27e      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dca8:	4b6d      	ldr	r3, [pc, #436]	; (800de60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dcb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dcb4:	d107      	bne.n	800dcc6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dcb6:	f107 030c 	add.w	r3, r7, #12
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f000 fbe6 	bl	800e48c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dcc4:	e26f      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dcca:	e26c      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dccc:	4b64      	ldr	r3, [pc, #400]	; (800de60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dcce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dcd4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dcd6:	4b62      	ldr	r3, [pc, #392]	; (800de60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f003 0304 	and.w	r3, r3, #4
 800dcde:	2b04      	cmp	r3, #4
 800dce0:	d10c      	bne.n	800dcfc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800dce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d109      	bne.n	800dcfc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dce8:	4b5d      	ldr	r3, [pc, #372]	; (800de60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	08db      	lsrs	r3, r3, #3
 800dcee:	f003 0303 	and.w	r3, r3, #3
 800dcf2:	4a5c      	ldr	r2, [pc, #368]	; (800de64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800dcf4:	fa22 f303 	lsr.w	r3, r2, r3
 800dcf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dcfa:	e01e      	b.n	800dd3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dcfc:	4b58      	ldr	r3, [pc, #352]	; (800de60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd08:	d106      	bne.n	800dd18 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800dd0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dd10:	d102      	bne.n	800dd18 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dd12:	4b55      	ldr	r3, [pc, #340]	; (800de68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800dd14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd16:	e010      	b.n	800dd3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dd18:	4b51      	ldr	r3, [pc, #324]	; (800de60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dd24:	d106      	bne.n	800dd34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800dd26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd2c:	d102      	bne.n	800dd34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dd2e:	4b4f      	ldr	r3, [pc, #316]	; (800de6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800dd30:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd32:	e002      	b.n	800dd3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dd34:	2300      	movs	r3, #0
 800dd36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800dd38:	e235      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800dd3a:	e234      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800dd3c:	4b4c      	ldr	r3, [pc, #304]	; (800de70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800dd3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd40:	e231      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800dd42:	2300      	movs	r3, #0
 800dd44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd46:	e22e      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800dd48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd4c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800dd50:	430b      	orrs	r3, r1
 800dd52:	f040 808f 	bne.w	800de74 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800dd56:	4b42      	ldr	r3, [pc, #264]	; (800de60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dd58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd5a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800dd5e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800dd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dd66:	d06b      	beq.n	800de40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800dd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dd6e:	d874      	bhi.n	800de5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800dd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dd76:	d056      	beq.n	800de26 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800dd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dd7e:	d86c      	bhi.n	800de5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800dd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800dd86:	d03b      	beq.n	800de00 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800dd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800dd8e:	d864      	bhi.n	800de5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800dd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dd96:	d021      	beq.n	800dddc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800dd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dd9e:	d85c      	bhi.n	800de5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800dda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d004      	beq.n	800ddb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800dda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ddac:	d004      	beq.n	800ddb8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ddae:	e054      	b.n	800de5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ddb0:	f7fe fa4c 	bl	800c24c <HAL_RCC_GetPCLK1Freq>
 800ddb4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ddb6:	e1f6      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ddb8:	4b29      	ldr	r3, [pc, #164]	; (800de60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ddc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ddc4:	d107      	bne.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ddc6:	f107 0318 	add.w	r3, r7, #24
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f000 fa0a 	bl	800e1e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ddd0:	69fb      	ldr	r3, [r7, #28]
 800ddd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ddd4:	e1e7      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddda:	e1e4      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dddc:	4b20      	ldr	r3, [pc, #128]	; (800de60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dde4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dde8:	d107      	bne.n	800ddfa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ddea:	f107 030c 	add.w	r3, r7, #12
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f000 fb4c 	bl	800e48c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ddf8:	e1d5      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddfe:	e1d2      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800de00:	4b17      	ldr	r3, [pc, #92]	; (800de60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f003 0304 	and.w	r3, r3, #4
 800de08:	2b04      	cmp	r3, #4
 800de0a:	d109      	bne.n	800de20 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800de0c:	4b14      	ldr	r3, [pc, #80]	; (800de60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	08db      	lsrs	r3, r3, #3
 800de12:	f003 0303 	and.w	r3, r3, #3
 800de16:	4a13      	ldr	r2, [pc, #76]	; (800de64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800de18:	fa22 f303 	lsr.w	r3, r2, r3
 800de1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de1e:	e1c2      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800de20:	2300      	movs	r3, #0
 800de22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de24:	e1bf      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800de26:	4b0e      	ldr	r3, [pc, #56]	; (800de60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de32:	d102      	bne.n	800de3a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800de34:	4b0c      	ldr	r3, [pc, #48]	; (800de68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800de36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de38:	e1b5      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800de3a:	2300      	movs	r3, #0
 800de3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de3e:	e1b2      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800de40:	4b07      	ldr	r3, [pc, #28]	; (800de60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800de4c:	d102      	bne.n	800de54 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800de4e:	4b07      	ldr	r3, [pc, #28]	; (800de6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800de50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de52:	e1a8      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800de54:	2300      	movs	r3, #0
 800de56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de58:	e1a5      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800de5a:	2300      	movs	r3, #0
 800de5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de5e:	e1a2      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800de60:	58024400 	.word	0x58024400
 800de64:	03d09000 	.word	0x03d09000
 800de68:	003d0900 	.word	0x003d0900
 800de6c:	017d7840 	.word	0x017d7840
 800de70:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800de74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de78:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800de7c:	430b      	orrs	r3, r1
 800de7e:	d173      	bne.n	800df68 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800de80:	4b9c      	ldr	r3, [pc, #624]	; (800e0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800de82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800de88:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800de8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800de90:	d02f      	beq.n	800def2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800de92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800de98:	d863      	bhi.n	800df62 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800de9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d004      	beq.n	800deaa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800dea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dea6:	d012      	beq.n	800dece <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800dea8:	e05b      	b.n	800df62 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800deaa:	4b92      	ldr	r3, [pc, #584]	; (800e0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800deb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800deb6:	d107      	bne.n	800dec8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800deb8:	f107 0318 	add.w	r3, r7, #24
 800debc:	4618      	mov	r0, r3
 800debe:	f000 f991 	bl	800e1e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dec2:	69bb      	ldr	r3, [r7, #24]
 800dec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dec6:	e16e      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dec8:	2300      	movs	r3, #0
 800deca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800decc:	e16b      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dece:	4b89      	ldr	r3, [pc, #548]	; (800e0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ded6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800deda:	d107      	bne.n	800deec <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dedc:	f107 030c 	add.w	r3, r7, #12
 800dee0:	4618      	mov	r0, r3
 800dee2:	f000 fad3 	bl	800e48c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800deea:	e15c      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800deec:	2300      	movs	r3, #0
 800deee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800def0:	e159      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800def2:	4b80      	ldr	r3, [pc, #512]	; (800e0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800def4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800def6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800defa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800defc:	4b7d      	ldr	r3, [pc, #500]	; (800e0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f003 0304 	and.w	r3, r3, #4
 800df04:	2b04      	cmp	r3, #4
 800df06:	d10c      	bne.n	800df22 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800df08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d109      	bne.n	800df22 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800df0e:	4b79      	ldr	r3, [pc, #484]	; (800e0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	08db      	lsrs	r3, r3, #3
 800df14:	f003 0303 	and.w	r3, r3, #3
 800df18:	4a77      	ldr	r2, [pc, #476]	; (800e0f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800df1a:	fa22 f303 	lsr.w	r3, r2, r3
 800df1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df20:	e01e      	b.n	800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800df22:	4b74      	ldr	r3, [pc, #464]	; (800e0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df2e:	d106      	bne.n	800df3e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800df30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800df36:	d102      	bne.n	800df3e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800df38:	4b70      	ldr	r3, [pc, #448]	; (800e0fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800df3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df3c:	e010      	b.n	800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800df3e:	4b6d      	ldr	r3, [pc, #436]	; (800e0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800df4a:	d106      	bne.n	800df5a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800df4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800df52:	d102      	bne.n	800df5a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800df54:	4b6a      	ldr	r3, [pc, #424]	; (800e100 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800df56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df58:	e002      	b.n	800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800df5a:	2300      	movs	r3, #0
 800df5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800df5e:	e122      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800df60:	e121      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800df62:	2300      	movs	r3, #0
 800df64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df66:	e11e      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800df68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df6c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800df70:	430b      	orrs	r3, r1
 800df72:	d133      	bne.n	800dfdc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800df74:	4b5f      	ldr	r3, [pc, #380]	; (800e0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800df76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df7c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800df7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df80:	2b00      	cmp	r3, #0
 800df82:	d004      	beq.n	800df8e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800df84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df8a:	d012      	beq.n	800dfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800df8c:	e023      	b.n	800dfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800df8e:	4b59      	ldr	r3, [pc, #356]	; (800e0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800df9a:	d107      	bne.n	800dfac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800df9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f000 fbc7 	bl	800e734 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dfaa:	e0fc      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dfac:	2300      	movs	r3, #0
 800dfae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfb0:	e0f9      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dfb2:	4b50      	ldr	r3, [pc, #320]	; (800e0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dfba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dfbe:	d107      	bne.n	800dfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dfc0:	f107 0318 	add.w	r3, r7, #24
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f000 f90d 	bl	800e1e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800dfca:	6a3b      	ldr	r3, [r7, #32]
 800dfcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dfce:	e0ea      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfd4:	e0e7      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfda:	e0e4      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800dfdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfe0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800dfe4:	430b      	orrs	r3, r1
 800dfe6:	f040 808d 	bne.w	800e104 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800dfea:	4b42      	ldr	r3, [pc, #264]	; (800e0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800dfec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dfee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800dff2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800dff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dffa:	d06b      	beq.n	800e0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800dffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e002:	d874      	bhi.n	800e0ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e00a:	d056      	beq.n	800e0ba <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800e00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e00e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e012:	d86c      	bhi.n	800e0ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e016:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e01a:	d03b      	beq.n	800e094 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800e01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e01e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e022:	d864      	bhi.n	800e0ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e02a:	d021      	beq.n	800e070 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800e02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e032:	d85c      	bhi.n	800e0ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e036:	2b00      	cmp	r3, #0
 800e038:	d004      	beq.n	800e044 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800e03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e03c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e040:	d004      	beq.n	800e04c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800e042:	e054      	b.n	800e0ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800e044:	f000 f8b8 	bl	800e1b8 <HAL_RCCEx_GetD3PCLK1Freq>
 800e048:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e04a:	e0ac      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e04c:	4b29      	ldr	r3, [pc, #164]	; (800e0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e054:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e058:	d107      	bne.n	800e06a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e05a:	f107 0318 	add.w	r3, r7, #24
 800e05e:	4618      	mov	r0, r3
 800e060:	f000 f8c0 	bl	800e1e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e068:	e09d      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e06a:	2300      	movs	r3, #0
 800e06c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e06e:	e09a      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e070:	4b20      	ldr	r3, [pc, #128]	; (800e0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e07c:	d107      	bne.n	800e08e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e07e:	f107 030c 	add.w	r3, r7, #12
 800e082:	4618      	mov	r0, r3
 800e084:	f000 fa02 	bl	800e48c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e08c:	e08b      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e08e:	2300      	movs	r3, #0
 800e090:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e092:	e088      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e094:	4b17      	ldr	r3, [pc, #92]	; (800e0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	f003 0304 	and.w	r3, r3, #4
 800e09c:	2b04      	cmp	r3, #4
 800e09e:	d109      	bne.n	800e0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e0a0:	4b14      	ldr	r3, [pc, #80]	; (800e0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	08db      	lsrs	r3, r3, #3
 800e0a6:	f003 0303 	and.w	r3, r3, #3
 800e0aa:	4a13      	ldr	r2, [pc, #76]	; (800e0f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800e0ac:	fa22 f303 	lsr.w	r3, r2, r3
 800e0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e0b2:	e078      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0b8:	e075      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e0ba:	4b0e      	ldr	r3, [pc, #56]	; (800e0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0c6:	d102      	bne.n	800e0ce <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800e0c8:	4b0c      	ldr	r3, [pc, #48]	; (800e0fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800e0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e0cc:	e06b      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0d2:	e068      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e0d4:	4b07      	ldr	r3, [pc, #28]	; (800e0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e0e0:	d102      	bne.n	800e0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800e0e2:	4b07      	ldr	r3, [pc, #28]	; (800e100 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800e0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e0e6:	e05e      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0ec:	e05b      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0f2:	e058      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e0f4:	58024400 	.word	0x58024400
 800e0f8:	03d09000 	.word	0x03d09000
 800e0fc:	003d0900 	.word	0x003d0900
 800e100:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800e104:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e108:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800e10c:	430b      	orrs	r3, r1
 800e10e:	d148      	bne.n	800e1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800e110:	4b27      	ldr	r3, [pc, #156]	; (800e1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e114:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e118:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e11c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e120:	d02a      	beq.n	800e178 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800e122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e128:	d838      	bhi.n	800e19c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800e12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d004      	beq.n	800e13a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800e130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e136:	d00d      	beq.n	800e154 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800e138:	e030      	b.n	800e19c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e13a:	4b1d      	ldr	r3, [pc, #116]	; (800e1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e142:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e146:	d102      	bne.n	800e14e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800e148:	4b1a      	ldr	r3, [pc, #104]	; (800e1b4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800e14a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e14c:	e02b      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e14e:	2300      	movs	r3, #0
 800e150:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e152:	e028      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e154:	4b16      	ldr	r3, [pc, #88]	; (800e1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e15c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e160:	d107      	bne.n	800e172 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e166:	4618      	mov	r0, r3
 800e168:	f000 fae4 	bl	800e734 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e16e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e170:	e019      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e172:	2300      	movs	r3, #0
 800e174:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e176:	e016      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e178:	4b0d      	ldr	r3, [pc, #52]	; (800e1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e180:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e184:	d107      	bne.n	800e196 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e186:	f107 0318 	add.w	r3, r7, #24
 800e18a:	4618      	mov	r0, r3
 800e18c:	f000 f82a 	bl	800e1e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e190:	69fb      	ldr	r3, [r7, #28]
 800e192:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e194:	e007      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e196:	2300      	movs	r3, #0
 800e198:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e19a:	e004      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e19c:	2300      	movs	r3, #0
 800e19e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1a0:	e001      	b.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800e1a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3740      	adds	r7, #64	; 0x40
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}
 800e1b0:	58024400 	.word	0x58024400
 800e1b4:	017d7840 	.word	0x017d7840

0800e1b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800e1bc:	f7fe f816 	bl	800c1ec <HAL_RCC_GetHCLKFreq>
 800e1c0:	4602      	mov	r2, r0
 800e1c2:	4b06      	ldr	r3, [pc, #24]	; (800e1dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800e1c4:	6a1b      	ldr	r3, [r3, #32]
 800e1c6:	091b      	lsrs	r3, r3, #4
 800e1c8:	f003 0307 	and.w	r3, r3, #7
 800e1cc:	4904      	ldr	r1, [pc, #16]	; (800e1e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800e1ce:	5ccb      	ldrb	r3, [r1, r3]
 800e1d0:	f003 031f 	and.w	r3, r3, #31
 800e1d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	58024400 	.word	0x58024400
 800e1e0:	08012624 	.word	0x08012624

0800e1e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b089      	sub	sp, #36	; 0x24
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e1ec:	4ba1      	ldr	r3, [pc, #644]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e1ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1f0:	f003 0303 	and.w	r3, r3, #3
 800e1f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800e1f6:	4b9f      	ldr	r3, [pc, #636]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1fa:	0b1b      	lsrs	r3, r3, #12
 800e1fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e200:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e202:	4b9c      	ldr	r3, [pc, #624]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e206:	091b      	lsrs	r3, r3, #4
 800e208:	f003 0301 	and.w	r3, r3, #1
 800e20c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800e20e:	4b99      	ldr	r3, [pc, #612]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e212:	08db      	lsrs	r3, r3, #3
 800e214:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e218:	693a      	ldr	r2, [r7, #16]
 800e21a:	fb02 f303 	mul.w	r3, r2, r3
 800e21e:	ee07 3a90 	vmov	s15, r3
 800e222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e226:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	f000 8111 	beq.w	800e454 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800e232:	69bb      	ldr	r3, [r7, #24]
 800e234:	2b02      	cmp	r3, #2
 800e236:	f000 8083 	beq.w	800e340 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800e23a:	69bb      	ldr	r3, [r7, #24]
 800e23c:	2b02      	cmp	r3, #2
 800e23e:	f200 80a1 	bhi.w	800e384 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800e242:	69bb      	ldr	r3, [r7, #24]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d003      	beq.n	800e250 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800e248:	69bb      	ldr	r3, [r7, #24]
 800e24a:	2b01      	cmp	r3, #1
 800e24c:	d056      	beq.n	800e2fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800e24e:	e099      	b.n	800e384 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e250:	4b88      	ldr	r3, [pc, #544]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f003 0320 	and.w	r3, r3, #32
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d02d      	beq.n	800e2b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e25c:	4b85      	ldr	r3, [pc, #532]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	08db      	lsrs	r3, r3, #3
 800e262:	f003 0303 	and.w	r3, r3, #3
 800e266:	4a84      	ldr	r2, [pc, #528]	; (800e478 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800e268:	fa22 f303 	lsr.w	r3, r2, r3
 800e26c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	ee07 3a90 	vmov	s15, r3
 800e274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	ee07 3a90 	vmov	s15, r3
 800e27e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e286:	4b7b      	ldr	r3, [pc, #492]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e28a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e28e:	ee07 3a90 	vmov	s15, r3
 800e292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e296:	ed97 6a03 	vldr	s12, [r7, #12]
 800e29a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800e47c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e29e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e2a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e2a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e2aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e2ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e2b6:	e087      	b.n	800e3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	ee07 3a90 	vmov	s15, r3
 800e2be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800e480 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800e2c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e2ca:	4b6a      	ldr	r3, [pc, #424]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2d2:	ee07 3a90 	vmov	s15, r3
 800e2d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2da:	ed97 6a03 	vldr	s12, [r7, #12]
 800e2de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800e47c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e2e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e2e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e2ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e2ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e2f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e2fa:	e065      	b.n	800e3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	ee07 3a90 	vmov	s15, r3
 800e302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e306:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e484 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e30a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e30e:	4b59      	ldr	r3, [pc, #356]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e316:	ee07 3a90 	vmov	s15, r3
 800e31a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e31e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e322:	eddf 5a56 	vldr	s11, [pc, #344]	; 800e47c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e32a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e32e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e33a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e33e:	e043      	b.n	800e3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	ee07 3a90 	vmov	s15, r3
 800e346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e34a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800e488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800e34e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e352:	4b48      	ldr	r3, [pc, #288]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e35a:	ee07 3a90 	vmov	s15, r3
 800e35e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e362:	ed97 6a03 	vldr	s12, [r7, #12]
 800e366:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e47c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e36a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e36e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e37a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e37e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e382:	e021      	b.n	800e3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	ee07 3a90 	vmov	s15, r3
 800e38a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e38e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e484 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e396:	4b37      	ldr	r3, [pc, #220]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e39a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e39e:	ee07 3a90 	vmov	s15, r3
 800e3a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e3a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e3aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800e47c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e3ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e3b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e3b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e3ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e3be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e3c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e3c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800e3c8:	4b2a      	ldr	r3, [pc, #168]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3cc:	0a5b      	lsrs	r3, r3, #9
 800e3ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3d2:	ee07 3a90 	vmov	s15, r3
 800e3d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e3de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e3e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800e3e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e3ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e3ee:	ee17 2a90 	vmov	r2, s15
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800e3f6:	4b1f      	ldr	r3, [pc, #124]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3fa:	0c1b      	lsrs	r3, r3, #16
 800e3fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e400:	ee07 3a90 	vmov	s15, r3
 800e404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e408:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e40c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e410:	edd7 6a07 	vldr	s13, [r7, #28]
 800e414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e41c:	ee17 2a90 	vmov	r2, s15
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800e424:	4b13      	ldr	r3, [pc, #76]	; (800e474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e428:	0e1b      	lsrs	r3, r3, #24
 800e42a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e42e:	ee07 3a90 	vmov	s15, r3
 800e432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e436:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e43a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e43e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e44a:	ee17 2a90 	vmov	r2, s15
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e452:	e008      	b.n	800e466 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2200      	movs	r2, #0
 800e458:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2200      	movs	r2, #0
 800e45e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2200      	movs	r2, #0
 800e464:	609a      	str	r2, [r3, #8]
}
 800e466:	bf00      	nop
 800e468:	3724      	adds	r7, #36	; 0x24
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr
 800e472:	bf00      	nop
 800e474:	58024400 	.word	0x58024400
 800e478:	03d09000 	.word	0x03d09000
 800e47c:	46000000 	.word	0x46000000
 800e480:	4c742400 	.word	0x4c742400
 800e484:	4a742400 	.word	0x4a742400
 800e488:	4bbebc20 	.word	0x4bbebc20

0800e48c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e48c:	b480      	push	{r7}
 800e48e:	b089      	sub	sp, #36	; 0x24
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e494:	4ba1      	ldr	r3, [pc, #644]	; (800e71c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e498:	f003 0303 	and.w	r3, r3, #3
 800e49c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800e49e:	4b9f      	ldr	r3, [pc, #636]	; (800e71c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e4a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4a2:	0d1b      	lsrs	r3, r3, #20
 800e4a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e4a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e4aa:	4b9c      	ldr	r3, [pc, #624]	; (800e71c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4ae:	0a1b      	lsrs	r3, r3, #8
 800e4b0:	f003 0301 	and.w	r3, r3, #1
 800e4b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800e4b6:	4b99      	ldr	r3, [pc, #612]	; (800e71c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e4b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4ba:	08db      	lsrs	r3, r3, #3
 800e4bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e4c0:	693a      	ldr	r2, [r7, #16]
 800e4c2:	fb02 f303 	mul.w	r3, r2, r3
 800e4c6:	ee07 3a90 	vmov	s15, r3
 800e4ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	f000 8111 	beq.w	800e6fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e4da:	69bb      	ldr	r3, [r7, #24]
 800e4dc:	2b02      	cmp	r3, #2
 800e4de:	f000 8083 	beq.w	800e5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e4e2:	69bb      	ldr	r3, [r7, #24]
 800e4e4:	2b02      	cmp	r3, #2
 800e4e6:	f200 80a1 	bhi.w	800e62c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e4ea:	69bb      	ldr	r3, [r7, #24]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d003      	beq.n	800e4f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e4f0:	69bb      	ldr	r3, [r7, #24]
 800e4f2:	2b01      	cmp	r3, #1
 800e4f4:	d056      	beq.n	800e5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e4f6:	e099      	b.n	800e62c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e4f8:	4b88      	ldr	r3, [pc, #544]	; (800e71c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	f003 0320 	and.w	r3, r3, #32
 800e500:	2b00      	cmp	r3, #0
 800e502:	d02d      	beq.n	800e560 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e504:	4b85      	ldr	r3, [pc, #532]	; (800e71c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	08db      	lsrs	r3, r3, #3
 800e50a:	f003 0303 	and.w	r3, r3, #3
 800e50e:	4a84      	ldr	r2, [pc, #528]	; (800e720 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e510:	fa22 f303 	lsr.w	r3, r2, r3
 800e514:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	ee07 3a90 	vmov	s15, r3
 800e51c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	ee07 3a90 	vmov	s15, r3
 800e526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e52a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e52e:	4b7b      	ldr	r3, [pc, #492]	; (800e71c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e536:	ee07 3a90 	vmov	s15, r3
 800e53a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e53e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e542:	eddf 5a78 	vldr	s11, [pc, #480]	; 800e724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e54a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e54e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e55a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e55e:	e087      	b.n	800e670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	ee07 3a90 	vmov	s15, r3
 800e566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e56a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800e728 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e56e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e572:	4b6a      	ldr	r3, [pc, #424]	; (800e71c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e57a:	ee07 3a90 	vmov	s15, r3
 800e57e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e582:	ed97 6a03 	vldr	s12, [r7, #12]
 800e586:	eddf 5a67 	vldr	s11, [pc, #412]	; 800e724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e58a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e58e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e59a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e59e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e5a2:	e065      	b.n	800e670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	ee07 3a90 	vmov	s15, r3
 800e5aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e72c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e5b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5b6:	4b59      	ldr	r3, [pc, #356]	; (800e71c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5be:	ee07 3a90 	vmov	s15, r3
 800e5c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e5ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800e724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e5ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e5d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e5d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e5da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e5de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e5e6:	e043      	b.n	800e670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	ee07 3a90 	vmov	s15, r3
 800e5ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800e730 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e5f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5fa:	4b48      	ldr	r3, [pc, #288]	; (800e71c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e602:	ee07 3a90 	vmov	s15, r3
 800e606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e60a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e60e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e61a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e61e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e622:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e62a:	e021      	b.n	800e670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	ee07 3a90 	vmov	s15, r3
 800e632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e636:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e72c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e63a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e63e:	4b37      	ldr	r3, [pc, #220]	; (800e71c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e646:	ee07 3a90 	vmov	s15, r3
 800e64a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e64e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e652:	eddf 5a34 	vldr	s11, [pc, #208]	; 800e724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e65a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e65e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e66a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e66e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800e670:	4b2a      	ldr	r3, [pc, #168]	; (800e71c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e674:	0a5b      	lsrs	r3, r3, #9
 800e676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e67a:	ee07 3a90 	vmov	s15, r3
 800e67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e682:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e686:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e68a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e68e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e696:	ee17 2a90 	vmov	r2, s15
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800e69e:	4b1f      	ldr	r3, [pc, #124]	; (800e71c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6a2:	0c1b      	lsrs	r3, r3, #16
 800e6a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6a8:	ee07 3a90 	vmov	s15, r3
 800e6ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e6b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e6b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800e6bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e6c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e6c4:	ee17 2a90 	vmov	r2, s15
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800e6cc:	4b13      	ldr	r3, [pc, #76]	; (800e71c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e6ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6d0:	0e1b      	lsrs	r3, r3, #24
 800e6d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6d6:	ee07 3a90 	vmov	s15, r3
 800e6da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e6e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e6e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800e6ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e6ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e6f2:	ee17 2a90 	vmov	r2, s15
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e6fa:	e008      	b.n	800e70e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2200      	movs	r2, #0
 800e700:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2200      	movs	r2, #0
 800e706:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2200      	movs	r2, #0
 800e70c:	609a      	str	r2, [r3, #8]
}
 800e70e:	bf00      	nop
 800e710:	3724      	adds	r7, #36	; 0x24
 800e712:	46bd      	mov	sp, r7
 800e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e718:	4770      	bx	lr
 800e71a:	bf00      	nop
 800e71c:	58024400 	.word	0x58024400
 800e720:	03d09000 	.word	0x03d09000
 800e724:	46000000 	.word	0x46000000
 800e728:	4c742400 	.word	0x4c742400
 800e72c:	4a742400 	.word	0x4a742400
 800e730:	4bbebc20 	.word	0x4bbebc20

0800e734 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800e734:	b480      	push	{r7}
 800e736:	b089      	sub	sp, #36	; 0x24
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e73c:	4ba0      	ldr	r3, [pc, #640]	; (800e9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e740:	f003 0303 	and.w	r3, r3, #3
 800e744:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800e746:	4b9e      	ldr	r3, [pc, #632]	; (800e9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e74a:	091b      	lsrs	r3, r3, #4
 800e74c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e750:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800e752:	4b9b      	ldr	r3, [pc, #620]	; (800e9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e756:	f003 0301 	and.w	r3, r3, #1
 800e75a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e75c:	4b98      	ldr	r3, [pc, #608]	; (800e9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e75e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e760:	08db      	lsrs	r3, r3, #3
 800e762:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e766:	693a      	ldr	r2, [r7, #16]
 800e768:	fb02 f303 	mul.w	r3, r2, r3
 800e76c:	ee07 3a90 	vmov	s15, r3
 800e770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e774:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	f000 8111 	beq.w	800e9a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800e780:	69bb      	ldr	r3, [r7, #24]
 800e782:	2b02      	cmp	r3, #2
 800e784:	f000 8083 	beq.w	800e88e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800e788:	69bb      	ldr	r3, [r7, #24]
 800e78a:	2b02      	cmp	r3, #2
 800e78c:	f200 80a1 	bhi.w	800e8d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800e790:	69bb      	ldr	r3, [r7, #24]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d003      	beq.n	800e79e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800e796:	69bb      	ldr	r3, [r7, #24]
 800e798:	2b01      	cmp	r3, #1
 800e79a:	d056      	beq.n	800e84a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800e79c:	e099      	b.n	800e8d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e79e:	4b88      	ldr	r3, [pc, #544]	; (800e9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	f003 0320 	and.w	r3, r3, #32
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d02d      	beq.n	800e806 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e7aa:	4b85      	ldr	r3, [pc, #532]	; (800e9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	08db      	lsrs	r3, r3, #3
 800e7b0:	f003 0303 	and.w	r3, r3, #3
 800e7b4:	4a83      	ldr	r2, [pc, #524]	; (800e9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800e7b6:	fa22 f303 	lsr.w	r3, r2, r3
 800e7ba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	ee07 3a90 	vmov	s15, r3
 800e7c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	ee07 3a90 	vmov	s15, r3
 800e7cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e7d4:	4b7a      	ldr	r3, [pc, #488]	; (800e9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e7d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7dc:	ee07 3a90 	vmov	s15, r3
 800e7e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e7e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800e7e8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800e9c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e7ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e7f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e7f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e7f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e800:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e804:	e087      	b.n	800e916 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e806:	697b      	ldr	r3, [r7, #20]
 800e808:	ee07 3a90 	vmov	s15, r3
 800e80c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e810:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800e9cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e814:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e818:	4b69      	ldr	r3, [pc, #420]	; (800e9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e81a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e81c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e820:	ee07 3a90 	vmov	s15, r3
 800e824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e828:	ed97 6a03 	vldr	s12, [r7, #12]
 800e82c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800e9c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e830:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e838:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e83c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e840:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e844:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e848:	e065      	b.n	800e916 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	ee07 3a90 	vmov	s15, r3
 800e850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e854:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800e9d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800e858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e85c:	4b58      	ldr	r3, [pc, #352]	; (800e9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e85e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e864:	ee07 3a90 	vmov	s15, r3
 800e868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e86c:	ed97 6a03 	vldr	s12, [r7, #12]
 800e870:	eddf 5a55 	vldr	s11, [pc, #340]	; 800e9c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e874:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e878:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e87c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e880:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e884:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e888:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e88c:	e043      	b.n	800e916 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	ee07 3a90 	vmov	s15, r3
 800e894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e898:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800e9d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800e89c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e8a0:	4b47      	ldr	r3, [pc, #284]	; (800e9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e8a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8a8:	ee07 3a90 	vmov	s15, r3
 800e8ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800e8b4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800e9c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e8b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e8c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e8d0:	e021      	b.n	800e916 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	ee07 3a90 	vmov	s15, r3
 800e8d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8dc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800e9cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e8e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e8e4:	4b36      	ldr	r3, [pc, #216]	; (800e9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e8e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8ec:	ee07 3a90 	vmov	s15, r3
 800e8f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800e8f8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800e9c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e8fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e900:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e904:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e908:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e90c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e910:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e914:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800e916:	4b2a      	ldr	r3, [pc, #168]	; (800e9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e91a:	0a5b      	lsrs	r3, r3, #9
 800e91c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e920:	ee07 3a90 	vmov	s15, r3
 800e924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e928:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e92c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e930:	edd7 6a07 	vldr	s13, [r7, #28]
 800e934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e93c:	ee17 2a90 	vmov	r2, s15
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800e944:	4b1e      	ldr	r3, [pc, #120]	; (800e9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e948:	0c1b      	lsrs	r3, r3, #16
 800e94a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e94e:	ee07 3a90 	vmov	s15, r3
 800e952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e95a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e95e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e96a:	ee17 2a90 	vmov	r2, s15
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800e972:	4b13      	ldr	r3, [pc, #76]	; (800e9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e976:	0e1b      	lsrs	r3, r3, #24
 800e978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e97c:	ee07 3a90 	vmov	s15, r3
 800e980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e984:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e988:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e98c:	edd7 6a07 	vldr	s13, [r7, #28]
 800e990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e998:	ee17 2a90 	vmov	r2, s15
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e9a0:	e008      	b.n	800e9b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	609a      	str	r2, [r3, #8]
}
 800e9b4:	bf00      	nop
 800e9b6:	3724      	adds	r7, #36	; 0x24
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9be:	4770      	bx	lr
 800e9c0:	58024400 	.word	0x58024400
 800e9c4:	03d09000 	.word	0x03d09000
 800e9c8:	46000000 	.word	0x46000000
 800e9cc:	4c742400 	.word	0x4c742400
 800e9d0:	4a742400 	.word	0x4a742400
 800e9d4:	4bbebc20 	.word	0x4bbebc20

0800e9d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b084      	sub	sp, #16
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e9e6:	4b53      	ldr	r3, [pc, #332]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800e9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9ea:	f003 0303 	and.w	r3, r3, #3
 800e9ee:	2b03      	cmp	r3, #3
 800e9f0:	d101      	bne.n	800e9f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	e099      	b.n	800eb2a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e9f6:	4b4f      	ldr	r3, [pc, #316]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	4a4e      	ldr	r2, [pc, #312]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800e9fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ea00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ea02:	f7f6 f9c7 	bl	8004d94 <HAL_GetTick>
 800ea06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ea08:	e008      	b.n	800ea1c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ea0a:	f7f6 f9c3 	bl	8004d94 <HAL_GetTick>
 800ea0e:	4602      	mov	r2, r0
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	1ad3      	subs	r3, r2, r3
 800ea14:	2b02      	cmp	r3, #2
 800ea16:	d901      	bls.n	800ea1c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ea18:	2303      	movs	r3, #3
 800ea1a:	e086      	b.n	800eb2a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ea1c:	4b45      	ldr	r3, [pc, #276]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d1f0      	bne.n	800ea0a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ea28:	4b42      	ldr	r3, [pc, #264]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800ea2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea2c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	031b      	lsls	r3, r3, #12
 800ea36:	493f      	ldr	r1, [pc, #252]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800ea38:	4313      	orrs	r3, r2
 800ea3a:	628b      	str	r3, [r1, #40]	; 0x28
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	685b      	ldr	r3, [r3, #4]
 800ea40:	3b01      	subs	r3, #1
 800ea42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	689b      	ldr	r3, [r3, #8]
 800ea4a:	3b01      	subs	r3, #1
 800ea4c:	025b      	lsls	r3, r3, #9
 800ea4e:	b29b      	uxth	r3, r3
 800ea50:	431a      	orrs	r2, r3
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	68db      	ldr	r3, [r3, #12]
 800ea56:	3b01      	subs	r3, #1
 800ea58:	041b      	lsls	r3, r3, #16
 800ea5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ea5e:	431a      	orrs	r2, r3
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	691b      	ldr	r3, [r3, #16]
 800ea64:	3b01      	subs	r3, #1
 800ea66:	061b      	lsls	r3, r3, #24
 800ea68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ea6c:	4931      	ldr	r1, [pc, #196]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800ea6e:	4313      	orrs	r3, r2
 800ea70:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ea72:	4b30      	ldr	r3, [pc, #192]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800ea74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	695b      	ldr	r3, [r3, #20]
 800ea7e:	492d      	ldr	r1, [pc, #180]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800ea80:	4313      	orrs	r3, r2
 800ea82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ea84:	4b2b      	ldr	r3, [pc, #172]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800ea86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea88:	f023 0220 	bic.w	r2, r3, #32
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	699b      	ldr	r3, [r3, #24]
 800ea90:	4928      	ldr	r1, [pc, #160]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800ea92:	4313      	orrs	r3, r2
 800ea94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ea96:	4b27      	ldr	r3, [pc, #156]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800ea98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea9a:	4a26      	ldr	r2, [pc, #152]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800ea9c:	f023 0310 	bic.w	r3, r3, #16
 800eaa0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800eaa2:	4b24      	ldr	r3, [pc, #144]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800eaa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eaa6:	4b24      	ldr	r3, [pc, #144]	; (800eb38 <RCCEx_PLL2_Config+0x160>)
 800eaa8:	4013      	ands	r3, r2
 800eaaa:	687a      	ldr	r2, [r7, #4]
 800eaac:	69d2      	ldr	r2, [r2, #28]
 800eaae:	00d2      	lsls	r2, r2, #3
 800eab0:	4920      	ldr	r1, [pc, #128]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800eab2:	4313      	orrs	r3, r2
 800eab4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800eab6:	4b1f      	ldr	r3, [pc, #124]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800eab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaba:	4a1e      	ldr	r2, [pc, #120]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800eabc:	f043 0310 	orr.w	r3, r3, #16
 800eac0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d106      	bne.n	800ead6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800eac8:	4b1a      	ldr	r3, [pc, #104]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800eaca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eacc:	4a19      	ldr	r2, [pc, #100]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800eace:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ead2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ead4:	e00f      	b.n	800eaf6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	2b01      	cmp	r3, #1
 800eada:	d106      	bne.n	800eaea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800eadc:	4b15      	ldr	r3, [pc, #84]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800eade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eae0:	4a14      	ldr	r2, [pc, #80]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800eae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eae6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800eae8:	e005      	b.n	800eaf6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800eaea:	4b12      	ldr	r3, [pc, #72]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800eaec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaee:	4a11      	ldr	r2, [pc, #68]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800eaf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800eaf4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800eaf6:	4b0f      	ldr	r3, [pc, #60]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	4a0e      	ldr	r2, [pc, #56]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800eafc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800eb00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eb02:	f7f6 f947 	bl	8004d94 <HAL_GetTick>
 800eb06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800eb08:	e008      	b.n	800eb1c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800eb0a:	f7f6 f943 	bl	8004d94 <HAL_GetTick>
 800eb0e:	4602      	mov	r2, r0
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	1ad3      	subs	r3, r2, r3
 800eb14:	2b02      	cmp	r3, #2
 800eb16:	d901      	bls.n	800eb1c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800eb18:	2303      	movs	r3, #3
 800eb1a:	e006      	b.n	800eb2a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800eb1c:	4b05      	ldr	r3, [pc, #20]	; (800eb34 <RCCEx_PLL2_Config+0x15c>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d0f0      	beq.n	800eb0a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800eb28:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3710      	adds	r7, #16
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
 800eb32:	bf00      	nop
 800eb34:	58024400 	.word	0x58024400
 800eb38:	ffff0007 	.word	0xffff0007

0800eb3c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800eb46:	2300      	movs	r3, #0
 800eb48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800eb4a:	4b53      	ldr	r3, [pc, #332]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800eb4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb4e:	f003 0303 	and.w	r3, r3, #3
 800eb52:	2b03      	cmp	r3, #3
 800eb54:	d101      	bne.n	800eb5a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800eb56:	2301      	movs	r3, #1
 800eb58:	e099      	b.n	800ec8e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800eb5a:	4b4f      	ldr	r3, [pc, #316]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	4a4e      	ldr	r2, [pc, #312]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800eb60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eb64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eb66:	f7f6 f915 	bl	8004d94 <HAL_GetTick>
 800eb6a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800eb6c:	e008      	b.n	800eb80 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800eb6e:	f7f6 f911 	bl	8004d94 <HAL_GetTick>
 800eb72:	4602      	mov	r2, r0
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	1ad3      	subs	r3, r2, r3
 800eb78:	2b02      	cmp	r3, #2
 800eb7a:	d901      	bls.n	800eb80 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800eb7c:	2303      	movs	r3, #3
 800eb7e:	e086      	b.n	800ec8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800eb80:	4b45      	ldr	r3, [pc, #276]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d1f0      	bne.n	800eb6e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800eb8c:	4b42      	ldr	r3, [pc, #264]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800eb8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb90:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	051b      	lsls	r3, r3, #20
 800eb9a:	493f      	ldr	r1, [pc, #252]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800eb9c:	4313      	orrs	r3, r2
 800eb9e:	628b      	str	r3, [r1, #40]	; 0x28
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	685b      	ldr	r3, [r3, #4]
 800eba4:	3b01      	subs	r3, #1
 800eba6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	689b      	ldr	r3, [r3, #8]
 800ebae:	3b01      	subs	r3, #1
 800ebb0:	025b      	lsls	r3, r3, #9
 800ebb2:	b29b      	uxth	r3, r3
 800ebb4:	431a      	orrs	r2, r3
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	68db      	ldr	r3, [r3, #12]
 800ebba:	3b01      	subs	r3, #1
 800ebbc:	041b      	lsls	r3, r3, #16
 800ebbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ebc2:	431a      	orrs	r2, r3
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	691b      	ldr	r3, [r3, #16]
 800ebc8:	3b01      	subs	r3, #1
 800ebca:	061b      	lsls	r3, r3, #24
 800ebcc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ebd0:	4931      	ldr	r1, [pc, #196]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800ebd2:	4313      	orrs	r3, r2
 800ebd4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ebd6:	4b30      	ldr	r3, [pc, #192]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800ebd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	695b      	ldr	r3, [r3, #20]
 800ebe2:	492d      	ldr	r1, [pc, #180]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800ebe4:	4313      	orrs	r3, r2
 800ebe6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ebe8:	4b2b      	ldr	r3, [pc, #172]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800ebea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	699b      	ldr	r3, [r3, #24]
 800ebf4:	4928      	ldr	r1, [pc, #160]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800ebf6:	4313      	orrs	r3, r2
 800ebf8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ebfa:	4b27      	ldr	r3, [pc, #156]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800ebfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebfe:	4a26      	ldr	r2, [pc, #152]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800ec00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ec04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ec06:	4b24      	ldr	r3, [pc, #144]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800ec08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec0a:	4b24      	ldr	r3, [pc, #144]	; (800ec9c <RCCEx_PLL3_Config+0x160>)
 800ec0c:	4013      	ands	r3, r2
 800ec0e:	687a      	ldr	r2, [r7, #4]
 800ec10:	69d2      	ldr	r2, [r2, #28]
 800ec12:	00d2      	lsls	r2, r2, #3
 800ec14:	4920      	ldr	r1, [pc, #128]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800ec16:	4313      	orrs	r3, r2
 800ec18:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ec1a:	4b1f      	ldr	r3, [pc, #124]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800ec1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec1e:	4a1e      	ldr	r2, [pc, #120]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800ec20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ec24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d106      	bne.n	800ec3a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ec2c:	4b1a      	ldr	r3, [pc, #104]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800ec2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec30:	4a19      	ldr	r2, [pc, #100]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800ec32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ec36:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ec38:	e00f      	b.n	800ec5a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d106      	bne.n	800ec4e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ec40:	4b15      	ldr	r3, [pc, #84]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800ec42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec44:	4a14      	ldr	r2, [pc, #80]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800ec46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ec4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ec4c:	e005      	b.n	800ec5a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ec4e:	4b12      	ldr	r3, [pc, #72]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800ec50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec52:	4a11      	ldr	r2, [pc, #68]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800ec54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ec58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ec5a:	4b0f      	ldr	r3, [pc, #60]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	4a0e      	ldr	r2, [pc, #56]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800ec60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ec64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ec66:	f7f6 f895 	bl	8004d94 <HAL_GetTick>
 800ec6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ec6c:	e008      	b.n	800ec80 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ec6e:	f7f6 f891 	bl	8004d94 <HAL_GetTick>
 800ec72:	4602      	mov	r2, r0
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	1ad3      	subs	r3, r2, r3
 800ec78:	2b02      	cmp	r3, #2
 800ec7a:	d901      	bls.n	800ec80 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ec7c:	2303      	movs	r3, #3
 800ec7e:	e006      	b.n	800ec8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ec80:	4b05      	ldr	r3, [pc, #20]	; (800ec98 <RCCEx_PLL3_Config+0x15c>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d0f0      	beq.n	800ec6e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ec8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3710      	adds	r7, #16
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop
 800ec98:	58024400 	.word	0x58024400
 800ec9c:	ffff0007 	.word	0xffff0007

0800eca0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800eca8:	2301      	movs	r3, #1
 800ecaa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d071      	beq.n	800ed96 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ecb8:	b2db      	uxtb	r3, r3
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d106      	bne.n	800eccc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f7f5 faf6 	bl	80042b8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2202      	movs	r2, #2
 800ecd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	68db      	ldr	r3, [r3, #12]
 800ecda:	f003 0310 	and.w	r3, r3, #16
 800ecde:	2b10      	cmp	r3, #16
 800ece0:	d050      	beq.n	800ed84 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	22ca      	movs	r2, #202	; 0xca
 800ece8:	625a      	str	r2, [r3, #36]	; 0x24
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	2253      	movs	r2, #83	; 0x53
 800ecf0:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f000 f87a 	bl	800edec <RTC_EnterInitMode>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800ecfc:	7bfb      	ldrb	r3, [r7, #15]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d124      	bne.n	800ed4c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	6899      	ldr	r1, [r3, #8]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681a      	ldr	r2, [r3, #0]
 800ed0c:	4b24      	ldr	r3, [pc, #144]	; (800eda0 <HAL_RTC_Init+0x100>)
 800ed0e:	400b      	ands	r3, r1
 800ed10:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	6899      	ldr	r1, [r3, #8]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	685a      	ldr	r2, [r3, #4]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	691b      	ldr	r3, [r3, #16]
 800ed20:	431a      	orrs	r2, r3
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	699b      	ldr	r3, [r3, #24]
 800ed26:	431a      	orrs	r2, r3
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	430a      	orrs	r2, r1
 800ed2e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	689b      	ldr	r3, [r3, #8]
 800ed34:	0419      	lsls	r1, r3, #16
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	68da      	ldr	r2, [r3, #12]
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	430a      	orrs	r2, r1
 800ed40:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f000 f886 	bl	800ee54 <RTC_ExitInitMode>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800ed4c:	7bfb      	ldrb	r3, [r7, #15]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d113      	bne.n	800ed7a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	f022 0203 	bic.w	r2, r2, #3
 800ed60:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	69da      	ldr	r2, [r3, #28]
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	695b      	ldr	r3, [r3, #20]
 800ed70:	431a      	orrs	r2, r3
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	430a      	orrs	r2, r1
 800ed78:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	22ff      	movs	r2, #255	; 0xff
 800ed80:	625a      	str	r2, [r3, #36]	; 0x24
 800ed82:	e001      	b.n	800ed88 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800ed84:	2300      	movs	r3, #0
 800ed86:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800ed88:	7bfb      	ldrb	r3, [r7, #15]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d103      	bne.n	800ed96 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2201      	movs	r2, #1
 800ed92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800ed96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3710      	adds	r7, #16
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	ff8fffbf 	.word	0xff8fffbf

0800eda4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4a0d      	ldr	r2, [pc, #52]	; (800ede8 <HAL_RTC_WaitForSynchro+0x44>)
 800edb2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800edb4:	f7f5 ffee 	bl	8004d94 <HAL_GetTick>
 800edb8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800edba:	e009      	b.n	800edd0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800edbc:	f7f5 ffea 	bl	8004d94 <HAL_GetTick>
 800edc0:	4602      	mov	r2, r0
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	1ad3      	subs	r3, r2, r3
 800edc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800edca:	d901      	bls.n	800edd0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800edcc:	2303      	movs	r3, #3
 800edce:	e007      	b.n	800ede0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	68db      	ldr	r3, [r3, #12]
 800edd6:	f003 0320 	and.w	r3, r3, #32
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d0ee      	beq.n	800edbc <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800edde:	2300      	movs	r3, #0
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3710      	adds	r7, #16
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	0003ff5f 	.word	0x0003ff5f

0800edec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b084      	sub	sp, #16
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800edf4:	2300      	movs	r3, #0
 800edf6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	68db      	ldr	r3, [r3, #12]
 800edfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d120      	bne.n	800ee48 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ee0e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ee10:	f7f5 ffc0 	bl	8004d94 <HAL_GetTick>
 800ee14:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ee16:	e00d      	b.n	800ee34 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ee18:	f7f5 ffbc 	bl	8004d94 <HAL_GetTick>
 800ee1c:	4602      	mov	r2, r0
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	1ad3      	subs	r3, r2, r3
 800ee22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ee26:	d905      	bls.n	800ee34 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800ee28:	2303      	movs	r3, #3
 800ee2a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2203      	movs	r2, #3
 800ee30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	68db      	ldr	r3, [r3, #12]
 800ee3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d102      	bne.n	800ee48 <RTC_EnterInitMode+0x5c>
 800ee42:	7bfb      	ldrb	r3, [r7, #15]
 800ee44:	2b03      	cmp	r3, #3
 800ee46:	d1e7      	bne.n	800ee18 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800ee48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3710      	adds	r7, #16
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
	...

0800ee54 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b084      	sub	sp, #16
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800ee60:	4b1a      	ldr	r3, [pc, #104]	; (800eecc <RTC_ExitInitMode+0x78>)
 800ee62:	68db      	ldr	r3, [r3, #12]
 800ee64:	4a19      	ldr	r2, [pc, #100]	; (800eecc <RTC_ExitInitMode+0x78>)
 800ee66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee6a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ee6c:	4b17      	ldr	r3, [pc, #92]	; (800eecc <RTC_ExitInitMode+0x78>)
 800ee6e:	689b      	ldr	r3, [r3, #8]
 800ee70:	f003 0320 	and.w	r3, r3, #32
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d10c      	bne.n	800ee92 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f7ff ff93 	bl	800eda4 <HAL_RTC_WaitForSynchro>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d01e      	beq.n	800eec2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2203      	movs	r2, #3
 800ee88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800ee8c:	2303      	movs	r3, #3
 800ee8e:	73fb      	strb	r3, [r7, #15]
 800ee90:	e017      	b.n	800eec2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ee92:	4b0e      	ldr	r3, [pc, #56]	; (800eecc <RTC_ExitInitMode+0x78>)
 800ee94:	689b      	ldr	r3, [r3, #8]
 800ee96:	4a0d      	ldr	r2, [pc, #52]	; (800eecc <RTC_ExitInitMode+0x78>)
 800ee98:	f023 0320 	bic.w	r3, r3, #32
 800ee9c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f7ff ff80 	bl	800eda4 <HAL_RTC_WaitForSynchro>
 800eea4:	4603      	mov	r3, r0
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d005      	beq.n	800eeb6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2203      	movs	r2, #3
 800eeae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800eeb2:	2303      	movs	r3, #3
 800eeb4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800eeb6:	4b05      	ldr	r3, [pc, #20]	; (800eecc <RTC_ExitInitMode+0x78>)
 800eeb8:	689b      	ldr	r3, [r3, #8]
 800eeba:	4a04      	ldr	r2, [pc, #16]	; (800eecc <RTC_ExitInitMode+0x78>)
 800eebc:	f043 0320 	orr.w	r3, r3, #32
 800eec0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800eec2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3710      	adds	r7, #16
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}
 800eecc:	58004000 	.word	0x58004000

0800eed0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b08a      	sub	sp, #40	; 0x28
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d101      	bne.n	800eee2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800eede:	2301      	movs	r3, #1
 800eee0:	e28e      	b.n	800f400 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800eee2:	f7f5 ff87 	bl	8004df4 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eeec:	2b01      	cmp	r3, #1
 800eeee:	d113      	bne.n	800ef18 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	4a96      	ldr	r2, [pc, #600]	; (800f150 <HAL_SAI_Init+0x280>)
 800eef6:	4293      	cmp	r3, r2
 800eef8:	d004      	beq.n	800ef04 <HAL_SAI_Init+0x34>
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	4a95      	ldr	r2, [pc, #596]	; (800f154 <HAL_SAI_Init+0x284>)
 800ef00:	4293      	cmp	r3, r2
 800ef02:	d107      	bne.n	800ef14 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800ef08:	2b01      	cmp	r3, #1
 800ef0a:	d103      	bne.n	800ef14 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d001      	beq.n	800ef18 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800ef14:	2301      	movs	r3, #1
 800ef16:	e273      	b.n	800f400 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	4a8c      	ldr	r2, [pc, #560]	; (800f150 <HAL_SAI_Init+0x280>)
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	d004      	beq.n	800ef2c <HAL_SAI_Init+0x5c>
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	4a8c      	ldr	r2, [pc, #560]	; (800f158 <HAL_SAI_Init+0x288>)
 800ef28:	4293      	cmp	r3, r2
 800ef2a:	d102      	bne.n	800ef32 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800ef2c:	4b8b      	ldr	r3, [pc, #556]	; (800f15c <HAL_SAI_Init+0x28c>)
 800ef2e:	61bb      	str	r3, [r7, #24]
 800ef30:	e028      	b.n	800ef84 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	4a8a      	ldr	r2, [pc, #552]	; (800f160 <HAL_SAI_Init+0x290>)
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d004      	beq.n	800ef46 <HAL_SAI_Init+0x76>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4a88      	ldr	r2, [pc, #544]	; (800f164 <HAL_SAI_Init+0x294>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d102      	bne.n	800ef4c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800ef46:	4b88      	ldr	r3, [pc, #544]	; (800f168 <HAL_SAI_Init+0x298>)
 800ef48:	61bb      	str	r3, [r7, #24]
 800ef4a:	e01b      	b.n	800ef84 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	4a86      	ldr	r2, [pc, #536]	; (800f16c <HAL_SAI_Init+0x29c>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d004      	beq.n	800ef60 <HAL_SAI_Init+0x90>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	4a85      	ldr	r2, [pc, #532]	; (800f170 <HAL_SAI_Init+0x2a0>)
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d102      	bne.n	800ef66 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800ef60:	4b84      	ldr	r3, [pc, #528]	; (800f174 <HAL_SAI_Init+0x2a4>)
 800ef62:	61bb      	str	r3, [r7, #24]
 800ef64:	e00e      	b.n	800ef84 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	4a7a      	ldr	r2, [pc, #488]	; (800f154 <HAL_SAI_Init+0x284>)
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	d004      	beq.n	800ef7a <HAL_SAI_Init+0xaa>
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	4a80      	ldr	r2, [pc, #512]	; (800f178 <HAL_SAI_Init+0x2a8>)
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d102      	bne.n	800ef80 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800ef7a:	4b80      	ldr	r3, [pc, #512]	; (800f17c <HAL_SAI_Init+0x2ac>)
 800ef7c:	61bb      	str	r3, [r7, #24]
 800ef7e:	e001      	b.n	800ef84 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800ef80:	2301      	movs	r3, #1
 800ef82:	e23d      	b.n	800f400 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800ef8a:	b2db      	uxtb	r3, r3
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d106      	bne.n	800ef9e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2200      	movs	r2, #0
 800ef94:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f7f5 fca1 	bl	80048e0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800ef9e:	6878      	ldr	r0, [r7, #4]
 800efa0:	f000 fa40 	bl	800f424 <SAI_Disable>
 800efa4:	4603      	mov	r3, r0
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d001      	beq.n	800efae <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800efaa:	2301      	movs	r3, #1
 800efac:	e228      	b.n	800f400 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2202      	movs	r2, #2
 800efb2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	68db      	ldr	r3, [r3, #12]
 800efba:	2b02      	cmp	r3, #2
 800efbc:	d00c      	beq.n	800efd8 <HAL_SAI_Init+0x108>
 800efbe:	2b02      	cmp	r3, #2
 800efc0:	d80d      	bhi.n	800efde <HAL_SAI_Init+0x10e>
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d002      	beq.n	800efcc <HAL_SAI_Init+0xfc>
 800efc6:	2b01      	cmp	r3, #1
 800efc8:	d003      	beq.n	800efd2 <HAL_SAI_Init+0x102>
 800efca:	e008      	b.n	800efde <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800efcc:	2300      	movs	r3, #0
 800efce:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800efd0:	e008      	b.n	800efe4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800efd2:	2310      	movs	r3, #16
 800efd4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800efd6:	e005      	b.n	800efe4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800efd8:	2320      	movs	r3, #32
 800efda:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800efdc:	e002      	b.n	800efe4 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800efde:	2300      	movs	r3, #0
 800efe0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800efe2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	689b      	ldr	r3, [r3, #8]
 800efe8:	2b05      	cmp	r3, #5
 800efea:	d832      	bhi.n	800f052 <HAL_SAI_Init+0x182>
 800efec:	a201      	add	r2, pc, #4	; (adr r2, 800eff4 <HAL_SAI_Init+0x124>)
 800efee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eff2:	bf00      	nop
 800eff4:	0800f00d 	.word	0x0800f00d
 800eff8:	0800f013 	.word	0x0800f013
 800effc:	0800f01b 	.word	0x0800f01b
 800f000:	0800f023 	.word	0x0800f023
 800f004:	0800f033 	.word	0x0800f033
 800f008:	0800f043 	.word	0x0800f043
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800f00c:	2300      	movs	r3, #0
 800f00e:	61fb      	str	r3, [r7, #28]
      break;
 800f010:	e022      	b.n	800f058 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800f012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f016:	61fb      	str	r3, [r7, #28]
      break;
 800f018:	e01e      	b.n	800f058 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f01a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f01e:	61fb      	str	r3, [r7, #28]
      break;
 800f020:	e01a      	b.n	800f058 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f022:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f026:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800f028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02a:	f043 0301 	orr.w	r3, r3, #1
 800f02e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f030:	e012      	b.n	800f058 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f032:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f036:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800f038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03a:	f043 0302 	orr.w	r3, r3, #2
 800f03e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f040:	e00a      	b.n	800f058 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f042:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f046:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800f048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f04a:	f043 0303 	orr.w	r3, r3, #3
 800f04e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f050:	e002      	b.n	800f058 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800f052:	2300      	movs	r3, #0
 800f054:	61fb      	str	r3, [r7, #28]
      break;
 800f056:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800f058:	69bb      	ldr	r3, [r7, #24]
 800f05a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f05c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6a1b      	ldr	r3, [r3, #32]
 800f062:	2b00      	cmp	r3, #0
 800f064:	f000 80c5 	beq.w	800f1f2 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800f068:	2300      	movs	r3, #0
 800f06a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	4a37      	ldr	r2, [pc, #220]	; (800f150 <HAL_SAI_Init+0x280>)
 800f072:	4293      	cmp	r3, r2
 800f074:	d004      	beq.n	800f080 <HAL_SAI_Init+0x1b0>
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	4a37      	ldr	r2, [pc, #220]	; (800f158 <HAL_SAI_Init+0x288>)
 800f07c:	4293      	cmp	r3, r2
 800f07e:	d106      	bne.n	800f08e <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800f080:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f084:	f04f 0100 	mov.w	r1, #0
 800f088:	f7fe fb16 	bl	800d6b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800f08c:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	4a33      	ldr	r2, [pc, #204]	; (800f160 <HAL_SAI_Init+0x290>)
 800f094:	4293      	cmp	r3, r2
 800f096:	d004      	beq.n	800f0a2 <HAL_SAI_Init+0x1d2>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	4a31      	ldr	r2, [pc, #196]	; (800f164 <HAL_SAI_Init+0x294>)
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	d106      	bne.n	800f0b0 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800f0a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f0a6:	f04f 0100 	mov.w	r1, #0
 800f0aa:	f7fe fb05 	bl	800d6b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800f0ae:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	4a2d      	ldr	r2, [pc, #180]	; (800f16c <HAL_SAI_Init+0x29c>)
 800f0b6:	4293      	cmp	r3, r2
 800f0b8:	d004      	beq.n	800f0c4 <HAL_SAI_Init+0x1f4>
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	4a2c      	ldr	r2, [pc, #176]	; (800f170 <HAL_SAI_Init+0x2a0>)
 800f0c0:	4293      	cmp	r3, r2
 800f0c2:	d106      	bne.n	800f0d2 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800f0c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f0c8:	f04f 0100 	mov.w	r1, #0
 800f0cc:	f7fe faf4 	bl	800d6b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800f0d0:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	4a1f      	ldr	r2, [pc, #124]	; (800f154 <HAL_SAI_Init+0x284>)
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	d106      	bne.n	800f0ea <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800f0dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f0e0:	f04f 0100 	mov.w	r1, #0
 800f0e4:	f7fe fae8 	bl	800d6b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800f0e8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	4a22      	ldr	r2, [pc, #136]	; (800f178 <HAL_SAI_Init+0x2a8>)
 800f0f0:	4293      	cmp	r3, r2
 800f0f2:	d106      	bne.n	800f102 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800f0f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f0f8:	f04f 0100 	mov.w	r1, #0
 800f0fc:	f7fe fadc 	bl	800d6b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800f100:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	699b      	ldr	r3, [r3, #24]
 800f106:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f10a:	d139      	bne.n	800f180 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f110:	2b04      	cmp	r3, #4
 800f112:	d102      	bne.n	800f11a <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800f114:	2340      	movs	r3, #64	; 0x40
 800f116:	60fb      	str	r3, [r7, #12]
 800f118:	e00a      	b.n	800f130 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f11e:	2b08      	cmp	r3, #8
 800f120:	d103      	bne.n	800f12a <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800f122:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f126:	60fb      	str	r3, [r7, #12]
 800f128:	e002      	b.n	800f130 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f12e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800f130:	697a      	ldr	r2, [r7, #20]
 800f132:	4613      	mov	r3, r2
 800f134:	009b      	lsls	r3, r3, #2
 800f136:	4413      	add	r3, r2
 800f138:	005b      	lsls	r3, r3, #1
 800f13a:	4619      	mov	r1, r3
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6a1b      	ldr	r3, [r3, #32]
 800f140:	68fa      	ldr	r2, [r7, #12]
 800f142:	fb02 f303 	mul.w	r3, r2, r3
 800f146:	fbb1 f3f3 	udiv	r3, r1, r3
 800f14a:	613b      	str	r3, [r7, #16]
 800f14c:	e030      	b.n	800f1b0 <HAL_SAI_Init+0x2e0>
 800f14e:	bf00      	nop
 800f150:	40015804 	.word	0x40015804
 800f154:	58005404 	.word	0x58005404
 800f158:	40015824 	.word	0x40015824
 800f15c:	40015800 	.word	0x40015800
 800f160:	40015c04 	.word	0x40015c04
 800f164:	40015c24 	.word	0x40015c24
 800f168:	40015c00 	.word	0x40015c00
 800f16c:	40016004 	.word	0x40016004
 800f170:	40016024 	.word	0x40016024
 800f174:	40016000 	.word	0x40016000
 800f178:	58005424 	.word	0x58005424
 800f17c:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f184:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f188:	d101      	bne.n	800f18e <HAL_SAI_Init+0x2be>
 800f18a:	2302      	movs	r3, #2
 800f18c:	e000      	b.n	800f190 <HAL_SAI_Init+0x2c0>
 800f18e:	2301      	movs	r3, #1
 800f190:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800f192:	697a      	ldr	r2, [r7, #20]
 800f194:	4613      	mov	r3, r2
 800f196:	009b      	lsls	r3, r3, #2
 800f198:	4413      	add	r3, r2
 800f19a:	005b      	lsls	r3, r3, #1
 800f19c:	4619      	mov	r1, r3
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6a1b      	ldr	r3, [r3, #32]
 800f1a2:	68ba      	ldr	r2, [r7, #8]
 800f1a4:	fb02 f303 	mul.w	r3, r2, r3
 800f1a8:	021b      	lsls	r3, r3, #8
 800f1aa:	fbb1 f3f3 	udiv	r3, r1, r3
 800f1ae:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	4a95      	ldr	r2, [pc, #596]	; (800f408 <HAL_SAI_Init+0x538>)
 800f1b4:	fba2 2303 	umull	r2, r3, r2, r3
 800f1b8:	08da      	lsrs	r2, r3, #3
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800f1be:	6939      	ldr	r1, [r7, #16]
 800f1c0:	4b91      	ldr	r3, [pc, #580]	; (800f408 <HAL_SAI_Init+0x538>)
 800f1c2:	fba3 2301 	umull	r2, r3, r3, r1
 800f1c6:	08da      	lsrs	r2, r3, #3
 800f1c8:	4613      	mov	r3, r2
 800f1ca:	009b      	lsls	r3, r3, #2
 800f1cc:	4413      	add	r3, r2
 800f1ce:	005b      	lsls	r3, r3, #1
 800f1d0:	1aca      	subs	r2, r1, r3
 800f1d2:	2a08      	cmp	r2, #8
 800f1d4:	d904      	bls.n	800f1e0 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1da:	1c5a      	adds	r2, r3, #1
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1e4:	2b04      	cmp	r3, #4
 800f1e6:	d104      	bne.n	800f1f2 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ec:	085a      	lsrs	r2, r3, #1
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	685b      	ldr	r3, [r3, #4]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d003      	beq.n	800f202 <HAL_SAI_Init+0x332>
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	685b      	ldr	r3, [r3, #4]
 800f1fe:	2b02      	cmp	r3, #2
 800f200:	d109      	bne.n	800f216 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f206:	2b01      	cmp	r3, #1
 800f208:	d101      	bne.n	800f20e <HAL_SAI_Init+0x33e>
 800f20a:	2300      	movs	r3, #0
 800f20c:	e001      	b.n	800f212 <HAL_SAI_Init+0x342>
 800f20e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f212:	623b      	str	r3, [r7, #32]
 800f214:	e008      	b.n	800f228 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f21a:	2b01      	cmp	r3, #1
 800f21c:	d102      	bne.n	800f224 <HAL_SAI_Init+0x354>
 800f21e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f222:	e000      	b.n	800f226 <HAL_SAI_Init+0x356>
 800f224:	2300      	movs	r3, #0
 800f226:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800f228:	f7f5 fde4 	bl	8004df4 <HAL_GetREVID>
 800f22c:	4603      	mov	r3, r0
 800f22e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f232:	d331      	bcc.n	800f298 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	6819      	ldr	r1, [r3, #0]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681a      	ldr	r2, [r3, #0]
 800f23e:	4b73      	ldr	r3, [pc, #460]	; (800f40c <HAL_SAI_Init+0x53c>)
 800f240:	400b      	ands	r3, r1
 800f242:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	6819      	ldr	r1, [r3, #0]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	685a      	ldr	r2, [r3, #4]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f252:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f258:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f25e:	431a      	orrs	r2, r3
 800f260:	6a3b      	ldr	r3, [r7, #32]
 800f262:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800f264:	69fb      	ldr	r3, [r7, #28]
 800f266:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800f26c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	695b      	ldr	r3, [r3, #20]
 800f272:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f278:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f27e:	051b      	lsls	r3, r3, #20
 800f280:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f286:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	691b      	ldr	r3, [r3, #16]
 800f28c:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	430a      	orrs	r2, r1
 800f294:	601a      	str	r2, [r3, #0]
 800f296:	e02d      	b.n	800f2f4 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	6819      	ldr	r1, [r3, #0]
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681a      	ldr	r2, [r3, #0]
 800f2a2:	4b5b      	ldr	r3, [pc, #364]	; (800f410 <HAL_SAI_Init+0x540>)
 800f2a4:	400b      	ands	r3, r1
 800f2a6:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	6819      	ldr	r1, [r3, #0]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	685a      	ldr	r2, [r3, #4]
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2b6:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f2bc:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2c2:	431a      	orrs	r2, r3
 800f2c4:	6a3b      	ldr	r3, [r7, #32]
 800f2c6:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800f2c8:	69fb      	ldr	r3, [r7, #28]
 800f2ca:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800f2d0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	695b      	ldr	r3, [r3, #20]
 800f2d6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f2dc:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2e2:	051b      	lsls	r3, r3, #20
 800f2e4:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f2ea:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	430a      	orrs	r2, r1
 800f2f2:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	6859      	ldr	r1, [r3, #4]
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681a      	ldr	r2, [r3, #0]
 800f2fe:	4b45      	ldr	r3, [pc, #276]	; (800f414 <HAL_SAI_Init+0x544>)
 800f300:	400b      	ands	r3, r1
 800f302:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	6859      	ldr	r1, [r3, #4]
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	69da      	ldr	r2, [r3, #28]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f312:	431a      	orrs	r2, r3
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f318:	431a      	orrs	r2, r3
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	430a      	orrs	r2, r1
 800f320:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	6899      	ldr	r1, [r3, #8]
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681a      	ldr	r2, [r3, #0]
 800f32c:	4b3a      	ldr	r3, [pc, #232]	; (800f418 <HAL_SAI_Init+0x548>)
 800f32e:	400b      	ands	r3, r1
 800f330:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	6899      	ldr	r1, [r3, #8]
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f33c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f342:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800f348:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800f34e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f354:	3b01      	subs	r3, #1
 800f356:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800f358:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	430a      	orrs	r2, r1
 800f360:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	68d9      	ldr	r1, [r3, #12]
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681a      	ldr	r2, [r3, #0]
 800f36c:	f24f 0320 	movw	r3, #61472	; 0xf020
 800f370:	400b      	ands	r3, r1
 800f372:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	68d9      	ldr	r1, [r3, #12]
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f382:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f388:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f38a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f390:	3b01      	subs	r3, #1
 800f392:	021b      	lsls	r3, r3, #8
 800f394:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	430a      	orrs	r2, r1
 800f39c:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	4a1e      	ldr	r2, [pc, #120]	; (800f41c <HAL_SAI_Init+0x54c>)
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	d004      	beq.n	800f3b2 <HAL_SAI_Init+0x4e2>
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	4a1c      	ldr	r2, [pc, #112]	; (800f420 <HAL_SAI_Init+0x550>)
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	d119      	bne.n	800f3e6 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800f3b2:	69bb      	ldr	r3, [r7, #24]
 800f3b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3b6:	f023 0201 	bic.w	r2, r3, #1
 800f3ba:	69bb      	ldr	r3, [r7, #24]
 800f3bc:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f3c4:	2b01      	cmp	r3, #1
 800f3c6:	d10e      	bne.n	800f3e6 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3d0:	3b01      	subs	r3, #1
 800f3d2:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800f3d4:	431a      	orrs	r2, r3
 800f3d6:	69bb      	ldr	r3, [r7, #24]
 800f3d8:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800f3da:	69bb      	ldr	r3, [r7, #24]
 800f3dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3de:	f043 0201 	orr.w	r2, r3, #1
 800f3e2:	69bb      	ldr	r3, [r7, #24]
 800f3e4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2201      	movs	r2, #1
 800f3f2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800f3fe:	2300      	movs	r3, #0
}
 800f400:	4618      	mov	r0, r3
 800f402:	3728      	adds	r7, #40	; 0x28
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	cccccccd 	.word	0xcccccccd
 800f40c:	f005c010 	.word	0xf005c010
 800f410:	f805c010 	.word	0xf805c010
 800f414:	ffff1ff0 	.word	0xffff1ff0
 800f418:	fff88000 	.word	0xfff88000
 800f41c:	40015804 	.word	0x40015804
 800f420:	58005404 	.word	0x58005404

0800f424 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800f424:	b480      	push	{r7}
 800f426:	b085      	sub	sp, #20
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800f42c:	4b18      	ldr	r3, [pc, #96]	; (800f490 <SAI_Disable+0x6c>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	4a18      	ldr	r2, [pc, #96]	; (800f494 <SAI_Disable+0x70>)
 800f432:	fba2 2303 	umull	r2, r3, r2, r3
 800f436:	0b1b      	lsrs	r3, r3, #12
 800f438:	009b      	lsls	r3, r3, #2
 800f43a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800f43c:	2300      	movs	r3, #0
 800f43e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	681a      	ldr	r2, [r3, #0]
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800f44e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d10a      	bne.n	800f46c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f45c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800f466:	2303      	movs	r3, #3
 800f468:	72fb      	strb	r3, [r7, #11]
      break;
 800f46a:	e009      	b.n	800f480 <SAI_Disable+0x5c>
    }
    count--;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	3b01      	subs	r3, #1
 800f470:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d1e7      	bne.n	800f450 <SAI_Disable+0x2c>

  return status;
 800f480:	7afb      	ldrb	r3, [r7, #11]
}
 800f482:	4618      	mov	r0, r3
 800f484:	3714      	adds	r7, #20
 800f486:	46bd      	mov	sp, r7
 800f488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48c:	4770      	bx	lr
 800f48e:	bf00      	nop
 800f490:	24000474 	.word	0x24000474
 800f494:	95cbec1b 	.word	0x95cbec1b

0800f498 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b082      	sub	sp, #8
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d101      	bne.n	800f4ac <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	e02b      	b.n	800f504 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f4b2:	b2db      	uxtb	r3, r3
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d106      	bne.n	800f4c6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f7f5 fa03 	bl	80048cc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	2202      	movs	r2, #2
 800f4ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681a      	ldr	r2, [r3, #0]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	3304      	adds	r3, #4
 800f4d6:	4619      	mov	r1, r3
 800f4d8:	4610      	mov	r0, r2
 800f4da:	f001 ff37 	bl	801134c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	6818      	ldr	r0, [r3, #0]
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	685b      	ldr	r3, [r3, #4]
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	6839      	ldr	r1, [r7, #0]
 800f4ea:	f001 ff8b 	bl	8011404 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800f4ee:	4b07      	ldr	r3, [pc, #28]	; (800f50c <HAL_SDRAM_Init+0x74>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	4a06      	ldr	r2, [pc, #24]	; (800f50c <HAL_SDRAM_Init+0x74>)
 800f4f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f4f8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f502:	2300      	movs	r3, #0
}
 800f504:	4618      	mov	r0, r3
 800f506:	3708      	adds	r7, #8
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}
 800f50c:	52004000 	.word	0x52004000

0800f510 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b084      	sub	sp, #16
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d101      	bne.n	800f522 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f51e:	2301      	movs	r3, #1
 800f520:	e10f      	b.n	800f742 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2200      	movs	r2, #0
 800f526:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	4a87      	ldr	r2, [pc, #540]	; (800f74c <HAL_SPI_Init+0x23c>)
 800f52e:	4293      	cmp	r3, r2
 800f530:	d00f      	beq.n	800f552 <HAL_SPI_Init+0x42>
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	4a86      	ldr	r2, [pc, #536]	; (800f750 <HAL_SPI_Init+0x240>)
 800f538:	4293      	cmp	r3, r2
 800f53a:	d00a      	beq.n	800f552 <HAL_SPI_Init+0x42>
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	4a84      	ldr	r2, [pc, #528]	; (800f754 <HAL_SPI_Init+0x244>)
 800f542:	4293      	cmp	r3, r2
 800f544:	d005      	beq.n	800f552 <HAL_SPI_Init+0x42>
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	68db      	ldr	r3, [r3, #12]
 800f54a:	2b0f      	cmp	r3, #15
 800f54c:	d901      	bls.n	800f552 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800f54e:	2301      	movs	r3, #1
 800f550:	e0f7      	b.n	800f742 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f000 fd7a 	bl	801004c <SPI_GetPacketSize>
 800f558:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	4a7b      	ldr	r2, [pc, #492]	; (800f74c <HAL_SPI_Init+0x23c>)
 800f560:	4293      	cmp	r3, r2
 800f562:	d00c      	beq.n	800f57e <HAL_SPI_Init+0x6e>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	4a79      	ldr	r2, [pc, #484]	; (800f750 <HAL_SPI_Init+0x240>)
 800f56a:	4293      	cmp	r3, r2
 800f56c:	d007      	beq.n	800f57e <HAL_SPI_Init+0x6e>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	4a78      	ldr	r2, [pc, #480]	; (800f754 <HAL_SPI_Init+0x244>)
 800f574:	4293      	cmp	r3, r2
 800f576:	d002      	beq.n	800f57e <HAL_SPI_Init+0x6e>
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	2b08      	cmp	r3, #8
 800f57c:	d811      	bhi.n	800f5a2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f582:	4a72      	ldr	r2, [pc, #456]	; (800f74c <HAL_SPI_Init+0x23c>)
 800f584:	4293      	cmp	r3, r2
 800f586:	d009      	beq.n	800f59c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	4a70      	ldr	r2, [pc, #448]	; (800f750 <HAL_SPI_Init+0x240>)
 800f58e:	4293      	cmp	r3, r2
 800f590:	d004      	beq.n	800f59c <HAL_SPI_Init+0x8c>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	4a6f      	ldr	r2, [pc, #444]	; (800f754 <HAL_SPI_Init+0x244>)
 800f598:	4293      	cmp	r3, r2
 800f59a:	d104      	bne.n	800f5a6 <HAL_SPI_Init+0x96>
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	2b10      	cmp	r3, #16
 800f5a0:	d901      	bls.n	800f5a6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	e0cd      	b.n	800f742 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f5ac:	b2db      	uxtb	r3, r3
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d106      	bne.n	800f5c0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f5ba:	6878      	ldr	r0, [r7, #4]
 800f5bc:	f7f4 feae 	bl	800431c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2202      	movs	r2, #2
 800f5c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	681a      	ldr	r2, [r3, #0]
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	f022 0201 	bic.w	r2, r2, #1
 800f5d6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	689b      	ldr	r3, [r3, #8]
 800f5de:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800f5e2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	699b      	ldr	r3, [r3, #24]
 800f5e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f5ec:	d119      	bne.n	800f622 <HAL_SPI_Init+0x112>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	685b      	ldr	r3, [r3, #4]
 800f5f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f5f6:	d103      	bne.n	800f600 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d008      	beq.n	800f612 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f604:	2b00      	cmp	r3, #0
 800f606:	d10c      	bne.n	800f622 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f60c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f610:	d107      	bne.n	800f622 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	681a      	ldr	r2, [r3, #0]
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f620:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	685b      	ldr	r3, [r3, #4]
 800f626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d00f      	beq.n	800f64e <HAL_SPI_Init+0x13e>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	68db      	ldr	r3, [r3, #12]
 800f632:	2b06      	cmp	r3, #6
 800f634:	d90b      	bls.n	800f64e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	430a      	orrs	r2, r1
 800f64a:	601a      	str	r2, [r3, #0]
 800f64c:	e007      	b.n	800f65e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	681a      	ldr	r2, [r3, #0]
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f65c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	69da      	ldr	r2, [r3, #28]
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f666:	431a      	orrs	r2, r3
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	431a      	orrs	r2, r3
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f670:	ea42 0103 	orr.w	r1, r2, r3
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	68da      	ldr	r2, [r3, #12]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	430a      	orrs	r2, r1
 800f67e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f688:	431a      	orrs	r2, r3
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f68e:	431a      	orrs	r2, r3
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	699b      	ldr	r3, [r3, #24]
 800f694:	431a      	orrs	r2, r3
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	691b      	ldr	r3, [r3, #16]
 800f69a:	431a      	orrs	r2, r3
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	695b      	ldr	r3, [r3, #20]
 800f6a0:	431a      	orrs	r2, r3
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6a1b      	ldr	r3, [r3, #32]
 800f6a6:	431a      	orrs	r2, r3
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	685b      	ldr	r3, [r3, #4]
 800f6ac:	431a      	orrs	r2, r3
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f6b2:	431a      	orrs	r2, r3
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	689b      	ldr	r3, [r3, #8]
 800f6b8:	431a      	orrs	r2, r3
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f6be:	ea42 0103 	orr.w	r1, r2, r3
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	430a      	orrs	r2, r1
 800f6cc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	685b      	ldr	r3, [r3, #4]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d113      	bne.n	800f6fe <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	689b      	ldr	r3, [r3, #8]
 800f6dc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f6e8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	689b      	ldr	r3, [r3, #8]
 800f6f0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f6fc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	f022 0201 	bic.w	r2, r2, #1
 800f70c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f716:	2b00      	cmp	r3, #0
 800f718:	d00a      	beq.n	800f730 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	68db      	ldr	r3, [r3, #12]
 800f720:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	430a      	orrs	r2, r1
 800f72e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2200      	movs	r2, #0
 800f734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2201      	movs	r2, #1
 800f73c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800f740:	2300      	movs	r3, #0
}
 800f742:	4618      	mov	r0, r3
 800f744:	3710      	adds	r7, #16
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}
 800f74a:	bf00      	nop
 800f74c:	40013000 	.word	0x40013000
 800f750:	40003800 	.word	0x40003800
 800f754:	40003c00 	.word	0x40003c00

0800f758 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b086      	sub	sp, #24
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	60f8      	str	r0, [r7, #12]
 800f760:	60b9      	str	r1, [r7, #8]
 800f762:	4613      	mov	r3, r2
 800f764:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f766:	2300      	movs	r3, #0
 800f768:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f770:	2b01      	cmp	r3, #1
 800f772:	d101      	bne.n	800f778 <HAL_SPI_Transmit_DMA+0x20>
 800f774:	2302      	movs	r3, #2
 800f776:	e137      	b.n	800f9e8 <HAL_SPI_Transmit_DMA+0x290>
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	2201      	movs	r2, #1
 800f77c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f786:	b2db      	uxtb	r3, r3
 800f788:	2b01      	cmp	r3, #1
 800f78a:	d007      	beq.n	800f79c <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 800f78c:	2302      	movs	r3, #2
 800f78e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	2200      	movs	r2, #0
 800f794:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f798:	7dfb      	ldrb	r3, [r7, #23]
 800f79a:	e125      	b.n	800f9e8 <HAL_SPI_Transmit_DMA+0x290>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d002      	beq.n	800f7a8 <HAL_SPI_Transmit_DMA+0x50>
 800f7a2:	88fb      	ldrh	r3, [r7, #6]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d107      	bne.n	800f7b8 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f7b4:	7dfb      	ldrb	r3, [r7, #23]
 800f7b6:	e117      	b.n	800f9e8 <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	2203      	movs	r2, #3
 800f7bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	68ba      	ldr	r2, [r7, #8]
 800f7cc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	88fa      	ldrh	r2, [r7, #6]
 800f7d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	88fa      	ldrh	r2, [r7, #6]
 800f7da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	689b      	ldr	r3, [r3, #8]
 800f804:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f808:	d108      	bne.n	800f81c <HAL_SPI_Transmit_DMA+0xc4>
  {
    SPI_1LINE_TX(hspi);
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	681a      	ldr	r2, [r3, #0]
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f818:	601a      	str	r2, [r3, #0]
 800f81a:	e009      	b.n	800f830 <HAL_SPI_Transmit_DMA+0xd8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	68db      	ldr	r3, [r3, #12]
 800f822:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f82e:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	68db      	ldr	r3, [r3, #12]
 800f834:	2b0f      	cmp	r3, #15
 800f836:	d905      	bls.n	800f844 <HAL_SPI_Transmit_DMA+0xec>
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f83c:	699b      	ldr	r3, [r3, #24]
 800f83e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f842:	d10f      	bne.n	800f864 <HAL_SPI_Transmit_DMA+0x10c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800f848:	2b07      	cmp	r3, #7
 800f84a:	d913      	bls.n	800f874 <HAL_SPI_Transmit_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f850:	699b      	ldr	r3, [r3, #24]
 800f852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f856:	d00d      	beq.n	800f874 <HAL_SPI_Transmit_DMA+0x11c>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f85c:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800f85e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f862:	d007      	beq.n	800f874 <HAL_SPI_Transmit_DMA+0x11c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800f864:	2301      	movs	r3, #1
 800f866:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	2200      	movs	r2, #0
 800f86c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f870:	7dfb      	ldrb	r3, [r7, #23]
 800f872:	e0b9      	b.n	800f9e8 <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	68db      	ldr	r3, [r3, #12]
 800f878:	2b07      	cmp	r3, #7
 800f87a:	d820      	bhi.n	800f8be <HAL_SPI_Transmit_DMA+0x166>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f880:	699b      	ldr	r3, [r3, #24]
 800f882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f886:	d109      	bne.n	800f89c <HAL_SPI_Transmit_DMA+0x144>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f88e:	b29b      	uxth	r3, r3
 800f890:	3301      	adds	r3, #1
 800f892:	105b      	asrs	r3, r3, #1
 800f894:	b29a      	uxth	r2, r3
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8a0:	699b      	ldr	r3, [r3, #24]
 800f8a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f8a6:	d11e      	bne.n	800f8e6 <HAL_SPI_Transmit_DMA+0x18e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f8ae:	b29b      	uxth	r3, r3
 800f8b0:	3303      	adds	r3, #3
 800f8b2:	109b      	asrs	r3, r3, #2
 800f8b4:	b29a      	uxth	r2, r3
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f8bc:	e013      	b.n	800f8e6 <HAL_SPI_Transmit_DMA+0x18e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	68db      	ldr	r3, [r3, #12]
 800f8c2:	2b0f      	cmp	r3, #15
 800f8c4:	d80f      	bhi.n	800f8e6 <HAL_SPI_Transmit_DMA+0x18e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8ca:	699b      	ldr	r3, [r3, #24]
 800f8cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f8d0:	d109      	bne.n	800f8e6 <HAL_SPI_Transmit_DMA+0x18e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	3301      	adds	r3, #1
 800f8dc:	105b      	asrs	r3, r3, #1
 800f8de:	b29a      	uxth	r2, r3
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8ea:	4a41      	ldr	r2, [pc, #260]	; (800f9f0 <HAL_SPI_Transmit_DMA+0x298>)
 800f8ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8f2:	4a40      	ldr	r2, [pc, #256]	; (800f9f4 <HAL_SPI_Transmit_DMA+0x29c>)
 800f8f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8fa:	4a3f      	ldr	r2, [pc, #252]	; (800f9f8 <HAL_SPI_Transmit_DMA+0x2a0>)
 800f8fc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f902:	2200      	movs	r2, #0
 800f904:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	689a      	ldr	r2, [r3, #8]
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f914:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f91e:	4619      	mov	r1, r3
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	3320      	adds	r3, #32
 800f926:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f92e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800f930:	f7f6 ff90 	bl	8006854 <HAL_DMA_Start_IT>
 800f934:	4603      	mov	r3, r0
 800f936:	2b00      	cmp	r3, #0
 800f938:	d013      	beq.n	800f962 <HAL_SPI_Transmit_DMA+0x20a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f940:	f043 0210 	orr.w	r2, r3, #16
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	2200      	movs	r2, #0
 800f94e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2201      	movs	r2, #1
 800f956:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800f95a:	2301      	movs	r3, #1
 800f95c:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800f95e:	7dfb      	ldrb	r3, [r7, #23]
 800f960:	e042      	b.n	800f9e8 <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f966:	69db      	ldr	r3, [r3, #28]
 800f968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f96c:	d108      	bne.n	800f980 <HAL_SPI_Transmit_DMA+0x228>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	6859      	ldr	r1, [r3, #4]
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	681a      	ldr	r2, [r3, #0]
 800f978:	4b20      	ldr	r3, [pc, #128]	; (800f9fc <HAL_SPI_Transmit_DMA+0x2a4>)
 800f97a:	400b      	ands	r3, r1
 800f97c:	6053      	str	r3, [r2, #4]
 800f97e:	e009      	b.n	800f994 <HAL_SPI_Transmit_DMA+0x23c>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	685a      	ldr	r2, [r3, #4]
 800f986:	4b1d      	ldr	r3, [pc, #116]	; (800f9fc <HAL_SPI_Transmit_DMA+0x2a4>)
 800f988:	4013      	ands	r3, r2
 800f98a:	88f9      	ldrh	r1, [r7, #6]
 800f98c:	68fa      	ldr	r2, [r7, #12]
 800f98e:	6812      	ldr	r2, [r2, #0]
 800f990:	430b      	orrs	r3, r1
 800f992:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	689a      	ldr	r2, [r3, #8]
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f9a2:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	691a      	ldr	r2, [r3, #16]
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 800f9b2:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	681a      	ldr	r2, [r3, #0]
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	f042 0201 	orr.w	r2, r2, #1
 800f9c2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	685b      	ldr	r3, [r3, #4]
 800f9c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f9cc:	d107      	bne.n	800f9de <HAL_SPI_Transmit_DMA+0x286>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	681a      	ldr	r2, [r3, #0]
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f9dc:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800f9e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3718      	adds	r7, #24
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}
 800f9f0:	0800fe77 	.word	0x0800fe77
 800f9f4:	0800fe31 	.word	0x0800fe31
 800f9f8:	0800fe93 	.word	0x0800fe93
 800f9fc:	ffff0000 	.word	0xffff0000

0800fa00 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b08a      	sub	sp, #40	; 0x28
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	691b      	ldr	r3, [r3, #16]
 800fa0e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	695b      	ldr	r3, [r3, #20]
 800fa16:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800fa18:	6a3a      	ldr	r2, [r7, #32]
 800fa1a:	69fb      	ldr	r3, [r7, #28]
 800fa1c:	4013      	ands	r3, r2
 800fa1e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	689b      	ldr	r3, [r3, #8]
 800fa26:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fa32:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	3330      	adds	r3, #48	; 0x30
 800fa3a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800fa3c:	69fb      	ldr	r3, [r7, #28]
 800fa3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d010      	beq.n	800fa68 <HAL_SPI_IRQHandler+0x68>
 800fa46:	6a3b      	ldr	r3, [r7, #32]
 800fa48:	f003 0308 	and.w	r3, r3, #8
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d00b      	beq.n	800fa68 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	699a      	ldr	r2, [r3, #24]
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fa5e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f000 f9cd 	bl	800fe00 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800fa66:	e192      	b.n	800fd8e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800fa68:	69bb      	ldr	r3, [r7, #24]
 800fa6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d113      	bne.n	800fa9a <HAL_SPI_IRQHandler+0x9a>
 800fa72:	69bb      	ldr	r3, [r7, #24]
 800fa74:	f003 0320 	and.w	r3, r3, #32
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d10e      	bne.n	800fa9a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800fa7c:	69bb      	ldr	r3, [r7, #24]
 800fa7e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d009      	beq.n	800fa9a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	4798      	blx	r3
    handled = 1UL;
 800fa96:	2301      	movs	r3, #1
 800fa98:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800fa9a:	69bb      	ldr	r3, [r7, #24]
 800fa9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d10f      	bne.n	800fac4 <HAL_SPI_IRQHandler+0xc4>
 800faa4:	69bb      	ldr	r3, [r7, #24]
 800faa6:	f003 0301 	and.w	r3, r3, #1
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d00a      	beq.n	800fac4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800faae:	69bb      	ldr	r3, [r7, #24]
 800fab0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d105      	bne.n	800fac4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	4798      	blx	r3
    handled = 1UL;
 800fac0:	2301      	movs	r3, #1
 800fac2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800fac4:	69bb      	ldr	r3, [r7, #24]
 800fac6:	f003 0320 	and.w	r3, r3, #32
 800faca:	2b00      	cmp	r3, #0
 800facc:	d10f      	bne.n	800faee <HAL_SPI_IRQHandler+0xee>
 800face:	69bb      	ldr	r3, [r7, #24]
 800fad0:	f003 0302 	and.w	r3, r3, #2
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d00a      	beq.n	800faee <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800fad8:	69bb      	ldr	r3, [r7, #24]
 800fada:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d105      	bne.n	800faee <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	4798      	blx	r3
    handled = 1UL;
 800faea:	2301      	movs	r3, #1
 800faec:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800faee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	f040 8147 	bne.w	800fd84 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800faf6:	69bb      	ldr	r3, [r7, #24]
 800faf8:	f003 0308 	and.w	r3, r3, #8
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	f000 808b 	beq.w	800fc18 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	699a      	ldr	r2, [r3, #24]
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	f042 0208 	orr.w	r2, r2, #8
 800fb10:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	699a      	ldr	r2, [r3, #24]
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	f042 0210 	orr.w	r2, r2, #16
 800fb20:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	699a      	ldr	r2, [r3, #24]
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb30:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	691a      	ldr	r2, [r3, #16]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f022 0208 	bic.w	r2, r2, #8
 800fb40:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	689b      	ldr	r3, [r3, #8]
 800fb48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d13d      	bne.n	800fbcc <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800fb50:	e036      	b.n	800fbc0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	68db      	ldr	r3, [r3, #12]
 800fb56:	2b0f      	cmp	r3, #15
 800fb58:	d90b      	bls.n	800fb72 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681a      	ldr	r2, [r3, #0]
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800fb64:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb6a:	1d1a      	adds	r2, r3, #4
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	665a      	str	r2, [r3, #100]	; 0x64
 800fb70:	e01d      	b.n	800fbae <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	68db      	ldr	r3, [r3, #12]
 800fb76:	2b07      	cmp	r3, #7
 800fb78:	d90b      	bls.n	800fb92 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb7e:	68fa      	ldr	r2, [r7, #12]
 800fb80:	8812      	ldrh	r2, [r2, #0]
 800fb82:	b292      	uxth	r2, r2
 800fb84:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb8a:	1c9a      	adds	r2, r3, #2
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	665a      	str	r2, [r3, #100]	; 0x64
 800fb90:	e00d      	b.n	800fbae <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb9e:	7812      	ldrb	r2, [r2, #0]
 800fba0:	b2d2      	uxtb	r2, r2
 800fba2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fba8:	1c5a      	adds	r2, r3, #1
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fbb4:	b29b      	uxth	r3, r3
 800fbb6:	3b01      	subs	r3, #1
 800fbb8:	b29a      	uxth	r2, r3
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fbc6:	b29b      	uxth	r3, r3
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d1c2      	bne.n	800fb52 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f000 f99d 	bl	800ff0c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d003      	beq.n	800fbec <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800fbe4:	6878      	ldr	r0, [r7, #4]
 800fbe6:	f000 f901 	bl	800fdec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800fbea:	e0d0      	b.n	800fd8e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800fbec:	7cfb      	ldrb	r3, [r7, #19]
 800fbee:	2b05      	cmp	r3, #5
 800fbf0:	d103      	bne.n	800fbfa <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f000 f8e6 	bl	800fdc4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800fbf8:	e0c6      	b.n	800fd88 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800fbfa:	7cfb      	ldrb	r3, [r7, #19]
 800fbfc:	2b04      	cmp	r3, #4
 800fbfe:	d103      	bne.n	800fc08 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800fc00:	6878      	ldr	r0, [r7, #4]
 800fc02:	f000 f8d5 	bl	800fdb0 <HAL_SPI_RxCpltCallback>
    return;
 800fc06:	e0bf      	b.n	800fd88 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800fc08:	7cfb      	ldrb	r3, [r7, #19]
 800fc0a:	2b03      	cmp	r3, #3
 800fc0c:	f040 80bc 	bne.w	800fd88 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800fc10:	6878      	ldr	r0, [r7, #4]
 800fc12:	f000 f8c3 	bl	800fd9c <HAL_SPI_TxCpltCallback>
    return;
 800fc16:	e0b7      	b.n	800fd88 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800fc18:	69bb      	ldr	r3, [r7, #24]
 800fc1a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	f000 80b5 	beq.w	800fd8e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800fc24:	69bb      	ldr	r3, [r7, #24]
 800fc26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d00f      	beq.n	800fc4e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc34:	f043 0204 	orr.w	r2, r3, #4
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	699a      	ldr	r2, [r3, #24]
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fc4c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800fc4e:	69bb      	ldr	r3, [r7, #24]
 800fc50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d00f      	beq.n	800fc78 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc5e:	f043 0201 	orr.w	r2, r3, #1
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	699a      	ldr	r2, [r3, #24]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fc76:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800fc78:	69bb      	ldr	r3, [r7, #24]
 800fc7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d00f      	beq.n	800fca2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc88:	f043 0208 	orr.w	r2, r3, #8
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	699a      	ldr	r2, [r3, #24]
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fca0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800fca2:	69bb      	ldr	r3, [r7, #24]
 800fca4:	f003 0320 	and.w	r3, r3, #32
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d00f      	beq.n	800fccc <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fcb2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	699a      	ldr	r2, [r3, #24]
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	f042 0220 	orr.w	r2, r2, #32
 800fcca:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d05a      	beq.n	800fd8c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	681a      	ldr	r2, [r3, #0]
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	f022 0201 	bic.w	r2, r2, #1
 800fce4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	6919      	ldr	r1, [r3, #16]
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681a      	ldr	r2, [r3, #0]
 800fcf0:	4b28      	ldr	r3, [pc, #160]	; (800fd94 <HAL_SPI_IRQHandler+0x394>)
 800fcf2:	400b      	ands	r3, r1
 800fcf4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800fcfc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800fd00:	d138      	bne.n	800fd74 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	689a      	ldr	r2, [r3, #8]
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800fd10:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d013      	beq.n	800fd42 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fd1e:	4a1e      	ldr	r2, [pc, #120]	; (800fd98 <HAL_SPI_IRQHandler+0x398>)
 800fd20:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7f6 fffe 	bl	8006d28 <HAL_DMA_Abort_IT>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d007      	beq.n	800fd42 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d020      	beq.n	800fd8c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd4e:	4a12      	ldr	r2, [pc, #72]	; (800fd98 <HAL_SPI_IRQHandler+0x398>)
 800fd50:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7f6 ffe6 	bl	8006d28 <HAL_DMA_Abort_IT>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d014      	beq.n	800fd8c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800fd72:	e00b      	b.n	800fd8c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2201      	movs	r2, #1
 800fd78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f000 f835 	bl	800fdec <HAL_SPI_ErrorCallback>
    return;
 800fd82:	e003      	b.n	800fd8c <HAL_SPI_IRQHandler+0x38c>
    return;
 800fd84:	bf00      	nop
 800fd86:	e002      	b.n	800fd8e <HAL_SPI_IRQHandler+0x38e>
    return;
 800fd88:	bf00      	nop
 800fd8a:	e000      	b.n	800fd8e <HAL_SPI_IRQHandler+0x38e>
    return;
 800fd8c:	bf00      	nop
  }
}
 800fd8e:	3728      	adds	r7, #40	; 0x28
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	fffffc94 	.word	0xfffffc94
 800fd98:	0800fed9 	.word	0x0800fed9

0800fd9c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b083      	sub	sp, #12
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800fda4:	bf00      	nop
 800fda6:	370c      	adds	r7, #12
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdae:	4770      	bx	lr

0800fdb0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800fdb0:	b480      	push	{r7}
 800fdb2:	b083      	sub	sp, #12
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800fdb8:	bf00      	nop
 800fdba:	370c      	adds	r7, #12
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc2:	4770      	bx	lr

0800fdc4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b083      	sub	sp, #12
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800fdcc:	bf00      	nop
 800fdce:	370c      	adds	r7, #12
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr

0800fdd8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800fdd8:	b480      	push	{r7}
 800fdda:	b083      	sub	sp, #12
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800fde0:	bf00      	nop
 800fde2:	370c      	adds	r7, #12
 800fde4:	46bd      	mov	sp, r7
 800fde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdea:	4770      	bx	lr

0800fdec <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800fdec:	b480      	push	{r7}
 800fdee:	b083      	sub	sp, #12
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800fdf4:	bf00      	nop
 800fdf6:	370c      	adds	r7, #12
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfe:	4770      	bx	lr

0800fe00 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 800fe00:	b480      	push	{r7}
 800fe02:	b083      	sub	sp, #12
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800fe08:	bf00      	nop
 800fe0a:	370c      	adds	r7, #12
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe12:	4770      	bx	lr

0800fe14 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800fe14:	b480      	push	{r7}
 800fe16:	b083      	sub	sp, #12
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fe22:	b2db      	uxtb	r3, r3
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	370c      	adds	r7, #12
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr

0800fe30 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b084      	sub	sp, #16
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe3c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fe44:	b2db      	uxtb	r3, r3
 800fe46:	2b07      	cmp	r3, #7
 800fe48:	d011      	beq.n	800fe6e <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe4e:	69db      	ldr	r3, [r3, #28]
 800fe50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe54:	d103      	bne.n	800fe5e <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800fe56:	68f8      	ldr	r0, [r7, #12]
 800fe58:	f7ff ffa0 	bl	800fd9c <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800fe5c:	e007      	b.n	800fe6e <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	691a      	ldr	r2, [r3, #16]
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	f042 0208 	orr.w	r2, r2, #8
 800fe6c:	611a      	str	r2, [r3, #16]
}
 800fe6e:	bf00      	nop
 800fe70:	3710      	adds	r7, #16
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}

0800fe76 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fe76:	b580      	push	{r7, lr}
 800fe78:	b084      	sub	sp, #16
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe82:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800fe84:	68f8      	ldr	r0, [r7, #12]
 800fe86:	f7ff ffa7 	bl	800fdd8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fe8a:	bf00      	nop
 800fe8c:	3710      	adds	r7, #16
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}

0800fe92 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800fe92:	b580      	push	{r7, lr}
 800fe94:	b084      	sub	sp, #16
 800fe96:	af00      	add	r7, sp, #0
 800fe98:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe9e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800fea0:	6878      	ldr	r0, [r7, #4]
 800fea2:	f7f8 f8b1 	bl	8008008 <HAL_DMA_GetError>
 800fea6:	4603      	mov	r3, r0
 800fea8:	2b02      	cmp	r3, #2
 800feaa:	d011      	beq.n	800fed0 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800feac:	68f8      	ldr	r0, [r7, #12]
 800feae:	f000 f82d 	bl	800ff0c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800feb8:	f043 0210 	orr.w	r2, r3, #16
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	2201      	movs	r2, #1
 800fec6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800feca:	68f8      	ldr	r0, [r7, #12]
 800fecc:	f7ff ff8e 	bl	800fdec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800fed0:	bf00      	nop
 800fed2:	3710      	adds	r7, #16
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}

0800fed8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b084      	sub	sp, #16
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fee4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	2200      	movs	r2, #0
 800feea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	2200      	movs	r2, #0
 800fef2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	2201      	movs	r2, #1
 800fefa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800fefe:	68f8      	ldr	r0, [r7, #12]
 800ff00:	f7ff ff74 	bl	800fdec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ff04:	bf00      	nop
 800ff06:	3710      	adds	r7, #16
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}

0800ff0c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	b085      	sub	sp, #20
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	695b      	ldr	r3, [r3, #20]
 800ff1a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	699a      	ldr	r2, [r3, #24]
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	f042 0208 	orr.w	r2, r2, #8
 800ff2a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	699a      	ldr	r2, [r3, #24]
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	f042 0210 	orr.w	r2, r2, #16
 800ff3a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	681a      	ldr	r2, [r3, #0]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	f022 0201 	bic.w	r2, r2, #1
 800ff4a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	6919      	ldr	r1, [r3, #16]
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681a      	ldr	r2, [r3, #0]
 800ff56:	4b3c      	ldr	r3, [pc, #240]	; (8010048 <SPI_CloseTransfer+0x13c>)
 800ff58:	400b      	ands	r3, r1
 800ff5a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	689a      	ldr	r2, [r3, #8]
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ff6a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ff72:	b2db      	uxtb	r3, r3
 800ff74:	2b04      	cmp	r3, #4
 800ff76:	d014      	beq.n	800ffa2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	f003 0320 	and.w	r3, r3, #32
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d00f      	beq.n	800ffa2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	699a      	ldr	r2, [r3, #24]
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	f042 0220 	orr.w	r2, r2, #32
 800ffa0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ffa8:	b2db      	uxtb	r3, r3
 800ffaa:	2b03      	cmp	r3, #3
 800ffac:	d014      	beq.n	800ffd8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d00f      	beq.n	800ffd8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ffbe:	f043 0204 	orr.w	r2, r3, #4
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	699a      	ldr	r2, [r3, #24]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ffd6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d00f      	beq.n	8010002 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ffe8:	f043 0201 	orr.w	r2, r3, #1
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	699a      	ldr	r2, [r3, #24]
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010000:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010008:	2b00      	cmp	r3, #0
 801000a:	d00f      	beq.n	801002c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010012:	f043 0208 	orr.w	r2, r3, #8
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	699a      	ldr	r2, [r3, #24]
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801002a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2200      	movs	r2, #0
 8010030:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	2200      	movs	r2, #0
 8010038:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 801003c:	bf00      	nop
 801003e:	3714      	adds	r7, #20
 8010040:	46bd      	mov	sp, r7
 8010042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010046:	4770      	bx	lr
 8010048:	fffffc90 	.word	0xfffffc90

0801004c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 801004c:	b480      	push	{r7}
 801004e:	b085      	sub	sp, #20
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010058:	095b      	lsrs	r3, r3, #5
 801005a:	3301      	adds	r3, #1
 801005c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	68db      	ldr	r3, [r3, #12]
 8010062:	3301      	adds	r3, #1
 8010064:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	3307      	adds	r3, #7
 801006a:	08db      	lsrs	r3, r3, #3
 801006c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	68fa      	ldr	r2, [r7, #12]
 8010072:	fb02 f303 	mul.w	r3, r2, r3
}
 8010076:	4618      	mov	r0, r3
 8010078:	3714      	adds	r7, #20
 801007a:	46bd      	mov	sp, r7
 801007c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010080:	4770      	bx	lr

08010082 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010082:	b580      	push	{r7, lr}
 8010084:	b082      	sub	sp, #8
 8010086:	af00      	add	r7, sp, #0
 8010088:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d101      	bne.n	8010094 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010090:	2301      	movs	r3, #1
 8010092:	e042      	b.n	801011a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801009a:	2b00      	cmp	r3, #0
 801009c:	d106      	bne.n	80100ac <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	2200      	movs	r2, #0
 80100a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f7f4 fa6e 	bl	8004588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2224      	movs	r2, #36	; 0x24
 80100b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	f022 0201 	bic.w	r2, r2, #1
 80100c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f000 f8bb 	bl	8010240 <UART_SetConfig>
 80100ca:	4603      	mov	r3, r0
 80100cc:	2b01      	cmp	r3, #1
 80100ce:	d101      	bne.n	80100d4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80100d0:	2301      	movs	r3, #1
 80100d2:	e022      	b.n	801011a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d002      	beq.n	80100e2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f000 fe17 	bl	8010d10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	685a      	ldr	r2, [r3, #4]
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80100f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	689a      	ldr	r2, [r3, #8]
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010100:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	681a      	ldr	r2, [r3, #0]
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	f042 0201 	orr.w	r2, r2, #1
 8010110:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	f000 fe9e 	bl	8010e54 <UART_CheckIdleState>
 8010118:	4603      	mov	r3, r0
}
 801011a:	4618      	mov	r0, r3
 801011c:	3708      	adds	r7, #8
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}

08010122 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010122:	b580      	push	{r7, lr}
 8010124:	b08a      	sub	sp, #40	; 0x28
 8010126:	af02      	add	r7, sp, #8
 8010128:	60f8      	str	r0, [r7, #12]
 801012a:	60b9      	str	r1, [r7, #8]
 801012c:	603b      	str	r3, [r7, #0]
 801012e:	4613      	mov	r3, r2
 8010130:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010138:	2b20      	cmp	r3, #32
 801013a:	d17b      	bne.n	8010234 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d002      	beq.n	8010148 <HAL_UART_Transmit+0x26>
 8010142:	88fb      	ldrh	r3, [r7, #6]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d101      	bne.n	801014c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8010148:	2301      	movs	r3, #1
 801014a:	e074      	b.n	8010236 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	2200      	movs	r2, #0
 8010150:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	2221      	movs	r2, #33	; 0x21
 8010158:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801015c:	f7f4 fe1a 	bl	8004d94 <HAL_GetTick>
 8010160:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	88fa      	ldrh	r2, [r7, #6]
 8010166:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	88fa      	ldrh	r2, [r7, #6]
 801016e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	689b      	ldr	r3, [r3, #8]
 8010176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801017a:	d108      	bne.n	801018e <HAL_UART_Transmit+0x6c>
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	691b      	ldr	r3, [r3, #16]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d104      	bne.n	801018e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010184:	2300      	movs	r3, #0
 8010186:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	61bb      	str	r3, [r7, #24]
 801018c:	e003      	b.n	8010196 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010192:	2300      	movs	r3, #0
 8010194:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010196:	e030      	b.n	80101fa <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	9300      	str	r3, [sp, #0]
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	2200      	movs	r2, #0
 80101a0:	2180      	movs	r1, #128	; 0x80
 80101a2:	68f8      	ldr	r0, [r7, #12]
 80101a4:	f000 ff00 	bl	8010fa8 <UART_WaitOnFlagUntilTimeout>
 80101a8:	4603      	mov	r3, r0
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d005      	beq.n	80101ba <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	2220      	movs	r2, #32
 80101b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80101b6:	2303      	movs	r3, #3
 80101b8:	e03d      	b.n	8010236 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80101ba:	69fb      	ldr	r3, [r7, #28]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d10b      	bne.n	80101d8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80101c0:	69bb      	ldr	r3, [r7, #24]
 80101c2:	881b      	ldrh	r3, [r3, #0]
 80101c4:	461a      	mov	r2, r3
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80101ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80101d0:	69bb      	ldr	r3, [r7, #24]
 80101d2:	3302      	adds	r3, #2
 80101d4:	61bb      	str	r3, [r7, #24]
 80101d6:	e007      	b.n	80101e8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80101d8:	69fb      	ldr	r3, [r7, #28]
 80101da:	781a      	ldrb	r2, [r3, #0]
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80101e2:	69fb      	ldr	r3, [r7, #28]
 80101e4:	3301      	adds	r3, #1
 80101e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80101ee:	b29b      	uxth	r3, r3
 80101f0:	3b01      	subs	r3, #1
 80101f2:	b29a      	uxth	r2, r3
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010200:	b29b      	uxth	r3, r3
 8010202:	2b00      	cmp	r3, #0
 8010204:	d1c8      	bne.n	8010198 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	9300      	str	r3, [sp, #0]
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	2200      	movs	r2, #0
 801020e:	2140      	movs	r1, #64	; 0x40
 8010210:	68f8      	ldr	r0, [r7, #12]
 8010212:	f000 fec9 	bl	8010fa8 <UART_WaitOnFlagUntilTimeout>
 8010216:	4603      	mov	r3, r0
 8010218:	2b00      	cmp	r3, #0
 801021a:	d005      	beq.n	8010228 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	2220      	movs	r2, #32
 8010220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8010224:	2303      	movs	r3, #3
 8010226:	e006      	b.n	8010236 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	2220      	movs	r2, #32
 801022c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8010230:	2300      	movs	r3, #0
 8010232:	e000      	b.n	8010236 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8010234:	2302      	movs	r3, #2
  }
}
 8010236:	4618      	mov	r0, r3
 8010238:	3720      	adds	r7, #32
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}
	...

08010240 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010244:	b092      	sub	sp, #72	; 0x48
 8010246:	af00      	add	r7, sp, #0
 8010248:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801024a:	2300      	movs	r3, #0
 801024c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010250:	697b      	ldr	r3, [r7, #20]
 8010252:	689a      	ldr	r2, [r3, #8]
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	691b      	ldr	r3, [r3, #16]
 8010258:	431a      	orrs	r2, r3
 801025a:	697b      	ldr	r3, [r7, #20]
 801025c:	695b      	ldr	r3, [r3, #20]
 801025e:	431a      	orrs	r2, r3
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	69db      	ldr	r3, [r3, #28]
 8010264:	4313      	orrs	r3, r2
 8010266:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010268:	697b      	ldr	r3, [r7, #20]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	681a      	ldr	r2, [r3, #0]
 801026e:	4bbe      	ldr	r3, [pc, #760]	; (8010568 <UART_SetConfig+0x328>)
 8010270:	4013      	ands	r3, r2
 8010272:	697a      	ldr	r2, [r7, #20]
 8010274:	6812      	ldr	r2, [r2, #0]
 8010276:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010278:	430b      	orrs	r3, r1
 801027a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	685b      	ldr	r3, [r3, #4]
 8010282:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	68da      	ldr	r2, [r3, #12]
 801028a:	697b      	ldr	r3, [r7, #20]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	430a      	orrs	r2, r1
 8010290:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010292:	697b      	ldr	r3, [r7, #20]
 8010294:	699b      	ldr	r3, [r3, #24]
 8010296:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	4ab3      	ldr	r2, [pc, #716]	; (801056c <UART_SetConfig+0x32c>)
 801029e:	4293      	cmp	r3, r2
 80102a0:	d004      	beq.n	80102ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	6a1b      	ldr	r3, [r3, #32]
 80102a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80102a8:	4313      	orrs	r3, r2
 80102aa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80102ac:	697b      	ldr	r3, [r7, #20]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	689a      	ldr	r2, [r3, #8]
 80102b2:	4baf      	ldr	r3, [pc, #700]	; (8010570 <UART_SetConfig+0x330>)
 80102b4:	4013      	ands	r3, r2
 80102b6:	697a      	ldr	r2, [r7, #20]
 80102b8:	6812      	ldr	r2, [r2, #0]
 80102ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80102bc:	430b      	orrs	r3, r1
 80102be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102c6:	f023 010f 	bic.w	r1, r3, #15
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	430a      	orrs	r2, r1
 80102d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	4aa6      	ldr	r2, [pc, #664]	; (8010574 <UART_SetConfig+0x334>)
 80102dc:	4293      	cmp	r3, r2
 80102de:	d177      	bne.n	80103d0 <UART_SetConfig+0x190>
 80102e0:	4ba5      	ldr	r3, [pc, #660]	; (8010578 <UART_SetConfig+0x338>)
 80102e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80102e8:	2b28      	cmp	r3, #40	; 0x28
 80102ea:	d86d      	bhi.n	80103c8 <UART_SetConfig+0x188>
 80102ec:	a201      	add	r2, pc, #4	; (adr r2, 80102f4 <UART_SetConfig+0xb4>)
 80102ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102f2:	bf00      	nop
 80102f4:	08010399 	.word	0x08010399
 80102f8:	080103c9 	.word	0x080103c9
 80102fc:	080103c9 	.word	0x080103c9
 8010300:	080103c9 	.word	0x080103c9
 8010304:	080103c9 	.word	0x080103c9
 8010308:	080103c9 	.word	0x080103c9
 801030c:	080103c9 	.word	0x080103c9
 8010310:	080103c9 	.word	0x080103c9
 8010314:	080103a1 	.word	0x080103a1
 8010318:	080103c9 	.word	0x080103c9
 801031c:	080103c9 	.word	0x080103c9
 8010320:	080103c9 	.word	0x080103c9
 8010324:	080103c9 	.word	0x080103c9
 8010328:	080103c9 	.word	0x080103c9
 801032c:	080103c9 	.word	0x080103c9
 8010330:	080103c9 	.word	0x080103c9
 8010334:	080103a9 	.word	0x080103a9
 8010338:	080103c9 	.word	0x080103c9
 801033c:	080103c9 	.word	0x080103c9
 8010340:	080103c9 	.word	0x080103c9
 8010344:	080103c9 	.word	0x080103c9
 8010348:	080103c9 	.word	0x080103c9
 801034c:	080103c9 	.word	0x080103c9
 8010350:	080103c9 	.word	0x080103c9
 8010354:	080103b1 	.word	0x080103b1
 8010358:	080103c9 	.word	0x080103c9
 801035c:	080103c9 	.word	0x080103c9
 8010360:	080103c9 	.word	0x080103c9
 8010364:	080103c9 	.word	0x080103c9
 8010368:	080103c9 	.word	0x080103c9
 801036c:	080103c9 	.word	0x080103c9
 8010370:	080103c9 	.word	0x080103c9
 8010374:	080103b9 	.word	0x080103b9
 8010378:	080103c9 	.word	0x080103c9
 801037c:	080103c9 	.word	0x080103c9
 8010380:	080103c9 	.word	0x080103c9
 8010384:	080103c9 	.word	0x080103c9
 8010388:	080103c9 	.word	0x080103c9
 801038c:	080103c9 	.word	0x080103c9
 8010390:	080103c9 	.word	0x080103c9
 8010394:	080103c1 	.word	0x080103c1
 8010398:	2301      	movs	r3, #1
 801039a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801039e:	e222      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80103a0:	2304      	movs	r3, #4
 80103a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80103a6:	e21e      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80103a8:	2308      	movs	r3, #8
 80103aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80103ae:	e21a      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80103b0:	2310      	movs	r3, #16
 80103b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80103b6:	e216      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80103b8:	2320      	movs	r3, #32
 80103ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80103be:	e212      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80103c0:	2340      	movs	r3, #64	; 0x40
 80103c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80103c6:	e20e      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80103c8:	2380      	movs	r3, #128	; 0x80
 80103ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80103ce:	e20a      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80103d0:	697b      	ldr	r3, [r7, #20]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	4a69      	ldr	r2, [pc, #420]	; (801057c <UART_SetConfig+0x33c>)
 80103d6:	4293      	cmp	r3, r2
 80103d8:	d130      	bne.n	801043c <UART_SetConfig+0x1fc>
 80103da:	4b67      	ldr	r3, [pc, #412]	; (8010578 <UART_SetConfig+0x338>)
 80103dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103de:	f003 0307 	and.w	r3, r3, #7
 80103e2:	2b05      	cmp	r3, #5
 80103e4:	d826      	bhi.n	8010434 <UART_SetConfig+0x1f4>
 80103e6:	a201      	add	r2, pc, #4	; (adr r2, 80103ec <UART_SetConfig+0x1ac>)
 80103e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103ec:	08010405 	.word	0x08010405
 80103f0:	0801040d 	.word	0x0801040d
 80103f4:	08010415 	.word	0x08010415
 80103f8:	0801041d 	.word	0x0801041d
 80103fc:	08010425 	.word	0x08010425
 8010400:	0801042d 	.word	0x0801042d
 8010404:	2300      	movs	r3, #0
 8010406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801040a:	e1ec      	b.n	80107e6 <UART_SetConfig+0x5a6>
 801040c:	2304      	movs	r3, #4
 801040e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010412:	e1e8      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010414:	2308      	movs	r3, #8
 8010416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801041a:	e1e4      	b.n	80107e6 <UART_SetConfig+0x5a6>
 801041c:	2310      	movs	r3, #16
 801041e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010422:	e1e0      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010424:	2320      	movs	r3, #32
 8010426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801042a:	e1dc      	b.n	80107e6 <UART_SetConfig+0x5a6>
 801042c:	2340      	movs	r3, #64	; 0x40
 801042e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010432:	e1d8      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010434:	2380      	movs	r3, #128	; 0x80
 8010436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801043a:	e1d4      	b.n	80107e6 <UART_SetConfig+0x5a6>
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	4a4f      	ldr	r2, [pc, #316]	; (8010580 <UART_SetConfig+0x340>)
 8010442:	4293      	cmp	r3, r2
 8010444:	d130      	bne.n	80104a8 <UART_SetConfig+0x268>
 8010446:	4b4c      	ldr	r3, [pc, #304]	; (8010578 <UART_SetConfig+0x338>)
 8010448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801044a:	f003 0307 	and.w	r3, r3, #7
 801044e:	2b05      	cmp	r3, #5
 8010450:	d826      	bhi.n	80104a0 <UART_SetConfig+0x260>
 8010452:	a201      	add	r2, pc, #4	; (adr r2, 8010458 <UART_SetConfig+0x218>)
 8010454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010458:	08010471 	.word	0x08010471
 801045c:	08010479 	.word	0x08010479
 8010460:	08010481 	.word	0x08010481
 8010464:	08010489 	.word	0x08010489
 8010468:	08010491 	.word	0x08010491
 801046c:	08010499 	.word	0x08010499
 8010470:	2300      	movs	r3, #0
 8010472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010476:	e1b6      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010478:	2304      	movs	r3, #4
 801047a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801047e:	e1b2      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010480:	2308      	movs	r3, #8
 8010482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010486:	e1ae      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010488:	2310      	movs	r3, #16
 801048a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801048e:	e1aa      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010490:	2320      	movs	r3, #32
 8010492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010496:	e1a6      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010498:	2340      	movs	r3, #64	; 0x40
 801049a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801049e:	e1a2      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80104a0:	2380      	movs	r3, #128	; 0x80
 80104a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104a6:	e19e      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80104a8:	697b      	ldr	r3, [r7, #20]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	4a35      	ldr	r2, [pc, #212]	; (8010584 <UART_SetConfig+0x344>)
 80104ae:	4293      	cmp	r3, r2
 80104b0:	d130      	bne.n	8010514 <UART_SetConfig+0x2d4>
 80104b2:	4b31      	ldr	r3, [pc, #196]	; (8010578 <UART_SetConfig+0x338>)
 80104b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104b6:	f003 0307 	and.w	r3, r3, #7
 80104ba:	2b05      	cmp	r3, #5
 80104bc:	d826      	bhi.n	801050c <UART_SetConfig+0x2cc>
 80104be:	a201      	add	r2, pc, #4	; (adr r2, 80104c4 <UART_SetConfig+0x284>)
 80104c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104c4:	080104dd 	.word	0x080104dd
 80104c8:	080104e5 	.word	0x080104e5
 80104cc:	080104ed 	.word	0x080104ed
 80104d0:	080104f5 	.word	0x080104f5
 80104d4:	080104fd 	.word	0x080104fd
 80104d8:	08010505 	.word	0x08010505
 80104dc:	2300      	movs	r3, #0
 80104de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104e2:	e180      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80104e4:	2304      	movs	r3, #4
 80104e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104ea:	e17c      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80104ec:	2308      	movs	r3, #8
 80104ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104f2:	e178      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80104f4:	2310      	movs	r3, #16
 80104f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104fa:	e174      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80104fc:	2320      	movs	r3, #32
 80104fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010502:	e170      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010504:	2340      	movs	r3, #64	; 0x40
 8010506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801050a:	e16c      	b.n	80107e6 <UART_SetConfig+0x5a6>
 801050c:	2380      	movs	r3, #128	; 0x80
 801050e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010512:	e168      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010514:	697b      	ldr	r3, [r7, #20]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	4a1b      	ldr	r2, [pc, #108]	; (8010588 <UART_SetConfig+0x348>)
 801051a:	4293      	cmp	r3, r2
 801051c:	d142      	bne.n	80105a4 <UART_SetConfig+0x364>
 801051e:	4b16      	ldr	r3, [pc, #88]	; (8010578 <UART_SetConfig+0x338>)
 8010520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010522:	f003 0307 	and.w	r3, r3, #7
 8010526:	2b05      	cmp	r3, #5
 8010528:	d838      	bhi.n	801059c <UART_SetConfig+0x35c>
 801052a:	a201      	add	r2, pc, #4	; (adr r2, 8010530 <UART_SetConfig+0x2f0>)
 801052c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010530:	08010549 	.word	0x08010549
 8010534:	08010551 	.word	0x08010551
 8010538:	08010559 	.word	0x08010559
 801053c:	08010561 	.word	0x08010561
 8010540:	0801058d 	.word	0x0801058d
 8010544:	08010595 	.word	0x08010595
 8010548:	2300      	movs	r3, #0
 801054a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801054e:	e14a      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010550:	2304      	movs	r3, #4
 8010552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010556:	e146      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010558:	2308      	movs	r3, #8
 801055a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801055e:	e142      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010560:	2310      	movs	r3, #16
 8010562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010566:	e13e      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010568:	cfff69f3 	.word	0xcfff69f3
 801056c:	58000c00 	.word	0x58000c00
 8010570:	11fff4ff 	.word	0x11fff4ff
 8010574:	40011000 	.word	0x40011000
 8010578:	58024400 	.word	0x58024400
 801057c:	40004400 	.word	0x40004400
 8010580:	40004800 	.word	0x40004800
 8010584:	40004c00 	.word	0x40004c00
 8010588:	40005000 	.word	0x40005000
 801058c:	2320      	movs	r3, #32
 801058e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010592:	e128      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010594:	2340      	movs	r3, #64	; 0x40
 8010596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801059a:	e124      	b.n	80107e6 <UART_SetConfig+0x5a6>
 801059c:	2380      	movs	r3, #128	; 0x80
 801059e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105a2:	e120      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	4acb      	ldr	r2, [pc, #812]	; (80108d8 <UART_SetConfig+0x698>)
 80105aa:	4293      	cmp	r3, r2
 80105ac:	d176      	bne.n	801069c <UART_SetConfig+0x45c>
 80105ae:	4bcb      	ldr	r3, [pc, #812]	; (80108dc <UART_SetConfig+0x69c>)
 80105b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80105b6:	2b28      	cmp	r3, #40	; 0x28
 80105b8:	d86c      	bhi.n	8010694 <UART_SetConfig+0x454>
 80105ba:	a201      	add	r2, pc, #4	; (adr r2, 80105c0 <UART_SetConfig+0x380>)
 80105bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105c0:	08010665 	.word	0x08010665
 80105c4:	08010695 	.word	0x08010695
 80105c8:	08010695 	.word	0x08010695
 80105cc:	08010695 	.word	0x08010695
 80105d0:	08010695 	.word	0x08010695
 80105d4:	08010695 	.word	0x08010695
 80105d8:	08010695 	.word	0x08010695
 80105dc:	08010695 	.word	0x08010695
 80105e0:	0801066d 	.word	0x0801066d
 80105e4:	08010695 	.word	0x08010695
 80105e8:	08010695 	.word	0x08010695
 80105ec:	08010695 	.word	0x08010695
 80105f0:	08010695 	.word	0x08010695
 80105f4:	08010695 	.word	0x08010695
 80105f8:	08010695 	.word	0x08010695
 80105fc:	08010695 	.word	0x08010695
 8010600:	08010675 	.word	0x08010675
 8010604:	08010695 	.word	0x08010695
 8010608:	08010695 	.word	0x08010695
 801060c:	08010695 	.word	0x08010695
 8010610:	08010695 	.word	0x08010695
 8010614:	08010695 	.word	0x08010695
 8010618:	08010695 	.word	0x08010695
 801061c:	08010695 	.word	0x08010695
 8010620:	0801067d 	.word	0x0801067d
 8010624:	08010695 	.word	0x08010695
 8010628:	08010695 	.word	0x08010695
 801062c:	08010695 	.word	0x08010695
 8010630:	08010695 	.word	0x08010695
 8010634:	08010695 	.word	0x08010695
 8010638:	08010695 	.word	0x08010695
 801063c:	08010695 	.word	0x08010695
 8010640:	08010685 	.word	0x08010685
 8010644:	08010695 	.word	0x08010695
 8010648:	08010695 	.word	0x08010695
 801064c:	08010695 	.word	0x08010695
 8010650:	08010695 	.word	0x08010695
 8010654:	08010695 	.word	0x08010695
 8010658:	08010695 	.word	0x08010695
 801065c:	08010695 	.word	0x08010695
 8010660:	0801068d 	.word	0x0801068d
 8010664:	2301      	movs	r3, #1
 8010666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801066a:	e0bc      	b.n	80107e6 <UART_SetConfig+0x5a6>
 801066c:	2304      	movs	r3, #4
 801066e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010672:	e0b8      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010674:	2308      	movs	r3, #8
 8010676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801067a:	e0b4      	b.n	80107e6 <UART_SetConfig+0x5a6>
 801067c:	2310      	movs	r3, #16
 801067e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010682:	e0b0      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010684:	2320      	movs	r3, #32
 8010686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801068a:	e0ac      	b.n	80107e6 <UART_SetConfig+0x5a6>
 801068c:	2340      	movs	r3, #64	; 0x40
 801068e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010692:	e0a8      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010694:	2380      	movs	r3, #128	; 0x80
 8010696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801069a:	e0a4      	b.n	80107e6 <UART_SetConfig+0x5a6>
 801069c:	697b      	ldr	r3, [r7, #20]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	4a8f      	ldr	r2, [pc, #572]	; (80108e0 <UART_SetConfig+0x6a0>)
 80106a2:	4293      	cmp	r3, r2
 80106a4:	d130      	bne.n	8010708 <UART_SetConfig+0x4c8>
 80106a6:	4b8d      	ldr	r3, [pc, #564]	; (80108dc <UART_SetConfig+0x69c>)
 80106a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106aa:	f003 0307 	and.w	r3, r3, #7
 80106ae:	2b05      	cmp	r3, #5
 80106b0:	d826      	bhi.n	8010700 <UART_SetConfig+0x4c0>
 80106b2:	a201      	add	r2, pc, #4	; (adr r2, 80106b8 <UART_SetConfig+0x478>)
 80106b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106b8:	080106d1 	.word	0x080106d1
 80106bc:	080106d9 	.word	0x080106d9
 80106c0:	080106e1 	.word	0x080106e1
 80106c4:	080106e9 	.word	0x080106e9
 80106c8:	080106f1 	.word	0x080106f1
 80106cc:	080106f9 	.word	0x080106f9
 80106d0:	2300      	movs	r3, #0
 80106d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106d6:	e086      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80106d8:	2304      	movs	r3, #4
 80106da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106de:	e082      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80106e0:	2308      	movs	r3, #8
 80106e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106e6:	e07e      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80106e8:	2310      	movs	r3, #16
 80106ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106ee:	e07a      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80106f0:	2320      	movs	r3, #32
 80106f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106f6:	e076      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80106f8:	2340      	movs	r3, #64	; 0x40
 80106fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106fe:	e072      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010700:	2380      	movs	r3, #128	; 0x80
 8010702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010706:	e06e      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	4a75      	ldr	r2, [pc, #468]	; (80108e4 <UART_SetConfig+0x6a4>)
 801070e:	4293      	cmp	r3, r2
 8010710:	d130      	bne.n	8010774 <UART_SetConfig+0x534>
 8010712:	4b72      	ldr	r3, [pc, #456]	; (80108dc <UART_SetConfig+0x69c>)
 8010714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010716:	f003 0307 	and.w	r3, r3, #7
 801071a:	2b05      	cmp	r3, #5
 801071c:	d826      	bhi.n	801076c <UART_SetConfig+0x52c>
 801071e:	a201      	add	r2, pc, #4	; (adr r2, 8010724 <UART_SetConfig+0x4e4>)
 8010720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010724:	0801073d 	.word	0x0801073d
 8010728:	08010745 	.word	0x08010745
 801072c:	0801074d 	.word	0x0801074d
 8010730:	08010755 	.word	0x08010755
 8010734:	0801075d 	.word	0x0801075d
 8010738:	08010765 	.word	0x08010765
 801073c:	2300      	movs	r3, #0
 801073e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010742:	e050      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010744:	2304      	movs	r3, #4
 8010746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801074a:	e04c      	b.n	80107e6 <UART_SetConfig+0x5a6>
 801074c:	2308      	movs	r3, #8
 801074e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010752:	e048      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010754:	2310      	movs	r3, #16
 8010756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801075a:	e044      	b.n	80107e6 <UART_SetConfig+0x5a6>
 801075c:	2320      	movs	r3, #32
 801075e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010762:	e040      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010764:	2340      	movs	r3, #64	; 0x40
 8010766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801076a:	e03c      	b.n	80107e6 <UART_SetConfig+0x5a6>
 801076c:	2380      	movs	r3, #128	; 0x80
 801076e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010772:	e038      	b.n	80107e6 <UART_SetConfig+0x5a6>
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	4a5b      	ldr	r2, [pc, #364]	; (80108e8 <UART_SetConfig+0x6a8>)
 801077a:	4293      	cmp	r3, r2
 801077c:	d130      	bne.n	80107e0 <UART_SetConfig+0x5a0>
 801077e:	4b57      	ldr	r3, [pc, #348]	; (80108dc <UART_SetConfig+0x69c>)
 8010780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010782:	f003 0307 	and.w	r3, r3, #7
 8010786:	2b05      	cmp	r3, #5
 8010788:	d826      	bhi.n	80107d8 <UART_SetConfig+0x598>
 801078a:	a201      	add	r2, pc, #4	; (adr r2, 8010790 <UART_SetConfig+0x550>)
 801078c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010790:	080107a9 	.word	0x080107a9
 8010794:	080107b1 	.word	0x080107b1
 8010798:	080107b9 	.word	0x080107b9
 801079c:	080107c1 	.word	0x080107c1
 80107a0:	080107c9 	.word	0x080107c9
 80107a4:	080107d1 	.word	0x080107d1
 80107a8:	2302      	movs	r3, #2
 80107aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107ae:	e01a      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80107b0:	2304      	movs	r3, #4
 80107b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107b6:	e016      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80107b8:	2308      	movs	r3, #8
 80107ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107be:	e012      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80107c0:	2310      	movs	r3, #16
 80107c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107c6:	e00e      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80107c8:	2320      	movs	r3, #32
 80107ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107ce:	e00a      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80107d0:	2340      	movs	r3, #64	; 0x40
 80107d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107d6:	e006      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80107d8:	2380      	movs	r3, #128	; 0x80
 80107da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107de:	e002      	b.n	80107e6 <UART_SetConfig+0x5a6>
 80107e0:	2380      	movs	r3, #128	; 0x80
 80107e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80107e6:	697b      	ldr	r3, [r7, #20]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	4a3f      	ldr	r2, [pc, #252]	; (80108e8 <UART_SetConfig+0x6a8>)
 80107ec:	4293      	cmp	r3, r2
 80107ee:	f040 80f8 	bne.w	80109e2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80107f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80107f6:	2b20      	cmp	r3, #32
 80107f8:	dc46      	bgt.n	8010888 <UART_SetConfig+0x648>
 80107fa:	2b02      	cmp	r3, #2
 80107fc:	f2c0 8082 	blt.w	8010904 <UART_SetConfig+0x6c4>
 8010800:	3b02      	subs	r3, #2
 8010802:	2b1e      	cmp	r3, #30
 8010804:	d87e      	bhi.n	8010904 <UART_SetConfig+0x6c4>
 8010806:	a201      	add	r2, pc, #4	; (adr r2, 801080c <UART_SetConfig+0x5cc>)
 8010808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801080c:	0801088f 	.word	0x0801088f
 8010810:	08010905 	.word	0x08010905
 8010814:	08010897 	.word	0x08010897
 8010818:	08010905 	.word	0x08010905
 801081c:	08010905 	.word	0x08010905
 8010820:	08010905 	.word	0x08010905
 8010824:	080108a7 	.word	0x080108a7
 8010828:	08010905 	.word	0x08010905
 801082c:	08010905 	.word	0x08010905
 8010830:	08010905 	.word	0x08010905
 8010834:	08010905 	.word	0x08010905
 8010838:	08010905 	.word	0x08010905
 801083c:	08010905 	.word	0x08010905
 8010840:	08010905 	.word	0x08010905
 8010844:	080108b7 	.word	0x080108b7
 8010848:	08010905 	.word	0x08010905
 801084c:	08010905 	.word	0x08010905
 8010850:	08010905 	.word	0x08010905
 8010854:	08010905 	.word	0x08010905
 8010858:	08010905 	.word	0x08010905
 801085c:	08010905 	.word	0x08010905
 8010860:	08010905 	.word	0x08010905
 8010864:	08010905 	.word	0x08010905
 8010868:	08010905 	.word	0x08010905
 801086c:	08010905 	.word	0x08010905
 8010870:	08010905 	.word	0x08010905
 8010874:	08010905 	.word	0x08010905
 8010878:	08010905 	.word	0x08010905
 801087c:	08010905 	.word	0x08010905
 8010880:	08010905 	.word	0x08010905
 8010884:	080108f7 	.word	0x080108f7
 8010888:	2b40      	cmp	r3, #64	; 0x40
 801088a:	d037      	beq.n	80108fc <UART_SetConfig+0x6bc>
 801088c:	e03a      	b.n	8010904 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801088e:	f7fd fc93 	bl	800e1b8 <HAL_RCCEx_GetD3PCLK1Freq>
 8010892:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010894:	e03c      	b.n	8010910 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801089a:	4618      	mov	r0, r3
 801089c:	f7fd fca2 	bl	800e1e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80108a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108a4:	e034      	b.n	8010910 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80108a6:	f107 0318 	add.w	r3, r7, #24
 80108aa:	4618      	mov	r0, r3
 80108ac:	f7fd fdee 	bl	800e48c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80108b0:	69fb      	ldr	r3, [r7, #28]
 80108b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108b4:	e02c      	b.n	8010910 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80108b6:	4b09      	ldr	r3, [pc, #36]	; (80108dc <UART_SetConfig+0x69c>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	f003 0320 	and.w	r3, r3, #32
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d016      	beq.n	80108f0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80108c2:	4b06      	ldr	r3, [pc, #24]	; (80108dc <UART_SetConfig+0x69c>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	08db      	lsrs	r3, r3, #3
 80108c8:	f003 0303 	and.w	r3, r3, #3
 80108cc:	4a07      	ldr	r2, [pc, #28]	; (80108ec <UART_SetConfig+0x6ac>)
 80108ce:	fa22 f303 	lsr.w	r3, r2, r3
 80108d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80108d4:	e01c      	b.n	8010910 <UART_SetConfig+0x6d0>
 80108d6:	bf00      	nop
 80108d8:	40011400 	.word	0x40011400
 80108dc:	58024400 	.word	0x58024400
 80108e0:	40007800 	.word	0x40007800
 80108e4:	40007c00 	.word	0x40007c00
 80108e8:	58000c00 	.word	0x58000c00
 80108ec:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80108f0:	4b9d      	ldr	r3, [pc, #628]	; (8010b68 <UART_SetConfig+0x928>)
 80108f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108f4:	e00c      	b.n	8010910 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80108f6:	4b9d      	ldr	r3, [pc, #628]	; (8010b6c <UART_SetConfig+0x92c>)
 80108f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108fa:	e009      	b.n	8010910 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80108fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010900:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010902:	e005      	b.n	8010910 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010904:	2300      	movs	r3, #0
 8010906:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010908:	2301      	movs	r3, #1
 801090a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801090e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010912:	2b00      	cmp	r3, #0
 8010914:	f000 81de 	beq.w	8010cd4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010918:	697b      	ldr	r3, [r7, #20]
 801091a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801091c:	4a94      	ldr	r2, [pc, #592]	; (8010b70 <UART_SetConfig+0x930>)
 801091e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010922:	461a      	mov	r2, r3
 8010924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010926:	fbb3 f3f2 	udiv	r3, r3, r2
 801092a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	685a      	ldr	r2, [r3, #4]
 8010930:	4613      	mov	r3, r2
 8010932:	005b      	lsls	r3, r3, #1
 8010934:	4413      	add	r3, r2
 8010936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010938:	429a      	cmp	r2, r3
 801093a:	d305      	bcc.n	8010948 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	685b      	ldr	r3, [r3, #4]
 8010940:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010944:	429a      	cmp	r2, r3
 8010946:	d903      	bls.n	8010950 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010948:	2301      	movs	r3, #1
 801094a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801094e:	e1c1      	b.n	8010cd4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010952:	2200      	movs	r2, #0
 8010954:	60bb      	str	r3, [r7, #8]
 8010956:	60fa      	str	r2, [r7, #12]
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801095c:	4a84      	ldr	r2, [pc, #528]	; (8010b70 <UART_SetConfig+0x930>)
 801095e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010962:	b29b      	uxth	r3, r3
 8010964:	2200      	movs	r2, #0
 8010966:	603b      	str	r3, [r7, #0]
 8010968:	607a      	str	r2, [r7, #4]
 801096a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801096e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010972:	f7ef fd0d 	bl	8000390 <__aeabi_uldivmod>
 8010976:	4602      	mov	r2, r0
 8010978:	460b      	mov	r3, r1
 801097a:	4610      	mov	r0, r2
 801097c:	4619      	mov	r1, r3
 801097e:	f04f 0200 	mov.w	r2, #0
 8010982:	f04f 0300 	mov.w	r3, #0
 8010986:	020b      	lsls	r3, r1, #8
 8010988:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801098c:	0202      	lsls	r2, r0, #8
 801098e:	6979      	ldr	r1, [r7, #20]
 8010990:	6849      	ldr	r1, [r1, #4]
 8010992:	0849      	lsrs	r1, r1, #1
 8010994:	2000      	movs	r0, #0
 8010996:	460c      	mov	r4, r1
 8010998:	4605      	mov	r5, r0
 801099a:	eb12 0804 	adds.w	r8, r2, r4
 801099e:	eb43 0905 	adc.w	r9, r3, r5
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	685b      	ldr	r3, [r3, #4]
 80109a6:	2200      	movs	r2, #0
 80109a8:	469a      	mov	sl, r3
 80109aa:	4693      	mov	fp, r2
 80109ac:	4652      	mov	r2, sl
 80109ae:	465b      	mov	r3, fp
 80109b0:	4640      	mov	r0, r8
 80109b2:	4649      	mov	r1, r9
 80109b4:	f7ef fcec 	bl	8000390 <__aeabi_uldivmod>
 80109b8:	4602      	mov	r2, r0
 80109ba:	460b      	mov	r3, r1
 80109bc:	4613      	mov	r3, r2
 80109be:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80109c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80109c6:	d308      	bcc.n	80109da <UART_SetConfig+0x79a>
 80109c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80109ce:	d204      	bcs.n	80109da <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80109d0:	697b      	ldr	r3, [r7, #20]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80109d6:	60da      	str	r2, [r3, #12]
 80109d8:	e17c      	b.n	8010cd4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80109da:	2301      	movs	r3, #1
 80109dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80109e0:	e178      	b.n	8010cd4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80109e2:	697b      	ldr	r3, [r7, #20]
 80109e4:	69db      	ldr	r3, [r3, #28]
 80109e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80109ea:	f040 80c5 	bne.w	8010b78 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80109ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80109f2:	2b20      	cmp	r3, #32
 80109f4:	dc48      	bgt.n	8010a88 <UART_SetConfig+0x848>
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	db7b      	blt.n	8010af2 <UART_SetConfig+0x8b2>
 80109fa:	2b20      	cmp	r3, #32
 80109fc:	d879      	bhi.n	8010af2 <UART_SetConfig+0x8b2>
 80109fe:	a201      	add	r2, pc, #4	; (adr r2, 8010a04 <UART_SetConfig+0x7c4>)
 8010a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a04:	08010a8f 	.word	0x08010a8f
 8010a08:	08010a97 	.word	0x08010a97
 8010a0c:	08010af3 	.word	0x08010af3
 8010a10:	08010af3 	.word	0x08010af3
 8010a14:	08010a9f 	.word	0x08010a9f
 8010a18:	08010af3 	.word	0x08010af3
 8010a1c:	08010af3 	.word	0x08010af3
 8010a20:	08010af3 	.word	0x08010af3
 8010a24:	08010aaf 	.word	0x08010aaf
 8010a28:	08010af3 	.word	0x08010af3
 8010a2c:	08010af3 	.word	0x08010af3
 8010a30:	08010af3 	.word	0x08010af3
 8010a34:	08010af3 	.word	0x08010af3
 8010a38:	08010af3 	.word	0x08010af3
 8010a3c:	08010af3 	.word	0x08010af3
 8010a40:	08010af3 	.word	0x08010af3
 8010a44:	08010abf 	.word	0x08010abf
 8010a48:	08010af3 	.word	0x08010af3
 8010a4c:	08010af3 	.word	0x08010af3
 8010a50:	08010af3 	.word	0x08010af3
 8010a54:	08010af3 	.word	0x08010af3
 8010a58:	08010af3 	.word	0x08010af3
 8010a5c:	08010af3 	.word	0x08010af3
 8010a60:	08010af3 	.word	0x08010af3
 8010a64:	08010af3 	.word	0x08010af3
 8010a68:	08010af3 	.word	0x08010af3
 8010a6c:	08010af3 	.word	0x08010af3
 8010a70:	08010af3 	.word	0x08010af3
 8010a74:	08010af3 	.word	0x08010af3
 8010a78:	08010af3 	.word	0x08010af3
 8010a7c:	08010af3 	.word	0x08010af3
 8010a80:	08010af3 	.word	0x08010af3
 8010a84:	08010ae5 	.word	0x08010ae5
 8010a88:	2b40      	cmp	r3, #64	; 0x40
 8010a8a:	d02e      	beq.n	8010aea <UART_SetConfig+0x8aa>
 8010a8c:	e031      	b.n	8010af2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010a8e:	f7fb fbdd 	bl	800c24c <HAL_RCC_GetPCLK1Freq>
 8010a92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010a94:	e033      	b.n	8010afe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010a96:	f7fb fbef 	bl	800c278 <HAL_RCC_GetPCLK2Freq>
 8010a9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010a9c:	e02f      	b.n	8010afe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f7fd fb9e 	bl	800e1e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010aac:	e027      	b.n	8010afe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010aae:	f107 0318 	add.w	r3, r7, #24
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7fd fcea 	bl	800e48c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010ab8:	69fb      	ldr	r3, [r7, #28]
 8010aba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010abc:	e01f      	b.n	8010afe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010abe:	4b2d      	ldr	r3, [pc, #180]	; (8010b74 <UART_SetConfig+0x934>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	f003 0320 	and.w	r3, r3, #32
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d009      	beq.n	8010ade <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010aca:	4b2a      	ldr	r3, [pc, #168]	; (8010b74 <UART_SetConfig+0x934>)
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	08db      	lsrs	r3, r3, #3
 8010ad0:	f003 0303 	and.w	r3, r3, #3
 8010ad4:	4a24      	ldr	r2, [pc, #144]	; (8010b68 <UART_SetConfig+0x928>)
 8010ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8010ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010adc:	e00f      	b.n	8010afe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010ade:	4b22      	ldr	r3, [pc, #136]	; (8010b68 <UART_SetConfig+0x928>)
 8010ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ae2:	e00c      	b.n	8010afe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010ae4:	4b21      	ldr	r3, [pc, #132]	; (8010b6c <UART_SetConfig+0x92c>)
 8010ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ae8:	e009      	b.n	8010afe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010af0:	e005      	b.n	8010afe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010af2:	2300      	movs	r3, #0
 8010af4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010af6:	2301      	movs	r3, #1
 8010af8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010afc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	f000 80e7 	beq.w	8010cd4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b0a:	4a19      	ldr	r2, [pc, #100]	; (8010b70 <UART_SetConfig+0x930>)
 8010b0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b10:	461a      	mov	r2, r3
 8010b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b14:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b18:	005a      	lsls	r2, r3, #1
 8010b1a:	697b      	ldr	r3, [r7, #20]
 8010b1c:	685b      	ldr	r3, [r3, #4]
 8010b1e:	085b      	lsrs	r3, r3, #1
 8010b20:	441a      	add	r2, r3
 8010b22:	697b      	ldr	r3, [r7, #20]
 8010b24:	685b      	ldr	r3, [r3, #4]
 8010b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b2a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b2e:	2b0f      	cmp	r3, #15
 8010b30:	d916      	bls.n	8010b60 <UART_SetConfig+0x920>
 8010b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b38:	d212      	bcs.n	8010b60 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b3c:	b29b      	uxth	r3, r3
 8010b3e:	f023 030f 	bic.w	r3, r3, #15
 8010b42:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b46:	085b      	lsrs	r3, r3, #1
 8010b48:	b29b      	uxth	r3, r3
 8010b4a:	f003 0307 	and.w	r3, r3, #7
 8010b4e:	b29a      	uxth	r2, r3
 8010b50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010b52:	4313      	orrs	r3, r2
 8010b54:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010b5c:	60da      	str	r2, [r3, #12]
 8010b5e:	e0b9      	b.n	8010cd4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010b60:	2301      	movs	r3, #1
 8010b62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010b66:	e0b5      	b.n	8010cd4 <UART_SetConfig+0xa94>
 8010b68:	03d09000 	.word	0x03d09000
 8010b6c:	003d0900 	.word	0x003d0900
 8010b70:	0801263c 	.word	0x0801263c
 8010b74:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8010b78:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010b7c:	2b20      	cmp	r3, #32
 8010b7e:	dc49      	bgt.n	8010c14 <UART_SetConfig+0x9d4>
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	db7c      	blt.n	8010c7e <UART_SetConfig+0xa3e>
 8010b84:	2b20      	cmp	r3, #32
 8010b86:	d87a      	bhi.n	8010c7e <UART_SetConfig+0xa3e>
 8010b88:	a201      	add	r2, pc, #4	; (adr r2, 8010b90 <UART_SetConfig+0x950>)
 8010b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b8e:	bf00      	nop
 8010b90:	08010c1b 	.word	0x08010c1b
 8010b94:	08010c23 	.word	0x08010c23
 8010b98:	08010c7f 	.word	0x08010c7f
 8010b9c:	08010c7f 	.word	0x08010c7f
 8010ba0:	08010c2b 	.word	0x08010c2b
 8010ba4:	08010c7f 	.word	0x08010c7f
 8010ba8:	08010c7f 	.word	0x08010c7f
 8010bac:	08010c7f 	.word	0x08010c7f
 8010bb0:	08010c3b 	.word	0x08010c3b
 8010bb4:	08010c7f 	.word	0x08010c7f
 8010bb8:	08010c7f 	.word	0x08010c7f
 8010bbc:	08010c7f 	.word	0x08010c7f
 8010bc0:	08010c7f 	.word	0x08010c7f
 8010bc4:	08010c7f 	.word	0x08010c7f
 8010bc8:	08010c7f 	.word	0x08010c7f
 8010bcc:	08010c7f 	.word	0x08010c7f
 8010bd0:	08010c4b 	.word	0x08010c4b
 8010bd4:	08010c7f 	.word	0x08010c7f
 8010bd8:	08010c7f 	.word	0x08010c7f
 8010bdc:	08010c7f 	.word	0x08010c7f
 8010be0:	08010c7f 	.word	0x08010c7f
 8010be4:	08010c7f 	.word	0x08010c7f
 8010be8:	08010c7f 	.word	0x08010c7f
 8010bec:	08010c7f 	.word	0x08010c7f
 8010bf0:	08010c7f 	.word	0x08010c7f
 8010bf4:	08010c7f 	.word	0x08010c7f
 8010bf8:	08010c7f 	.word	0x08010c7f
 8010bfc:	08010c7f 	.word	0x08010c7f
 8010c00:	08010c7f 	.word	0x08010c7f
 8010c04:	08010c7f 	.word	0x08010c7f
 8010c08:	08010c7f 	.word	0x08010c7f
 8010c0c:	08010c7f 	.word	0x08010c7f
 8010c10:	08010c71 	.word	0x08010c71
 8010c14:	2b40      	cmp	r3, #64	; 0x40
 8010c16:	d02e      	beq.n	8010c76 <UART_SetConfig+0xa36>
 8010c18:	e031      	b.n	8010c7e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010c1a:	f7fb fb17 	bl	800c24c <HAL_RCC_GetPCLK1Freq>
 8010c1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010c20:	e033      	b.n	8010c8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010c22:	f7fb fb29 	bl	800c278 <HAL_RCC_GetPCLK2Freq>
 8010c26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010c28:	e02f      	b.n	8010c8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f7fd fad8 	bl	800e1e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c38:	e027      	b.n	8010c8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010c3a:	f107 0318 	add.w	r3, r7, #24
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f7fd fc24 	bl	800e48c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010c44:	69fb      	ldr	r3, [r7, #28]
 8010c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c48:	e01f      	b.n	8010c8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010c4a:	4b2d      	ldr	r3, [pc, #180]	; (8010d00 <UART_SetConfig+0xac0>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	f003 0320 	and.w	r3, r3, #32
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d009      	beq.n	8010c6a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010c56:	4b2a      	ldr	r3, [pc, #168]	; (8010d00 <UART_SetConfig+0xac0>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	08db      	lsrs	r3, r3, #3
 8010c5c:	f003 0303 	and.w	r3, r3, #3
 8010c60:	4a28      	ldr	r2, [pc, #160]	; (8010d04 <UART_SetConfig+0xac4>)
 8010c62:	fa22 f303 	lsr.w	r3, r2, r3
 8010c66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010c68:	e00f      	b.n	8010c8a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8010c6a:	4b26      	ldr	r3, [pc, #152]	; (8010d04 <UART_SetConfig+0xac4>)
 8010c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c6e:	e00c      	b.n	8010c8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010c70:	4b25      	ldr	r3, [pc, #148]	; (8010d08 <UART_SetConfig+0xac8>)
 8010c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c74:	e009      	b.n	8010c8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c7c:	e005      	b.n	8010c8a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010c82:	2301      	movs	r3, #1
 8010c84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010c88:	bf00      	nop
    }

    if (pclk != 0U)
 8010c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d021      	beq.n	8010cd4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010c90:	697b      	ldr	r3, [r7, #20]
 8010c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c94:	4a1d      	ldr	r2, [pc, #116]	; (8010d0c <UART_SetConfig+0xacc>)
 8010c96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8010ca2:	697b      	ldr	r3, [r7, #20]
 8010ca4:	685b      	ldr	r3, [r3, #4]
 8010ca6:	085b      	lsrs	r3, r3, #1
 8010ca8:	441a      	add	r2, r3
 8010caa:	697b      	ldr	r3, [r7, #20]
 8010cac:	685b      	ldr	r3, [r3, #4]
 8010cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8010cb2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cb6:	2b0f      	cmp	r3, #15
 8010cb8:	d909      	bls.n	8010cce <UART_SetConfig+0xa8e>
 8010cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010cc0:	d205      	bcs.n	8010cce <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc4:	b29a      	uxth	r2, r3
 8010cc6:	697b      	ldr	r3, [r7, #20]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	60da      	str	r2, [r3, #12]
 8010ccc:	e002      	b.n	8010cd4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010cce:	2301      	movs	r3, #1
 8010cd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010cd4:	697b      	ldr	r3, [r7, #20]
 8010cd6:	2201      	movs	r2, #1
 8010cd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010cdc:	697b      	ldr	r3, [r7, #20]
 8010cde:	2201      	movs	r2, #1
 8010ce0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010ce4:	697b      	ldr	r3, [r7, #20]
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8010cea:	697b      	ldr	r3, [r7, #20]
 8010cec:	2200      	movs	r2, #0
 8010cee:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8010cf0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	3748      	adds	r7, #72	; 0x48
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010cfe:	bf00      	nop
 8010d00:	58024400 	.word	0x58024400
 8010d04:	03d09000 	.word	0x03d09000
 8010d08:	003d0900 	.word	0x003d0900
 8010d0c:	0801263c 	.word	0x0801263c

08010d10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010d10:	b480      	push	{r7}
 8010d12:	b083      	sub	sp, #12
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d1c:	f003 0301 	and.w	r3, r3, #1
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d00a      	beq.n	8010d3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	685b      	ldr	r3, [r3, #4]
 8010d2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	430a      	orrs	r2, r1
 8010d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d3e:	f003 0302 	and.w	r3, r3, #2
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d00a      	beq.n	8010d5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	685b      	ldr	r3, [r3, #4]
 8010d4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	430a      	orrs	r2, r1
 8010d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d60:	f003 0304 	and.w	r3, r3, #4
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d00a      	beq.n	8010d7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	685b      	ldr	r3, [r3, #4]
 8010d6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	430a      	orrs	r2, r1
 8010d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d82:	f003 0308 	and.w	r3, r3, #8
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d00a      	beq.n	8010da0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	685b      	ldr	r3, [r3, #4]
 8010d90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	430a      	orrs	r2, r1
 8010d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010da4:	f003 0310 	and.w	r3, r3, #16
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d00a      	beq.n	8010dc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	689b      	ldr	r3, [r3, #8]
 8010db2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	430a      	orrs	r2, r1
 8010dc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dc6:	f003 0320 	and.w	r3, r3, #32
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d00a      	beq.n	8010de4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	689b      	ldr	r3, [r3, #8]
 8010dd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	430a      	orrs	r2, r1
 8010de2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d01a      	beq.n	8010e26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	430a      	orrs	r2, r1
 8010e04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010e0e:	d10a      	bne.n	8010e26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	685b      	ldr	r3, [r3, #4]
 8010e16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	430a      	orrs	r2, r1
 8010e24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d00a      	beq.n	8010e48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	685b      	ldr	r3, [r3, #4]
 8010e38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	430a      	orrs	r2, r1
 8010e46:	605a      	str	r2, [r3, #4]
  }
}
 8010e48:	bf00      	nop
 8010e4a:	370c      	adds	r7, #12
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e52:	4770      	bx	lr

08010e54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b098      	sub	sp, #96	; 0x60
 8010e58:	af02      	add	r7, sp, #8
 8010e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2200      	movs	r2, #0
 8010e60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010e64:	f7f3 ff96 	bl	8004d94 <HAL_GetTick>
 8010e68:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	f003 0308 	and.w	r3, r3, #8
 8010e74:	2b08      	cmp	r3, #8
 8010e76:	d12f      	bne.n	8010ed8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010e78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010e7c:	9300      	str	r3, [sp, #0]
 8010e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e80:	2200      	movs	r2, #0
 8010e82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010e86:	6878      	ldr	r0, [r7, #4]
 8010e88:	f000 f88e 	bl	8010fa8 <UART_WaitOnFlagUntilTimeout>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d022      	beq.n	8010ed8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e9a:	e853 3f00 	ldrex	r3, [r3]
 8010e9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ea6:	653b      	str	r3, [r7, #80]	; 0x50
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	461a      	mov	r2, r3
 8010eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8010eb2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010eb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010eb8:	e841 2300 	strex	r3, r2, [r1]
 8010ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d1e6      	bne.n	8010e92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	2220      	movs	r2, #32
 8010ec8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2200      	movs	r2, #0
 8010ed0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010ed4:	2303      	movs	r3, #3
 8010ed6:	e063      	b.n	8010fa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	f003 0304 	and.w	r3, r3, #4
 8010ee2:	2b04      	cmp	r3, #4
 8010ee4:	d149      	bne.n	8010f7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ee6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010eea:	9300      	str	r3, [sp, #0]
 8010eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010eee:	2200      	movs	r2, #0
 8010ef0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010ef4:	6878      	ldr	r0, [r7, #4]
 8010ef6:	f000 f857 	bl	8010fa8 <UART_WaitOnFlagUntilTimeout>
 8010efa:	4603      	mov	r3, r0
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d03c      	beq.n	8010f7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f08:	e853 3f00 	ldrex	r3, [r3]
 8010f0c:	623b      	str	r3, [r7, #32]
   return(result);
 8010f0e:	6a3b      	ldr	r3, [r7, #32]
 8010f10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010f14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	461a      	mov	r2, r3
 8010f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f1e:	633b      	str	r3, [r7, #48]	; 0x30
 8010f20:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f26:	e841 2300 	strex	r3, r2, [r1]
 8010f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d1e6      	bne.n	8010f00 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	3308      	adds	r3, #8
 8010f38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f3a:	693b      	ldr	r3, [r7, #16]
 8010f3c:	e853 3f00 	ldrex	r3, [r3]
 8010f40:	60fb      	str	r3, [r7, #12]
   return(result);
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	f023 0301 	bic.w	r3, r3, #1
 8010f48:	64bb      	str	r3, [r7, #72]	; 0x48
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	3308      	adds	r3, #8
 8010f50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f52:	61fa      	str	r2, [r7, #28]
 8010f54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f56:	69b9      	ldr	r1, [r7, #24]
 8010f58:	69fa      	ldr	r2, [r7, #28]
 8010f5a:	e841 2300 	strex	r3, r2, [r1]
 8010f5e:	617b      	str	r3, [r7, #20]
   return(result);
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d1e5      	bne.n	8010f32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2220      	movs	r2, #32
 8010f6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2200      	movs	r2, #0
 8010f72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010f76:	2303      	movs	r3, #3
 8010f78:	e012      	b.n	8010fa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	2220      	movs	r2, #32
 8010f7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	2220      	movs	r2, #32
 8010f86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2200      	movs	r2, #0
 8010f94:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	2200      	movs	r2, #0
 8010f9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010f9e:	2300      	movs	r3, #0
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	3758      	adds	r7, #88	; 0x58
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}

08010fa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b084      	sub	sp, #16
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	60f8      	str	r0, [r7, #12]
 8010fb0:	60b9      	str	r1, [r7, #8]
 8010fb2:	603b      	str	r3, [r7, #0]
 8010fb4:	4613      	mov	r3, r2
 8010fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010fb8:	e049      	b.n	801104e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010fba:	69bb      	ldr	r3, [r7, #24]
 8010fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fc0:	d045      	beq.n	801104e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010fc2:	f7f3 fee7 	bl	8004d94 <HAL_GetTick>
 8010fc6:	4602      	mov	r2, r0
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	1ad3      	subs	r3, r2, r3
 8010fcc:	69ba      	ldr	r2, [r7, #24]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d302      	bcc.n	8010fd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8010fd2:	69bb      	ldr	r3, [r7, #24]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d101      	bne.n	8010fdc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010fd8:	2303      	movs	r3, #3
 8010fda:	e048      	b.n	801106e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	f003 0304 	and.w	r3, r3, #4
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d031      	beq.n	801104e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	69db      	ldr	r3, [r3, #28]
 8010ff0:	f003 0308 	and.w	r3, r3, #8
 8010ff4:	2b08      	cmp	r3, #8
 8010ff6:	d110      	bne.n	801101a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	2208      	movs	r2, #8
 8010ffe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011000:	68f8      	ldr	r0, [r7, #12]
 8011002:	f000 f839 	bl	8011078 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	2208      	movs	r2, #8
 801100a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	2200      	movs	r2, #0
 8011012:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011016:	2301      	movs	r3, #1
 8011018:	e029      	b.n	801106e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	69db      	ldr	r3, [r3, #28]
 8011020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011028:	d111      	bne.n	801104e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011032:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011034:	68f8      	ldr	r0, [r7, #12]
 8011036:	f000 f81f 	bl	8011078 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	2220      	movs	r2, #32
 801103e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	2200      	movs	r2, #0
 8011046:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801104a:	2303      	movs	r3, #3
 801104c:	e00f      	b.n	801106e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	69da      	ldr	r2, [r3, #28]
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	4013      	ands	r3, r2
 8011058:	68ba      	ldr	r2, [r7, #8]
 801105a:	429a      	cmp	r2, r3
 801105c:	bf0c      	ite	eq
 801105e:	2301      	moveq	r3, #1
 8011060:	2300      	movne	r3, #0
 8011062:	b2db      	uxtb	r3, r3
 8011064:	461a      	mov	r2, r3
 8011066:	79fb      	ldrb	r3, [r7, #7]
 8011068:	429a      	cmp	r2, r3
 801106a:	d0a6      	beq.n	8010fba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801106c:	2300      	movs	r3, #0
}
 801106e:	4618      	mov	r0, r3
 8011070:	3710      	adds	r7, #16
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
	...

08011078 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011078:	b480      	push	{r7}
 801107a:	b095      	sub	sp, #84	; 0x54
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011088:	e853 3f00 	ldrex	r3, [r3]
 801108c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801108e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011090:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011094:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	461a      	mov	r2, r3
 801109c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801109e:	643b      	str	r3, [r7, #64]	; 0x40
 80110a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80110a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80110a6:	e841 2300 	strex	r3, r2, [r1]
 80110aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80110ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d1e6      	bne.n	8011080 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	3308      	adds	r3, #8
 80110b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110ba:	6a3b      	ldr	r3, [r7, #32]
 80110bc:	e853 3f00 	ldrex	r3, [r3]
 80110c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80110c2:	69fa      	ldr	r2, [r7, #28]
 80110c4:	4b1e      	ldr	r3, [pc, #120]	; (8011140 <UART_EndRxTransfer+0xc8>)
 80110c6:	4013      	ands	r3, r2
 80110c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	3308      	adds	r3, #8
 80110d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80110d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80110d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80110d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110da:	e841 2300 	strex	r3, r2, [r1]
 80110de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80110e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d1e5      	bne.n	80110b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110ea:	2b01      	cmp	r3, #1
 80110ec:	d118      	bne.n	8011120 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	e853 3f00 	ldrex	r3, [r3]
 80110fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	f023 0310 	bic.w	r3, r3, #16
 8011102:	647b      	str	r3, [r7, #68]	; 0x44
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	461a      	mov	r2, r3
 801110a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801110c:	61bb      	str	r3, [r7, #24]
 801110e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011110:	6979      	ldr	r1, [r7, #20]
 8011112:	69ba      	ldr	r2, [r7, #24]
 8011114:	e841 2300 	strex	r3, r2, [r1]
 8011118:	613b      	str	r3, [r7, #16]
   return(result);
 801111a:	693b      	ldr	r3, [r7, #16]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d1e6      	bne.n	80110ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2220      	movs	r2, #32
 8011124:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2200      	movs	r2, #0
 801112c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	2200      	movs	r2, #0
 8011132:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011134:	bf00      	nop
 8011136:	3754      	adds	r7, #84	; 0x54
 8011138:	46bd      	mov	sp, r7
 801113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113e:	4770      	bx	lr
 8011140:	effffffe 	.word	0xeffffffe

08011144 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011144:	b480      	push	{r7}
 8011146:	b085      	sub	sp, #20
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011152:	2b01      	cmp	r3, #1
 8011154:	d101      	bne.n	801115a <HAL_UARTEx_DisableFifoMode+0x16>
 8011156:	2302      	movs	r3, #2
 8011158:	e027      	b.n	80111aa <HAL_UARTEx_DisableFifoMode+0x66>
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2201      	movs	r2, #1
 801115e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2224      	movs	r2, #36	; 0x24
 8011166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	681a      	ldr	r2, [r3, #0]
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	f022 0201 	bic.w	r2, r2, #1
 8011180:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011188:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	2200      	movs	r2, #0
 801118e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	68fa      	ldr	r2, [r7, #12]
 8011196:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2220      	movs	r2, #32
 801119c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2200      	movs	r2, #0
 80111a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80111a8:	2300      	movs	r3, #0
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3714      	adds	r7, #20
 80111ae:	46bd      	mov	sp, r7
 80111b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b4:	4770      	bx	lr

080111b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80111b6:	b580      	push	{r7, lr}
 80111b8:	b084      	sub	sp, #16
 80111ba:	af00      	add	r7, sp, #0
 80111bc:	6078      	str	r0, [r7, #4]
 80111be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80111c6:	2b01      	cmp	r3, #1
 80111c8:	d101      	bne.n	80111ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80111ca:	2302      	movs	r3, #2
 80111cc:	e02d      	b.n	801122a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	2201      	movs	r2, #1
 80111d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	2224      	movs	r2, #36	; 0x24
 80111da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	681a      	ldr	r2, [r3, #0]
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	f022 0201 	bic.w	r2, r2, #1
 80111f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	689b      	ldr	r3, [r3, #8]
 80111fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	683a      	ldr	r2, [r7, #0]
 8011206:	430a      	orrs	r2, r1
 8011208:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f000 f850 	bl	80112b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	68fa      	ldr	r2, [r7, #12]
 8011216:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2220      	movs	r2, #32
 801121c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2200      	movs	r2, #0
 8011224:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011228:	2300      	movs	r3, #0
}
 801122a:	4618      	mov	r0, r3
 801122c:	3710      	adds	r7, #16
 801122e:	46bd      	mov	sp, r7
 8011230:	bd80      	pop	{r7, pc}

08011232 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011232:	b580      	push	{r7, lr}
 8011234:	b084      	sub	sp, #16
 8011236:	af00      	add	r7, sp, #0
 8011238:	6078      	str	r0, [r7, #4]
 801123a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011242:	2b01      	cmp	r3, #1
 8011244:	d101      	bne.n	801124a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011246:	2302      	movs	r3, #2
 8011248:	e02d      	b.n	80112a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	2201      	movs	r2, #1
 801124e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	2224      	movs	r2, #36	; 0x24
 8011256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	681a      	ldr	r2, [r3, #0]
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	f022 0201 	bic.w	r2, r2, #1
 8011270:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	689b      	ldr	r3, [r3, #8]
 8011278:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	683a      	ldr	r2, [r7, #0]
 8011282:	430a      	orrs	r2, r1
 8011284:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011286:	6878      	ldr	r0, [r7, #4]
 8011288:	f000 f812 	bl	80112b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	68fa      	ldr	r2, [r7, #12]
 8011292:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	2220      	movs	r2, #32
 8011298:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	2200      	movs	r2, #0
 80112a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80112a4:	2300      	movs	r3, #0
}
 80112a6:	4618      	mov	r0, r3
 80112a8:	3710      	adds	r7, #16
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd80      	pop	{r7, pc}
	...

080112b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80112b0:	b480      	push	{r7}
 80112b2:	b085      	sub	sp, #20
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d108      	bne.n	80112d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	2201      	movs	r2, #1
 80112c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	2201      	movs	r2, #1
 80112cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80112d0:	e031      	b.n	8011336 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80112d2:	2310      	movs	r3, #16
 80112d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80112d6:	2310      	movs	r3, #16
 80112d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	689b      	ldr	r3, [r3, #8]
 80112e0:	0e5b      	lsrs	r3, r3, #25
 80112e2:	b2db      	uxtb	r3, r3
 80112e4:	f003 0307 	and.w	r3, r3, #7
 80112e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	689b      	ldr	r3, [r3, #8]
 80112f0:	0f5b      	lsrs	r3, r3, #29
 80112f2:	b2db      	uxtb	r3, r3
 80112f4:	f003 0307 	and.w	r3, r3, #7
 80112f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80112fa:	7bbb      	ldrb	r3, [r7, #14]
 80112fc:	7b3a      	ldrb	r2, [r7, #12]
 80112fe:	4911      	ldr	r1, [pc, #68]	; (8011344 <UARTEx_SetNbDataToProcess+0x94>)
 8011300:	5c8a      	ldrb	r2, [r1, r2]
 8011302:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011306:	7b3a      	ldrb	r2, [r7, #12]
 8011308:	490f      	ldr	r1, [pc, #60]	; (8011348 <UARTEx_SetNbDataToProcess+0x98>)
 801130a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801130c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011310:	b29a      	uxth	r2, r3
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011318:	7bfb      	ldrb	r3, [r7, #15]
 801131a:	7b7a      	ldrb	r2, [r7, #13]
 801131c:	4909      	ldr	r1, [pc, #36]	; (8011344 <UARTEx_SetNbDataToProcess+0x94>)
 801131e:	5c8a      	ldrb	r2, [r1, r2]
 8011320:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011324:	7b7a      	ldrb	r2, [r7, #13]
 8011326:	4908      	ldr	r1, [pc, #32]	; (8011348 <UARTEx_SetNbDataToProcess+0x98>)
 8011328:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801132a:	fb93 f3f2 	sdiv	r3, r3, r2
 801132e:	b29a      	uxth	r2, r3
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011336:	bf00      	nop
 8011338:	3714      	adds	r7, #20
 801133a:	46bd      	mov	sp, r7
 801133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011340:	4770      	bx	lr
 8011342:	bf00      	nop
 8011344:	08012654 	.word	0x08012654
 8011348:	0801265c 	.word	0x0801265c

0801134c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 801134c:	b480      	push	{r7}
 801134e:	b083      	sub	sp, #12
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
 8011354:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d121      	bne.n	80113a2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	681a      	ldr	r2, [r3, #0]
 8011362:	4b27      	ldr	r3, [pc, #156]	; (8011400 <FMC_SDRAM_Init+0xb4>)
 8011364:	4013      	ands	r3, r2
 8011366:	683a      	ldr	r2, [r7, #0]
 8011368:	6851      	ldr	r1, [r2, #4]
 801136a:	683a      	ldr	r2, [r7, #0]
 801136c:	6892      	ldr	r2, [r2, #8]
 801136e:	4311      	orrs	r1, r2
 8011370:	683a      	ldr	r2, [r7, #0]
 8011372:	68d2      	ldr	r2, [r2, #12]
 8011374:	4311      	orrs	r1, r2
 8011376:	683a      	ldr	r2, [r7, #0]
 8011378:	6912      	ldr	r2, [r2, #16]
 801137a:	4311      	orrs	r1, r2
 801137c:	683a      	ldr	r2, [r7, #0]
 801137e:	6952      	ldr	r2, [r2, #20]
 8011380:	4311      	orrs	r1, r2
 8011382:	683a      	ldr	r2, [r7, #0]
 8011384:	6992      	ldr	r2, [r2, #24]
 8011386:	4311      	orrs	r1, r2
 8011388:	683a      	ldr	r2, [r7, #0]
 801138a:	69d2      	ldr	r2, [r2, #28]
 801138c:	4311      	orrs	r1, r2
 801138e:	683a      	ldr	r2, [r7, #0]
 8011390:	6a12      	ldr	r2, [r2, #32]
 8011392:	4311      	orrs	r1, r2
 8011394:	683a      	ldr	r2, [r7, #0]
 8011396:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011398:	430a      	orrs	r2, r1
 801139a:	431a      	orrs	r2, r3
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	601a      	str	r2, [r3, #0]
 80113a0:	e026      	b.n	80113f0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80113aa:	683b      	ldr	r3, [r7, #0]
 80113ac:	69d9      	ldr	r1, [r3, #28]
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	6a1b      	ldr	r3, [r3, #32]
 80113b2:	4319      	orrs	r1, r3
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113b8:	430b      	orrs	r3, r1
 80113ba:	431a      	orrs	r2, r3
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	685a      	ldr	r2, [r3, #4]
 80113c4:	4b0e      	ldr	r3, [pc, #56]	; (8011400 <FMC_SDRAM_Init+0xb4>)
 80113c6:	4013      	ands	r3, r2
 80113c8:	683a      	ldr	r2, [r7, #0]
 80113ca:	6851      	ldr	r1, [r2, #4]
 80113cc:	683a      	ldr	r2, [r7, #0]
 80113ce:	6892      	ldr	r2, [r2, #8]
 80113d0:	4311      	orrs	r1, r2
 80113d2:	683a      	ldr	r2, [r7, #0]
 80113d4:	68d2      	ldr	r2, [r2, #12]
 80113d6:	4311      	orrs	r1, r2
 80113d8:	683a      	ldr	r2, [r7, #0]
 80113da:	6912      	ldr	r2, [r2, #16]
 80113dc:	4311      	orrs	r1, r2
 80113de:	683a      	ldr	r2, [r7, #0]
 80113e0:	6952      	ldr	r2, [r2, #20]
 80113e2:	4311      	orrs	r1, r2
 80113e4:	683a      	ldr	r2, [r7, #0]
 80113e6:	6992      	ldr	r2, [r2, #24]
 80113e8:	430a      	orrs	r2, r1
 80113ea:	431a      	orrs	r2, r3
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80113f0:	2300      	movs	r3, #0
}
 80113f2:	4618      	mov	r0, r3
 80113f4:	370c      	adds	r7, #12
 80113f6:	46bd      	mov	sp, r7
 80113f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fc:	4770      	bx	lr
 80113fe:	bf00      	nop
 8011400:	ffff8000 	.word	0xffff8000

08011404 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8011404:	b480      	push	{r7}
 8011406:	b085      	sub	sp, #20
 8011408:	af00      	add	r7, sp, #0
 801140a:	60f8      	str	r0, [r7, #12]
 801140c:	60b9      	str	r1, [r7, #8]
 801140e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d128      	bne.n	8011468 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	689b      	ldr	r3, [r3, #8]
 801141a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 801141e:	68bb      	ldr	r3, [r7, #8]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	1e59      	subs	r1, r3, #1
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	685b      	ldr	r3, [r3, #4]
 8011428:	3b01      	subs	r3, #1
 801142a:	011b      	lsls	r3, r3, #4
 801142c:	4319      	orrs	r1, r3
 801142e:	68bb      	ldr	r3, [r7, #8]
 8011430:	689b      	ldr	r3, [r3, #8]
 8011432:	3b01      	subs	r3, #1
 8011434:	021b      	lsls	r3, r3, #8
 8011436:	4319      	orrs	r1, r3
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	68db      	ldr	r3, [r3, #12]
 801143c:	3b01      	subs	r3, #1
 801143e:	031b      	lsls	r3, r3, #12
 8011440:	4319      	orrs	r1, r3
 8011442:	68bb      	ldr	r3, [r7, #8]
 8011444:	691b      	ldr	r3, [r3, #16]
 8011446:	3b01      	subs	r3, #1
 8011448:	041b      	lsls	r3, r3, #16
 801144a:	4319      	orrs	r1, r3
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	695b      	ldr	r3, [r3, #20]
 8011450:	3b01      	subs	r3, #1
 8011452:	051b      	lsls	r3, r3, #20
 8011454:	4319      	orrs	r1, r3
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	699b      	ldr	r3, [r3, #24]
 801145a:	3b01      	subs	r3, #1
 801145c:	061b      	lsls	r3, r3, #24
 801145e:	430b      	orrs	r3, r1
 8011460:	431a      	orrs	r2, r3
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	609a      	str	r2, [r3, #8]
 8011466:	e02d      	b.n	80114c4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	689a      	ldr	r2, [r3, #8]
 801146c:	4b19      	ldr	r3, [pc, #100]	; (80114d4 <FMC_SDRAM_Timing_Init+0xd0>)
 801146e:	4013      	ands	r3, r2
 8011470:	68ba      	ldr	r2, [r7, #8]
 8011472:	68d2      	ldr	r2, [r2, #12]
 8011474:	3a01      	subs	r2, #1
 8011476:	0311      	lsls	r1, r2, #12
 8011478:	68ba      	ldr	r2, [r7, #8]
 801147a:	6952      	ldr	r2, [r2, #20]
 801147c:	3a01      	subs	r2, #1
 801147e:	0512      	lsls	r2, r2, #20
 8011480:	430a      	orrs	r2, r1
 8011482:	431a      	orrs	r2, r3
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	68db      	ldr	r3, [r3, #12]
 801148c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	1e59      	subs	r1, r3, #1
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	685b      	ldr	r3, [r3, #4]
 801149a:	3b01      	subs	r3, #1
 801149c:	011b      	lsls	r3, r3, #4
 801149e:	4319      	orrs	r1, r3
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	689b      	ldr	r3, [r3, #8]
 80114a4:	3b01      	subs	r3, #1
 80114a6:	021b      	lsls	r3, r3, #8
 80114a8:	4319      	orrs	r1, r3
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	691b      	ldr	r3, [r3, #16]
 80114ae:	3b01      	subs	r3, #1
 80114b0:	041b      	lsls	r3, r3, #16
 80114b2:	4319      	orrs	r1, r3
 80114b4:	68bb      	ldr	r3, [r7, #8]
 80114b6:	699b      	ldr	r3, [r3, #24]
 80114b8:	3b01      	subs	r3, #1
 80114ba:	061b      	lsls	r3, r3, #24
 80114bc:	430b      	orrs	r3, r1
 80114be:	431a      	orrs	r2, r3
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80114c4:	2300      	movs	r3, #0
}
 80114c6:	4618      	mov	r0, r3
 80114c8:	3714      	adds	r7, #20
 80114ca:	46bd      	mov	sp, r7
 80114cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d0:	4770      	bx	lr
 80114d2:	bf00      	nop
 80114d4:	ff0f0fff 	.word	0xff0f0fff

080114d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80114d8:	b084      	sub	sp, #16
 80114da:	b580      	push	{r7, lr}
 80114dc:	b084      	sub	sp, #16
 80114de:	af00      	add	r7, sp, #0
 80114e0:	6078      	str	r0, [r7, #4]
 80114e2:	f107 001c 	add.w	r0, r7, #28
 80114e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80114ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114ec:	2b01      	cmp	r3, #1
 80114ee:	d120      	bne.n	8011532 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	68da      	ldr	r2, [r3, #12]
 8011500:	4b2a      	ldr	r3, [pc, #168]	; (80115ac <USB_CoreInit+0xd4>)
 8011502:	4013      	ands	r3, r2
 8011504:	687a      	ldr	r2, [r7, #4]
 8011506:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	68db      	ldr	r3, [r3, #12]
 801150c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011516:	2b01      	cmp	r3, #1
 8011518:	d105      	bne.n	8011526 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	68db      	ldr	r3, [r3, #12]
 801151e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f000 faac 	bl	8011a84 <USB_CoreReset>
 801152c:	4603      	mov	r3, r0
 801152e:	73fb      	strb	r3, [r7, #15]
 8011530:	e01a      	b.n	8011568 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	68db      	ldr	r3, [r3, #12]
 8011536:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801153e:	6878      	ldr	r0, [r7, #4]
 8011540:	f000 faa0 	bl	8011a84 <USB_CoreReset>
 8011544:	4603      	mov	r3, r0
 8011546:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801154a:	2b00      	cmp	r3, #0
 801154c:	d106      	bne.n	801155c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011552:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	639a      	str	r2, [r3, #56]	; 0x38
 801155a:	e005      	b.n	8011568 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011560:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801156a:	2b01      	cmp	r3, #1
 801156c:	d116      	bne.n	801159c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011572:	b29a      	uxth	r2, r3
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801157c:	4b0c      	ldr	r3, [pc, #48]	; (80115b0 <USB_CoreInit+0xd8>)
 801157e:	4313      	orrs	r3, r2
 8011580:	687a      	ldr	r2, [r7, #4]
 8011582:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	689b      	ldr	r3, [r3, #8]
 8011588:	f043 0206 	orr.w	r2, r3, #6
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	689b      	ldr	r3, [r3, #8]
 8011594:	f043 0220 	orr.w	r2, r3, #32
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801159c:	7bfb      	ldrb	r3, [r7, #15]
}
 801159e:	4618      	mov	r0, r3
 80115a0:	3710      	adds	r7, #16
 80115a2:	46bd      	mov	sp, r7
 80115a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80115a8:	b004      	add	sp, #16
 80115aa:	4770      	bx	lr
 80115ac:	ffbdffbf 	.word	0xffbdffbf
 80115b0:	03ee0000 	.word	0x03ee0000

080115b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80115b4:	b480      	push	{r7}
 80115b6:	b083      	sub	sp, #12
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	689b      	ldr	r3, [r3, #8]
 80115c0:	f023 0201 	bic.w	r2, r3, #1
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80115c8:	2300      	movs	r3, #0
}
 80115ca:	4618      	mov	r0, r3
 80115cc:	370c      	adds	r7, #12
 80115ce:	46bd      	mov	sp, r7
 80115d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d4:	4770      	bx	lr

080115d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80115d6:	b580      	push	{r7, lr}
 80115d8:	b084      	sub	sp, #16
 80115da:	af00      	add	r7, sp, #0
 80115dc:	6078      	str	r0, [r7, #4]
 80115de:	460b      	mov	r3, r1
 80115e0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80115e2:	2300      	movs	r3, #0
 80115e4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	68db      	ldr	r3, [r3, #12]
 80115ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80115f2:	78fb      	ldrb	r3, [r7, #3]
 80115f4:	2b01      	cmp	r3, #1
 80115f6:	d115      	bne.n	8011624 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	68db      	ldr	r3, [r3, #12]
 80115fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8011604:	2001      	movs	r0, #1
 8011606:	f7f3 fbd1 	bl	8004dac <HAL_Delay>
      ms++;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	3301      	adds	r3, #1
 801160e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8011610:	6878      	ldr	r0, [r7, #4]
 8011612:	f000 fa29 	bl	8011a68 <USB_GetMode>
 8011616:	4603      	mov	r3, r0
 8011618:	2b01      	cmp	r3, #1
 801161a:	d01e      	beq.n	801165a <USB_SetCurrentMode+0x84>
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	2b31      	cmp	r3, #49	; 0x31
 8011620:	d9f0      	bls.n	8011604 <USB_SetCurrentMode+0x2e>
 8011622:	e01a      	b.n	801165a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011624:	78fb      	ldrb	r3, [r7, #3]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d115      	bne.n	8011656 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	68db      	ldr	r3, [r3, #12]
 801162e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8011636:	2001      	movs	r0, #1
 8011638:	f7f3 fbb8 	bl	8004dac <HAL_Delay>
      ms++;
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	3301      	adds	r3, #1
 8011640:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8011642:	6878      	ldr	r0, [r7, #4]
 8011644:	f000 fa10 	bl	8011a68 <USB_GetMode>
 8011648:	4603      	mov	r3, r0
 801164a:	2b00      	cmp	r3, #0
 801164c:	d005      	beq.n	801165a <USB_SetCurrentMode+0x84>
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	2b31      	cmp	r3, #49	; 0x31
 8011652:	d9f0      	bls.n	8011636 <USB_SetCurrentMode+0x60>
 8011654:	e001      	b.n	801165a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011656:	2301      	movs	r3, #1
 8011658:	e005      	b.n	8011666 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	2b32      	cmp	r3, #50	; 0x32
 801165e:	d101      	bne.n	8011664 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011660:	2301      	movs	r3, #1
 8011662:	e000      	b.n	8011666 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011664:	2300      	movs	r3, #0
}
 8011666:	4618      	mov	r0, r3
 8011668:	3710      	adds	r7, #16
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}
	...

08011670 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011670:	b084      	sub	sp, #16
 8011672:	b580      	push	{r7, lr}
 8011674:	b086      	sub	sp, #24
 8011676:	af00      	add	r7, sp, #0
 8011678:	6078      	str	r0, [r7, #4]
 801167a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801167e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011682:	2300      	movs	r3, #0
 8011684:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801168a:	2300      	movs	r3, #0
 801168c:	613b      	str	r3, [r7, #16]
 801168e:	e009      	b.n	80116a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011690:	687a      	ldr	r2, [r7, #4]
 8011692:	693b      	ldr	r3, [r7, #16]
 8011694:	3340      	adds	r3, #64	; 0x40
 8011696:	009b      	lsls	r3, r3, #2
 8011698:	4413      	add	r3, r2
 801169a:	2200      	movs	r2, #0
 801169c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801169e:	693b      	ldr	r3, [r7, #16]
 80116a0:	3301      	adds	r3, #1
 80116a2:	613b      	str	r3, [r7, #16]
 80116a4:	693b      	ldr	r3, [r7, #16]
 80116a6:	2b0e      	cmp	r3, #14
 80116a8:	d9f2      	bls.n	8011690 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80116aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d11c      	bne.n	80116ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80116b6:	685b      	ldr	r3, [r3, #4]
 80116b8:	68fa      	ldr	r2, [r7, #12]
 80116ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80116be:	f043 0302 	orr.w	r3, r3, #2
 80116c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	601a      	str	r2, [r3, #0]
 80116e8:	e005      	b.n	80116f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80116fc:	461a      	mov	r2, r3
 80116fe:	2300      	movs	r3, #0
 8011700:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011708:	4619      	mov	r1, r3
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011710:	461a      	mov	r2, r3
 8011712:	680b      	ldr	r3, [r1, #0]
 8011714:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011718:	2b01      	cmp	r3, #1
 801171a:	d10c      	bne.n	8011736 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801171c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801171e:	2b00      	cmp	r3, #0
 8011720:	d104      	bne.n	801172c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011722:	2100      	movs	r1, #0
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	f000 f965 	bl	80119f4 <USB_SetDevSpeed>
 801172a:	e008      	b.n	801173e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801172c:	2101      	movs	r1, #1
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	f000 f960 	bl	80119f4 <USB_SetDevSpeed>
 8011734:	e003      	b.n	801173e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011736:	2103      	movs	r1, #3
 8011738:	6878      	ldr	r0, [r7, #4]
 801173a:	f000 f95b 	bl	80119f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801173e:	2110      	movs	r1, #16
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	f000 f8f3 	bl	801192c <USB_FlushTxFifo>
 8011746:	4603      	mov	r3, r0
 8011748:	2b00      	cmp	r3, #0
 801174a:	d001      	beq.n	8011750 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801174c:	2301      	movs	r3, #1
 801174e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f000 f91f 	bl	8011994 <USB_FlushRxFifo>
 8011756:	4603      	mov	r3, r0
 8011758:	2b00      	cmp	r3, #0
 801175a:	d001      	beq.n	8011760 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801175c:	2301      	movs	r3, #1
 801175e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011766:	461a      	mov	r2, r3
 8011768:	2300      	movs	r3, #0
 801176a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011772:	461a      	mov	r2, r3
 8011774:	2300      	movs	r3, #0
 8011776:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801177e:	461a      	mov	r2, r3
 8011780:	2300      	movs	r3, #0
 8011782:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011784:	2300      	movs	r3, #0
 8011786:	613b      	str	r3, [r7, #16]
 8011788:	e043      	b.n	8011812 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801178a:	693b      	ldr	r3, [r7, #16]
 801178c:	015a      	lsls	r2, r3, #5
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	4413      	add	r3, r2
 8011792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801179c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80117a0:	d118      	bne.n	80117d4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80117a2:	693b      	ldr	r3, [r7, #16]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d10a      	bne.n	80117be <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80117a8:	693b      	ldr	r3, [r7, #16]
 80117aa:	015a      	lsls	r2, r3, #5
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	4413      	add	r3, r2
 80117b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117b4:	461a      	mov	r2, r3
 80117b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80117ba:	6013      	str	r3, [r2, #0]
 80117bc:	e013      	b.n	80117e6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80117be:	693b      	ldr	r3, [r7, #16]
 80117c0:	015a      	lsls	r2, r3, #5
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	4413      	add	r3, r2
 80117c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117ca:	461a      	mov	r2, r3
 80117cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80117d0:	6013      	str	r3, [r2, #0]
 80117d2:	e008      	b.n	80117e6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80117d4:	693b      	ldr	r3, [r7, #16]
 80117d6:	015a      	lsls	r2, r3, #5
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	4413      	add	r3, r2
 80117dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117e0:	461a      	mov	r2, r3
 80117e2:	2300      	movs	r3, #0
 80117e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	015a      	lsls	r2, r3, #5
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	4413      	add	r3, r2
 80117ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117f2:	461a      	mov	r2, r3
 80117f4:	2300      	movs	r3, #0
 80117f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80117f8:	693b      	ldr	r3, [r7, #16]
 80117fa:	015a      	lsls	r2, r3, #5
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	4413      	add	r3, r2
 8011800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011804:	461a      	mov	r2, r3
 8011806:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801180a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801180c:	693b      	ldr	r3, [r7, #16]
 801180e:	3301      	adds	r3, #1
 8011810:	613b      	str	r3, [r7, #16]
 8011812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011814:	693a      	ldr	r2, [r7, #16]
 8011816:	429a      	cmp	r2, r3
 8011818:	d3b7      	bcc.n	801178a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801181a:	2300      	movs	r3, #0
 801181c:	613b      	str	r3, [r7, #16]
 801181e:	e043      	b.n	80118a8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011820:	693b      	ldr	r3, [r7, #16]
 8011822:	015a      	lsls	r2, r3, #5
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	4413      	add	r3, r2
 8011828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011832:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011836:	d118      	bne.n	801186a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8011838:	693b      	ldr	r3, [r7, #16]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d10a      	bne.n	8011854 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801183e:	693b      	ldr	r3, [r7, #16]
 8011840:	015a      	lsls	r2, r3, #5
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	4413      	add	r3, r2
 8011846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801184a:	461a      	mov	r2, r3
 801184c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011850:	6013      	str	r3, [r2, #0]
 8011852:	e013      	b.n	801187c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011854:	693b      	ldr	r3, [r7, #16]
 8011856:	015a      	lsls	r2, r3, #5
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	4413      	add	r3, r2
 801185c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011860:	461a      	mov	r2, r3
 8011862:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011866:	6013      	str	r3, [r2, #0]
 8011868:	e008      	b.n	801187c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801186a:	693b      	ldr	r3, [r7, #16]
 801186c:	015a      	lsls	r2, r3, #5
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	4413      	add	r3, r2
 8011872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011876:	461a      	mov	r2, r3
 8011878:	2300      	movs	r3, #0
 801187a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801187c:	693b      	ldr	r3, [r7, #16]
 801187e:	015a      	lsls	r2, r3, #5
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	4413      	add	r3, r2
 8011884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011888:	461a      	mov	r2, r3
 801188a:	2300      	movs	r3, #0
 801188c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801188e:	693b      	ldr	r3, [r7, #16]
 8011890:	015a      	lsls	r2, r3, #5
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	4413      	add	r3, r2
 8011896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801189a:	461a      	mov	r2, r3
 801189c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80118a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80118a2:	693b      	ldr	r3, [r7, #16]
 80118a4:	3301      	adds	r3, #1
 80118a6:	613b      	str	r3, [r7, #16]
 80118a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118aa:	693a      	ldr	r2, [r7, #16]
 80118ac:	429a      	cmp	r2, r3
 80118ae:	d3b7      	bcc.n	8011820 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80118b6:	691b      	ldr	r3, [r3, #16]
 80118b8:	68fa      	ldr	r2, [r7, #12]
 80118ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80118be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80118c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2200      	movs	r2, #0
 80118c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80118d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80118d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d105      	bne.n	80118e4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	699b      	ldr	r3, [r3, #24]
 80118dc:	f043 0210 	orr.w	r2, r3, #16
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	699a      	ldr	r2, [r3, #24]
 80118e8:	4b0e      	ldr	r3, [pc, #56]	; (8011924 <USB_DevInit+0x2b4>)
 80118ea:	4313      	orrs	r3, r2
 80118ec:	687a      	ldr	r2, [r7, #4]
 80118ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80118f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d005      	beq.n	8011902 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	699b      	ldr	r3, [r3, #24]
 80118fa:	f043 0208 	orr.w	r2, r3, #8
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011904:	2b01      	cmp	r3, #1
 8011906:	d105      	bne.n	8011914 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	699a      	ldr	r2, [r3, #24]
 801190c:	4b06      	ldr	r3, [pc, #24]	; (8011928 <USB_DevInit+0x2b8>)
 801190e:	4313      	orrs	r3, r2
 8011910:	687a      	ldr	r2, [r7, #4]
 8011912:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011914:	7dfb      	ldrb	r3, [r7, #23]
}
 8011916:	4618      	mov	r0, r3
 8011918:	3718      	adds	r7, #24
 801191a:	46bd      	mov	sp, r7
 801191c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011920:	b004      	add	sp, #16
 8011922:	4770      	bx	lr
 8011924:	803c3800 	.word	0x803c3800
 8011928:	40000004 	.word	0x40000004

0801192c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801192c:	b480      	push	{r7}
 801192e:	b085      	sub	sp, #20
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
 8011934:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011936:	2300      	movs	r3, #0
 8011938:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	3301      	adds	r3, #1
 801193e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	4a13      	ldr	r2, [pc, #76]	; (8011990 <USB_FlushTxFifo+0x64>)
 8011944:	4293      	cmp	r3, r2
 8011946:	d901      	bls.n	801194c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011948:	2303      	movs	r3, #3
 801194a:	e01b      	b.n	8011984 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	691b      	ldr	r3, [r3, #16]
 8011950:	2b00      	cmp	r3, #0
 8011952:	daf2      	bge.n	801193a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011954:	2300      	movs	r3, #0
 8011956:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	019b      	lsls	r3, r3, #6
 801195c:	f043 0220 	orr.w	r2, r3, #32
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	3301      	adds	r3, #1
 8011968:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	4a08      	ldr	r2, [pc, #32]	; (8011990 <USB_FlushTxFifo+0x64>)
 801196e:	4293      	cmp	r3, r2
 8011970:	d901      	bls.n	8011976 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011972:	2303      	movs	r3, #3
 8011974:	e006      	b.n	8011984 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	691b      	ldr	r3, [r3, #16]
 801197a:	f003 0320 	and.w	r3, r3, #32
 801197e:	2b20      	cmp	r3, #32
 8011980:	d0f0      	beq.n	8011964 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011982:	2300      	movs	r3, #0
}
 8011984:	4618      	mov	r0, r3
 8011986:	3714      	adds	r7, #20
 8011988:	46bd      	mov	sp, r7
 801198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198e:	4770      	bx	lr
 8011990:	00030d40 	.word	0x00030d40

08011994 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011994:	b480      	push	{r7}
 8011996:	b085      	sub	sp, #20
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801199c:	2300      	movs	r3, #0
 801199e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	3301      	adds	r3, #1
 80119a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	4a11      	ldr	r2, [pc, #68]	; (80119f0 <USB_FlushRxFifo+0x5c>)
 80119aa:	4293      	cmp	r3, r2
 80119ac:	d901      	bls.n	80119b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80119ae:	2303      	movs	r3, #3
 80119b0:	e018      	b.n	80119e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	691b      	ldr	r3, [r3, #16]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	daf2      	bge.n	80119a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80119ba:	2300      	movs	r3, #0
 80119bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	2210      	movs	r2, #16
 80119c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	3301      	adds	r3, #1
 80119c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	4a08      	ldr	r2, [pc, #32]	; (80119f0 <USB_FlushRxFifo+0x5c>)
 80119ce:	4293      	cmp	r3, r2
 80119d0:	d901      	bls.n	80119d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80119d2:	2303      	movs	r3, #3
 80119d4:	e006      	b.n	80119e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	691b      	ldr	r3, [r3, #16]
 80119da:	f003 0310 	and.w	r3, r3, #16
 80119de:	2b10      	cmp	r3, #16
 80119e0:	d0f0      	beq.n	80119c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80119e2:	2300      	movs	r3, #0
}
 80119e4:	4618      	mov	r0, r3
 80119e6:	3714      	adds	r7, #20
 80119e8:	46bd      	mov	sp, r7
 80119ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ee:	4770      	bx	lr
 80119f0:	00030d40 	.word	0x00030d40

080119f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80119f4:	b480      	push	{r7}
 80119f6:	b085      	sub	sp, #20
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	460b      	mov	r3, r1
 80119fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a0a:	681a      	ldr	r2, [r3, #0]
 8011a0c:	78fb      	ldrb	r3, [r7, #3]
 8011a0e:	68f9      	ldr	r1, [r7, #12]
 8011a10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011a14:	4313      	orrs	r3, r2
 8011a16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011a18:	2300      	movs	r3, #0
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	3714      	adds	r7, #20
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a24:	4770      	bx	lr

08011a26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011a26:	b480      	push	{r7}
 8011a28:	b085      	sub	sp, #20
 8011a2a:	af00      	add	r7, sp, #0
 8011a2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	68fa      	ldr	r2, [r7, #12]
 8011a3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011a40:	f023 0303 	bic.w	r3, r3, #3
 8011a44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a4c:	685b      	ldr	r3, [r3, #4]
 8011a4e:	68fa      	ldr	r2, [r7, #12]
 8011a50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011a54:	f043 0302 	orr.w	r3, r3, #2
 8011a58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011a5a:	2300      	movs	r3, #0
}
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	3714      	adds	r7, #20
 8011a60:	46bd      	mov	sp, r7
 8011a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a66:	4770      	bx	lr

08011a68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011a68:	b480      	push	{r7}
 8011a6a:	b083      	sub	sp, #12
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	695b      	ldr	r3, [r3, #20]
 8011a74:	f003 0301 	and.w	r3, r3, #1
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	370c      	adds	r7, #12
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a82:	4770      	bx	lr

08011a84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011a84:	b480      	push	{r7}
 8011a86:	b085      	sub	sp, #20
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	3301      	adds	r3, #1
 8011a94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	4a13      	ldr	r2, [pc, #76]	; (8011ae8 <USB_CoreReset+0x64>)
 8011a9a:	4293      	cmp	r3, r2
 8011a9c:	d901      	bls.n	8011aa2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011a9e:	2303      	movs	r3, #3
 8011aa0:	e01b      	b.n	8011ada <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	691b      	ldr	r3, [r3, #16]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	daf2      	bge.n	8011a90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	691b      	ldr	r3, [r3, #16]
 8011ab2:	f043 0201 	orr.w	r2, r3, #1
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	3301      	adds	r3, #1
 8011abe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	4a09      	ldr	r2, [pc, #36]	; (8011ae8 <USB_CoreReset+0x64>)
 8011ac4:	4293      	cmp	r3, r2
 8011ac6:	d901      	bls.n	8011acc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011ac8:	2303      	movs	r3, #3
 8011aca:	e006      	b.n	8011ada <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	691b      	ldr	r3, [r3, #16]
 8011ad0:	f003 0301 	and.w	r3, r3, #1
 8011ad4:	2b01      	cmp	r3, #1
 8011ad6:	d0f0      	beq.n	8011aba <USB_CoreReset+0x36>

  return HAL_OK;
 8011ad8:	2300      	movs	r3, #0
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	3714      	adds	r7, #20
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae4:	4770      	bx	lr
 8011ae6:	bf00      	nop
 8011ae8:	00030d40 	.word	0x00030d40

08011aec <sniprintf>:
 8011aec:	b40c      	push	{r2, r3}
 8011aee:	b530      	push	{r4, r5, lr}
 8011af0:	4b17      	ldr	r3, [pc, #92]	; (8011b50 <sniprintf+0x64>)
 8011af2:	1e0c      	subs	r4, r1, #0
 8011af4:	681d      	ldr	r5, [r3, #0]
 8011af6:	b09d      	sub	sp, #116	; 0x74
 8011af8:	da08      	bge.n	8011b0c <sniprintf+0x20>
 8011afa:	238b      	movs	r3, #139	; 0x8b
 8011afc:	602b      	str	r3, [r5, #0]
 8011afe:	f04f 30ff 	mov.w	r0, #4294967295
 8011b02:	b01d      	add	sp, #116	; 0x74
 8011b04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011b08:	b002      	add	sp, #8
 8011b0a:	4770      	bx	lr
 8011b0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011b10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011b14:	bf14      	ite	ne
 8011b16:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011b1a:	4623      	moveq	r3, r4
 8011b1c:	9304      	str	r3, [sp, #16]
 8011b1e:	9307      	str	r3, [sp, #28]
 8011b20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011b24:	9002      	str	r0, [sp, #8]
 8011b26:	9006      	str	r0, [sp, #24]
 8011b28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011b2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011b2e:	ab21      	add	r3, sp, #132	; 0x84
 8011b30:	a902      	add	r1, sp, #8
 8011b32:	4628      	mov	r0, r5
 8011b34:	9301      	str	r3, [sp, #4]
 8011b36:	f000 f9c1 	bl	8011ebc <_svfiprintf_r>
 8011b3a:	1c43      	adds	r3, r0, #1
 8011b3c:	bfbc      	itt	lt
 8011b3e:	238b      	movlt	r3, #139	; 0x8b
 8011b40:	602b      	strlt	r3, [r5, #0]
 8011b42:	2c00      	cmp	r4, #0
 8011b44:	d0dd      	beq.n	8011b02 <sniprintf+0x16>
 8011b46:	9b02      	ldr	r3, [sp, #8]
 8011b48:	2200      	movs	r2, #0
 8011b4a:	701a      	strb	r2, [r3, #0]
 8011b4c:	e7d9      	b.n	8011b02 <sniprintf+0x16>
 8011b4e:	bf00      	nop
 8011b50:	240004d0 	.word	0x240004d0

08011b54 <siprintf>:
 8011b54:	b40e      	push	{r1, r2, r3}
 8011b56:	b500      	push	{lr}
 8011b58:	b09c      	sub	sp, #112	; 0x70
 8011b5a:	ab1d      	add	r3, sp, #116	; 0x74
 8011b5c:	9002      	str	r0, [sp, #8]
 8011b5e:	9006      	str	r0, [sp, #24]
 8011b60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011b64:	4809      	ldr	r0, [pc, #36]	; (8011b8c <siprintf+0x38>)
 8011b66:	9107      	str	r1, [sp, #28]
 8011b68:	9104      	str	r1, [sp, #16]
 8011b6a:	4909      	ldr	r1, [pc, #36]	; (8011b90 <siprintf+0x3c>)
 8011b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b70:	9105      	str	r1, [sp, #20]
 8011b72:	6800      	ldr	r0, [r0, #0]
 8011b74:	9301      	str	r3, [sp, #4]
 8011b76:	a902      	add	r1, sp, #8
 8011b78:	f000 f9a0 	bl	8011ebc <_svfiprintf_r>
 8011b7c:	9b02      	ldr	r3, [sp, #8]
 8011b7e:	2200      	movs	r2, #0
 8011b80:	701a      	strb	r2, [r3, #0]
 8011b82:	b01c      	add	sp, #112	; 0x70
 8011b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b88:	b003      	add	sp, #12
 8011b8a:	4770      	bx	lr
 8011b8c:	240004d0 	.word	0x240004d0
 8011b90:	ffff0208 	.word	0xffff0208

08011b94 <memset>:
 8011b94:	4402      	add	r2, r0
 8011b96:	4603      	mov	r3, r0
 8011b98:	4293      	cmp	r3, r2
 8011b9a:	d100      	bne.n	8011b9e <memset+0xa>
 8011b9c:	4770      	bx	lr
 8011b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8011ba2:	e7f9      	b.n	8011b98 <memset+0x4>

08011ba4 <__errno>:
 8011ba4:	4b01      	ldr	r3, [pc, #4]	; (8011bac <__errno+0x8>)
 8011ba6:	6818      	ldr	r0, [r3, #0]
 8011ba8:	4770      	bx	lr
 8011baa:	bf00      	nop
 8011bac:	240004d0 	.word	0x240004d0

08011bb0 <__libc_init_array>:
 8011bb0:	b570      	push	{r4, r5, r6, lr}
 8011bb2:	4d0d      	ldr	r5, [pc, #52]	; (8011be8 <__libc_init_array+0x38>)
 8011bb4:	4c0d      	ldr	r4, [pc, #52]	; (8011bec <__libc_init_array+0x3c>)
 8011bb6:	1b64      	subs	r4, r4, r5
 8011bb8:	10a4      	asrs	r4, r4, #2
 8011bba:	2600      	movs	r6, #0
 8011bbc:	42a6      	cmp	r6, r4
 8011bbe:	d109      	bne.n	8011bd4 <__libc_init_array+0x24>
 8011bc0:	4d0b      	ldr	r5, [pc, #44]	; (8011bf0 <__libc_init_array+0x40>)
 8011bc2:	4c0c      	ldr	r4, [pc, #48]	; (8011bf4 <__libc_init_array+0x44>)
 8011bc4:	f000 fc6a 	bl	801249c <_init>
 8011bc8:	1b64      	subs	r4, r4, r5
 8011bca:	10a4      	asrs	r4, r4, #2
 8011bcc:	2600      	movs	r6, #0
 8011bce:	42a6      	cmp	r6, r4
 8011bd0:	d105      	bne.n	8011bde <__libc_init_array+0x2e>
 8011bd2:	bd70      	pop	{r4, r5, r6, pc}
 8011bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8011bd8:	4798      	blx	r3
 8011bda:	3601      	adds	r6, #1
 8011bdc:	e7ee      	b.n	8011bbc <__libc_init_array+0xc>
 8011bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8011be2:	4798      	blx	r3
 8011be4:	3601      	adds	r6, #1
 8011be6:	e7f2      	b.n	8011bce <__libc_init_array+0x1e>
 8011be8:	080126a0 	.word	0x080126a0
 8011bec:	080126a0 	.word	0x080126a0
 8011bf0:	080126a0 	.word	0x080126a0
 8011bf4:	080126a4 	.word	0x080126a4

08011bf8 <__retarget_lock_acquire_recursive>:
 8011bf8:	4770      	bx	lr

08011bfa <__retarget_lock_release_recursive>:
 8011bfa:	4770      	bx	lr

08011bfc <memcpy>:
 8011bfc:	440a      	add	r2, r1
 8011bfe:	4291      	cmp	r1, r2
 8011c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8011c04:	d100      	bne.n	8011c08 <memcpy+0xc>
 8011c06:	4770      	bx	lr
 8011c08:	b510      	push	{r4, lr}
 8011c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011c12:	4291      	cmp	r1, r2
 8011c14:	d1f9      	bne.n	8011c0a <memcpy+0xe>
 8011c16:	bd10      	pop	{r4, pc}

08011c18 <_free_r>:
 8011c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c1a:	2900      	cmp	r1, #0
 8011c1c:	d044      	beq.n	8011ca8 <_free_r+0x90>
 8011c1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c22:	9001      	str	r0, [sp, #4]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	f1a1 0404 	sub.w	r4, r1, #4
 8011c2a:	bfb8      	it	lt
 8011c2c:	18e4      	addlt	r4, r4, r3
 8011c2e:	f000 f8df 	bl	8011df0 <__malloc_lock>
 8011c32:	4a1e      	ldr	r2, [pc, #120]	; (8011cac <_free_r+0x94>)
 8011c34:	9801      	ldr	r0, [sp, #4]
 8011c36:	6813      	ldr	r3, [r2, #0]
 8011c38:	b933      	cbnz	r3, 8011c48 <_free_r+0x30>
 8011c3a:	6063      	str	r3, [r4, #4]
 8011c3c:	6014      	str	r4, [r2, #0]
 8011c3e:	b003      	add	sp, #12
 8011c40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011c44:	f000 b8da 	b.w	8011dfc <__malloc_unlock>
 8011c48:	42a3      	cmp	r3, r4
 8011c4a:	d908      	bls.n	8011c5e <_free_r+0x46>
 8011c4c:	6825      	ldr	r5, [r4, #0]
 8011c4e:	1961      	adds	r1, r4, r5
 8011c50:	428b      	cmp	r3, r1
 8011c52:	bf01      	itttt	eq
 8011c54:	6819      	ldreq	r1, [r3, #0]
 8011c56:	685b      	ldreq	r3, [r3, #4]
 8011c58:	1949      	addeq	r1, r1, r5
 8011c5a:	6021      	streq	r1, [r4, #0]
 8011c5c:	e7ed      	b.n	8011c3a <_free_r+0x22>
 8011c5e:	461a      	mov	r2, r3
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	b10b      	cbz	r3, 8011c68 <_free_r+0x50>
 8011c64:	42a3      	cmp	r3, r4
 8011c66:	d9fa      	bls.n	8011c5e <_free_r+0x46>
 8011c68:	6811      	ldr	r1, [r2, #0]
 8011c6a:	1855      	adds	r5, r2, r1
 8011c6c:	42a5      	cmp	r5, r4
 8011c6e:	d10b      	bne.n	8011c88 <_free_r+0x70>
 8011c70:	6824      	ldr	r4, [r4, #0]
 8011c72:	4421      	add	r1, r4
 8011c74:	1854      	adds	r4, r2, r1
 8011c76:	42a3      	cmp	r3, r4
 8011c78:	6011      	str	r1, [r2, #0]
 8011c7a:	d1e0      	bne.n	8011c3e <_free_r+0x26>
 8011c7c:	681c      	ldr	r4, [r3, #0]
 8011c7e:	685b      	ldr	r3, [r3, #4]
 8011c80:	6053      	str	r3, [r2, #4]
 8011c82:	440c      	add	r4, r1
 8011c84:	6014      	str	r4, [r2, #0]
 8011c86:	e7da      	b.n	8011c3e <_free_r+0x26>
 8011c88:	d902      	bls.n	8011c90 <_free_r+0x78>
 8011c8a:	230c      	movs	r3, #12
 8011c8c:	6003      	str	r3, [r0, #0]
 8011c8e:	e7d6      	b.n	8011c3e <_free_r+0x26>
 8011c90:	6825      	ldr	r5, [r4, #0]
 8011c92:	1961      	adds	r1, r4, r5
 8011c94:	428b      	cmp	r3, r1
 8011c96:	bf04      	itt	eq
 8011c98:	6819      	ldreq	r1, [r3, #0]
 8011c9a:	685b      	ldreq	r3, [r3, #4]
 8011c9c:	6063      	str	r3, [r4, #4]
 8011c9e:	bf04      	itt	eq
 8011ca0:	1949      	addeq	r1, r1, r5
 8011ca2:	6021      	streq	r1, [r4, #0]
 8011ca4:	6054      	str	r4, [r2, #4]
 8011ca6:	e7ca      	b.n	8011c3e <_free_r+0x26>
 8011ca8:	b003      	add	sp, #12
 8011caa:	bd30      	pop	{r4, r5, pc}
 8011cac:	2400195c 	.word	0x2400195c

08011cb0 <sbrk_aligned>:
 8011cb0:	b570      	push	{r4, r5, r6, lr}
 8011cb2:	4e0e      	ldr	r6, [pc, #56]	; (8011cec <sbrk_aligned+0x3c>)
 8011cb4:	460c      	mov	r4, r1
 8011cb6:	6831      	ldr	r1, [r6, #0]
 8011cb8:	4605      	mov	r5, r0
 8011cba:	b911      	cbnz	r1, 8011cc2 <sbrk_aligned+0x12>
 8011cbc:	f000 fba6 	bl	801240c <_sbrk_r>
 8011cc0:	6030      	str	r0, [r6, #0]
 8011cc2:	4621      	mov	r1, r4
 8011cc4:	4628      	mov	r0, r5
 8011cc6:	f000 fba1 	bl	801240c <_sbrk_r>
 8011cca:	1c43      	adds	r3, r0, #1
 8011ccc:	d00a      	beq.n	8011ce4 <sbrk_aligned+0x34>
 8011cce:	1cc4      	adds	r4, r0, #3
 8011cd0:	f024 0403 	bic.w	r4, r4, #3
 8011cd4:	42a0      	cmp	r0, r4
 8011cd6:	d007      	beq.n	8011ce8 <sbrk_aligned+0x38>
 8011cd8:	1a21      	subs	r1, r4, r0
 8011cda:	4628      	mov	r0, r5
 8011cdc:	f000 fb96 	bl	801240c <_sbrk_r>
 8011ce0:	3001      	adds	r0, #1
 8011ce2:	d101      	bne.n	8011ce8 <sbrk_aligned+0x38>
 8011ce4:	f04f 34ff 	mov.w	r4, #4294967295
 8011ce8:	4620      	mov	r0, r4
 8011cea:	bd70      	pop	{r4, r5, r6, pc}
 8011cec:	24001960 	.word	0x24001960

08011cf0 <_malloc_r>:
 8011cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cf4:	1ccd      	adds	r5, r1, #3
 8011cf6:	f025 0503 	bic.w	r5, r5, #3
 8011cfa:	3508      	adds	r5, #8
 8011cfc:	2d0c      	cmp	r5, #12
 8011cfe:	bf38      	it	cc
 8011d00:	250c      	movcc	r5, #12
 8011d02:	2d00      	cmp	r5, #0
 8011d04:	4607      	mov	r7, r0
 8011d06:	db01      	blt.n	8011d0c <_malloc_r+0x1c>
 8011d08:	42a9      	cmp	r1, r5
 8011d0a:	d905      	bls.n	8011d18 <_malloc_r+0x28>
 8011d0c:	230c      	movs	r3, #12
 8011d0e:	603b      	str	r3, [r7, #0]
 8011d10:	2600      	movs	r6, #0
 8011d12:	4630      	mov	r0, r6
 8011d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011dec <_malloc_r+0xfc>
 8011d1c:	f000 f868 	bl	8011df0 <__malloc_lock>
 8011d20:	f8d8 3000 	ldr.w	r3, [r8]
 8011d24:	461c      	mov	r4, r3
 8011d26:	bb5c      	cbnz	r4, 8011d80 <_malloc_r+0x90>
 8011d28:	4629      	mov	r1, r5
 8011d2a:	4638      	mov	r0, r7
 8011d2c:	f7ff ffc0 	bl	8011cb0 <sbrk_aligned>
 8011d30:	1c43      	adds	r3, r0, #1
 8011d32:	4604      	mov	r4, r0
 8011d34:	d155      	bne.n	8011de2 <_malloc_r+0xf2>
 8011d36:	f8d8 4000 	ldr.w	r4, [r8]
 8011d3a:	4626      	mov	r6, r4
 8011d3c:	2e00      	cmp	r6, #0
 8011d3e:	d145      	bne.n	8011dcc <_malloc_r+0xdc>
 8011d40:	2c00      	cmp	r4, #0
 8011d42:	d048      	beq.n	8011dd6 <_malloc_r+0xe6>
 8011d44:	6823      	ldr	r3, [r4, #0]
 8011d46:	4631      	mov	r1, r6
 8011d48:	4638      	mov	r0, r7
 8011d4a:	eb04 0903 	add.w	r9, r4, r3
 8011d4e:	f000 fb5d 	bl	801240c <_sbrk_r>
 8011d52:	4581      	cmp	r9, r0
 8011d54:	d13f      	bne.n	8011dd6 <_malloc_r+0xe6>
 8011d56:	6821      	ldr	r1, [r4, #0]
 8011d58:	1a6d      	subs	r5, r5, r1
 8011d5a:	4629      	mov	r1, r5
 8011d5c:	4638      	mov	r0, r7
 8011d5e:	f7ff ffa7 	bl	8011cb0 <sbrk_aligned>
 8011d62:	3001      	adds	r0, #1
 8011d64:	d037      	beq.n	8011dd6 <_malloc_r+0xe6>
 8011d66:	6823      	ldr	r3, [r4, #0]
 8011d68:	442b      	add	r3, r5
 8011d6a:	6023      	str	r3, [r4, #0]
 8011d6c:	f8d8 3000 	ldr.w	r3, [r8]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d038      	beq.n	8011de6 <_malloc_r+0xf6>
 8011d74:	685a      	ldr	r2, [r3, #4]
 8011d76:	42a2      	cmp	r2, r4
 8011d78:	d12b      	bne.n	8011dd2 <_malloc_r+0xe2>
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	605a      	str	r2, [r3, #4]
 8011d7e:	e00f      	b.n	8011da0 <_malloc_r+0xb0>
 8011d80:	6822      	ldr	r2, [r4, #0]
 8011d82:	1b52      	subs	r2, r2, r5
 8011d84:	d41f      	bmi.n	8011dc6 <_malloc_r+0xd6>
 8011d86:	2a0b      	cmp	r2, #11
 8011d88:	d917      	bls.n	8011dba <_malloc_r+0xca>
 8011d8a:	1961      	adds	r1, r4, r5
 8011d8c:	42a3      	cmp	r3, r4
 8011d8e:	6025      	str	r5, [r4, #0]
 8011d90:	bf18      	it	ne
 8011d92:	6059      	strne	r1, [r3, #4]
 8011d94:	6863      	ldr	r3, [r4, #4]
 8011d96:	bf08      	it	eq
 8011d98:	f8c8 1000 	streq.w	r1, [r8]
 8011d9c:	5162      	str	r2, [r4, r5]
 8011d9e:	604b      	str	r3, [r1, #4]
 8011da0:	4638      	mov	r0, r7
 8011da2:	f104 060b 	add.w	r6, r4, #11
 8011da6:	f000 f829 	bl	8011dfc <__malloc_unlock>
 8011daa:	f026 0607 	bic.w	r6, r6, #7
 8011dae:	1d23      	adds	r3, r4, #4
 8011db0:	1af2      	subs	r2, r6, r3
 8011db2:	d0ae      	beq.n	8011d12 <_malloc_r+0x22>
 8011db4:	1b9b      	subs	r3, r3, r6
 8011db6:	50a3      	str	r3, [r4, r2]
 8011db8:	e7ab      	b.n	8011d12 <_malloc_r+0x22>
 8011dba:	42a3      	cmp	r3, r4
 8011dbc:	6862      	ldr	r2, [r4, #4]
 8011dbe:	d1dd      	bne.n	8011d7c <_malloc_r+0x8c>
 8011dc0:	f8c8 2000 	str.w	r2, [r8]
 8011dc4:	e7ec      	b.n	8011da0 <_malloc_r+0xb0>
 8011dc6:	4623      	mov	r3, r4
 8011dc8:	6864      	ldr	r4, [r4, #4]
 8011dca:	e7ac      	b.n	8011d26 <_malloc_r+0x36>
 8011dcc:	4634      	mov	r4, r6
 8011dce:	6876      	ldr	r6, [r6, #4]
 8011dd0:	e7b4      	b.n	8011d3c <_malloc_r+0x4c>
 8011dd2:	4613      	mov	r3, r2
 8011dd4:	e7cc      	b.n	8011d70 <_malloc_r+0x80>
 8011dd6:	230c      	movs	r3, #12
 8011dd8:	603b      	str	r3, [r7, #0]
 8011dda:	4638      	mov	r0, r7
 8011ddc:	f000 f80e 	bl	8011dfc <__malloc_unlock>
 8011de0:	e797      	b.n	8011d12 <_malloc_r+0x22>
 8011de2:	6025      	str	r5, [r4, #0]
 8011de4:	e7dc      	b.n	8011da0 <_malloc_r+0xb0>
 8011de6:	605b      	str	r3, [r3, #4]
 8011de8:	deff      	udf	#255	; 0xff
 8011dea:	bf00      	nop
 8011dec:	2400195c 	.word	0x2400195c

08011df0 <__malloc_lock>:
 8011df0:	4801      	ldr	r0, [pc, #4]	; (8011df8 <__malloc_lock+0x8>)
 8011df2:	f7ff bf01 	b.w	8011bf8 <__retarget_lock_acquire_recursive>
 8011df6:	bf00      	nop
 8011df8:	24001958 	.word	0x24001958

08011dfc <__malloc_unlock>:
 8011dfc:	4801      	ldr	r0, [pc, #4]	; (8011e04 <__malloc_unlock+0x8>)
 8011dfe:	f7ff befc 	b.w	8011bfa <__retarget_lock_release_recursive>
 8011e02:	bf00      	nop
 8011e04:	24001958 	.word	0x24001958

08011e08 <__ssputs_r>:
 8011e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e0c:	688e      	ldr	r6, [r1, #8]
 8011e0e:	461f      	mov	r7, r3
 8011e10:	42be      	cmp	r6, r7
 8011e12:	680b      	ldr	r3, [r1, #0]
 8011e14:	4682      	mov	sl, r0
 8011e16:	460c      	mov	r4, r1
 8011e18:	4690      	mov	r8, r2
 8011e1a:	d82c      	bhi.n	8011e76 <__ssputs_r+0x6e>
 8011e1c:	898a      	ldrh	r2, [r1, #12]
 8011e1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011e22:	d026      	beq.n	8011e72 <__ssputs_r+0x6a>
 8011e24:	6965      	ldr	r5, [r4, #20]
 8011e26:	6909      	ldr	r1, [r1, #16]
 8011e28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e2c:	eba3 0901 	sub.w	r9, r3, r1
 8011e30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011e34:	1c7b      	adds	r3, r7, #1
 8011e36:	444b      	add	r3, r9
 8011e38:	106d      	asrs	r5, r5, #1
 8011e3a:	429d      	cmp	r5, r3
 8011e3c:	bf38      	it	cc
 8011e3e:	461d      	movcc	r5, r3
 8011e40:	0553      	lsls	r3, r2, #21
 8011e42:	d527      	bpl.n	8011e94 <__ssputs_r+0x8c>
 8011e44:	4629      	mov	r1, r5
 8011e46:	f7ff ff53 	bl	8011cf0 <_malloc_r>
 8011e4a:	4606      	mov	r6, r0
 8011e4c:	b360      	cbz	r0, 8011ea8 <__ssputs_r+0xa0>
 8011e4e:	6921      	ldr	r1, [r4, #16]
 8011e50:	464a      	mov	r2, r9
 8011e52:	f7ff fed3 	bl	8011bfc <memcpy>
 8011e56:	89a3      	ldrh	r3, [r4, #12]
 8011e58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e60:	81a3      	strh	r3, [r4, #12]
 8011e62:	6126      	str	r6, [r4, #16]
 8011e64:	6165      	str	r5, [r4, #20]
 8011e66:	444e      	add	r6, r9
 8011e68:	eba5 0509 	sub.w	r5, r5, r9
 8011e6c:	6026      	str	r6, [r4, #0]
 8011e6e:	60a5      	str	r5, [r4, #8]
 8011e70:	463e      	mov	r6, r7
 8011e72:	42be      	cmp	r6, r7
 8011e74:	d900      	bls.n	8011e78 <__ssputs_r+0x70>
 8011e76:	463e      	mov	r6, r7
 8011e78:	6820      	ldr	r0, [r4, #0]
 8011e7a:	4632      	mov	r2, r6
 8011e7c:	4641      	mov	r1, r8
 8011e7e:	f000 faab 	bl	80123d8 <memmove>
 8011e82:	68a3      	ldr	r3, [r4, #8]
 8011e84:	1b9b      	subs	r3, r3, r6
 8011e86:	60a3      	str	r3, [r4, #8]
 8011e88:	6823      	ldr	r3, [r4, #0]
 8011e8a:	4433      	add	r3, r6
 8011e8c:	6023      	str	r3, [r4, #0]
 8011e8e:	2000      	movs	r0, #0
 8011e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e94:	462a      	mov	r2, r5
 8011e96:	f000 fac9 	bl	801242c <_realloc_r>
 8011e9a:	4606      	mov	r6, r0
 8011e9c:	2800      	cmp	r0, #0
 8011e9e:	d1e0      	bne.n	8011e62 <__ssputs_r+0x5a>
 8011ea0:	6921      	ldr	r1, [r4, #16]
 8011ea2:	4650      	mov	r0, sl
 8011ea4:	f7ff feb8 	bl	8011c18 <_free_r>
 8011ea8:	230c      	movs	r3, #12
 8011eaa:	f8ca 3000 	str.w	r3, [sl]
 8011eae:	89a3      	ldrh	r3, [r4, #12]
 8011eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011eb4:	81a3      	strh	r3, [r4, #12]
 8011eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8011eba:	e7e9      	b.n	8011e90 <__ssputs_r+0x88>

08011ebc <_svfiprintf_r>:
 8011ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ec0:	4698      	mov	r8, r3
 8011ec2:	898b      	ldrh	r3, [r1, #12]
 8011ec4:	061b      	lsls	r3, r3, #24
 8011ec6:	b09d      	sub	sp, #116	; 0x74
 8011ec8:	4607      	mov	r7, r0
 8011eca:	460d      	mov	r5, r1
 8011ecc:	4614      	mov	r4, r2
 8011ece:	d50e      	bpl.n	8011eee <_svfiprintf_r+0x32>
 8011ed0:	690b      	ldr	r3, [r1, #16]
 8011ed2:	b963      	cbnz	r3, 8011eee <_svfiprintf_r+0x32>
 8011ed4:	2140      	movs	r1, #64	; 0x40
 8011ed6:	f7ff ff0b 	bl	8011cf0 <_malloc_r>
 8011eda:	6028      	str	r0, [r5, #0]
 8011edc:	6128      	str	r0, [r5, #16]
 8011ede:	b920      	cbnz	r0, 8011eea <_svfiprintf_r+0x2e>
 8011ee0:	230c      	movs	r3, #12
 8011ee2:	603b      	str	r3, [r7, #0]
 8011ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ee8:	e0d0      	b.n	801208c <_svfiprintf_r+0x1d0>
 8011eea:	2340      	movs	r3, #64	; 0x40
 8011eec:	616b      	str	r3, [r5, #20]
 8011eee:	2300      	movs	r3, #0
 8011ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8011ef2:	2320      	movs	r3, #32
 8011ef4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ef8:	f8cd 800c 	str.w	r8, [sp, #12]
 8011efc:	2330      	movs	r3, #48	; 0x30
 8011efe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80120a4 <_svfiprintf_r+0x1e8>
 8011f02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f06:	f04f 0901 	mov.w	r9, #1
 8011f0a:	4623      	mov	r3, r4
 8011f0c:	469a      	mov	sl, r3
 8011f0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f12:	b10a      	cbz	r2, 8011f18 <_svfiprintf_r+0x5c>
 8011f14:	2a25      	cmp	r2, #37	; 0x25
 8011f16:	d1f9      	bne.n	8011f0c <_svfiprintf_r+0x50>
 8011f18:	ebba 0b04 	subs.w	fp, sl, r4
 8011f1c:	d00b      	beq.n	8011f36 <_svfiprintf_r+0x7a>
 8011f1e:	465b      	mov	r3, fp
 8011f20:	4622      	mov	r2, r4
 8011f22:	4629      	mov	r1, r5
 8011f24:	4638      	mov	r0, r7
 8011f26:	f7ff ff6f 	bl	8011e08 <__ssputs_r>
 8011f2a:	3001      	adds	r0, #1
 8011f2c:	f000 80a9 	beq.w	8012082 <_svfiprintf_r+0x1c6>
 8011f30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f32:	445a      	add	r2, fp
 8011f34:	9209      	str	r2, [sp, #36]	; 0x24
 8011f36:	f89a 3000 	ldrb.w	r3, [sl]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	f000 80a1 	beq.w	8012082 <_svfiprintf_r+0x1c6>
 8011f40:	2300      	movs	r3, #0
 8011f42:	f04f 32ff 	mov.w	r2, #4294967295
 8011f46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f4a:	f10a 0a01 	add.w	sl, sl, #1
 8011f4e:	9304      	str	r3, [sp, #16]
 8011f50:	9307      	str	r3, [sp, #28]
 8011f52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f56:	931a      	str	r3, [sp, #104]	; 0x68
 8011f58:	4654      	mov	r4, sl
 8011f5a:	2205      	movs	r2, #5
 8011f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f60:	4850      	ldr	r0, [pc, #320]	; (80120a4 <_svfiprintf_r+0x1e8>)
 8011f62:	f7ee f9c5 	bl	80002f0 <memchr>
 8011f66:	9a04      	ldr	r2, [sp, #16]
 8011f68:	b9d8      	cbnz	r0, 8011fa2 <_svfiprintf_r+0xe6>
 8011f6a:	06d0      	lsls	r0, r2, #27
 8011f6c:	bf44      	itt	mi
 8011f6e:	2320      	movmi	r3, #32
 8011f70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f74:	0711      	lsls	r1, r2, #28
 8011f76:	bf44      	itt	mi
 8011f78:	232b      	movmi	r3, #43	; 0x2b
 8011f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8011f82:	2b2a      	cmp	r3, #42	; 0x2a
 8011f84:	d015      	beq.n	8011fb2 <_svfiprintf_r+0xf6>
 8011f86:	9a07      	ldr	r2, [sp, #28]
 8011f88:	4654      	mov	r4, sl
 8011f8a:	2000      	movs	r0, #0
 8011f8c:	f04f 0c0a 	mov.w	ip, #10
 8011f90:	4621      	mov	r1, r4
 8011f92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f96:	3b30      	subs	r3, #48	; 0x30
 8011f98:	2b09      	cmp	r3, #9
 8011f9a:	d94d      	bls.n	8012038 <_svfiprintf_r+0x17c>
 8011f9c:	b1b0      	cbz	r0, 8011fcc <_svfiprintf_r+0x110>
 8011f9e:	9207      	str	r2, [sp, #28]
 8011fa0:	e014      	b.n	8011fcc <_svfiprintf_r+0x110>
 8011fa2:	eba0 0308 	sub.w	r3, r0, r8
 8011fa6:	fa09 f303 	lsl.w	r3, r9, r3
 8011faa:	4313      	orrs	r3, r2
 8011fac:	9304      	str	r3, [sp, #16]
 8011fae:	46a2      	mov	sl, r4
 8011fb0:	e7d2      	b.n	8011f58 <_svfiprintf_r+0x9c>
 8011fb2:	9b03      	ldr	r3, [sp, #12]
 8011fb4:	1d19      	adds	r1, r3, #4
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	9103      	str	r1, [sp, #12]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	bfbb      	ittet	lt
 8011fbe:	425b      	neglt	r3, r3
 8011fc0:	f042 0202 	orrlt.w	r2, r2, #2
 8011fc4:	9307      	strge	r3, [sp, #28]
 8011fc6:	9307      	strlt	r3, [sp, #28]
 8011fc8:	bfb8      	it	lt
 8011fca:	9204      	strlt	r2, [sp, #16]
 8011fcc:	7823      	ldrb	r3, [r4, #0]
 8011fce:	2b2e      	cmp	r3, #46	; 0x2e
 8011fd0:	d10c      	bne.n	8011fec <_svfiprintf_r+0x130>
 8011fd2:	7863      	ldrb	r3, [r4, #1]
 8011fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8011fd6:	d134      	bne.n	8012042 <_svfiprintf_r+0x186>
 8011fd8:	9b03      	ldr	r3, [sp, #12]
 8011fda:	1d1a      	adds	r2, r3, #4
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	9203      	str	r2, [sp, #12]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	bfb8      	it	lt
 8011fe4:	f04f 33ff 	movlt.w	r3, #4294967295
 8011fe8:	3402      	adds	r4, #2
 8011fea:	9305      	str	r3, [sp, #20]
 8011fec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80120b4 <_svfiprintf_r+0x1f8>
 8011ff0:	7821      	ldrb	r1, [r4, #0]
 8011ff2:	2203      	movs	r2, #3
 8011ff4:	4650      	mov	r0, sl
 8011ff6:	f7ee f97b 	bl	80002f0 <memchr>
 8011ffa:	b138      	cbz	r0, 801200c <_svfiprintf_r+0x150>
 8011ffc:	9b04      	ldr	r3, [sp, #16]
 8011ffe:	eba0 000a 	sub.w	r0, r0, sl
 8012002:	2240      	movs	r2, #64	; 0x40
 8012004:	4082      	lsls	r2, r0
 8012006:	4313      	orrs	r3, r2
 8012008:	3401      	adds	r4, #1
 801200a:	9304      	str	r3, [sp, #16]
 801200c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012010:	4825      	ldr	r0, [pc, #148]	; (80120a8 <_svfiprintf_r+0x1ec>)
 8012012:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012016:	2206      	movs	r2, #6
 8012018:	f7ee f96a 	bl	80002f0 <memchr>
 801201c:	2800      	cmp	r0, #0
 801201e:	d038      	beq.n	8012092 <_svfiprintf_r+0x1d6>
 8012020:	4b22      	ldr	r3, [pc, #136]	; (80120ac <_svfiprintf_r+0x1f0>)
 8012022:	bb1b      	cbnz	r3, 801206c <_svfiprintf_r+0x1b0>
 8012024:	9b03      	ldr	r3, [sp, #12]
 8012026:	3307      	adds	r3, #7
 8012028:	f023 0307 	bic.w	r3, r3, #7
 801202c:	3308      	adds	r3, #8
 801202e:	9303      	str	r3, [sp, #12]
 8012030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012032:	4433      	add	r3, r6
 8012034:	9309      	str	r3, [sp, #36]	; 0x24
 8012036:	e768      	b.n	8011f0a <_svfiprintf_r+0x4e>
 8012038:	fb0c 3202 	mla	r2, ip, r2, r3
 801203c:	460c      	mov	r4, r1
 801203e:	2001      	movs	r0, #1
 8012040:	e7a6      	b.n	8011f90 <_svfiprintf_r+0xd4>
 8012042:	2300      	movs	r3, #0
 8012044:	3401      	adds	r4, #1
 8012046:	9305      	str	r3, [sp, #20]
 8012048:	4619      	mov	r1, r3
 801204a:	f04f 0c0a 	mov.w	ip, #10
 801204e:	4620      	mov	r0, r4
 8012050:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012054:	3a30      	subs	r2, #48	; 0x30
 8012056:	2a09      	cmp	r2, #9
 8012058:	d903      	bls.n	8012062 <_svfiprintf_r+0x1a6>
 801205a:	2b00      	cmp	r3, #0
 801205c:	d0c6      	beq.n	8011fec <_svfiprintf_r+0x130>
 801205e:	9105      	str	r1, [sp, #20]
 8012060:	e7c4      	b.n	8011fec <_svfiprintf_r+0x130>
 8012062:	fb0c 2101 	mla	r1, ip, r1, r2
 8012066:	4604      	mov	r4, r0
 8012068:	2301      	movs	r3, #1
 801206a:	e7f0      	b.n	801204e <_svfiprintf_r+0x192>
 801206c:	ab03      	add	r3, sp, #12
 801206e:	9300      	str	r3, [sp, #0]
 8012070:	462a      	mov	r2, r5
 8012072:	4b0f      	ldr	r3, [pc, #60]	; (80120b0 <_svfiprintf_r+0x1f4>)
 8012074:	a904      	add	r1, sp, #16
 8012076:	4638      	mov	r0, r7
 8012078:	f3af 8000 	nop.w
 801207c:	1c42      	adds	r2, r0, #1
 801207e:	4606      	mov	r6, r0
 8012080:	d1d6      	bne.n	8012030 <_svfiprintf_r+0x174>
 8012082:	89ab      	ldrh	r3, [r5, #12]
 8012084:	065b      	lsls	r3, r3, #25
 8012086:	f53f af2d 	bmi.w	8011ee4 <_svfiprintf_r+0x28>
 801208a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801208c:	b01d      	add	sp, #116	; 0x74
 801208e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012092:	ab03      	add	r3, sp, #12
 8012094:	9300      	str	r3, [sp, #0]
 8012096:	462a      	mov	r2, r5
 8012098:	4b05      	ldr	r3, [pc, #20]	; (80120b0 <_svfiprintf_r+0x1f4>)
 801209a:	a904      	add	r1, sp, #16
 801209c:	4638      	mov	r0, r7
 801209e:	f000 f879 	bl	8012194 <_printf_i>
 80120a2:	e7eb      	b.n	801207c <_svfiprintf_r+0x1c0>
 80120a4:	08012664 	.word	0x08012664
 80120a8:	0801266e 	.word	0x0801266e
 80120ac:	00000000 	.word	0x00000000
 80120b0:	08011e09 	.word	0x08011e09
 80120b4:	0801266a 	.word	0x0801266a

080120b8 <_printf_common>:
 80120b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120bc:	4616      	mov	r6, r2
 80120be:	4699      	mov	r9, r3
 80120c0:	688a      	ldr	r2, [r1, #8]
 80120c2:	690b      	ldr	r3, [r1, #16]
 80120c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80120c8:	4293      	cmp	r3, r2
 80120ca:	bfb8      	it	lt
 80120cc:	4613      	movlt	r3, r2
 80120ce:	6033      	str	r3, [r6, #0]
 80120d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80120d4:	4607      	mov	r7, r0
 80120d6:	460c      	mov	r4, r1
 80120d8:	b10a      	cbz	r2, 80120de <_printf_common+0x26>
 80120da:	3301      	adds	r3, #1
 80120dc:	6033      	str	r3, [r6, #0]
 80120de:	6823      	ldr	r3, [r4, #0]
 80120e0:	0699      	lsls	r1, r3, #26
 80120e2:	bf42      	ittt	mi
 80120e4:	6833      	ldrmi	r3, [r6, #0]
 80120e6:	3302      	addmi	r3, #2
 80120e8:	6033      	strmi	r3, [r6, #0]
 80120ea:	6825      	ldr	r5, [r4, #0]
 80120ec:	f015 0506 	ands.w	r5, r5, #6
 80120f0:	d106      	bne.n	8012100 <_printf_common+0x48>
 80120f2:	f104 0a19 	add.w	sl, r4, #25
 80120f6:	68e3      	ldr	r3, [r4, #12]
 80120f8:	6832      	ldr	r2, [r6, #0]
 80120fa:	1a9b      	subs	r3, r3, r2
 80120fc:	42ab      	cmp	r3, r5
 80120fe:	dc26      	bgt.n	801214e <_printf_common+0x96>
 8012100:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012104:	1e13      	subs	r3, r2, #0
 8012106:	6822      	ldr	r2, [r4, #0]
 8012108:	bf18      	it	ne
 801210a:	2301      	movne	r3, #1
 801210c:	0692      	lsls	r2, r2, #26
 801210e:	d42b      	bmi.n	8012168 <_printf_common+0xb0>
 8012110:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012114:	4649      	mov	r1, r9
 8012116:	4638      	mov	r0, r7
 8012118:	47c0      	blx	r8
 801211a:	3001      	adds	r0, #1
 801211c:	d01e      	beq.n	801215c <_printf_common+0xa4>
 801211e:	6823      	ldr	r3, [r4, #0]
 8012120:	6922      	ldr	r2, [r4, #16]
 8012122:	f003 0306 	and.w	r3, r3, #6
 8012126:	2b04      	cmp	r3, #4
 8012128:	bf02      	ittt	eq
 801212a:	68e5      	ldreq	r5, [r4, #12]
 801212c:	6833      	ldreq	r3, [r6, #0]
 801212e:	1aed      	subeq	r5, r5, r3
 8012130:	68a3      	ldr	r3, [r4, #8]
 8012132:	bf0c      	ite	eq
 8012134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012138:	2500      	movne	r5, #0
 801213a:	4293      	cmp	r3, r2
 801213c:	bfc4      	itt	gt
 801213e:	1a9b      	subgt	r3, r3, r2
 8012140:	18ed      	addgt	r5, r5, r3
 8012142:	2600      	movs	r6, #0
 8012144:	341a      	adds	r4, #26
 8012146:	42b5      	cmp	r5, r6
 8012148:	d11a      	bne.n	8012180 <_printf_common+0xc8>
 801214a:	2000      	movs	r0, #0
 801214c:	e008      	b.n	8012160 <_printf_common+0xa8>
 801214e:	2301      	movs	r3, #1
 8012150:	4652      	mov	r2, sl
 8012152:	4649      	mov	r1, r9
 8012154:	4638      	mov	r0, r7
 8012156:	47c0      	blx	r8
 8012158:	3001      	adds	r0, #1
 801215a:	d103      	bne.n	8012164 <_printf_common+0xac>
 801215c:	f04f 30ff 	mov.w	r0, #4294967295
 8012160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012164:	3501      	adds	r5, #1
 8012166:	e7c6      	b.n	80120f6 <_printf_common+0x3e>
 8012168:	18e1      	adds	r1, r4, r3
 801216a:	1c5a      	adds	r2, r3, #1
 801216c:	2030      	movs	r0, #48	; 0x30
 801216e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012172:	4422      	add	r2, r4
 8012174:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012178:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801217c:	3302      	adds	r3, #2
 801217e:	e7c7      	b.n	8012110 <_printf_common+0x58>
 8012180:	2301      	movs	r3, #1
 8012182:	4622      	mov	r2, r4
 8012184:	4649      	mov	r1, r9
 8012186:	4638      	mov	r0, r7
 8012188:	47c0      	blx	r8
 801218a:	3001      	adds	r0, #1
 801218c:	d0e6      	beq.n	801215c <_printf_common+0xa4>
 801218e:	3601      	adds	r6, #1
 8012190:	e7d9      	b.n	8012146 <_printf_common+0x8e>
	...

08012194 <_printf_i>:
 8012194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012198:	7e0f      	ldrb	r7, [r1, #24]
 801219a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801219c:	2f78      	cmp	r7, #120	; 0x78
 801219e:	4691      	mov	r9, r2
 80121a0:	4680      	mov	r8, r0
 80121a2:	460c      	mov	r4, r1
 80121a4:	469a      	mov	sl, r3
 80121a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80121aa:	d807      	bhi.n	80121bc <_printf_i+0x28>
 80121ac:	2f62      	cmp	r7, #98	; 0x62
 80121ae:	d80a      	bhi.n	80121c6 <_printf_i+0x32>
 80121b0:	2f00      	cmp	r7, #0
 80121b2:	f000 80d4 	beq.w	801235e <_printf_i+0x1ca>
 80121b6:	2f58      	cmp	r7, #88	; 0x58
 80121b8:	f000 80c0 	beq.w	801233c <_printf_i+0x1a8>
 80121bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80121c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80121c4:	e03a      	b.n	801223c <_printf_i+0xa8>
 80121c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80121ca:	2b15      	cmp	r3, #21
 80121cc:	d8f6      	bhi.n	80121bc <_printf_i+0x28>
 80121ce:	a101      	add	r1, pc, #4	; (adr r1, 80121d4 <_printf_i+0x40>)
 80121d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80121d4:	0801222d 	.word	0x0801222d
 80121d8:	08012241 	.word	0x08012241
 80121dc:	080121bd 	.word	0x080121bd
 80121e0:	080121bd 	.word	0x080121bd
 80121e4:	080121bd 	.word	0x080121bd
 80121e8:	080121bd 	.word	0x080121bd
 80121ec:	08012241 	.word	0x08012241
 80121f0:	080121bd 	.word	0x080121bd
 80121f4:	080121bd 	.word	0x080121bd
 80121f8:	080121bd 	.word	0x080121bd
 80121fc:	080121bd 	.word	0x080121bd
 8012200:	08012345 	.word	0x08012345
 8012204:	0801226d 	.word	0x0801226d
 8012208:	080122ff 	.word	0x080122ff
 801220c:	080121bd 	.word	0x080121bd
 8012210:	080121bd 	.word	0x080121bd
 8012214:	08012367 	.word	0x08012367
 8012218:	080121bd 	.word	0x080121bd
 801221c:	0801226d 	.word	0x0801226d
 8012220:	080121bd 	.word	0x080121bd
 8012224:	080121bd 	.word	0x080121bd
 8012228:	08012307 	.word	0x08012307
 801222c:	682b      	ldr	r3, [r5, #0]
 801222e:	1d1a      	adds	r2, r3, #4
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	602a      	str	r2, [r5, #0]
 8012234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801223c:	2301      	movs	r3, #1
 801223e:	e09f      	b.n	8012380 <_printf_i+0x1ec>
 8012240:	6820      	ldr	r0, [r4, #0]
 8012242:	682b      	ldr	r3, [r5, #0]
 8012244:	0607      	lsls	r7, r0, #24
 8012246:	f103 0104 	add.w	r1, r3, #4
 801224a:	6029      	str	r1, [r5, #0]
 801224c:	d501      	bpl.n	8012252 <_printf_i+0xbe>
 801224e:	681e      	ldr	r6, [r3, #0]
 8012250:	e003      	b.n	801225a <_printf_i+0xc6>
 8012252:	0646      	lsls	r6, r0, #25
 8012254:	d5fb      	bpl.n	801224e <_printf_i+0xba>
 8012256:	f9b3 6000 	ldrsh.w	r6, [r3]
 801225a:	2e00      	cmp	r6, #0
 801225c:	da03      	bge.n	8012266 <_printf_i+0xd2>
 801225e:	232d      	movs	r3, #45	; 0x2d
 8012260:	4276      	negs	r6, r6
 8012262:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012266:	485a      	ldr	r0, [pc, #360]	; (80123d0 <_printf_i+0x23c>)
 8012268:	230a      	movs	r3, #10
 801226a:	e012      	b.n	8012292 <_printf_i+0xfe>
 801226c:	682b      	ldr	r3, [r5, #0]
 801226e:	6820      	ldr	r0, [r4, #0]
 8012270:	1d19      	adds	r1, r3, #4
 8012272:	6029      	str	r1, [r5, #0]
 8012274:	0605      	lsls	r5, r0, #24
 8012276:	d501      	bpl.n	801227c <_printf_i+0xe8>
 8012278:	681e      	ldr	r6, [r3, #0]
 801227a:	e002      	b.n	8012282 <_printf_i+0xee>
 801227c:	0641      	lsls	r1, r0, #25
 801227e:	d5fb      	bpl.n	8012278 <_printf_i+0xe4>
 8012280:	881e      	ldrh	r6, [r3, #0]
 8012282:	4853      	ldr	r0, [pc, #332]	; (80123d0 <_printf_i+0x23c>)
 8012284:	2f6f      	cmp	r7, #111	; 0x6f
 8012286:	bf0c      	ite	eq
 8012288:	2308      	moveq	r3, #8
 801228a:	230a      	movne	r3, #10
 801228c:	2100      	movs	r1, #0
 801228e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012292:	6865      	ldr	r5, [r4, #4]
 8012294:	60a5      	str	r5, [r4, #8]
 8012296:	2d00      	cmp	r5, #0
 8012298:	bfa2      	ittt	ge
 801229a:	6821      	ldrge	r1, [r4, #0]
 801229c:	f021 0104 	bicge.w	r1, r1, #4
 80122a0:	6021      	strge	r1, [r4, #0]
 80122a2:	b90e      	cbnz	r6, 80122a8 <_printf_i+0x114>
 80122a4:	2d00      	cmp	r5, #0
 80122a6:	d04b      	beq.n	8012340 <_printf_i+0x1ac>
 80122a8:	4615      	mov	r5, r2
 80122aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80122ae:	fb03 6711 	mls	r7, r3, r1, r6
 80122b2:	5dc7      	ldrb	r7, [r0, r7]
 80122b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80122b8:	4637      	mov	r7, r6
 80122ba:	42bb      	cmp	r3, r7
 80122bc:	460e      	mov	r6, r1
 80122be:	d9f4      	bls.n	80122aa <_printf_i+0x116>
 80122c0:	2b08      	cmp	r3, #8
 80122c2:	d10b      	bne.n	80122dc <_printf_i+0x148>
 80122c4:	6823      	ldr	r3, [r4, #0]
 80122c6:	07de      	lsls	r6, r3, #31
 80122c8:	d508      	bpl.n	80122dc <_printf_i+0x148>
 80122ca:	6923      	ldr	r3, [r4, #16]
 80122cc:	6861      	ldr	r1, [r4, #4]
 80122ce:	4299      	cmp	r1, r3
 80122d0:	bfde      	ittt	le
 80122d2:	2330      	movle	r3, #48	; 0x30
 80122d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80122d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80122dc:	1b52      	subs	r2, r2, r5
 80122de:	6122      	str	r2, [r4, #16]
 80122e0:	f8cd a000 	str.w	sl, [sp]
 80122e4:	464b      	mov	r3, r9
 80122e6:	aa03      	add	r2, sp, #12
 80122e8:	4621      	mov	r1, r4
 80122ea:	4640      	mov	r0, r8
 80122ec:	f7ff fee4 	bl	80120b8 <_printf_common>
 80122f0:	3001      	adds	r0, #1
 80122f2:	d14a      	bne.n	801238a <_printf_i+0x1f6>
 80122f4:	f04f 30ff 	mov.w	r0, #4294967295
 80122f8:	b004      	add	sp, #16
 80122fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122fe:	6823      	ldr	r3, [r4, #0]
 8012300:	f043 0320 	orr.w	r3, r3, #32
 8012304:	6023      	str	r3, [r4, #0]
 8012306:	4833      	ldr	r0, [pc, #204]	; (80123d4 <_printf_i+0x240>)
 8012308:	2778      	movs	r7, #120	; 0x78
 801230a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801230e:	6823      	ldr	r3, [r4, #0]
 8012310:	6829      	ldr	r1, [r5, #0]
 8012312:	061f      	lsls	r7, r3, #24
 8012314:	f851 6b04 	ldr.w	r6, [r1], #4
 8012318:	d402      	bmi.n	8012320 <_printf_i+0x18c>
 801231a:	065f      	lsls	r7, r3, #25
 801231c:	bf48      	it	mi
 801231e:	b2b6      	uxthmi	r6, r6
 8012320:	07df      	lsls	r7, r3, #31
 8012322:	bf48      	it	mi
 8012324:	f043 0320 	orrmi.w	r3, r3, #32
 8012328:	6029      	str	r1, [r5, #0]
 801232a:	bf48      	it	mi
 801232c:	6023      	strmi	r3, [r4, #0]
 801232e:	b91e      	cbnz	r6, 8012338 <_printf_i+0x1a4>
 8012330:	6823      	ldr	r3, [r4, #0]
 8012332:	f023 0320 	bic.w	r3, r3, #32
 8012336:	6023      	str	r3, [r4, #0]
 8012338:	2310      	movs	r3, #16
 801233a:	e7a7      	b.n	801228c <_printf_i+0xf8>
 801233c:	4824      	ldr	r0, [pc, #144]	; (80123d0 <_printf_i+0x23c>)
 801233e:	e7e4      	b.n	801230a <_printf_i+0x176>
 8012340:	4615      	mov	r5, r2
 8012342:	e7bd      	b.n	80122c0 <_printf_i+0x12c>
 8012344:	682b      	ldr	r3, [r5, #0]
 8012346:	6826      	ldr	r6, [r4, #0]
 8012348:	6961      	ldr	r1, [r4, #20]
 801234a:	1d18      	adds	r0, r3, #4
 801234c:	6028      	str	r0, [r5, #0]
 801234e:	0635      	lsls	r5, r6, #24
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	d501      	bpl.n	8012358 <_printf_i+0x1c4>
 8012354:	6019      	str	r1, [r3, #0]
 8012356:	e002      	b.n	801235e <_printf_i+0x1ca>
 8012358:	0670      	lsls	r0, r6, #25
 801235a:	d5fb      	bpl.n	8012354 <_printf_i+0x1c0>
 801235c:	8019      	strh	r1, [r3, #0]
 801235e:	2300      	movs	r3, #0
 8012360:	6123      	str	r3, [r4, #16]
 8012362:	4615      	mov	r5, r2
 8012364:	e7bc      	b.n	80122e0 <_printf_i+0x14c>
 8012366:	682b      	ldr	r3, [r5, #0]
 8012368:	1d1a      	adds	r2, r3, #4
 801236a:	602a      	str	r2, [r5, #0]
 801236c:	681d      	ldr	r5, [r3, #0]
 801236e:	6862      	ldr	r2, [r4, #4]
 8012370:	2100      	movs	r1, #0
 8012372:	4628      	mov	r0, r5
 8012374:	f7ed ffbc 	bl	80002f0 <memchr>
 8012378:	b108      	cbz	r0, 801237e <_printf_i+0x1ea>
 801237a:	1b40      	subs	r0, r0, r5
 801237c:	6060      	str	r0, [r4, #4]
 801237e:	6863      	ldr	r3, [r4, #4]
 8012380:	6123      	str	r3, [r4, #16]
 8012382:	2300      	movs	r3, #0
 8012384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012388:	e7aa      	b.n	80122e0 <_printf_i+0x14c>
 801238a:	6923      	ldr	r3, [r4, #16]
 801238c:	462a      	mov	r2, r5
 801238e:	4649      	mov	r1, r9
 8012390:	4640      	mov	r0, r8
 8012392:	47d0      	blx	sl
 8012394:	3001      	adds	r0, #1
 8012396:	d0ad      	beq.n	80122f4 <_printf_i+0x160>
 8012398:	6823      	ldr	r3, [r4, #0]
 801239a:	079b      	lsls	r3, r3, #30
 801239c:	d413      	bmi.n	80123c6 <_printf_i+0x232>
 801239e:	68e0      	ldr	r0, [r4, #12]
 80123a0:	9b03      	ldr	r3, [sp, #12]
 80123a2:	4298      	cmp	r0, r3
 80123a4:	bfb8      	it	lt
 80123a6:	4618      	movlt	r0, r3
 80123a8:	e7a6      	b.n	80122f8 <_printf_i+0x164>
 80123aa:	2301      	movs	r3, #1
 80123ac:	4632      	mov	r2, r6
 80123ae:	4649      	mov	r1, r9
 80123b0:	4640      	mov	r0, r8
 80123b2:	47d0      	blx	sl
 80123b4:	3001      	adds	r0, #1
 80123b6:	d09d      	beq.n	80122f4 <_printf_i+0x160>
 80123b8:	3501      	adds	r5, #1
 80123ba:	68e3      	ldr	r3, [r4, #12]
 80123bc:	9903      	ldr	r1, [sp, #12]
 80123be:	1a5b      	subs	r3, r3, r1
 80123c0:	42ab      	cmp	r3, r5
 80123c2:	dcf2      	bgt.n	80123aa <_printf_i+0x216>
 80123c4:	e7eb      	b.n	801239e <_printf_i+0x20a>
 80123c6:	2500      	movs	r5, #0
 80123c8:	f104 0619 	add.w	r6, r4, #25
 80123cc:	e7f5      	b.n	80123ba <_printf_i+0x226>
 80123ce:	bf00      	nop
 80123d0:	08012675 	.word	0x08012675
 80123d4:	08012686 	.word	0x08012686

080123d8 <memmove>:
 80123d8:	4288      	cmp	r0, r1
 80123da:	b510      	push	{r4, lr}
 80123dc:	eb01 0402 	add.w	r4, r1, r2
 80123e0:	d902      	bls.n	80123e8 <memmove+0x10>
 80123e2:	4284      	cmp	r4, r0
 80123e4:	4623      	mov	r3, r4
 80123e6:	d807      	bhi.n	80123f8 <memmove+0x20>
 80123e8:	1e43      	subs	r3, r0, #1
 80123ea:	42a1      	cmp	r1, r4
 80123ec:	d008      	beq.n	8012400 <memmove+0x28>
 80123ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80123f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80123f6:	e7f8      	b.n	80123ea <memmove+0x12>
 80123f8:	4402      	add	r2, r0
 80123fa:	4601      	mov	r1, r0
 80123fc:	428a      	cmp	r2, r1
 80123fe:	d100      	bne.n	8012402 <memmove+0x2a>
 8012400:	bd10      	pop	{r4, pc}
 8012402:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012406:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801240a:	e7f7      	b.n	80123fc <memmove+0x24>

0801240c <_sbrk_r>:
 801240c:	b538      	push	{r3, r4, r5, lr}
 801240e:	4d06      	ldr	r5, [pc, #24]	; (8012428 <_sbrk_r+0x1c>)
 8012410:	2300      	movs	r3, #0
 8012412:	4604      	mov	r4, r0
 8012414:	4608      	mov	r0, r1
 8012416:	602b      	str	r3, [r5, #0]
 8012418:	f7f2 fb4e 	bl	8004ab8 <_sbrk>
 801241c:	1c43      	adds	r3, r0, #1
 801241e:	d102      	bne.n	8012426 <_sbrk_r+0x1a>
 8012420:	682b      	ldr	r3, [r5, #0]
 8012422:	b103      	cbz	r3, 8012426 <_sbrk_r+0x1a>
 8012424:	6023      	str	r3, [r4, #0]
 8012426:	bd38      	pop	{r3, r4, r5, pc}
 8012428:	24001954 	.word	0x24001954

0801242c <_realloc_r>:
 801242c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012430:	4680      	mov	r8, r0
 8012432:	4614      	mov	r4, r2
 8012434:	460e      	mov	r6, r1
 8012436:	b921      	cbnz	r1, 8012442 <_realloc_r+0x16>
 8012438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801243c:	4611      	mov	r1, r2
 801243e:	f7ff bc57 	b.w	8011cf0 <_malloc_r>
 8012442:	b92a      	cbnz	r2, 8012450 <_realloc_r+0x24>
 8012444:	f7ff fbe8 	bl	8011c18 <_free_r>
 8012448:	4625      	mov	r5, r4
 801244a:	4628      	mov	r0, r5
 801244c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012450:	f000 f81b 	bl	801248a <_malloc_usable_size_r>
 8012454:	4284      	cmp	r4, r0
 8012456:	4607      	mov	r7, r0
 8012458:	d802      	bhi.n	8012460 <_realloc_r+0x34>
 801245a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801245e:	d812      	bhi.n	8012486 <_realloc_r+0x5a>
 8012460:	4621      	mov	r1, r4
 8012462:	4640      	mov	r0, r8
 8012464:	f7ff fc44 	bl	8011cf0 <_malloc_r>
 8012468:	4605      	mov	r5, r0
 801246a:	2800      	cmp	r0, #0
 801246c:	d0ed      	beq.n	801244a <_realloc_r+0x1e>
 801246e:	42bc      	cmp	r4, r7
 8012470:	4622      	mov	r2, r4
 8012472:	4631      	mov	r1, r6
 8012474:	bf28      	it	cs
 8012476:	463a      	movcs	r2, r7
 8012478:	f7ff fbc0 	bl	8011bfc <memcpy>
 801247c:	4631      	mov	r1, r6
 801247e:	4640      	mov	r0, r8
 8012480:	f7ff fbca 	bl	8011c18 <_free_r>
 8012484:	e7e1      	b.n	801244a <_realloc_r+0x1e>
 8012486:	4635      	mov	r5, r6
 8012488:	e7df      	b.n	801244a <_realloc_r+0x1e>

0801248a <_malloc_usable_size_r>:
 801248a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801248e:	1f18      	subs	r0, r3, #4
 8012490:	2b00      	cmp	r3, #0
 8012492:	bfbc      	itt	lt
 8012494:	580b      	ldrlt	r3, [r1, r0]
 8012496:	18c0      	addlt	r0, r0, r3
 8012498:	4770      	bx	lr
	...

0801249c <_init>:
 801249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801249e:	bf00      	nop
 80124a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124a2:	bc08      	pop	{r3}
 80124a4:	469e      	mov	lr, r3
 80124a6:	4770      	bx	lr

080124a8 <_fini>:
 80124a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124aa:	bf00      	nop
 80124ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124ae:	bc08      	pop	{r3}
 80124b0:	469e      	mov	lr, r3
 80124b2:	4770      	bx	lr
